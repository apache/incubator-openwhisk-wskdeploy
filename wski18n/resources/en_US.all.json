[
  {
    "id": "msg_prefix_error",
    "translation": "Error"
  },
  {
    "id": "msg_prefix_info",
    "translation": "Info"
  },
  {
    "id": "msg_prefix_success",
    "translation": "Success"
  },
  {
    "id": "msg_prefix_warning",
    "translation": "Warning"
  },
  {
    "id": "msg_cmd_desc_long_report",
    "translation": "Reports on deployed entities (i.e., Packages, Actions, Triggers, Rules, etc.) as well as recent Activations in the specified namespace."
  },
  {
    "id": "msg_cmd_desc_long_root",
    "translation": "A tool to deploy, undeploy and sync openwhisk packages using a manifest and optional deployment files using YAML."
  },
  {
    "id": "msg_cmd_desc_short_report",
    "translation": "Provides a summary report of what's been deployed in the specified namespace."
  },
  {
    "id": "msg_cmd_desc_short_root",
    "translation": "A tool set to help deploy your openwhisk packages using a manifest file."
  },
  {
    "id": "msg_cmd_desc_short_version",
    "translation": "Print the version number of wskdeploy"
  },
  {
    "id": "msg_cmd_desc_short_sync",
    "translation": "A tool to sync your OpenWhisk packages between client and server."
  },
  {
    "id": "msg_cmd_desc_long_sync",
    "translation": "A tool to sync deployment and undeployment of openwhisk packages using a manifest and optional deployment files using YAML."
  },
  {
    "id": "msg_cmd_flag_api_host",
    "translation": "whisk API `HOST`"
  },
  {
    "id": "msg_cmd_flag_api_version",
    "translation": "whisk API `VERSION`"
  },
  {
    "id": "msg_cmd_flag_auth_key",
    "translation": "authorization `KEY`"
  },
  {
    "id": "msg_cmd_flag_cert_file",
    "translation": "path of the .cert file"
  },
  {
    "id": "msg_cmd_flag_config",
    "translation": "config file (default is $HOME/.wskprops)"
  },
  {
    "id": "msg_cmd_flag_allow_defaults",
    "translation": "allow defaults"
  },
  {
    "id": "msg_cmd_flag_deployment",
    "translation": "path to deployment file"
  },
  {
    "id": "msg_cmd_flag_preview",
    "translation": "show deployment/undeployment plan"
  },
  {
    "id": "msg_cmd_flag_key_file",
    "translation": "path of the .key file"
  },
  {
    "id": "msg_cmd_flag_allow_managed",
    "translation": "allow project entities to be marked managed"
  },
  {
    "id": "msg_cmd_flag_project_name",
    "translation": "project name"
  },
  {
    "id": "msg_cmd_flag_manifest",
    "translation": "path to manifest file"
  },
  {
    "id": "msg_cmd_flag_namespace",
    "translation": "namespace"
  },
  {
    "id": "msg_cmd_flag_project",
    "translation": "path to serverless project"
  },
  {
    "id": "msg_cmd_flag_strict",
    "translation": "allow user defined runtime version"
  },
  {
    "id": "msg_cmd_flag_trace",
    "translation": "trace output"
  },
  {
    "id": "msg_cmd_flag_allow_verbose",
    "translation": "verbose output"
  },
  {
    "id": "msg_config_missing_authkey",
    "translation": "The authentication key is not configured.\n"
  },
  {
    "id": "msg_config_missing_apihost",
    "translation": "The API host is not configured.\n"
  },
  {
    "id": "msg_config_missing_namespace",
    "translation": "The namespace is not configured.\n"
  },
  {
    "id": "msg_config_apihost_info",
    "translation": "The API host is [{{.host}}], from {{.source}}.\n"
  },
  {
    "id": "msg_config_authkey_info",
    "translation": "The auth key is set, from {{.source}}.\n"
  },
  {
    "id": "msg_config_namespace_info",
    "translation": "The namespace is [{{.namespace}}], from {{.source}}.\n"
  },
  {
    "id": "msg_config_apigw_access_token_info",
    "translation": "The apigw access token is set, from {{.source}}.\n"
  },
  {
    "id": "msg_unmarshal_local",
    "translation": "Unmarshal OpenWhisk runtimes from local values.\n"
  },
  {
    "id": "msg_unmarshal_network",
    "translation": "Unmarshal OpenWhisk runtimes from internet at {{.url}}.\n"
  },
  {
    "id": "msg_deployment_cancelled",
    "translation": "OK. Cancelling deployment.\n"
  },
  {
    "id": "msg_deployment_failed",
    "translation": "Deployment did not complete sucessfully. Run `wskdeploy undeploy` to remove partially deployed assets.\n"
  },
  {
    "id": "msg_deployment_report_status",
    "translation": "----==== OpenWhisk Deployment Status ====----"
  },
  {
    "id": "msg_deployment_succeeded",
    "translation": "Deployment completed successfully.\n"
  },
  {
    "id": "msg_undeployment_cancelled",
    "translation": "OK. Cancelling undeployment.\n"
  },
  {
    "id": "msg_undeployment_failed",
    "translation": "Undeployment did not complete sucessfully.\n"
  },
  {
    "id": "msg_undeployment_succeeded",
    "translation": "Undeployment completed successfully.\n"
  },
  {
    "id": "msg_command_using_filename_at_path",
    "translation": "{{.cmd}} using {{.filetype}} [{{.path}}]...\n"
  },
  {
    "id": "msg_entity_deployed_success",
    "translation": "{{.key}} [{{.name}}] has been successfully deployed.\n"
  },
  {
    "id": "msg_entity_deploying",
    "translation": "Deploying {{.key}} [{{.name}}] ..."
  },
  {
    "id": "msg_entity_undeployed_success",
    "translation": "{{.key}} [{{.name}}] has been successfully undeployed.\n"
  },
  {
    "id": "msg_entity_undeploying",
    "translation": "Undeploying {{.key}} [{{.name}}]..."
  },
  {
    "id": "msg_dependency_deploying",
    "translation": "Deploying dependency [{{.name}}]..."
  },
  {
    "id": "msg_dependency_deployment_success",
    "translation": "Dependency [{{.name}}] has been successfully deployed.\n"
  },
  {
    "id": "msg_dependency_deployment_failure",
    "translation": "Deployment of dependency [{{.name}}] did not complete sucessfully. Run `wskdeploy undeploy` to remove partially deployed assets.\n"
  },
  {
    "id": "msg_dependency_undeploying",
    "translation": "Undeploying dependency [{{.name}}]..."
  },
  {
    "id": "msg_dependency_undeployment_success",
    "translation": "Dependency [{{.name}}] has been successfully undeployed.\n"
  },
  {
    "id": "msg_dependency_undeployment_failure",
    "translation": "Undeployment of dependency [{{.name}}] did not complete sucessfully.\n"
  },
  {
    "id": "msg_managed_undeployment_failed",
    "translation": "Undeployment of deleted entities did not complete sucessfully during managed deployment. Run `wskdeploy undeploy` to remove partially deployed assets.\n"
  },
  {
    "id": "msg_managed_found_deleted_entity",
    "translation": "Deleting {{.key}} [{{.name}}] which was removed from the current managed project [{{.project}}] as part of undeployment.\n"
  },
  {
    "id": "msg_default_package",
    "translation": "Package name default is reserved, all OpenWhisk entities under default package are deployed/undeployed directly under your namespace."
  },
  {
    "id": "ERRORS",
    "translation": "================= ERRORS ==================="
  },
  {
    "id": "msg_err_dependency_unknown_type",
    "translation": "Dependency type is unknown.  wskdeploy only supports /whisk.system bindings or github.com packages.\n"
  },
  {
    "id": "msg_err_entity_create",
    "translation": "Error creating {{.key}} with error message: {{.err}} and error code: {{.code}}.\n"
  },
  {
    "id": "msg_err_entity_delete",
    "translation": "Error deleting {{.key}} with error message: {{.err}} and error code: {{.code}}.\n"
  },
  {
    "id": "msg_err_feed_invoke",
    "translation": "Failed to invoke the feed when deleting trigger feed with error message: {{.err}} and error code: {{.code}}.\n"
  },
  {
    "id": "msg_err_key_missing_mandatory",
    "translation": "The mandatory key [{{.key}}] is missing.\n"
  },
  {
    "id": "msg_err_manifest_not_found",
    "translation": "Manifest file not found at path [{{.path}}].\n"
  },
  {
    "id": "msg_err_name_mismatch",
    "translation": "The {{.key}} named [{{.dname}}] in deployment file [{{.dpath}}] does not match the name [{{.mname}}] in manifest file [{{.mpath}}]."
  },
  {
    "id": "msg_err_runtime_invalid",
    "translation": "Invalid or missing runtime [{{.runtime}}] specified in manifest for the action [{{.action}}].\n"
  },
  {
    "id": "msg_err_runtime_mismatch",
    "translation": "Runtime [{{.runtime}}] specified in manifest does not match with action's source file extension [{{.ext}}] for action [{{.action}}].\n"
  },
  {
    "id": "msg_err_runtimes_get",
    "translation": "Failed to get the supported runtimes from OpenWhisk service: {{.err}}.\n"
  },
  {
    "id": "msg_err_runtime_action_source_not_supported",
    "translation": "[{{.action}}] has not specified any runtime and the action source file extension [{{.ext}}] is not supported.\n"
  },
  {
    "id": "msg_err_url_invalid",
    "translation": "Invalid or missing {{.urltype}} URL [{{.url}}] in [{{.filetype}}] file.\n"
  },
  {
    "id": "msg_err_url_malformed",
    "translation": "Malformed {{.urltype}} URL [{{.url}}]. Try again...\n"
  },
  {
    "id": "msg_err_json_missing_cmd_key",
    "translation": "JSON input data Missing 'cmd' key"
  },
  {
    "id": "msg_err_api_missing_action_or_sequence",
    "translation": "Action/Sequence [{{.action}}] is missing from manifest file, API [{{.api}}] can only be created based on the action/sequence from manifest file. Please update manifest file to include [{{.action}}] as a web action/sequence.\n"
  },
  {
    "id": "msg_err_action_invalid",
    "translation": "Action [{{.action}}] is invalid. It has both code and function specified, only one of them is expected.\n"
  },
  {
    "id": "msg_err_action_missing_runtime_with_code",
    "translation": "Action [{{.action}}] is invalid. It has code specified without any runtime. With action source code, runtime is mandatory."
  },
  {
    "id": "msg_err_action_function_remote_dir_not_supported",
    "translation": "Action [{{.action}}] has function pointing to remote directory [{{.url}}], such actions are not supported."
  },
  {
    "id": "msg_err_cant_save_docker",
    "translation": "Cannot save Docker images."
  },
  {
    "id": "msg_err_file_already_exists",
    "translation": "File already exists."
  },
  {
    "id": "msg_err_different_dependencies_with_same_label",
    "translation": "One single dependency [{{.dependency}}] has two different locations [{{.location}}]. This kind of specification is not supported. Please update the dependency label [{{.dependency}}] in the manifest file to point to same location or create two separate labels for two different locations."
  },
  {
    "id": "msg_err_action_without_kind",
    "translation": "Action [{{.action}}] has no kind set."
  },
  {
    "id": "msg_err_action_without_code",
    "translation": "Action [{{.action}}] has no source code."
  },
  {
    "id": "msg_err_sequence_having_same_name_as_action",
    "translation": "Sequence [{{.sequence}}] is already defined as an action under the same package. Actions and sequences can not have same name in a single package."
  },
  {
    "id": "msg_err_conflicting_triggers_across_packages",
    "translation": "One single trigger [{{.trigger}}] is defined with multiple feeds [{{.feed}}]. Triggers are created directly under the namespace, its not possible to have triggers with same name but different feeds. Please update trigger names in manifest file."
  },
  {
    "id": "msg_err_conflicting_rules_across_packages",
    "translation": "One single rule [{{.rule}}] is defined with different actions [{{.action}}] and/or triggers [{{.trigger}}]. Rules are created directly under the namespace, its not possible to have rules with same name but associated with different actions/triggers. Please update rule names in manifest file."
  },
  {
    "id": "WARNINGS",
    "translation": "================= WARNINGS ==================="
  },
  {
    "id": "msg_warn_command_retry",
    "translation": "Retrying [{{.cmd}}] after error: [{{.err}}]\n"
  },
  {
    "id": "msg_warn_config_invalid",
    "translation": "Invalid or missing config file [{{.path}}] detected.\n"
  },
  {
    "id": "msg_warn_key_deprecated_replaced",
    "translation": "The [{{.oldkey}}] key in the {{.filetype}} will soon be deprecated, please use the [{{.newkey}}] key instead.\n"
  },
  {
    "id": "msg_warn_key_missing",
    "translation": "The mandatory key [{{.key}}] should be set. Using default value [{{.value}}]...\n"
  },
  {
    "id": "msg_warn_key_value_invalid",
    "translation": "The value for key [{{.key}}] is not valid.\n"
  },
  {
    "id": "msg_warn_key_value_not_saved",
    "translation": "The value for key [{{.key}}] is not saved in the current version of wskdeploy.\n"
  },
  {
    "id": "msg_warn_limit_ignored",
    "translation": "Invalid action limit [{{.limit}}] in manifest is ignored.\n"
  },
  {
    "id": "msg_warn_limit_changeable",
    "translation": "Limit [{{.name}}] is currently not changeable. Ignoring...\n"
  },
  {
    "id": "msg_warn_limits_log_size",
    "translation": "logSize of limits in manifest should be an integer between 0 and 10.\n"
  },
  {
    "id": "msg_warn_limits_memory_size",
    "translation": "memorySize of limits in manifest should be an integer between 128 and 512.\n"
  },
  {
    "id": "msg_warn_limits_timeout",
    "translation": "timeout of limits in manifest should be an integer between 100 and 300000.\n"
  },
  {
    "id": "msg_warn_whisk_properties",
    "translation": "The [{{.key}}] key was retrieved from whisk.properties which will soon be deprecated please do not use it outside of Travis builds.\n"
  },
  {
    "id": "msg_warn_value_range",
    "translation": "The value for {{.name}} [{{.key}}] in {{.filetype}} should type {{.type}} between {{.min}} and {{.mac}}.\n"
  },
  {
    "id": "msg_warn_runtime_changed",
    "translation": "Runtime changed to [{{.runtime}}] based on the action's source file extension for action [{{.action}}].\n"
  },
  {
    "id": "msg_warn_entity_name_exists",
    "translation": "The {{.key}} name [{{.name}}] already exists. Please select another name.\n"
  },
  {
    "id": "msg_warn_packages_not_found",
    "translation": "The manifest file [{{.path}}] contained no packages.\n"
  },
  {
    "id": "msg_warn_deployment_name_not_found",
    "translation": "The {{.key}} [{{.name}}] in the deployment file was not found in the manifest file.\n"
  },
  {
    "id": "msg_warn_project_name_overridden",
    "translation": "The project name has been overridden. Using {{.project}}\n"
  },
  {
    "id": "msg_warn_package_is_public",
    "translation": "[{{.package}}] is marked as public in manifest file, it will be visible and can be accessed by anyone"
  },
  {
    "id": "msg_warn_action_web_export_ignored",
    "translation": "[{{.action}}] has both web and web-export specified, only reading web, ignoring web-export."
  },
  {
    "id": "msg_warn_api_missing_web_action",
    "translation": "Action [{{.action}}] is not a web action, API [{{.api}}] can only be created using web action. Converting [{{.action}}] to a web action.\n"
  },
  {
    "id": "msg_warn_api_missing_web_sequence",
    "translation": "Sequence [{{.sequence}}] is not a web sequence, API [{{.api}}] can only be created using web sequence. Converting [{{.sequence}}] to a web sequence.\n"
  },
  {
    "id": "DEBUG",
    "translation": "================= DEBUG ==================="
  },
  {
    "id": "msg_dbg_searching_project_directory",
    "translation": "Searching project directory [{{.path}}] for [{{.key}}]...\n"
  },
  {
    "id": "msg_dbg_deployment_name_found",
    "translation": "The {{.key}} [{{.name}}] in the deployment file was found in the manifest file.\n"
  },
  {
    "id": "msg_dbg_packages_found_root",
    "translation": "Deployment file [{{.path}}]: Found packages under root.\n"
  },
  {
    "id": "msg_dbg_packages_found_project",
    "translation": "Deployment file [{{.path}}]: Found packages under project [{{.name}}].\n"
  }
]
