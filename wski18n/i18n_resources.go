// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x7b\x8f\x1b\xb7\x11\xff\xdf\x9f\x62\x60\x14\x70\x02\x9c\xd7\x4e\x8a\x02\x85\x81\x43\xe1\xd6\xd7\xe4\x9a\xd8\x67\xdc\x23\x41\xe0\x1c\xd6\xd4\x72\x24\x31\xe2\x92\x0b\x92\x2b\x59\x3e\xa8\x9f\xbd\x18\x72\x5f\xba\x3b\xee\x52\x72\x8c\xe6\x9f\xac\x8f\xc3\xf9\xcd\x83\x9c\x17\xf5\xe1\x09\xc0\xdd\x13\x00\x80\xa7\x82\x3f\x7d\x05\x4f\x4b\xbb\xc8\x2b\x83\x73\xf1\x29\x47\x63\xb4\x79\x7a\x12\x56\x9d\x61\xca\x4a\xe6\x84\x56\x44\x76\xe6\xd7\x9e\x00\xec\x4e\x46\x38\x08\x35\xd7\x11\x06\xe7\xb4\x34\xb5\xdf\xd6\x45\x81\xd6\x46\x58\x5c\x35\xab\x53\x5c\x36\xcc\x28\xa1\x16\x11\x2e\xbf\x36\xab\x51\x2e\x45\xc9\x73\x8e\xb6\xc8\xa5\x56\x8b\xbc\xaa\x67\x52\xd8\x65\x84\xd9\xfb\xb0\x0a\x0c\x2a\x56\xac\xd8\x02\xc1\x69\x70\x4b\x04\x83\x0b\x61\x9d\xd9\x82\x45\x07\x42\xc1\x7f\x5f\x64\x1b\xbb\xaa\x8c\xae\x6c\x96\x0a\x6d\xb0\xd2\xc6\x45\x90\x2f\xfd\xa2\x05\xad\x80\x63\x25\xf5\x16\x39\xa0\x72\xc2\x09\xb4\xf0\x8d\xc8\x30\x3b\x81\xf7\x41\x26\x7b\x02\xaf\x0b\xda\x67\x4f\xe0\xda\x88\xc5\x02\x8d\x3d\x81\xcb\x5a\xd2\x0a\xba\x22\xfb\x16\x98\x85\x0d\x4a\x49\xff\x37\x58\xa0\x72\x7e\xc7\xda\xa3\x59\x92\x9f\x74\xb2\x15\x16\x62\x2e\x90\x83\x62\x25\xda\x8a\x15\x98\xae\x8b\xd6\x31\x4d\x5e\x83\xd3\x5a\x92\xe1\x82\x22\x27\x50\xab\xf0\x05\x4c\x71\xb0\x5b\x55\x80\xae\x50\x6d\x96\xc2\xae\x5a\x3b\x5b\xa8\xad\x50\x0b\x60\x50\x32\x25\xe6\x68\x9d\x27\xd6\x15\x71\x65\xb2\x61\x55\x92\x26\x73\x21\x3b\xf2\xdf\x5e\xbf\xfd\x39\x45\x66\xbb\xd4\xc6\x1d\xe3\x7b\xd6\x79\x3e\x1d\x66\xd4\xcf\xef\x8d\x5e\x0b\x8e\x16\x18\xd8\xba\x2c\x99\xd9\x42\xa0\x07\x3d\x87\xcd\x92\xb9\x67\x16\x66\x88\x83\x53\xf0\x65\xde\x6a\x44\x9a\x74\x17\x9d\x6b\xa7\x61\x89\xb2\x6a\xa0\x61\xab\x6b\x93\xe4\x29\xf2\x48\xba\x2c\x8c\xf3\x98\x28\x9c\x03\x53\xc0\xfc\xe1\x3e\x81\x39\x22\x3f\x01\x17\x4e\x38\x68\x03\xa6\x96\xdd\x85\x6c\xc1\x0f\x81\xcd\xfd\x85\xda\x8e\xa1\xbf\x60\x0a\xee\xee\xb2\x15\x6e\x77\xbb\xfb\x50\x5e\xcf\x64\xbc\x35\x1a\x4b\x9c\x63\xc7\x40\x28\xe7\xb9\x37\x74\xa0\xea\x72\x46\x6a\xce\x61\x63\x57\xc1\x03\xe3\x58\x73\xc9\x16\x39\xab\x44\xbe\xd4\x36\xe6\xdc\xe0\xb9\xd7\xef\xcf\xe1\xe3\x8f\x17\x57\xd7\x1f\x13\x39\x8e\xcb\x3e\x60\xfa\xcb\xd9\xe5\xd5\xf9\xc5\xbb\x24\xbe\xb5\x5b\xe6\x2b\x8c\x59\x9f\x96\xb5\x11\x9f\xfd\x1f\xe0\xe3\x4f\x67\xbf\xa5\x30\x2d\xd0\xb8\xdc\xbb\xe5\x71\xae\x15\x73\x4b\x32\x29\x19\x3a\x23\xe2\x04\x1f\x06\xc6\x5a\xcd\x45\x2c\xe5\x84\x45\xcf\x0a\xbe\xe1\x38\x67\xb5\x74\x20\x2c\xfc\xe5\xc7\x8b\xb7\x67\x7d\x62\xf8\x36\xc5\x2a\x52\xea\x4d\xde\xf0\x88\x25\x4a\x4f\x04\x1d\xd1\x34\xd7\x3e\x5a\x8e\xd9\xa5\x8b\xd0\x5d\x58\x4d\x60\x2d\x94\x43\x43\x37\x74\x1d\xb3\x79\x90\x76\x40\x07\x95\xd1\x65\x95\x24\xf8\x0a\xb7\xc9\xee\x5c\xe1\x36\x55\xe8\x60\xe5\x92\x29\xb6\xc0\x58\xf0\x09\x62\x57\x46\xff\x81\x85\xeb\x53\xaf\xd3\x30\xa3\x10\x60\x56\xc8\xa1\xe5\x30\x8d\xd8\x85\xa7\x71\xfb\x1f\x10\x5a\x3c\xdb\x2e\xf4\x47\xf8\xf6\xeb\xd3\xbc\x1a\x55\x27\x24\xb4\x68\xd6\x68\x24\x5a\xdb\xda\x26\x81\xb5\x75\x46\x44\x39\x07\x43\xd7\x16\x0d\x1d\x69\xa1\x90\x83\xa9\x95\x13\x65\x17\x0b\x13\x10\x9c\x5e\x2c\x24\xe6\x94\xae\x22\x30\xd7\x9e\x02\x7e\xa4\x84\x56\xa2\xb5\x6c\x91\x7e\x52\xd6\x68\x66\xda\xc6\x8c\xdc\xac\x82\xae\x5d\x55\x8f\x99\xc3\x87\x89\xbc\x14\x96\x12\xa6\x0f\x80\xf1\xf8\x77\xbd\x44\x20\x0a\x3a\x78\x45\x08\x82\x74\xc0\x85\x05\xa5\x1d\x04\x56\xb5\x41\x9e\xfd\x3e\x66\x9e\x7b\x88\x95\x18\xc9\x0d\x84\x48\x41\x9c\x48\xbe\x0c\x67\xea\x54\x12\x52\x47\x73\x1c\x54\xa3\xca\x58\x47\x72\x5f\x9f\x0f\x77\x77\x19\x7d\xef\x76\xb7\x27\x30\x37\xba\xa4\xc4\x6e\x75\x6d\x0a\xdc\xed\x92\x30\x83\xc3\xa6\x30\x89\xac\xf5\x95\x45\x77\x1c\x56\x67\x9e\x29\xb4\x3d\x3b\x92\x8a\xdd\x1f\x0e\xd7\xb3\x56\x25\x33\x76\xc9\xa4\xcc\xa5\x2e\x98\x8c\xc0\xde\xb4\x64\x70\x51\xa1\xfa\xd5\x67\x7f\x92\x32\x80\xf9\x9d\xb0\x66\xb2\x46\x9b\x8a\xa6\xd0\x6d\xb4\x59\x1d\x85\xe7\x13\x8b\x42\x37\x8a\xd5\xe7\xb5\xbc\x60\xaa\x40\x29\xa3\x71\xff\xe2\xa7\x0c\xfe\x15\x68\xa8\xac\xed\x77\xa6\x02\xcc\x99\x88\x73\x7f\xd3\x27\x58\x2e\x78\x73\xf0\xcb\x4a\xa2\x43\xb0\x35\xb5\xbf\xf3\x5a\xca\x6d\x06\x97\xb5\x82\x8f\x5d\xe5\xd7\xb5\x4c\x1f\x29\x06\x1b\x2c\x35\xa5\x51\x66\x9c\x60\x52\x6e\xfb\xde\x80\x59\x8b\x6e\xdc\xec\x03\x49\x43\xa3\x91\x5b\xc7\x5c\x1d\xab\x35\x9e\x3f\x7f\xfe\xfc\xf4\xf4\xf4\x74\x60\xfb\x81\x0e\x57\x7e\x2b\x10\x01\x11\x26\xa1\xfa\x21\x00\xf2\x14\x13\xb5\xa6\xe1\xd0\x4c\x0e\x82\x71\xc6\x4f\xd5\xf1\xbe\x1e\xee\x4d\x07\x19\xf5\xf7\xcd\x80\x72\xdc\xe3\xc9\x78\x53\xf6\xdb\x83\x3c\xc2\x82\x6d\x0d\x92\xfb\xbe\x6e\xba\x76\xbc\xf1\xed\x1f\x85\x1e\xaa\x11\x76\xbb\x5b\x98\x6b\x93\x7a\x6f\xee\x81\x0d\x15\x3d\x08\x2e\xd9\x75\xa1\xe5\xcb\xdb\x1b\x33\x31\x92\xea\x5a\xbf\x36\xb2\x12\xde\x92\x35\x2d\xf9\xd0\xa4\xdd\x1d\x4c\x47\x8f\xcf\xb0\xde\xb4\xeb\xf0\xa8\x00\x59\x36\xd2\x5d\x37\x10\xad\x41\xfe\x4c\x15\x7b\x9e\x29\x4a\xb6\xd4\x71\x35\x6f\x7a\x8a\x23\x14\xe5\x58\xa1\xe2\xa8\x8a\x43\xec\xd9\x6f\x1a\x02\x1d\x86\xd3\xdf\xc2\xa8\x51\xdf\x3c\x0a\xf3\x25\x27\xe7\x71\x29\x28\xf6\xd4\x26\x56\x67\x0d\x22\xa9\x9e\x47\x54\xff\x3f\xa6\xa1\x56\x9f\xc3\x0e\xca\x97\x79\xf0\x61\x24\xfd\x73\x7c\x98\x78\x35\x62\x92\x8c\xfb\x71\x2f\xa2\x1f\xe9\xc9\x89\x20\x4c\x6d\xec\xb1\x69\xcd\x4b\x14\x92\x4c\xd7\x26\x8f\xc9\x02\xbc\x36\xe4\xc9\x06\x76\x98\x2a\xbe\xde\x79\x6b\x75\x9c\xeb\x5a\xf1\xbc\x91\x77\x7c\x00\xf8\x86\x88\xa2\xb1\x69\xb3\x14\xc5\x12\x36\x7e\xa2\x4e\x72\xf1\x50\x8e\xba\x25\x42\x51\x1b\x43\x86\x69\x15\x6c\x87\x08\x3e\x69\x85\x6f\xe2\xc0\xac\xd7\x85\xec\x97\x9c\xbe\xc2\xe8\x64\xa2\x93\xfb\x5d\xbd\x97\xc8\xac\x1f\xb4\xac\x05\x47\x2f\x14\xd1\x93\xec\x3e\x5d\x76\xc5\xdc\x2b\x98\xc6\x1a\xed\x53\x1f\x60\x31\x75\xbf\x6f\x75\x7a\x85\x2a\x01\xa8\x19\x72\x46\x9c\xa1\x61\xab\x6b\x30\xe8\x3d\xbf\x61\xca\xf5\xf3\x2a\x70\x4b\x61\xff\x01\xdf\x6c\x5f\xbc\xfb\x36\x01\x67\xaa\x3d\x7d\xa8\xd2\xa0\xcb\xfa\xd0\xce\xf7\x7c\x87\x43\x4d\xd7\xa2\x46\xeb\x6e\x13\x70\x5b\x27\x1f\xa4\x61\xf7\x56\x92\xa0\xe3\xd9\xe5\xe5\xc5\xe5\x55\x84\xfd\xe9\xfd\xff\x20\x90\xc3\x83\x85\xd3\xd3\x91\xdc\x6e\xcc\x7e\x10\x5b\x29\xbd\x51\xb9\xdb\x56\x23\x49\xa8\x0d\x56\x44\x45\x16\x6b\x76\x65\xd0\x8f\xb6\x41\x2b\xb9\x05\x5b\x57\xe1\xd5\xeb\x85\x9f\x29\x67\x76\x6b\x1d\x96\x30\x13\x8a\x0b\xb5\xb0\xa0\x0d\x2c\x84\x5b\xd6\xb3\xac\xd0\x65\xf7\x00\x31\x5e\x8c\x04\x81\xdb\xa8\x46\x8e\xcc\x95\x76\x21\x0e\x8c\xf4\xd5\x8f\xde\x79\xa1\xee\x4f\x48\x7d\x90\xf3\xbc\x68\x71\xff\x05\x64\x4a\xac\xa6\x4e\x2a\x0c\x32\x17\xb3\x9e\x7f\x97\x05\x4f\xb2\x17\x89\x36\xc2\x2d\xc1\x3f\xe8\xb6\xc3\xac\x57\xb4\x88\xc6\xec\x76\xfe\xa5\x2c\xac\x15\x9a\x87\x05\xfa\x98\xe8\xfe\x07\x22\x85\xf0\x38\x2a\x12\x7f\x10\x1c\xbf\x92\x48\x73\x44\x9e\x0b\xb5\xd6\xab\x98\x40\xff\xf6\x99\x8a\x2e\x4b\x20\xf3\xe1\x8e\xb6\xc1\x66\xe9\x1f\xce\x1a\x49\xdb\x97\xa3\xb0\xf4\x75\xa4\x5d\xe1\xb6\x1b\x83\x95\x4c\x71\xe6\xb4\x19\x1b\xf1\x75\x34\x7e\x62\xf4\xa1\x35\xe6\x2d\x5d\x93\x86\xcf\x24\x66\xd7\x43\x4d\x9d\xeb\xb7\xc3\xe3\x39\x38\xb9\xcc\x81\x1f\xef\x0e\x9a\xaa\x49\x50\x7f\x91\x4a\x61\x4b\xe6\x8a\xd8\x0b\xea\xde\x3d\xa2\x0d\xdc\x43\xf0\x91\xeb\xe4\xd7\xdb\xc6\x8e\x6b\x0c\xb3\x41\x0f\xe2\xdd\xea\x33\x18\x11\x95\x03\x26\x7b\xd7\x2e\xac\xb6\x6a\x8c\x2b\xd1\xcc\x99\xe9\x78\x31\x29\x62\x66\x3b\x0f\xab\x14\x7d\x1a\x97\x74\x03\x6a\xc2\x6a\xbe\x49\x96\xfe\x4d\x76\x4f\x2a\x6d\xbc\xec\xe1\x1d\xd3\xef\x09\x9f\x29\x76\x6e\x45\x9c\x30\xf5\xe5\x21\x02\xdd\xb3\xab\xbf\x0a\x41\xa2\x67\x16\xc2\xa4\x30\x98\x12\x3f\x39\x54\xb6\x15\x1a\x3f\xb9\xb6\xdd\xfe\x12\x55\x6c\xbe\xc0\x58\xe5\xd2\x5f\xe5\x05\x86\xe7\xd0\x26\x25\xf4\x8f\x02\x36\xd4\x59\xfd\x38\xca\xa2\x59\x8b\x62\x70\x7d\x27\x05\xa9\x8d\x3c\xdc\xe5\x77\x77\x59\x6d\x24\xa5\xb0\xdd\x0e\x6e\x2e\x7f\xf6\xca\xd7\x46\x36\x67\x90\xfe\x45\x36\x0b\x04\xb7\x69\x19\x80\x04\x29\x99\x9c\x6b\x53\x46\x4b\xed\xb7\xed\xfa\x98\x04\x19\x5c\x9b\x2d\xb0\x05\x13\x2a\xcb\x26\x61\xff\xb0\x5a\x75\x51\xaa\x28\xf9\xc8\x33\xec\x7f\xae\x2e\xde\x81\x50\x55\xed\x80\x33\xc7\xe0\x6d\x63\x8d\x67\x45\xc9\x9f\x51\xcc\x7a\x1c\xe9\xd7\xd7\x97\xef\xce\xdf\xfd\x90\x5e\x8b\xb4\x1b\x0e\xab\x46\x36\xcc\xa8\xbc\xd0\x25\x45\xd1\xdc\xa0\x8b\x86\xda\x4b\x5a\x6b\xe7\x46\x45\xc9\x7d\xf9\x3d\x77\x68\x42\x98\x7f\x15\xce\x37\x1d\x9e\xdb\x31\xe3\x35\x78\x7e\x42\x7f\xf0\x01\x1a\xbe\x12\x0f\xc7\x57\x1c\x1d\x16\x6e\xa2\x71\xf4\xc8\x94\x5c\x38\x56\x06\x0b\x46\xcd\x8b\xc1\x4a\xb2\x22\x7a\x70\x28\xfa\x12\x8e\x96\xbc\xc9\x29\xfe\x51\x22\xfc\x7a\x64\xef\xb4\x06\x99\x36\x42\x4a\xb0\x5a\x2b\x98\x21\xf4\x30\x27\x50\x85\x6a\xb8\xb6\x21\xb3\xfa\x82\x08\x37\x7b\x3c\xad\x43\x96\xa8\x40\x63\x8e\x63\x72\xa2\x5d\xea\x5a\x72\x12\xcf\xa2\xcb\x20\x4c\x02\xf7\xeb\x71\xa2\xf6\x5f\x61\x26\x90\x24\x91\xa7\x9f\xf0\x27\xc9\x15\x10\x28\xfc\x3d\xcc\xd5\x14\x4d\xfd\xfe\x43\x20\x29\x5f\x5b\xb6\x1e\xf5\xe0\x14\xa8\xdf\xdf\x7a\xb5\x6d\x3c\xdb\xdf\x90\x0c\x7f\x3c\x32\x2d\x98\x14\xa5\x70\xb9\x58\x28\x6d\xa2\x22\xb5\xe7\xba\x49\x00\x7e\x8b\x97\xca\x7f\xdd\xcf\xc7\xc2\x42\xc3\x2e\x15\xbd\x58\x32\xb5\x40\x36\x8b\x3e\xf9\xff\xdc\x21\x76\x05\x80\x6d\xf5\x96\xdb\x30\x73\xe8\x78\x64\x70\x4e\xf0\x54\x44\x25\x9c\x05\x2f\x81\xcd\xa5\x5e\xe4\x56\x7c\x8e\x09\x20\xf5\xe2\x4a\x7c\x46\xb2\x6d\xd8\xb0\xa7\x71\x7f\x44\x99\xf2\x4f\x53\x54\x70\xce\xd0\x6d\x10\x15\xbc\xf4\x85\xe5\x77\x2f\x93\x45\x29\xb1\xd4\x66\x3b\x26\x4d\xa0\x38\x56\xa0\xef\xbe\xff\xbb\x17\xe9\x6f\xdf\x7d\x9f\x2c\x13\xe5\x60\x5d\xc7\x12\x78\xb3\x7a\x94\x30\x2f\x83\x7d\xfe\xfa\x92\xfe\x9b\x96\xc7\xb7\x88\xd4\x5b\x57\x68\x9c\xc0\xd8\x18\xaf\x0d\x83\x83\x78\x15\x86\x36\xce\x08\xec\xc6\x36\xa1\xdf\xec\x99\xb5\xe3\x9d\xc7\x63\x62\x1b\x12\xb9\xf6\x07\x8e\x22\xa3\x70\xa0\x6b\x67\x05\xf7\x8e\xb8\x36\x6c\x2d\x2c\xcc\x6a\x21\xf9\x78\x7f\xea\x55\x09\xe1\xc0\xd0\xb1\x4d\x0a\x05\xdd\xe9\xdf\x0b\x08\xea\x5e\x54\x6f\xac\xed\xbb\xee\xbb\xbb\xac\xf9\x6b\x6b\x6e\xaa\x92\x85\x6a\x9a\x1d\xfa\x07\x2b\x26\x4a\x27\x2f\x6a\x5b\x8f\x86\x4b\x16\x0b\x13\x6d\x39\xda\x50\x51\x41\x77\xaf\x32\x9d\x31\x8b\x1c\xb4\x1a\x54\xc6\xd1\xe2\xf3\xa8\x8a\xd3\x4b\xdb\xf4\xb3\xbe\x59\xc1\x4f\xc2\x46\x7f\x52\xf5\xa0\x55\xd9\x0b\x31\x4c\x1a\x64\x7c\x0b\x81\x45\x06\xcd\x7c\xc8\xa2\xc4\xc2\x01\x53\xda\x2d\xd1\xf8\x6d\x51\x91\xde\x9c\xfd\xf3\xe6\x87\xe4\x72\xc8\x53\x1f\x56\x0b\xf1\x59\xf8\xb9\xd4\x1a\x8d\x98\xc7\xea\xa0\x5f\xfc\x62\x53\xce\x3e\x3c\x42\x8d\x7e\xe3\xb1\x92\x80\xba\x71\x7c\x78\xb7\x9b\x7c\x76\xf1\x54\xaf\xa6\xb8\x0e\x1e\x02\x46\xf9\x0e\x9f\x03\xd2\x38\x5b\x64\xa6\x58\x12\xdf\x66\xfe\x9a\x73\x61\xb0\x18\x69\xce\xaf\xda\x1d\xdd\xf4\xb6\xdb\xf1\xe0\xf1\xb1\xb7\x60\x6f\xba\x27\xb7\x4f\xfe\x17\x00\x00\xff\xff\x5a\x51\x51\x15\x8c\x2f\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 12172, mode: os.FileMode(420), modTime: time.Unix(1516809631, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

