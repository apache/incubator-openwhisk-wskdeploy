// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x6f\x1b\x37\xf2\x7f\x9f\x4f\x31\x08\xfe\x40\x5a\xc0\x51\xd2\xfe\x71\xc0\x21\x80\x71\xc8\x5d\x72\x6d\xae\x4d\x1c\xd8\x71\x8b\x22\x35\x36\xd4\x72\x24\xb1\xe2\x92\x0b\x92\x2b\x45\x35\xf4\xdd\x0f\x43\x72\x1f\x24\x9b\xbb\xb4\xd2\xe0\xfa\xa6\x8a\x39\x9c\xf9\xcd\x0c\x39\x4f\xdc\x8f\x8f\x00\x6e\x1f\x01\x00\x3c\x16\xfc\xf1\x0b\x78\x5c\xd9\x65\x51\x1b\x5c\x88\xcf\x05\x1a\xa3\xcd\xe3\xb3\xb0\xea\x0c\x53\x56\x32\x27\xb4\x22\xb2\xd7\x7e\xed\x11\xc0\xfe\x6c\x84\x83\x50\x0b\x9d\x60\xf0\x86\x96\xa6\xf6\xdb\xa6\x2c\xd1\xda\x04\x8b\xab\xb8\x3a\xc5\x65\xcb\x8c\x12\x6a\x99\xe0\xf2\x6b\x5c\x4d\x72\x29\x2b\x5e\x70\xb4\x65\x21\xb5\x5a\x16\x06\x6b\x6d\x5c\x82\xd7\xa5\x5f\xb4\xa0\x15\x70\xac\xa5\xde\x21\x07\x54\x4e\x38\x81\x16\xbe\x11\x33\x9c\x9d\xc1\x7b\x56\xae\xd9\x12\xed\x19\xbc\x2c\x69\x9f\x3d\x83\x0f\x46\x2c\x97\x68\xec\x19\x5c\x36\x92\x56\xd0\x95\xb3\x6f\x81\x59\xd8\xa2\x94\xf4\x7f\x83\x25\x2a\xe7\x77\x6c\xbc\x34\x0b\x42\x81\x5b\x21\xd8\x1a\x4b\xb1\x10\xc8\x41\xb1\x0a\x6d\xcd\x4a\x9c\x65\xeb\xa2\x75\x4a\x93\x97\xe0\xb4\x96\xe0\x74\x54\xe4\x0c\x1a\x15\x7e\x01\x53\x1c\xec\x4e\x95\xa0\x6b\x54\xdb\x95\xb0\x6b\xa8\xa3\x4e\xd0\x58\xa1\x96\xc0\xa0\x62\x4a\x2c\xd0\x3a\x4f\xac\x6b\xe2\xca\x64\x64\x55\x91\x26\x0b\x21\x3b\xf2\xdf\x5e\xbe\xfd\x39\x07\xb3\x5d\x69\xe3\xc6\x1d\xf0\xde\xe8\x8d\xe0\x68\x81\x81\x6d\xaa\x8a\x99\x1d\x04\x7a\xd0\x0b\xd8\xae\x98\x7b\x62\x61\x8e\x38\x70\xcf\x97\x99\x31\x42\x9a\xb4\xa3\x45\x47\xb6\x5c\xa1\xac\xa3\x68\xd8\xe9\xc6\x64\x99\x90\x4c\x95\x8f\x65\x83\xc6\x92\xec\x94\x7d\x84\x72\x5e\xe1\x48\x07\xaa\xa9\xe6\x68\xbc\x79\xec\x3a\x40\x1b\x97\xb5\x90\x6c\x59\xb0\x5a\x14\x2b\x6d\x53\x5a\x07\x95\x5e\xbe\x7f\x03\x9f\x7e\xbc\xb8\xfa\xf0\x29\x93\xe3\x38\xf6\x01\xd3\x5f\x5e\x5f\x5e\xbd\xb9\x78\x97\xc5\xb7\x71\xab\x62\x8d\xbb\x04\x53\x5a\xd6\x46\xfc\xe9\xff\x00\x9f\x7e\x7a\xfd\x5b\x0e\xd3\x12\x8d\x2b\xc8\x2f\x09\xae\x35\x73\x2b\x32\x29\x19\x7a\x46\xc4\xde\x89\x39\x8c\xb5\x5a\x88\x54\xa4\x0a\x8b\x9e\x15\x7c\xc3\x71\xc1\x1a\xe9\x40\x58\xf8\xbf\x1f\x2f\xde\xbe\x7e\x36\xdb\xda\x75\x6d\x74\x6d\xbf\xcd\xb1\x8a\x94\x7a\x5b\x44\x1e\xa9\xf8\xea\x89\xa0\x23\x9a\xe6\xda\xdf\xef\x31\xbb\x74\x31\xa5\x0b\x04\x19\xac\x85\x72\x68\x18\x85\xbf\x94\xcd\x03\xda\x01\x1d\xd4\x46\x57\x75\x16\xf0\x35\xee\xb2\xdd\xb9\xc6\x5d\x2e\xe8\x60\xe5\x8a\x29\xb6\x44\x3e\x0a\xbb\x36\xfa\x0f\x2c\x5d\x9f\x2c\x9c\x86\x39\x42\xc5\xcc\x1a\x39\xb4\x1c\xa6\x25\xb6\x41\x63\xc2\xfe\x07\xb1\x25\x83\x6d\x17\x13\x13\x7c\xfb\xf5\x69\x5e\x51\xd5\x09\x84\x16\xcd\x06\x8d\x44\x6b\x5b\xdb\x64\xb0\xb6\xce\x88\x24\xe7\x60\xe8\xc6\xa2\xa1\x23\x2d\x14\x72\x30\x8d\x72\xa2\xea\x62\x61\x86\x04\xa7\x97\x4b\x89\x05\xc5\xf1\x84\x98\x0f\x9e\x02\x7e\xa4\x48\x5f\xa1\xb5\x6c\x99\x7f\x52\x36\x68\xe6\xda\xa6\x8c\x1c\x57\x41\x37\xae\x6e\xc6\xcc\xe1\xc3\x44\x51\x09\x4b\x99\xc4\x07\xc0\x74\xfc\xfb\xb0\x42\x20\x0a\x3a\x78\x65\x08\x82\x74\xc0\x85\x05\xa5\x1d\x04\x56\x8d\x41\x3e\xfb\x7d\xcc\x3c\x47\x12\x6b\x31\x92\x1b\x48\x22\x05\x71\x22\xf9\x32\x39\x53\xa7\x92\x24\x75\x34\xa7\x89\x8a\xaa\x8c\x15\xb2\xc7\xfa\x7c\xbc\xbd\x9d\xd1\xef\xfd\xfe\xe6\x0c\x16\x46\x57\x70\x7b\x3b\xb3\xba\x31\x25\xee\xf7\x59\x32\x83\xc3\xa6\x64\x12\x59\xeb\x2b\x8b\xee\x34\x59\x9d\x79\xa6\xa4\x1d\xd8\x91\x54\xec\xfe\x70\xba\x9e\xb5\x58\x6e\x0b\xe6\x6b\xf8\xc2\xe9\x35\xaa\x49\x95\x69\x07\x84\x1d\xe0\x77\x9c\xa6\x7c\xa3\x2a\x66\xec\x8a\xc9\x42\xea\x92\xc9\x84\xc4\xeb\x96\x0a\x2e\x6a\x54\xbf\xfa\xea\x23\x46\x0c\x1b\xe4\xf9\xdd\xb0\x61\xb2\x41\x9b\x29\x50\xa1\xdb\x6a\xb3\x3e\x59\xa4\xcf\x6f\x0a\x1d\x30\x47\xea\x36\x46\x4e\xe8\xda\xa7\xda\xa2\x64\xaa\x44\x29\x93\xa9\xe8\xe2\xa7\x19\xfc\x2b\xd0\x50\x09\xda\xef\xcc\x15\xb0\x60\x22\xcd\xfd\x55\x9f\xf3\xb9\xe0\xf1\x2e\x56\xb5\x44\x87\x60\x1b\x72\xe9\xa2\x91\x72\x37\x83\xcb\x46\xc1\xa7\xae\x18\xed\xfa\x8e\x4f\x94\x16\x0c\x56\x9a\x32\x3b\x33\x4e\x30\x29\x77\x7d\x1d\xcf\xac\x45\x37\xee\x85\x01\xd2\xd0\x14\x14\xd6\x31\xd7\xa4\xca\x9f\xa7\x4f\x9f\x3e\x3d\x3f\x3f\x3f\x1f\xf8\x62\xa0\xc3\x95\xdf\x0a\x44\x40\x84\x59\x52\x7d\x3b\x8b\x3c\xc7\x44\xad\x69\x38\xc4\x1e\x38\x18\x67\xfc\x90\x9d\xee\xeb\xe1\xde\x7c\x21\xa3\xfe\xbe\x1e\x50\x8e\x7b\x3c\x5b\xde\x94\xfd\x0e\x44\x9e\x60\xc1\xb6\x2c\x2a\x7c\x0f\x36\x5d\xce\x5e\xfb\x56\x8d\xa2\x21\x95\x2d\xfb\xfd\x0d\x2c\xb4\xc9\xbd\x37\x47\xc2\x86\x8a\x3e\x48\x5c\xb6\xeb\x7c\x6d\xb9\x2b\xda\x1b\x33\x31\x5c\xb9\xbd\xa5\x4a\x77\xbf\xef\x82\x3d\xc9\x5b\xb1\xd8\x3e\x0f\x4d\xda\xdd\xc1\x7c\xe9\xe9\x69\xcc\xab\x76\x1d\xee\x05\x30\x9b\x8d\x74\xc2\x51\x44\x6b\x90\xbf\x52\xc5\x9e\x67\x8e\x92\x2d\x75\x5a\xcd\xeb\x9e\xe2\x04\x45\x39\xd6\xa8\x38\xaa\xf2\x21\xf6\xec\x37\x0d\x05\x3d\x4c\x4e\x7f\x0b\x93\x46\x7d\x75\xaf\x98\x2f\x39\x39\xf7\xa3\xa0\xd8\xd3\x98\x54\xe9\x37\x88\xa4\x7a\x91\x50\xfd\x7f\x98\x86\x5a\x7d\x1e\x76\x50\xbe\xcc\x83\x77\x23\xe9\x5f\xe3\xc3\xcc\xab\x91\x42\x32\xee\xc7\x83\x88\x7e\xa2\x27\x27\x82\x30\x75\xd6\xa7\xa6\x35\x8f\x28\x24\x99\xae\x73\x1f\xc3\x02\xbc\x31\xe4\xc9\x28\x76\x98\x2a\xbe\xde\x79\x6b\x75\x5c\xe8\x46\xf1\x22\xe2\x8d\xa1\x2a\x79\x00\x24\xba\x64\x6c\xda\xae\x44\xb9\x82\xad\x1f\x4b\x13\x2e\x1e\x4a\x53\xb7\x42\x28\x1b\x63\xc8\x30\xad\x82\xed\x5c\xc3\x27\xad\xf0\x9b\x38\x30\xeb\x75\x21\xfb\x65\xa7\xaf\x30\xcd\x99\x68\x2e\x7f\x57\xef\x25\x32\xeb\x67\x3f\x1b\xc1\xd1\x83\x22\x7a\xc2\xee\xd3\x65\x57\xcc\xbd\x80\x69\x59\xa3\xad\xf3\x1d\x59\x4c\x1d\xb7\xd2\xbe\x47\xc9\x10\x14\xe7\xae\x09\x67\x68\xd8\xe9\x06\x0c\x7a\xcf\x6f\x99\x72\xfd\x08\x0d\xdc\x4a\xd8\x7f\xc0\x37\xbb\x67\xef\xbe\xcd\x90\x33\xd5\x31\xdf\x55\x69\xd0\xf8\x7d\x6c\x47\x8e\xbe\xe1\xa1\xce\x6b\xd9\xa0\x75\x37\x19\x72\x5b\x27\x3f\x48\xc3\xee\xc1\x21\x53\xc7\x08\xaf\x88\x93\xf4\xd4\x04\x3c\xac\x7a\xbd\x60\x30\x44\x35\xe8\x47\x4e\xfc\x0c\x98\x1c\xb6\x5f\xdd\xbd\x26\x38\xa6\xdb\x11\x85\x00\x33\xd8\x5d\xc6\x67\x7d\x28\x04\x2e\x0c\x96\x2e\x86\x47\x13\x86\xfd\x53\x2f\x0b\xaf\x2f\x2f\x2f\x2e\xaf\x12\xb8\xcf\x8f\xff\x83\x40\x0e\x77\x16\xce\xcf\x47\x0a\x14\x63\x0e\x23\xf1\x5a\xe9\xad\x2a\xdc\xae\x1e\xc9\xa4\x6d\xc4\x25\x2a\x32\x55\xdc\x35\x83\xfe\xc9\x00\xb4\x92\x3b\xb0\x4d\x1d\xde\xbf\x9e\xf9\x59\xfd\xcc\xee\xac\xc3\x0a\xe6\x42\x71\xa1\x96\x16\xb4\x81\xa5\x70\xab\x66\x3e\x2b\x75\xd5\xbd\x78\x8c\x57\x54\xc6\xb4\x55\x55\x69\x90\xb9\x14\x4c\xff\x1e\x09\x9e\xe4\x20\x6e\x6d\x85\x5b\x81\x7f\xc8\x6c\xa7\x71\x2f\x68\x11\x8d\xd9\xef\xfd\xe3\x54\x58\x2b\x35\x0f\x0b\xf4\x63\xa2\xa3\x1e\x40\x0a\xc1\x74\x14\x12\xbf\x13\x4a\xbf\x12\xa4\x05\x22\x2f\x84\xda\xe8\x75\x0a\xd0\xbf\x7d\x5e\xa3\xab\x15\xc8\x7c\x70\xa4\x6d\xb0\x5d\xf9\x27\xb1\x88\xd4\x85\xe7\xc8\xb8\xf4\x75\xd0\xae\x71\xd7\xcd\xf1\x2a\xa6\x38\x73\xda\x8c\xcd\x28\x3b\x1a\x3f\xf2\xfa\xd8\x1a\xf3\x86\xce\x63\xe4\x33\x29\xb3\xeb\xb8\x94\x76\x21\x1b\x26\x04\xbe\x1d\x8e\xc7\x7d\x32\xf7\xd4\xc0\xe8\xde\xbb\xd5\xb0\x05\x9b\x14\x4a\x97\x9e\x34\xad\x98\x2b\x57\x23\x0a\x76\xc7\x83\x36\x70\x2f\x82\xb7\x09\x57\xa8\xe3\x17\x93\xb0\xde\xb6\x81\x5c\x63\x18\x6e\x7a\x21\xde\xad\x3e\xbc\x11\x51\x35\x60\x72\x30\xf6\x0f\xab\xad\x1a\xe3\x4a\xc4\x19\x14\x1d\x2f\x26\x45\xca\x6c\x6f\xc2\x2a\x5d\xf3\xe8\x92\x6e\xc2\x4e\xb2\xe2\x6f\xc2\xd2\xbf\xb6\x1e\xa0\xd2\xc6\x63\x67\xfe\x5d\xdc\xef\x09\x3f\x73\xec\xdc\x42\x9c\x30\xf5\xe5\x43\x00\x1d\xd9\xd5\x5f\x85\x80\xe8\x89\x85\x30\x69\x0c\xa6\xc4\xcf\x0e\x95\x6d\x41\xe3\x67\xd7\x36\xe7\x5f\xa2\x8a\x2d\x96\x98\xaa\x73\xfa\xab\xbc\xc4\xf0\x9e\x1b\x63\x6f\xff\xaa\x11\x07\x86\x7d\x26\xa3\xfc\x26\xca\xc1\xf5\x9d\x04\xd2\x18\xf9\x70\x97\x87\xa9\x24\xe5\x8a\xfd\x1e\xae\x2f\x7f\xf6\xca\xfb\x39\xa5\x3f\x83\xf4\x2f\xb2\x59\x20\xb8\x09\xaf\xdb\x39\x40\x2a\x26\x17\xda\x54\xc9\xc2\xfc\x6d\xbb\x3e\x86\x60\x06\x1f\xcc\x0e\xd8\x92\x09\x35\x9b\x4d\x8a\xfd\xc3\x6a\xd5\x45\xa9\xb2\xe2\x23\xef\xc8\xff\xb9\xba\x78\x07\x42\xd5\x8d\x03\xce\x1c\x83\xb7\xd1\x1a\x4f\xca\x8a\x3f\xa1\x98\x35\x2e\x89\xd5\xa2\x13\xb4\xc5\x79\x11\x0e\x4b\xea\x9b\x82\x7b\x0e\x55\xfb\xbc\xc1\x60\x8b\xf3\x78\xec\xce\xfc\xbb\x84\x27\xab\x05\xd1\x94\x4c\x85\x44\x3d\xc7\x90\x2a\x91\xc7\xcf\x0d\xfa\x4d\x33\x88\x25\x60\x53\x73\xe6\xf0\x28\x66\x38\x0d\xa5\x56\x1b\x34\xee\x48\xbc\xd3\x43\x1e\x53\x86\x1d\xaa\x7b\x92\xaa\xed\x61\xf3\x47\xfc\x00\x62\x96\xd2\x73\x66\x91\x83\x56\xc3\x70\x73\x97\xd5\xa4\x29\x84\x2a\x65\xc3\xf1\x08\x1e\xb3\x07\x5e\x48\x1a\xe3\xd7\x97\x97\xef\xde\xbc\xfb\x21\xbf\xe0\x6b\x37\x3c\xac\xe4\xdb\x32\xa3\x8a\x52\x57\x94\x41\x0b\x83\x2e\x99\x66\x2f\x69\xad\x9d\x30\x96\x15\xf7\xba\x2c\x1c\x9a\x90\xe2\x5f\x84\xd8\x46\x81\xe3\x66\xcc\xbf\x51\x9e\x7f\xe2\x79\x70\xf0\x18\x7e\xe2\x30\x1c\x74\x72\x74\x58\xba\x89\x11\x83\x97\x4c\x85\x05\xc7\xda\x60\x49\x9e\x2e\x0c\xd6\x92\x95\xc9\xa0\x41\x99\x97\xe4\x68\xc9\x63\x3d\xe1\x5f\xd4\xc2\xc1\x38\x88\x54\x01\xd3\x56\x48\x09\x56\x6b\x45\xa7\xa9\x17\x73\x06\x75\x3c\x29\x36\x54\x55\xbe\x5d\xc6\xed\x01\x4f\xeb\x90\x65\x2a\x10\xcd\x71\x4a\x3d\x64\x57\xba\x91\x9c\xe0\x59\x74\x33\x08\x33\xe3\xc3\xce\x8d\xa8\xfd\xaf\x30\x3d\xca\x42\xe4\xe9\x27\xfc\x49\xb8\x82\x04\x4a\x7d\x77\xeb\x34\x8a\x4f\x7e\xff\x43\x44\x52\xad\x66\xd9\x66\xd4\x83\x53\x42\xfd\xfe\xd6\xab\xed\x88\xa2\xfd\x00\x6a\xf8\xe5\xd3\x34\x30\x29\x2a\xe1\x0a\xb1\x54\xda\x24\x21\xb5\xe7\x3a\x06\x16\xbf\xc5\xa3\xf2\xbf\x8e\x6b\x31\x61\x21\xb2\xcb\x95\x5e\xae\x98\x5a\x22\x9b\x27\xbf\x57\xf9\xb9\x93\xd8\x15\x7f\xb6\xd5\x5b\xee\xc2\x74\xaa\xe3\x31\x83\x37\x24\x9e\x0a\xe8\x8c\xb3\xe0\x11\xd8\x42\xea\x65\x61\xc5\x9f\x29\x00\x52\x2f\xaf\xc4\x9f\x48\xb6\x0d\x1b\x0e\x34\xee\x8f\x28\x53\xfe\x41\x93\x9a\x8d\x39\xba\x2d\xa2\x82\xe7\xbe\xa9\xf8\xee\x79\x36\x94\x0a\x2b\x6d\x76\x63\x68\x02\xc5\xa9\x80\xbe\xfb\xfe\xef\x1e\xd2\xdf\xbe\xfb\x3e\x1b\x13\xd5\x5f\xba\x49\x15\x6f\x71\xf5\x24\x30\xcf\x83\x7d\xfe\xff\x39\xfd\x37\x8d\xc7\xf7\xe1\x45\x6d\x74\x8d\xc6\x09\x4c\x0d\x7c\xdb\x30\x38\x88\x57\x61\xbc\xe7\x8c\xc0\x6e\xc0\x17\x9a\xfa\x9e\x59\x3b\x08\xbc\x3f\x26\xb6\x21\x91\x6b\x7f\xe0\x28\x32\x0a\x07\xba\x71\x56\x70\xef\x88\x0f\x86\x6d\x84\x85\x79\x23\x24\x1f\x1f\x02\x78\x55\x42\x38\x30\x74\x6c\xb3\x42\x41\x77\xfa\x0f\x02\x82\x3a\x8a\xea\xd1\xda\x7e\xb4\x71\x7b\x3b\x8b\x7f\x6d\xcd\x4d\x1d\x92\x50\xb1\xd1\xa5\x7f\xb0\x72\xa2\x6c\xf6\x50\xdb\x5e\x24\x5c\xb2\x54\x98\x68\x5b\x91\x48\x45\x05\xc5\x51\x57\x72\x4f\x99\x92\x6c\x3c\x4e\xea\x36\x3c\xda\x38\xcb\xf0\x8d\x2a\x7e\x16\x36\xf9\x3d\xe0\x9d\x36\xf5\x20\xc4\x30\x69\x90\xf1\x1d\x04\x16\x5d\xed\x64\x51\x62\xe9\x80\x29\xed\x56\x18\x66\x60\xd3\x90\xda\xd1\xd0\x64\xa7\x1e\x53\xe1\x51\x57\xdb\x56\x0d\xa5\x56\x8e\xf9\x2f\xbd\x94\xce\x1b\x37\x79\xe9\x83\xa7\x00\x6f\x94\x1c\x10\xf7\x0e\xca\x63\xc6\x39\xee\xdd\xe9\x6a\xf5\x43\x85\x48\x74\x58\x79\xa6\x30\xbe\x7a\xfd\xcf\xeb\x1f\xb2\x0b\x46\x4f\xfd\xb0\x6a\x91\xcf\xc3\xd7\x90\x1b\x34\x62\x91\xaa\x14\x7f\xf1\x8b\xb1\xd9\xbb\x7b\xc9\xe2\x09\x18\xcf\x26\x24\xa8\x7b\xda\x0a\x6f\xe0\x93\x4f\x98\x9e\xea\xc5\x14\xd7\xc1\xa3\xda\x28\xdf\xe1\xd3\x5a\x1e\x67\x8b\xcc\x94\x2b\xe2\x1b\xdf\x32\x8a\x30\xe6\x4d\x8f\xae\xae\xda\x1d\xdd\x4b\x48\xb7\xe3\xce\x43\x7e\x6f\xc1\xde\x74\x8f\x6e\x1e\xfd\x37\x00\x00\xff\xff\x95\xf9\xc1\x1c\xa2\x31\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 12706, mode: os.FileMode(420), modTime: time.Unix(1520041885, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json":   wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json":   wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json":   wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json":   wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json":   wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json":   wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json":   wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json":   wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": {nil, map[string]*bintree{
		"resources": {nil, map[string]*bintree{
			"de_DE.all.json":   {wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json":   {wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json":   {wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json":   {wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json":   {wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json":   {wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json":   {wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json":   {wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": {wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": {wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
