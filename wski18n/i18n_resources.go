// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(438), modTime: time.Unix(1517928990, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5b\x6d\x8f\xdb\xb6\xb2\xfe\x9e\x5f\x31\x08\x2e\x90\x16\x70\x94\xb4\x17\x17\xb8\x08\xb0\x38\xc8\x69\xd2\x76\x4f\x9b\x6c\xb0\x9b\x9c\xa0\x48\x17\x0a\x2d\x8e\x6d\xd6\x12\x29\x90\x94\x1d\xd7\xf0\x7f\x3f\x18\xbe\x48\xb2\x77\x29\x69\x9d\x16\x27\x5f\xea\x86\xc3\x99\x67\x86\xe4\xc3\x99\xa1\xf2\xe9\x11\xc0\xfe\x11\x00\xc0\x63\xc1\x1f\xbf\x80\xc7\x95\x59\xe6\xb5\xc6\x85\xf8\x92\xa3\xd6\x4a\x3f\x9e\xf9\x51\xab\x99\x34\x25\xb3\x42\x49\x12\x7b\xed\xc6\x1e\x01\x1c\x66\x03\x1a\x84\x5c\xa8\x84\x82\x4b\x1a\x1a\x9b\x6f\x9a\xa2\x40\x63\x12\x2a\x6e\xc2\xe8\x98\x96\x2d\xd3\x52\xc8\x65\x42\xcb\xc7\x30\x9a\xd4\x52\x54\x3c\xe7\x68\x8a\xbc\x54\x72\x99\x6b\xac\x95\xb6\x09\x5d\xd7\x6e\xd0\x80\x92\xc0\xb1\x2e\xd5\x0e\x39\xa0\xb4\xc2\x0a\x34\xf0\x8d\xc8\x30\x9b\xc1\x3b\x56\xac\xd9\x12\xcd\x0c\x5e\x16\x34\xcf\xcc\xe0\xbd\x16\xcb\x25\x6a\x33\x83\xeb\xa6\xa4\x11\xb4\x45\xf6\x2d\x30\x03\x5b\x2c\x4b\xfa\xaf\xc6\x02\xa5\x75\x33\x36\xce\x9a\x01\x21\xc1\xae\x10\x4c\x8d\x85\x58\x08\xe4\x20\x59\x85\xa6\x66\x05\x66\x93\x7d\x51\x2a\xe5\xc9\x4b\xb0\x4a\x95\x60\x55\x70\x64\x06\x8d\xf4\xbf\x80\x49\x0e\x66\x27\x0b\x50\x35\xca\xed\x4a\x98\x35\xd4\xc1\x27\x68\x8c\x90\x4b\x60\x50\x31\x29\x16\x68\xac\x13\x56\x35\x69\x65\x65\x50\x55\x91\x27\x0b\x51\xb6\xe2\xbf\xbd\x7c\xf3\xeb\x14\xcc\x66\xa5\xb4\x1d\x5e\x80\x77\x5a\x6d\x04\x47\x03\x0c\x4c\x53\x55\x4c\xef\xc0\xcb\x83\x5a\xc0\x76\xc5\xec\x13\x03\x73\xc4\xde\xf2\x7c\x5d\x18\x03\xa4\xd1\x38\x1a\xb4\x14\xcb\x15\x96\x75\x30\x0d\x3b\xd5\xe8\x49\x21\xa4\x50\x4d\xc7\xb2\x41\x6d\xc8\x76\x2a\x3e\x42\x5a\xe7\x70\x90\x03\xd9\x54\x73\xd4\x2e\x3c\x66\xed\xa1\x0d\xdb\x5a\x94\x6c\x99\xb3\x5a\xe4\x2b\x65\x52\x5e\x7b\x97\x5e\xbe\xbb\x84\xcf\x3f\x5f\xdd\xbc\xff\x3c\x51\xe3\x30\xf6\x9e\xd2\x7f\xbf\xbe\xbe\xb9\xbc\x7a\x3b\x49\x6f\x63\x57\xf9\x1a\x77\x09\xa5\x34\xac\xb4\xf8\xd3\xfd\x05\x7c\xfe\xe5\xf5\x6f\x53\x94\x16\xa8\x6d\x4e\xeb\x92\xd0\x5a\x33\xbb\xa2\x90\x52\xa0\x33\x12\x76\x8b\x38\x45\xb1\x92\x0b\x91\x62\x2a\x3f\xe8\x54\xc1\x37\x1c\x17\xac\x29\x2d\x08\x03\xff\xf3\xf3\xd5\x9b\xd7\xcf\xb2\xad\x59\xd7\x5a\xd5\xe6\xdb\x29\x51\x29\x4b\xb5\xcd\x83\x8e\x14\xbf\x3a\x21\x68\x85\xc6\xb5\x76\xe7\x7b\x28\x2e\x2d\xa7\xb4\x44\x30\x41\xb5\x90\x16\x35\x23\xfa\x4b\xc5\xdc\xa3\xed\xc9\x41\xad\x55\x55\x4f\x02\xbe\xc6\xdd\xe4\xe5\x5c\xe3\x6e\x2a\x68\x1f\xe5\x8a\x49\xb6\x44\x3e\x08\xbb\xd6\xea\x0f\x2c\x6c\x77\x59\x58\x05\x73\x84\x8a\xe9\x35\x72\x88\x1a\xc6\x2d\x06\x3d\x39\x91\x58\xca\x99\x60\xca\x89\x8c\x6b\x8c\x34\x34\xb2\xa2\x47\x6c\x35\x41\x6d\xcb\xb2\x09\xbd\xdd\xf8\x64\xa7\x47\x10\x1a\xd4\x1b\xd4\x25\x1a\x13\xa3\x3d\x41\xb5\xb1\x5a\x24\x35\xfb\xa5\x6b\x0c\x6a\x3a\x24\x42\x22\x07\xdd\x48\x2b\xaa\x96\x5d\x27\x58\xb0\x3a\x1d\x04\x37\x06\xaa\xb1\x75\x33\x05\xac\xdf\x6e\x1b\xd4\x73\x65\x52\x2a\xc3\xe8\xb8\x52\xc7\x35\x79\x25\x0c\x5d\x47\x8e\x45\xd3\x24\xfa\x7e\x85\x40\x12\xb4\x7b\x0b\xcf\xa4\x74\x4a\x84\x01\xa9\x2c\x78\x55\x8d\x46\x9e\xfd\x3e\x14\x91\x13\x8b\xb5\x18\xb8\x60\xc8\x22\xdd\x04\x24\xf2\x75\x76\xc6\x36\x22\x59\x6a\x65\xce\x33\x15\x5c\x19\xca\x86\x4f\xfd\xf9\xb4\xdf\x67\xf4\xfb\x70\xb8\x9d\xc1\x42\xab\x0a\xf6\xfb\xcc\xa8\x46\x17\x78\x38\x4c\xb2\xe9\x17\x6c\xcc\x26\x89\xc5\xb5\x32\x68\xcf\xb3\xd5\x86\x67\xcc\xda\x51\x1c\xc9\xc5\xf6\x2f\xce\xf7\xb3\x16\xcb\x6d\xce\x5c\x21\x90\x5b\xb5\x46\x39\xea\x32\xcd\x00\x3f\x03\xdc\x8c\xf3\x9c\x6f\x64\xc5\xb4\x59\xb1\x32\x2f\x55\xc1\xca\x84\xc5\x0f\x51\x0a\xae\x6a\x94\x1f\x5d\x0a\x13\x48\xc2\x78\x7b\x6e\x36\x6c\x58\xd9\xa0\x99\x68\x50\xa2\xdd\x2a\xbd\x3e\xdb\xa4\xbb\x24\x25\x5a\x60\x96\xdc\x6d\x74\x39\xe2\x6b\x77\x5f\xe7\x05\x93\x05\x96\x65\xf2\x3e\xbb\xfa\x25\x83\x1f\xbc\x0c\xe5\xb1\xdd\xcc\xa9\x06\x16\x4c\xa4\xb5\xbf\xea\x12\x07\x2e\x78\x38\x8b\x55\x5d\xa2\x45\x30\x0d\x2d\xe9\xa2\x29\xcb\x5d\x06\xd7\x8d\x84\xcf\x6d\x46\xdb\x16\x2f\x9f\xe9\x26\xd0\x58\x29\x4a\x0f\x98\xb6\x82\x95\xe5\xae\x2b\x06\x98\x31\x68\x87\x57\xa1\x87\xd4\x57\x16\xb9\xb1\xcc\x36\xa9\x1c\xea\xe9\xd3\xa7\x4f\x2f\x2e\x2e\x2e\x7a\x6b\xd1\xf3\xe1\xc6\x4d\x05\x12\x20\xc1\x49\x56\x5d\x4d\x8c\x7c\x4a\x88\x62\x68\x38\x84\x42\xda\x07\x67\x78\x93\x9d\xbf\xd6\xfd\xb9\xd3\x8d\x0c\xae\xf7\x87\x9e\xe4\xf0\x8a\x4f\xb6\x37\x16\xbf\x23\x93\x67\x44\xb0\x50\x55\xc5\x24\xcf\x5d\x1d\xe7\xb2\x4a\x62\xb9\x9c\xd9\x9c\x32\x91\x84\xd1\xfd\x3e\x2b\x2a\x7e\x38\x84\xea\x6f\xbf\xcf\x68\xa2\xdd\xd5\x78\x38\x38\xa6\xa4\xb9\x87\xc3\x6d\x96\x0d\xda\x76\xe9\xe3\x2e\x8f\xfb\x79\xa4\x7f\xb2\xdf\x53\x32\x1b\x0c\x10\xc8\xc3\xe1\x16\x56\x2c\x54\xc8\x7d\x87\xdb\x13\x32\xdd\x7a\xba\xe1\xf2\x2a\x8e\xc3\xbd\x00\xb2\x6c\xa0\xd8\x0d\x26\xe2\x82\xfe\x95\x2e\x76\x3a\xa7\x38\x19\xa5\xd3\x6e\x7e\xe8\x24\xee\x75\x74\xd0\x4f\x8e\x35\x4a\x8e\xb2\x78\x48\x38\xbb\x49\xe7\xdb\xe9\x8e\x48\x32\xa6\xaf\xee\x35\xf3\x35\x1b\xe7\x7e\x14\x44\x0c\x8d\x4e\xe5\x65\x3d\x9a\x53\x8b\x84\xeb\xff\xc5\x3b\x22\xfa\xf3\xb0\x7d\xf2\x75\x2b\x78\x97\xe6\xfe\x9a\x35\x9c\x78\x32\x52\x48\x86\xd7\xf1\x88\x6e\xcf\x5c\xc9\x21\x54\xa1\x76\x3e\xf7\xce\x71\x88\xfc\x0d\xd0\xd6\xe6\x43\x58\x80\x37\x9a\x56\x32\x98\xed\xe7\x3f\x7f\xdf\x7e\x8b\x3e\x2e\x54\x23\x79\x1e\xf0\x06\xa6\x4a\x6e\x80\x12\x6d\x92\x83\xb7\x2b\x51\xac\x60\xeb\x1a\xcf\x84\x8b\xfb\xbc\xd1\xae\x10\x8a\x46\x6b\x0a\x4c\x74\x30\xb6\x13\xdc\x25\xe5\x7f\x93\x06\x66\x9c\x2f\x14\xbf\xc9\x69\x81\xef\xd7\x8c\x54\x7e\xbf\xcb\x77\x25\x32\xe3\xba\x3b\x1b\xc1\xd1\x81\x22\x79\xc2\x0e\x0b\xa5\xbb\x4c\xeb\x05\x8c\xdb\x1a\xac\x6b\xef\xd8\x62\xf2\xb4\xce\x75\x05\xc4\x04\x43\xa1\xb3\x9a\x58\x0c\x05\x3b\xd5\x80\x46\xb7\xf2\x5b\x26\x6d\xd7\x24\x03\xbb\x12\xe6\x1f\xf0\xcd\xee\xd9\xdb\x6f\x27\xd8\x19\x2b\x67\xef\xba\xd4\xab\xca\x3e\xc5\xa6\xa2\xab\x46\xa8\x2c\x5a\x36\x68\xec\xed\x04\xbb\x71\x91\x1f\xe4\x61\xfb\xa4\x30\xd1\xc7\x00\x2f\x0f\xbd\xf2\x54\x8f\xdb\x8f\x3a\xbf\xa0\xd7\x26\xd5\xe8\x5a\x40\x7c\x06\xac\xec\xd7\x46\xed\xb9\x26\x38\xba\x9d\x11\x8c\x00\xd3\xd8\x1e\xc6\x67\x1d\x15\x02\x17\x1a\x0b\x1b\xe8\x51\xfb\x76\xfe\xd8\xdb\xc1\xeb\xeb\xeb\xab\xeb\x9b\x04\xee\x8b\xd3\x3f\xe0\xc5\xe1\xce\xc0\xc5\xc5\x40\x7e\xa2\xf5\x31\x13\xaf\xa5\xda\xca\x9c\x52\xc9\xf1\xbb\x80\xa4\x28\x54\x61\x56\x06\xdd\xa3\x00\x28\x59\xee\xc0\x34\xb5\x7f\xe1\x7a\xe6\xba\xf1\x99\xd9\x19\x8b\x15\xcc\x85\xe4\x42\x2e\x0d\x28\x0d\x4b\x61\x57\xcd\x3c\x2b\x54\xd5\xbe\x69\x0c\x27\x54\x5a\xc7\xa4\xaa\xd0\xc8\x6c\x0a\xa6\x7b\x71\x04\x27\x72\xc4\x5b\x5b\x61\x57\xe0\x9e\x2a\xa1\x42\x63\xd8\x12\x5f\xd0\x20\x6a\x7d\x38\xb8\xe7\x27\x3f\x56\x28\xee\x07\xe8\xc7\x48\xb9\xdb\x83\xe4\xc9\x74\x10\x12\xbf\x43\xa5\x7f\x13\xa4\x05\x22\xcf\x85\xdc\xa8\x75\x0a\xd0\x8f\xee\x5e\xa3\xa3\xe5\xc5\x1c\x39\xd2\x34\xd8\xae\xdc\xa3\x57\x40\x6a\xfd\x83\x63\x18\xfa\x7b\xd0\xae\x71\xd7\x36\xd9\xa8\x20\x62\x56\xe9\xa1\x06\x62\x2b\xe3\xfa\x51\x9f\x62\x30\x6f\x69\x3f\x06\x3d\xa3\x36\x63\x17\x3a\x97\xca\xfa\xdb\x30\x61\xf0\x4d\xbf\x5d\xed\x2e\x73\x27\x0d\x8c\xce\xbd\x5d\x1d\x95\x5c\x63\x46\x5d\x79\x57\x09\x53\x31\x5b\xa4\xea\x3b\x72\xb0\xdd\x1e\x34\x81\x3b\x13\x3c\x5e\xb8\x42\x9e\xbe\x89\xf8\xf1\x80\x01\xb8\x42\xdf\x79\x74\x46\xdc\xb2\x3a\x7a\x23\xa1\xaa\xa7\xe4\xa8\x0d\xef\x47\xa3\x1b\xc3\x4e\x84\x06\x11\x6d\x2f\x56\x8a\x54\xd8\x2e\xfd\x28\x1d\xf3\xb0\x24\x6d\xc7\x9b\x6c\x85\xdf\x84\xa5\x7b\x4f\x3d\x42\xa5\xb4\xc3\xce\xdc\xcb\xb7\x9b\xe3\x7f\x4e\x89\x73\x84\x38\x12\xea\xeb\x87\x00\x3a\x89\xab\x3b\x0a\x1e\xd1\x13\x03\xbe\x0d\xe8\x43\x89\x5f\x2c\x4a\x13\x41\xe3\x17\x97\xe4\x90\x3b\x5f\xe3\x8a\xc9\x97\x98\xca\x73\xba\xa3\xbc\x44\xff\x62\x1b\xb8\xb7\x7b\x65\x08\xdd\xbc\xee\x26\xa3\xfb\x4d\x14\xbd\xe3\x3b\x39\xa6\x1e\x7a\xee\x3d\x76\xa7\xa7\xb5\x96\xc0\x77\xe4\xb0\x2b\x1c\x28\x8c\x5d\x94\x99\xdc\xb5\x7b\x83\x48\xa4\xb7\xec\xa3\x71\x0d\x5d\xf6\x16\xc2\xa8\x1b\x8d\x2e\x1f\xbe\x73\x7d\xe7\x33\xf4\x58\x3e\x5c\xff\xea\x10\xb8\x5e\xa8\x3b\x4a\x9f\x8e\x9a\x30\xb7\xfe\x19\x7e\x0a\x90\x8a\x95\x0b\xa5\xab\x64\xe4\xde\xc4\xf1\x21\x04\x19\xbc\xd7\x3b\x60\x4b\x26\xe4\x58\xcf\x47\xeb\xfc\x0f\xa3\x64\x4b\xb6\x45\xc5\x07\x1e\xbc\xff\x75\x73\xf5\x16\x84\xac\x1b\x0b\x9c\x59\x06\x6f\x42\x34\x9e\x14\x15\x7f\x42\xd4\x3b\x6c\x89\xd5\xa2\x35\xb4\xc5\x79\xd8\x38\xa9\x8f\x1f\xee\x39\x1b\x71\x71\x19\x6c\x71\x1e\x76\xc4\xcc\xbd\x7d\x38\xb1\x5a\x90\x4c\xc1\xa4\xcf\x37\xe6\xe8\x6f\x7c\xe4\xa1\x33\xd6\x4d\xca\x20\x64\xb2\x4d\xcd\x99\xc5\x13\xea\xb3\x0a\x0a\x25\x37\xa8\xed\x89\x79\xab\xfa\x3a\xc6\x02\xdb\x77\xf7\x2c\x57\xe3\x66\x73\x27\xf5\x08\xe2\x24\xa7\xe7\xcc\x20\x07\x25\xfb\xc7\xe7\xae\xaa\xd1\x50\x08\x59\x94\x0d\xc7\x13\x78\xcc\x1c\xad\xc2\x78\x30\x3c\x49\x0c\x1f\xb4\x54\x20\xc2\xac\x0c\x2e\xad\x6f\x33\x28\xbb\x72\x39\x85\x63\x87\x45\x23\x03\x37\x44\x02\x99\xf9\x58\x28\x89\xe1\xe5\xbd\x22\x2d\xf8\xa5\xc6\x62\x0a\x23\x04\xac\x71\xed\x22\xcf\x11\xc1\xe7\x64\xf5\x2b\xd1\x3b\xe0\x1d\xd9\x91\x5a\xd5\xd8\x3e\xe9\x65\xf0\xb1\xbb\x4c\x22\xe5\xd1\xb4\x59\x4b\x8b\xb4\x3d\x62\xd2\x33\x72\x3d\x07\x77\x62\x98\x72\x2a\xcb\x2d\xe6\x5c\xe8\x49\x64\x7d\xaf\x5b\xe4\x47\x1b\xf7\x5a\x09\xe9\x53\x43\xdf\x8b\xb0\x18\x0a\x1c\x4a\xc8\x3a\x5a\x9a\x81\x69\x8a\xe8\x95\x71\xb5\xd1\x31\x53\x0f\xbb\x51\x30\x69\x73\xc3\x36\x98\x73\x55\xac\x31\xf5\x71\xe1\x0f\x4c\x3a\xad\x6c\x83\xf0\xca\x09\x82\xa8\x5c\x21\x31\x92\x20\x8b\x12\x73\x56\x6a\x64\x7c\x97\xe3\x17\x61\x92\x9f\xb6\xfc\x48\x07\x23\x48\x82\x97\x4c\xe8\xfe\xf8\xf2\xfa\xed\xe5\xdb\x9f\xa6\x17\x6d\x71\xc2\xc3\xca\xb6\x2d\xd3\xb2\x7d\x3a\xd0\x68\x93\xa9\xf2\x35\x8d\xd1\x42\x7d\x8a\x6f\x06\xb7\xc0\x16\x16\xb5\x4f\xd3\x5f\xf8\x7b\x94\x2e\xff\xdb\xa1\x33\x12\xec\xb9\x37\xd4\x07\xdf\x9c\xfd\x0f\x91\x7a\x99\x32\x70\xb4\xe3\xa7\xd3\x59\xa6\xe2\x80\x63\xad\xb1\x20\x9a\xcb\x35\xd6\x25\x2b\x92\xdb\x97\xb2\x67\xb2\xa3\x4a\x1e\x6a\x02\xf7\x64\xed\x59\xf1\xf8\xad\x64\x2b\xca\x12\x8c\x52\x92\x58\xb4\xb3\x30\x83\x3a\x30\xa4\xf1\x45\x91\xeb\x76\xe1\xf6\x48\x9d\xb1\xc8\x26\x62\x0f\x91\x38\xa7\x9c\x31\x2b\xd5\x94\x9c\xe0\x19\xb4\x19\x7c\x30\xbe\xf1\xdb\x6f\xbc\x90\xb4\xfb\x35\xfe\xe2\xd3\x22\x72\xf2\x23\x4b\x49\xb8\xbc\x05\xca\x5c\xef\x96\x59\x74\xe8\x3c\xcf\x3d\xc0\xa4\xe3\x1f\xb6\x19\x5c\xbc\x31\xa3\x6e\x7e\x5c\xd0\xd8\x61\x8c\x5f\x28\xf6\x3f\x4d\x1c\x07\x56\x8a\x4a\xd8\x5c\x2c\xa5\xd2\x49\x48\x71\x4b\x07\x72\x76\x53\x1c\x2a\xf7\xeb\xb4\x94\x22\xfa\xf7\xea\xa6\x5a\x2f\x56\x4c\x2e\x91\xcd\x93\x1f\x94\xfd\xda\x5a\x6c\x6b\x37\x13\xfd\x2e\x77\xbe\xb9\xdc\xea\xc8\xe0\x92\xcc\x53\xfd\x3b\x61\x2f\x38\x04\x26\x2f\xd5\x32\x37\xe2\xcf\x14\x80\x52\x2d\x6f\xc4\x9f\xee\x6a\xf5\x13\x8e\x3c\xee\xb6\x28\x93\xee\x63\x81\x25\x6a\x98\xa3\xdd\x22\x4a\x78\xee\x2e\xec\xef\x9e\x4f\x86\x52\x61\xa5\xf4\x6e\x08\x8d\x97\x38\x17\xd0\x77\xdf\xff\xbf\x83\xf4\x7f\xdf\x7d\x3f\x19\x13\xdd\xbf\xaa\x49\xd5\x5e\x61\xf4\x2c\x30\xcf\x7d\x7c\xfe\xf7\x39\xfd\x19\xc7\xe3\xda\x68\x79\xad\x55\x8d\xda\x0a\x4c\xdd\x57\x91\x01\x7b\x7c\xe5\xbb\xf3\x56\x0b\x6c\xfb\xf3\xbe\x27\xd7\x29\x8b\x7d\xfc\xfb\x39\x31\x52\x22\x57\x6e\xc3\x11\x33\x0a\x0b\xaa\xb1\x46\x70\xb7\x10\xef\x35\xdb\x08\x03\xf3\x46\x94\x7c\xb8\x87\xe7\x5c\xf1\x74\xa0\x69\xdb\x4e\xa2\x82\x76\xf7\x1f\x11\x82\x3c\x21\xf4\x10\x6d\xd7\x99\xdc\xef\xb3\xf0\xb7\x31\xdc\xfb\x7d\x56\x09\x19\xfa\x54\xf4\x3f\xac\x18\xa9\x7a\x1d\xd4\x98\x0e\xfa\x43\x96\xa2\x89\xd8\x49\x08\x52\x94\x1a\x9d\x34\x15\xee\x49\xcf\x93\x7d\x83\xb3\x9a\x05\x0e\x6d\x68\x45\xba\x3e\xd3\x60\x56\x73\xa7\xcb\x74\x44\x31\x27\xe9\x4e\xac\x19\x0c\x96\x58\x50\xea\xaa\xec\x0a\x7d\x0b\x7b\x1c\x52\xec\xec\x8e\x36\xda\xc2\x55\x78\xd2\x94\x8a\x09\x43\xa1\xa4\x65\xee\xc3\x49\xa9\xa6\x75\x8b\x9d\xf5\xde\x4b\x9e\x0b\xca\x14\x10\xf7\xbe\x73\x85\x1b\xe7\xb4\xf5\xb6\x0d\xdd\x0c\xdf\x13\x0c\x42\xc7\x15\xd7\x78\x84\x7a\x5f\xe2\xe6\x6a\x83\x5a\x0b\xce\x31\x55\x3e\x12\xc2\xfe\x87\xb9\xdd\x4b\x6c\x37\x35\xe6\x0a\xfd\x87\xb6\xa9\x0b\x95\x0b\x93\xd7\xcd\xbc\x14\xc5\x40\x3b\x27\xc8\xc6\xca\xd5\x7f\x7b\xcc\x0c\xf8\x89\x77\xda\x8b\x33\xa2\x0b\xc7\x2d\x73\x84\x8d\x30\x62\x5e\xfa\x62\x8e\x0a\x59\x62\x47\xf7\x84\x4c\x45\xec\x8e\x0a\x23\x25\x13\xdf\xf2\xbe\x7a\xfd\xcf\x0f\x3f\x4d\x4e\xaf\x9d\xf4\xc3\x72\x6b\x3e\x5f\xe6\x06\x99\x2e\x56\x54\x0a\xc6\x85\x69\xcb\x9b\xd4\xbf\x2e\x8a\x33\xda\x85\x39\x2e\x88\xe2\x1e\xa6\x73\xdd\x11\xd8\xc8\x15\x4d\x50\x4e\x77\xef\x5f\xbd\x73\xcf\xdc\xb5\x04\xad\x3d\xd6\xfe\x25\x79\xe0\xdf\xb5\xbc\xba\xa7\x5b\x1d\x22\xf2\x02\x7e\x74\x08\xba\x7f\xd1\xe2\x1e\xc8\x48\xd9\x43\x01\x0c\x7f\xd9\xfd\x70\x0c\xfd\xc7\xea\xf8\x71\x45\x80\xf4\xe8\xf6\xd1\x7f\x02\x00\x00\xff\xff\xd9\xcc\x87\x67\x0c\x37\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 14092, mode: os.FileMode(438), modTime: time.Unix(1520952786, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(438), modTime: time.Unix(1517928990, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(438), modTime: time.Unix(1517928990, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(438), modTime: time.Unix(1517928990, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(438), modTime: time.Unix(1517928990, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(438), modTime: time.Unix(1517928990, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(438), modTime: time.Unix(1517928990, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(438), modTime: time.Unix(1517928990, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(438), modTime: time.Unix(1517928990, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json":   wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json":   wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json":   wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json":   wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json":   wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json":   wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json":   wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json":   wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json":   &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json":   &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json":   &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json":   &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json":   &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json":   &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json":   &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json":   &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
