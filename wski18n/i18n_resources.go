// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x6d\x6f\xe3\xb8\x11\xfe\x9e\x5f\x31\xd8\x2f\x69\x81\xc0\xdd\xbd\xa2\x40\xb1\x40\x51\x04\xdd\xdc\x35\xbd\xdb\x64\x91\xe4\x6e\x71\xb8\x1e\x14\x5a\x1a\x49\x3c\x53\xa4\x40\x52\xf6\xfa\x0c\xff\xf7\x82\xa4\x64\xcb\x5e\x51\x6f\x7e\x49\x70\xe8\x7e\x52\x2c\xce\xf3\xcc\x0c\xc9\xe1\x0c\x35\xfb\xcb\x05\xc0\xea\x02\x00\xe0\x0d\x8d\xde\xbc\x87\x37\x99\x4a\x82\x5c\x62\x4c\xbf\x04\x28\xa5\x90\x6f\xae\xdc\x5b\x2d\x09\x57\x8c\x68\x2a\xb8\x19\x76\x63\xdf\x5d\x00\xac\xaf\x5a\x10\x16\x44\x72\xca\x13\x0f\xc6\xe7\xf2\x6d\x17\x8a\x2a\xc2\x10\x95\xf2\xa0\x3c\x96\x6f\xbb\x50\x28\x8f\x85\x07\xe2\xd6\xbc\xf2\xca\xff\xa6\x04\x0f\x32\xaa\x14\xe5\x49\x10\x66\x51\x30\xc3\xa5\x07\xe8\x3f\x8f\xf7\x77\x40\x79\x5e\x68\x88\x88\x26\xf0\xd1\x49\xc1\x65\x98\x45\x97\x60\xe4\xbc\x2c\x06\x38\x66\x24\x09\x38\xc9\x50\xe5\x24\x44\x0f\xc7\xf6\x7d\x37\x16\x29\x74\xda\xa2\xae\x79\x2d\x24\xfd\xdd\xfe\x00\xcf\xdf\xdf\xfc\xfc\xdc\x07\x34\xa7\x41\x2a\x94\xf6\x80\x2e\x52\xaa\x66\x70\xfd\xe9\x16\x9e\xff\x7d\xff\xf8\xd4\x17\x71\x8e\x52\x19\x84\x4e\xd0\x9f\x6e\x1e\x1e\x6f\xef\xef\xfa\xe0\xce\x70\x19\xc4\x94\xf9\x3c\x99\x13\x9d\x82\x88\x41\xa7\x08\x93\x19\x2e\xc1\x8e\xed\x86\x0d\x51\xea\xde\xb8\x66\x70\x07\x70\x46\x38\x8d\x51\xe9\x80\x0b\x1d\xc4\xa2\xe0\x91\x07\xf8\x63\x39\xd0\xe2\x01\x17\x1a\xec\x68\x20\x1a\x2c\xe7\x2f\xab\xd5\xc4\x3c\xac\xd7\xbf\x4e\xfe\xcb\xfd\x84\x85\x5d\xca\x1b\xda\x08\x73\x26\x7c\x6b\xe4\x47\xbb\x80\x6b\xc8\x10\x0b\x09\x4e\x24\x43\xae\x87\x10\x15\x7c\x04\x55\x25\xd4\x49\x26\x0b\xae\x69\x86\x66\xab\x66\x44\x87\xa9\x87\xe5\xc1\x0d\xb3\x3c\xa5\x88\xa1\x52\x39\x86\x34\xa6\x18\x01\xe5\x50\x69\x0c\x91\x40\x65\x1d\x6d\x11\x61\x41\x75\x0a\x24\xb4\xdb\x45\x89\x42\x86\xe8\xa6\x02\xbf\x68\xe4\x66\xf9\x5a\x54\xfc\xa2\x2b\xe5\xcb\xb1\xe6\x57\xf7\xd8\x35\x35\x95\x11\x61\x4a\x78\x82\xbe\x85\x50\xd9\x50\x8e\x02\x2d\xf6\xcd\x99\x12\x85\x11\x08\x6e\x17\x61\xab\xc6\x07\xa9\x59\x70\x55\xe4\xb9\x90\xba\x53\xd5\x5e\xee\xa6\xce\xd9\x1b\x4c\xab\x5c\xcd\x82\xfe\x0a\xba\x51\x01\xa3\x19\xd5\x01\x4d\xb8\x90\x5e\x0d\x6f\xf9\x9c\x30\x1a\x55\x1c\x56\xc4\x32\xd9\x27\xa3\xec\x9e\x8a\x25\x5c\x2b\x7f\x28\x78\x4c\x93\xcd\xb1\x61\x22\xad\x3f\x0e\x3f\x19\x0b\x0b\x9d\x22\xd7\x34\x74\xc1\xd8\x84\xa3\xd2\x1b\x0e\xaa\x18\xca\x98\xd3\x96\x20\x6d\x18\x4d\x34\x35\x43\x0e\xe3\xe9\x3a\xae\x0c\xd3\x66\xcc\x38\xaa\xd2\x94\xb6\x13\x7c\xdf\x9e\xd5\x6a\x62\x1e\xd7\xeb\x2b\x88\xa5\xc8\xcc\xdf\x6e\xf5\xaf\xd7\xbd\x18\xdd\x74\x75\x31\x9a\x61\xd5\x4c\x29\xd4\xe3\xb8\x36\xce\xe9\x62\xdb\xf1\xe2\x6a\x35\xd9\xfc\x3d\xd8\x4a\x94\x32\x48\x50\x57\xbb\xd8\x97\x59\x7d\x4b\x28\x73\xc1\x25\x41\x6d\xb7\xe1\x76\x63\x56\xa2\x8e\xf8\x3e\x47\xfe\xd9\x1e\xd1\x0a\xe5\x9c\x86\xf8\xde\xe8\x82\x52\xd6\x15\x69\x3c\x20\x78\x46\xa4\x4a\x09\x63\x01\x13\x21\x61\xbe\x93\xa1\x1a\x56\x63\x32\xde\x72\xec\x56\x12\xe6\x84\x15\xa8\xda\x8f\xa3\x2d\x1b\x47\xbd\x10\x72\x36\x8a\x8f\x72\x8d\x92\x63\xfb\x69\xb4\x3d\xb4\x82\x5c\x8a\x2c\xf7\xed\xc4\x0f\x02\x96\xa2\x00\x89\x84\xb1\x25\x2c\x08\xd7\xc6\xe1\x4e\x1a\x74\x4a\xd5\x3f\xe1\x4f\xcb\xbf\xdc\xfd\xf9\x3d\xf4\xe2\xb2\xb9\x32\x46\xde\x60\xf7\x61\x33\x14\x42\x91\xe5\x0c\xcd\x64\x96\x09\x76\x5c\x30\xb6\xec\x6b\x54\x6c\x17\x47\x37\x4b\x44\xa3\x72\xcb\x3b\x36\x43\xb6\xe1\x82\x87\x82\xc3\xf3\x42\xcd\x4a\x7b\xab\xb3\xfe\xd9\xf8\x40\x62\x26\xe6\x08\x39\x91\x9a\x5a\xe7\xb8\x77\x18\x01\x51\x0a\x75\xfb\x54\xd7\x34\x0d\x09\x0f\x91\xf9\x95\xbd\xff\x7e\x02\xff\x72\x63\x4c\xfe\xd1\x33\xdb\x30\xa5\x8d\x4d\x30\x23\xcc\x25\x86\x44\x63\x14\x48\xcc\x19\x09\xbd\x44\x66\x13\x9b\x73\x45\xb0\x68\x86\x4b\x73\xb0\xd8\xd8\xe1\xce\xe8\xd5\x6a\x62\x0e\x66\xbd\xcc\x71\xbd\x76\x67\xf4\x82\x32\x06\x4a\x08\x0e\x53\x84\x2d\xcd\x15\xe4\x0c\x89\x42\x28\x14\x5a\x51\x83\xc9\x71\xb1\x83\xa9\x34\x12\x7f\x70\x7d\xbc\xf9\x74\xfd\x70\xfd\x74\xff\xe0\xd1\xf4\x1f\x8d\xff\xe0\x86\x6b\x49\x51\xc1\x14\x99\x58\xd8\xc5\x09\x8c\x72\x04\x82\xd2\xce\xf1\x1c\xa5\x3b\xd3\x9b\xe5\x77\xfe\x35\x2b\xf6\x9d\xd0\x60\xcb\x4e\x08\x25\x12\x6d\xe6\x23\x27\xe1\x8c\x24\xe8\x72\x2f\xf7\x2e\x43\xa5\x48\x52\x0b\x32\x40\x78\x54\xc9\x89\xc8\xbd\x30\x0f\x2e\xfc\x34\xdb\x78\x12\xaa\xbe\x46\x95\xb9\xc6\x1f\xcb\xa6\x9c\x9e\xc3\xa0\xc3\x68\xfa\x1a\x23\x0b\x76\x96\x25\x77\x20\x4f\x87\x39\x0a\xb5\x65\xb1\x67\xb7\x26\xba\x50\xa6\x2e\x3d\xb1\x6d\x27\x21\xed\x3b\x6f\x5a\xd2\x24\x41\x79\x8e\xa9\x3b\x9c\x6a\xa8\x51\x31\x62\x74\x4e\xcb\x0e\xe4\x1b\x1a\xe1\xa7\x94\x47\xe6\xef\x33\x46\xc5\xc3\x29\x1b\x8d\xac\xe5\x3f\x22\x36\x47\x37\xf2\x08\x79\xb8\x34\xa2\x11\xe6\x77\xc4\x14\xc1\x27\x4e\x8d\x3a\x33\xb3\x17\xd3\xac\xc5\x65\xb5\xb3\xd1\x24\x4a\x85\xce\x0b\xbd\x5e\xc3\x64\x32\x69\xb5\xa7\x45\xac\x83\xcc\x86\xa5\xa1\x54\x8d\x42\x1d\x44\x3b\x7b\x6a\x28\x61\xab\x70\x07\x71\xb5\xd4\x87\x72\xfa\xe4\x7a\xd2\x55\x3b\x6b\x2c\xad\x4f\xbe\x83\x7e\x77\x45\x0f\x62\x6e\x11\x6d\x24\xdd\xd6\x0d\x46\x7a\xff\x9a\xb2\xab\xd6\x68\x92\x69\xa4\xf9\xb1\x36\xa8\x7d\x63\x7a\x59\x07\x41\x74\x05\x34\xb7\xc3\xbf\x2e\x1a\x3b\xe3\x8d\x4f\xf0\xf5\x5a\x5d\x21\x7c\xbd\x3a\xb6\xa1\xd2\xbf\xb2\xfa\x4a\x77\xdb\x3f\x36\x52\xf7\x73\xcd\x01\xe8\x1d\x27\x7c\x84\x0c\xcf\x53\xee\x1c\x8f\xa9\xaf\x49\x27\x4e\xa2\x8f\xc5\xf3\xff\x02\x61\xcf\x9f\xa7\x2f\x10\x8e\x48\x35\xd4\xa8\x13\x17\x08\xc7\xe6\xeb\x6b\xde\xe9\xaf\x80\x8e\x48\xd5\x68\xd4\xe7\xeb\x87\xbb\xdb\xbb\xef\xde\xc3\x53\x8a\x70\xe9\x2e\xe9\x2f\xe1\xe7\xeb\x8f\x3f\x6c\xee\x00\x4b\x97\x22\xd7\x54\xdb\x2f\x0a\xdb\x1b\xbf\x09\x7c\xda\xde\xf8\x5d\x1a\xa7\x5f\x56\x57\x7c\x40\xcc\x40\x15\x4a\x3a\x75\xdf\xd2\xca\x0f\x6b\xee\x33\x52\x4b\x21\xf0\x92\x1a\xf5\x9d\xf7\x2a\x07\x3c\xe3\xfc\x1f\x8f\xd2\x97\x47\x35\xe5\x98\x29\x51\x30\x45\xe4\x3b\xb9\xd1\xa6\x74\x6a\xcd\xae\xc6\xc1\x35\x2a\xf7\xa9\x25\xf5\x1e\xab\xe1\x61\x98\xad\x6a\x1e\x53\xbd\x23\xa8\xf5\x54\x6e\x97\x63\xa8\x35\x0e\xab\x55\xad\xaf\x4a\xc7\x43\x75\x1b\x01\xd8\xa8\xe0\xc3\x7e\x31\x3d\x56\xb1\x11\x40\x8d\x0a\x5d\x7f\x7d\x91\x30\x56\xa5\x51\x50\x3d\x02\xc7\x36\x43\x6f\x86\xab\x0a\xcb\xfe\xb1\x63\x18\x62\xd7\x06\x28\x8f\x8e\x3a\x5a\x59\xfd\xf5\x5a\xf3\xed\xe2\xad\xab\xc8\x64\x91\x83\x68\x7b\x08\x76\xac\x92\xaa\x21\x65\x00\x69\x4f\xe1\x46\xe2\xed\x57\x79\xca\xe7\x62\xe6\x3e\x01\xba\x44\x2c\x45\x7e\xa6\x9c\xf0\xcc\x4a\xb4\xe7\x54\x1f\x09\x8f\x88\x16\x72\x09\x31\x45\x16\x41\x15\xd4\x7f\x72\x2d\x85\x90\x15\x4a\xc3\x14\x4d\xdd\xd1\x23\x1f\x1a\x88\xd6\xae\xda\xbe\x70\xd5\xe0\x44\xe6\x2e\x37\x32\x6e\x0b\x0b\x29\x4d\x1d\xbe\xbd\x51\x2d\x7b\x21\x7b\x28\x7b\x30\xfe\x38\xcf\xfe\x40\x43\xe4\x0a\x8f\xe4\x59\x0f\x5a\x3f\xcf\x56\xc2\xa7\xf2\xec\x68\xfc\x76\xf5\x2b\x58\xdb\x66\x66\x1f\x6f\x3f\xac\xd7\x15\x0b\x01\xd7\x92\x26\x38\xf6\x50\x75\x10\x56\x73\x43\x03\x66\x42\x2e\x1f\xe9\xef\x68\x2a\x71\xdb\xf7\xa6\x76\xba\xde\x54\x2a\x0a\x16\x99\xc9\x21\xdc\xf6\xbf\x98\x4d\x3d\x45\xbd\x30\x11\xeb\xdd\x37\x7f\xb7\xdb\xf7\x6f\xef\xbe\xf1\x6b\x7b\x54\x8a\x46\x23\x34\xcd\x50\x14\x7a\x14\xfc\xdb\xb7\x16\xfe\xaf\x6f\xcd\x3f\xbf\x11\x47\xa5\x68\x34\x82\x89\x64\xac\x8f\x1c\xfe\xbb\x16\xf5\x8f\x04\xde\xb5\xb2\x2d\x32\x54\x0d\x94\xdc\xa5\x15\x9b\xd6\xbf\x94\xf0\x84\x4c\x19\x9a\x3a\x51\x0b\xe0\x62\x71\x05\x8b\x94\xda\xee\x5a\xc6\x0c\x7d\xad\xbf\xb2\x73\xe5\x1f\x91\xab\x39\xa9\x29\x1b\xef\xaa\x7e\x6e\x92\xe7\xac\xea\xd1\x34\xc7\x77\x6e\xd3\x26\x77\xcb\x6d\xf6\x1c\xaf\xf5\x0f\xb9\x2e\x1e\xe2\x9a\x49\xb7\x3f\x7f\x4b\x99\x6d\x81\xdd\xeb\x2d\xd6\xbd\x98\xaa\x16\xf0\xb5\x23\xcb\x76\x3a\xc2\x4b\xaa\xea\xc7\x92\xc8\x77\x3f\xfd\x87\x30\xad\x7d\x2d\xd6\x89\x1a\xf4\xef\xd3\x60\x95\x4b\xf1\x1b\x86\xba\xde\x52\xd5\xb1\x28\x4f\x43\xda\xf3\x2b\x81\x6b\xe8\xb3\x57\x36\x14\x55\xeb\x05\x3e\x44\x85\x34\x39\x5a\x46\x38\x49\x30\xaa\x37\xbe\x9d\xe8\xe3\xf3\xab\x55\xb7\x39\xd1\xb6\xff\xb7\xa2\xd6\x7d\x5e\x4f\xd7\x5d\x14\xb1\x77\x62\xce\x06\xdb\x19\x5a\x4f\x0a\xaa\x39\x5c\xad\x26\xe5\x63\xd3\xba\xde\xe0\x4c\xb1\xfe\x45\xb0\x2d\xfa\xbd\xbc\x5e\x1d\xee\xd2\x4d\x95\xdc\xab\x70\xd8\xcb\x69\xd6\xe1\xb2\xda\xc7\xf6\xf2\xf1\xb5\xb8\xec\xe5\x34\x33\x2e\xbb\xf8\xf5\xe2\x7f\x01\x00\x00\xff\xff\xbe\x97\x7b\xbc\xa2\x38\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 14498, mode: os.FileMode(420), modTime: time.Unix(1515454114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

