// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x3c\xfd\x6f\x1b\x37\x96\xbf\xf7\xaf\x78\x28\x16\x68\x0b\xc8\x72\xba\x38\x1c\x16\xc6\xe5\x00\x6f\xe2\x74\xbd\x4d\x6a\xc3\x76\x5a\xf4\x12\x63\x42\xcd\x3c\x49\x5c\xcf\x90\xb3\x24\x47\x8a\x6a\xe8\x7f\x3f\xbc\x47\x72\x66\x24\x6b\x3e\xe4\xa4\xb8\xcb\x2f\x91\x34\xe4\xfb\xe2\xe3\xfb\x1e\x7f\xf8\x06\xe0\xf1\x1b\x00\x80\x6f\x65\xf6\xed\x19\x7c\x5b\xd8\x45\x52\x1a\x9c\xcb\xcf\x09\x1a\xa3\xcd\xb7\x13\xff\xd4\x19\xa1\x6c\x2e\x9c\xd4\x8a\x96\x5d\xf0\xb3\x6f\x00\xb6\x93\x1e\x08\x52\xcd\x75\x07\x80\x4b\x7a\x34\xb4\xdf\x56\x69\x8a\xd6\x76\x80\xb8\x0d\x4f\x87\xa0\xac\x85\x51\x52\x2d\x3a\xa0\xfc\x16\x9e\x76\x42\x49\x8b\x2c\xc9\xd0\xa6\x49\xae\xd5\x22\x31\x58\x6a\xe3\x3a\x60\xdd\xf0\x43\x0b\x5a\x41\x86\x65\xae\x37\x98\x01\x2a\x27\x9d\x44\x0b\xdf\xcb\x29\x4e\x27\x70\x2d\xd2\x07\xb1\x40\x3b\x81\xf3\x94\xf6\xd9\x09\xdc\x19\xb9\x58\xa0\xb1\x13\xb8\xa9\x72\x7a\x82\x2e\x9d\xfe\x00\xc2\xc2\x1a\xf3\x9c\xfe\x37\x98\xa2\x72\xbc\x63\xc5\xd8\x2c\x48\x05\x6e\x89\x60\x4b\x4c\xe5\x5c\x62\x06\x4a\x14\x68\x4b\x91\xe2\x74\x34\x2f\x5a\x77\x71\x72\xb7\x44\xb8\x2a\x51\xfd\xb6\x94\xf6\x01\x5e\x33\x33\x05\x91\x70\xa7\x75\xfe\x51\x7d\x54\x77\x1a\x66\xb8\x90\x0a\xd6\xda\x3c\x48\xb5\x80\xb5\x74\x4b\x58\xdb\x07\xcf\xf8\x04\x4c\xe5\x09\xfc\xae\xfe\xed\x3b\x48\x75\x51\x08\x95\x9d\x11\x80\x8f\xee\x2f\xcd\x72\x86\xb8\x94\x16\xd6\x32\xcf\x83\xec\x5a\xf8\x85\xb5\xe8\x6c\x8b\x57\xa9\xa0\x10\x4a\xce\xd1\xba\xe9\x46\x14\x39\x68\xd3\xfa\xa1\xc8\x3f\xaa\xcb\x39\xa4\x95\x31\x44\x72\x26\x0d\xa6\x4e\x9b\x0d\x64\x1a\xad\x72\xb0\x14\x2b\x04\xa1\x36\xf5\x16\x98\xcb\x1c\x27\x0d\x39\x50\x1a\xa9\x9c\x05\x47\x24\x2d\x31\x2f\xa1\x40\x6b\xc5\x02\xa7\x9e\x50\x84\x42\x5b\xc7\xec\x68\x05\x6b\xb1\xb1\xa0\xe7\x50\x59\x96\x43\x0d\xc4\xe9\xc8\x89\x50\xd9\xa9\x36\x50\xa9\x2e\xce\x84\x41\x16\xca\x8e\x48\x5a\x5f\xe0\xa4\x80\x52\xb8\xe5\xa9\xd3\xa7\x3b\x8c\x8f\x5b\x05\x27\x59\xfd\x20\xab\xcf\xf2\x00\x80\x48\xe1\xe1\x5f\x47\x52\x31\xb8\xbc\x97\x9c\x8f\xea\xbc\x52\x6e\x49\xd7\x26\x65\x75\x3c\xfb\xa8\x1a\xd8\x06\x45\x66\x21\x35\x98\xd1\x02\x91\x5b\x98\x1b\x5d\xc0\x5f\xfe\x71\xf5\xee\xe2\x74\xba\xb6\x0f\xa5\xd1\xa5\x85\xd9\x06\x32\x9c\x8b\x2a\x77\x1f\xd5\xd5\x0a\xcd\xda\x48\x87\xf1\x27\x48\xb5\x9a\xcb\x05\x1f\x3a\x5d\xd5\x57\x6f\x2f\xcf\x3e\x2a\x80\x1d\x49\x9e\x84\x45\xff\xd5\x5a\xfc\xdf\x3d\x02\xb8\x32\x41\x3d\x37\x20\xf2\x1c\xdc\xd2\x60\x0f\x70\x51\xca\x25\x69\xd0\x3f\xae\x6e\xef\xe8\x6b\xe5\x96\xf0\xf3\xc5\xef\x70\x72\x52\xdf\x62\xf8\xe5\xfc\xdd\xc5\xed\xf5\xf9\xab\x8b\x4e\xac\x23\xee\xb9\x5d\x6a\xe3\xfa\x8d\xd6\xb5\xd1\x2b\x99\xa1\x05\x01\xb6\x2a\x0a\x61\x48\xca\xb4\x9e\x74\xfa\x89\xa6\xce\x90\x94\x3c\x5a\xb7\xd3\x78\xd6\x98\xc1\x4c\x58\xcc\x88\xe5\x48\x63\xeb\x6c\xe1\xf7\xf3\x77\x6f\xc7\xd8\xa5\x40\x6f\xb7\x61\x3a\x07\xa7\x75\x0e\x16\x1d\xdd\x2f\xbe\x9b\x41\xaa\x1b\x5d\x19\xd0\x25\xaa\x35\xd3\x5b\x06\x3b\x1b\xae\xa5\xd8\xbd\xec\xe3\x69\x59\xa1\xb1\x84\xbb\x4b\x78\x52\x39\xb6\x73\x61\x1d\xa8\xaa\x98\xa1\x21\xd9\xd5\x07\x3e\x1a\x97\xdd\xa8\xb4\x9f\x6f\xa7\x81\x16\x79\x66\x9b\xc3\xa9\x99\x9d\xa1\x5b\x23\x2a\x48\x73\x49\x62\x17\x2a\x03\x8b\x66\x85\x66\xb4\x53\x18\x4f\x43\xeb\x78\x09\x4f\x54\x05\xfe\x61\x47\x75\xba\x8f\x82\xf6\xe9\x92\xe0\x8b\xbc\x0d\x8f\x8e\x28\x2e\x67\xd5\x21\xbb\xf0\x5a\xce\xe7\xc8\x16\x3d\x5a\x5c\x53\x29\xf2\xdd\x4c\xce\xd9\xae\x11\xa2\x9f\x9e\xfe\x32\xd2\x82\xf5\x2e\x6d\x5b\xaf\xe7\xc3\x38\x29\x8d\xfe\x17\xa6\x8e\xee\x3b\x5c\xdf\x5c\xfd\xf3\xe2\xd5\xdd\x68\x3d\x89\xa2\xee\x38\xa7\xf7\x9d\x7e\x86\x8d\xa5\x57\x88\xb1\xfa\x30\x16\x97\xc1\x42\xaf\xd0\x3e\xc5\xb9\x5e\xca\x74\x09\x6b\x34\xd8\x04\x45\x4c\x07\xdd\x9a\x1d\x4d\xd8\xb7\x17\x3b\x71\x46\x86\x39\x3a\x3a\xec\xc3\x4c\xed\x00\xf3\xee\xdc\x54\xea\xec\xff\x9d\x7b\x3b\x0c\xe9\x90\x36\xc0\xf7\x5a\xe5\x1b\x8e\xaf\x2c\xcc\xb5\x69\x89\x87\xa3\x3f\x56\xb0\x42\x67\xf8\xc3\x68\xbd\xc1\xcf\x3d\x7e\xe0\x82\x1f\x42\xa0\x64\x47\xb8\xb5\xc8\xc7\x2a\xcd\x08\x44\x96\x8e\x4b\x2c\x30\xeb\xc7\x48\xd6\x66\x47\x49\xe6\x95\xe2\xb8\xd9\xdb\x88\x8e\x78\x8c\x76\x51\x00\xea\xe9\xd8\xd3\x02\xff\x63\x87\xd0\x5b\x87\xea\xd7\x61\x76\x72\x84\xd3\x9d\xe7\x62\x91\x88\x52\x26\xe4\xde\x3b\xf8\xf7\xfe\xe9\xfc\xfa\x12\x3e\x91\xff\xff\x34\x12\x62\xbf\x23\x6a\x01\xfd\xf5\xe2\xe6\xf6\xf2\xea\x97\x51\x70\x2b\xb7\x4c\x1e\xb0\xeb\x72\xd3\x63\x6d\xe4\x1f\xfc\x03\x7c\xfa\xf9\xe2\xf7\x31\x40\x53\x34\x2e\xa1\xd3\xe9\x80\x4a\xf2\x25\xeb\x4d\x57\x76\x4a\x8b\xf9\x28\xc7\x00\xe6\x50\xac\x03\x6a\x3b\xa8\xfb\x3e\x46\x7a\xd2\xee\x87\x86\x03\x97\xc5\x4b\x25\xcf\xf5\x3a\x09\x30\xba\xb2\x4f\x5e\x04\xf5\xa2\x61\xa8\xcd\xf5\xed\x93\x4b\x9d\x34\xd4\x7e\x70\x04\xe8\xd2\xe0\x4a\xe2\xba\x03\xae\x5d\x32\xa1\x11\xe8\xe9\x8e\xa3\x2e\x73\xa1\x46\x60\x78\xc0\xcd\xe8\x23\x7d\xc0\xcd\x58\xc2\xbd\xa4\x83\x21\xe8\x15\x74\x34\x12\x75\x3a\xed\xc8\x31\x40\x21\xcc\x03\x66\xd1\x94\x8c\x12\x15\xc3\x49\xe8\xd2\x77\x31\x13\x50\xf1\x92\x61\x88\xd1\x3a\x0c\x9c\xea\x8e\x73\x1a\x01\xb6\x4e\x04\x3a\xe0\x36\xcf\x47\x33\x3d\x40\xa1\x8f\x0b\x72\xb4\x36\x4a\x7b\x04\x68\xeb\x8c\xec\x84\xec\x8f\xae\xb2\x48\xce\x6b\x2e\x15\x66\x64\x95\x9d\x2c\xea\x70\x79\x04\x06\x67\xba\x85\xc0\xcf\x40\x57\xae\xac\xc6\x10\xeb\xd5\x6d\x85\x66\xa6\x6d\x17\xc8\xf0\xf4\x58\xa0\xa5\x30\xa2\xe8\x14\xb0\x11\x05\x3a\x34\xb0\x12\x79\x85\xec\xbd\xc9\x98\xc2\xaf\xe7\x6f\xdf\x5f\x7c\x22\xe7\x5e\x88\x23\x51\xf5\xdd\xc6\x4f\x6f\x2e\xdf\x5e\x7c\xa2\x34\xd7\x09\xc9\x01\xf2\x21\x0a\xfe\x79\x7b\xf5\xcb\x30\x6a\xb6\xaa\x49\x21\x2d\xc5\xe2\xec\x2f\xba\xdd\x05\x39\x62\x5a\xd1\xe4\xee\x40\xb6\x40\x5a\x50\x3a\x66\xdd\x95\xc1\x6c\xfa\xb1\xef\xdc\xf7\x30\xfa\x4c\xb9\x07\x23\xf9\x3c\x4e\xa6\xbf\x08\xcf\xd0\x75\x23\x4c\x4d\x6e\xfe\x2c\x54\x81\x95\xbe\xaa\xe8\x3e\x3f\x1f\x1e\x1f\xa7\xf4\x79\xbb\xbd\x9f\xf8\xc0\xe8\xf1\x71\x6a\x75\x65\x52\xdc\x6e\x47\xe1\xf4\x07\x36\x84\x93\x0b\x10\xe1\xac\x2c\xba\xe7\xe1\xaa\xc5\x33\x84\x6d\x47\x8e\xc4\x62\xfd\xc3\xf3\xf9\x2c\xe5\x62\x9d\x08\x2e\x08\x27\x4e\x3f\xa0\x1a\x64\x99\x76\x80\xdf\x01\xbc\xe3\x79\xcc\x57\xaa\x10\xc6\x2e\x45\x9e\xe4\x3a\x15\x79\x67\x9a\x14\x56\xb5\x22\xdb\x60\x0a\x43\xc4\xcb\xbb\xc3\xf5\x1c\x89\x50\xa1\xa3\xec\xe0\xd9\x28\xa5\x72\x68\x14\x3a\x10\x8e\xd8\xad\x4c\x3e\xc0\x6b\x13\x37\x24\xa9\x50\x29\xe6\x79\xa7\xd7\xbe\xfa\x79\x0a\xaf\xfc\x9a\xa6\x60\xc4\x79\xd0\x48\x04\x73\x21\xbb\xa1\xb7\x0a\xd2\x99\xcc\xc2\x5d\x2c\xca\x1c\x1d\x82\xad\xe8\x48\xe7\x55\x9e\x6f\xa6\x70\x53\x29\xf8\xf4\x34\xe3\xfa\xc4\x09\x02\x67\xac\x64\x1b\x9d\x14\x79\xbe\x69\xd2\x53\x9f\x89\x8c\xa5\xd4\x57\xcb\x12\xeb\x84\xab\xba\xa2\xc5\x93\x93\x93\x93\x97\x2f\x5f\xbe\x3c\x5c\x54\xbf\xe5\xad\x40\x0b\x68\xe1\x28\xac\xdc\x1b\xc1\x6c\x8c\x88\xa2\x68\x32\x08\x0d\x15\x2f\x9c\x7e\x25\x7b\xfe\x59\xb7\xf7\x8e\x47\xd2\x7b\xde\xef\xdb\x21\x6b\xef\x89\x8f\xc6\x37\x24\xbf\x1d\x94\xcf\x90\x60\xe8\x75\x24\x5c\xc4\x62\x6f\x4d\x56\x2e\x11\x2e\xa1\x78\xab\x03\xe9\xe3\xe3\x34\x2d\xb2\xed\x36\x94\xbe\x1e\x1f\xa7\xb4\xd1\x6d\x4a\xdc\x6e\xd9\x52\xd2\xde\xed\xf6\x7e\x3a\xed\xc5\xcd\x41\xf2\x26\x89\xfa\x3c\xd0\x47\x7b\x7c\xa4\x90\x3d\x20\x20\x22\xb7\xdb\x7b\x58\x0a\x0b\x33\x44\xb5\xc3\x70\x7d\x43\xc6\x63\xef\x6e\xbc\xbd\x8e\xcf\xe1\x20\x01\xd3\x69\x4f\xc9\x32\xa0\x68\xaa\xcf\x5f\x8f\xc5\x06\xe6\x18\x26\xe3\xea\x6e\x36\xdf\x37\x2b\x0e\x32\xda\xcb\x67\x86\x25\xaa\x0c\x55\x7a\x8c\x38\x9b\x4d\xcf\xc7\xd3\x5c\x91\x4e\x99\xbe\x3e\x88\xe6\x4b\x14\xe7\x30\x15\x64\x18\x2a\xd3\x15\x97\xbd\xde\xa9\x39\x1f\x66\xfd\xff\xd0\x47\x44\x7e\x8e\xd3\x93\x2f\x3b\xc1\xa7\x66\xee\xeb\x9c\xe1\xc8\x9b\xd1\x45\x49\xff\x39\xbe\xdf\xeb\x1e\x3c\xe7\x24\xfb\xa8\x0a\x15\x82\xe7\xfa\x1c\xa6\xc8\x7b\x80\xba\x02\xd1\x47\x0b\x64\x95\xa1\x93\x8c\x35\xce\x96\x47\xfc\xf3\xf4\x2d\xf2\x38\xd7\x95\xca\x92\x40\x6f\xb0\x54\x9d\x0a\x10\xaa\xea\x07\x2d\x64\x28\xdd\xf3\x00\x02\xd1\xd5\x2a\xdc\xc7\xe6\xfa\x7e\x11\x97\x9d\x94\xff\x4c\x10\x84\x65\x5e\xb8\x3d\x3e\x36\x2c\x08\x35\xb5\x24\xb4\x8d\xba\x3a\x6f\xfe\x29\x27\x13\xd0\xaa\xf7\x19\xe4\x3a\x46\x36\xe1\x3e\x6c\x13\x6e\xd5\xc7\x46\x74\x98\x7a\x47\x40\x02\xa2\xd5\x9e\x68\x77\x35\xfd\xf0\x40\xd0\x7e\xe3\xfb\x6e\x43\x93\x16\x17\x37\x37\x57\x37\xb7\x1d\x74\xbf\xdc\xff\x07\x7e\x39\x3c\x79\xf0\xf2\x65\x8f\xfb\x31\x66\xf7\xa2\x3d\x28\xbd\x56\x09\x45\x0a\xc3\x57\x9d\x56\x91\xa8\xc2\xae\x29\xb4\x8a\xe3\xdc\x73\xb0\x55\xe9\x4b\xf4\xa7\x5c\x56\x9e\xda\x8d\x75\x58\xc0\x4c\xaa\x4c\xaa\x85\x05\x6d\x60\x21\xdd\xb2\x9a\x4d\x53\x5d\xd4\xed\xbd\x7e\x7f\x69\x4c\xf4\x99\xa9\x41\xe1\xba\xc8\xe4\xc1\x22\xe0\x25\x3b\x6a\xc9\xe3\x25\x3c\x91\x14\x67\x31\xce\xe8\x21\x1a\xb3\xdd\x72\x5f\xc0\x3f\x4b\x75\xe6\x1f\xd0\x87\x81\x6c\xa6\x45\x92\xbf\x2b\xbd\x24\x65\x4f\x6e\xca\x9f\x44\xd2\x1c\x31\x4b\xa4\x5a\xe9\x87\x2e\x82\xde\xb0\xd9\x22\x73\xe1\x97\xf1\x85\xa4\x6d\xb0\x5e\x62\xab\x53\xe6\xfc\x5c\x51\x78\xf4\xe7\x50\xfb\x80\x9b\xba\x86\x42\xf1\xae\x70\xda\xf4\xd5\x87\xea\x35\x5c\x6e\xf8\x10\x85\x79\x4f\xfa\x18\xe0\x0c\xe2\x8c\xa5\xd4\x44\x69\xe7\x8d\x5d\x07\xc2\x77\xed\x9a\x2b\xdb\x6a\x5e\x4d\xf9\x2e\x17\x3d\xdb\x11\xf5\x10\x52\x8e\xde\x0b\x69\x0b\xe1\xd2\xae\xf0\x9d\x18\xac\xd5\x83\x36\x64\x8c\x22\x8b\xf6\x54\xaa\xfd\xe2\xbe\x7f\x1e\x68\xe0\xf9\x24\x26\x93\x91\xf0\xb1\xb2\x79\xa3\x45\x45\x0b\xc8\x4e\x2d\xd9\x3f\x8d\x6c\xf4\x33\x11\xf2\x7f\x52\x2f\x91\xcb\x2e\xb1\x5d\xfa\xa7\x3c\x54\xe5\x8f\xa4\x2e\xdb\x12\xae\xf0\x99\x68\x39\x38\x91\xc5\xcd\x4a\xa2\x5d\xf8\x46\x1d\xed\xf1\x1f\xc7\xc8\x39\x92\x38\x20\xea\x9b\x63\x08\xda\x93\x2b\x5f\x05\x4f\xd1\x77\x16\x7c\x95\xc7\x8b\x12\x3f\x3b\x54\x36\x12\x8d\x9f\xd9\x87\x11\x3b\x5f\xc2\x8a\x4d\x16\xd8\x55\xc0\x6c\xae\xf2\x02\xfd\x1c\x49\xb0\xbd\x4d\xa9\xfc\x49\x47\x94\xfc\x9b\x4c\x5b\xd7\x77\xb4\x4c\x3d\xe9\x89\xe7\x98\x6f\x4f\x8d\xad\x83\xbe\x1d\x86\x39\x2e\x24\x31\x36\x52\x16\x6a\x53\xeb\x06\x19\x91\xd6\xb1\x0f\xca\x35\x14\x51\x6b\x12\x06\xd9\xa8\x4c\x7e\xbc\xe6\xfa\xc2\x56\x48\xa1\xdf\xdf\xbc\x65\x0a\xb8\xd4\xc5\x57\xe9\xc3\x4e\x8e\x7d\xef\x87\x83\xc6\x10\x52\x88\x7c\xae\x4d\xd1\x29\xb9\x77\xf1\x79\x1f\x05\x53\xb8\x33\x1b\x10\x0b\x21\xd5\x50\x4a\x6f\x4c\xf2\x2f\xab\x55\x6d\x6c\xd3\x22\xeb\xe9\xdc\x72\x71\x5f\xaa\xb2\x72\x90\x09\x27\xe0\x5d\x90\xc6\x77\x69\x91\x7d\x47\xa6\xb7\x1f\x93\x28\x65\x53\x81\xf7\x4a\xa3\x4d\x62\xf1\xdf\x15\xaa\xce\x12\xb9\x9f\x67\x3d\xbd\x0d\xab\x76\x2f\x4b\xcb\xbe\x7b\x7d\xde\x1b\xd6\x38\xbf\xbe\xf4\x1b\x4a\x49\xab\x53\xa1\x7c\x28\x32\x43\x1f\x0c\xb4\x07\xcc\x1a\x25\x3b\x8d\x24\x1d\x80\x39\x85\xeb\x1c\x85\x45\xa8\xca\x4c\xb8\xbd\xe9\x10\xef\x3c\xd3\xbc\xca\xf6\xe9\x14\x16\x04\xac\x71\xb6\x8f\x61\xf0\x74\x82\x9c\xfa\x15\xf4\xfc\x80\x1d\x21\xd1\x84\x5d\x53\xb8\x74\x3e\xfb\xd2\x6e\xc9\xbe\x78\x77\xe6\xa1\xbe\x78\x13\x2f\x1d\xad\x30\xb4\x5d\x0b\x82\x82\x9f\x4b\x4c\xc7\xdc\xa4\x40\x6b\x3c\xe2\x68\x1f\xc8\x30\x26\x84\xf5\x0b\xa9\x67\xc2\x1b\x23\x41\x60\x75\xe5\xda\xc6\x62\x0a\xbf\x35\x46\x38\x9a\x0a\xda\x36\xa9\xcd\x89\xb4\x4d\xb0\x30\xe0\xd6\x02\x3b\x51\x4c\x09\x65\x2b\x0e\x93\x4c\x9a\x51\x46\xee\x20\x5b\xc4\x47\x2d\xf7\x52\x4b\xe5\x43\x2a\x9f\xa2\x39\x6c\x4d\x15\x37\xd7\x79\x42\x29\x60\xe4\x8a\xa7\x7a\xf7\x2c\x5c\x3f\x1b\xa9\xa0\x84\x5d\xac\x30\xc9\x74\xfa\x80\x5d\xb3\xf7\xaf\x84\x62\xa8\x62\x85\xf0\x9a\x17\x82\x2c\x38\x00\x1f\x08\x2c\x65\x8e\x89\xc8\x0d\x8a\x6c\x93\xe0\x67\x69\x3b\x67\x1b\xde\xd0\x0d\x09\x2b\xc1\xaf\x1c\x80\x9d\xc5\xd9\xbc\x26\x2b\x91\x68\xbd\x42\x59\x8a\x9c\x72\x31\xc3\xae\xe6\xc8\x95\x42\x20\x3d\xcc\x71\x3f\xed\x6f\xbe\xc6\x23\x71\x6b\x0d\x35\x32\x6e\x9a\x78\x59\xd3\xea\xf8\xcd\x1b\xd6\xa5\xb4\xf0\x20\x55\x46\x17\x24\xe8\x62\x68\x4a\x3e\x71\x3c\x7b\x96\x82\xec\x4b\x8b\x10\x26\xfd\x00\x39\x61\x02\xff\x89\x5d\x61\x65\xe1\x86\x3a\xc5\x6e\x91\x28\x88\x69\x0d\x32\x0f\x16\x4b\x61\xe8\x0b\x43\xf7\x03\x5e\x1d\xbc\x8d\x53\xfe\x70\xc9\x12\x62\xf9\x58\x3d\x57\xda\x4b\xca\xa2\x3b\x0e\xd9\xb1\xb6\x22\x20\x6b\xdd\xf7\x01\x7c\xd1\xfa\x26\x4b\xb1\x22\x4b\xc5\xba\xe4\x0b\xe9\x36\x10\xd3\xf5\x76\x48\xdb\x0d\x45\x30\xc1\x5e\x45\xd5\x8e\x43\x09\x64\xf3\x55\x34\x46\x3e\xd1\xe7\x50\x8c\xce\x2f\x64\xb7\xd3\xf8\xba\x46\x98\xa9\xf5\xf0\x2c\x3b\x2a\x52\x26\x7e\xa7\x80\x37\x70\xc4\x2e\x15\x88\xa8\xd3\x11\xc2\xc0\xe5\xd7\x6a\x9e\xcb\x94\xac\x4c\x12\x12\x37\xe2\xd0\x68\x6b\x63\x25\xa4\xeb\xba\xb6\xee\x4f\x4c\xf9\x88\xe9\xf0\x39\xf0\x1c\x79\xe5\xe0\xb7\xa8\x72\x27\xcb\xdc\x67\x8d\xfe\xf2\xd0\xa7\x10\x91\x78\xe4\x6c\xbe\xa2\xef\xdd\x2b\x83\xb8\x76\x17\x77\x02\xd2\xf9\x1b\x55\x6a\x6b\xe5\xcc\xdf\x02\x16\x48\x64\xc4\x63\x6d\xc4\x33\xa3\xb8\xa4\xd6\x74\x26\xe2\xc9\x25\x0c\x9c\x30\x9a\x27\x49\xcf\x11\xc2\x34\x55\x8e\xcf\x90\x24\x6d\x0b\xd9\x45\x8e\x87\x64\xd8\xd0\x1f\xed\xfd\x5e\x20\xe1\x5f\xfa\xa8\x45\xb0\x7b\x24\x53\xff\xae\xcf\xd7\x10\x32\x33\x78\x48\xc2\xc2\x5a\x9d\x4a\x06\x7d\x98\xe2\xd3\x48\xdc\xbe\xf0\x99\xf9\x67\x49\x5e\x98\x66\xa6\x82\x9b\xd9\x9d\xb3\xe4\xa1\x41\x06\xb9\x54\x08\xc2\x2c\x2a\x4e\x8a\x49\x84\x66\xb1\xdd\xb6\xe3\x45\x86\x33\x81\xd2\x93\x18\x5f\xb3\x20\x79\xf0\x93\x23\x28\x7a\xc0\xcd\x57\xa3\xea\x01\x37\xa7\x0c\x0b\x4a\x21\xcd\x13\xf2\x76\x1f\xb3\x7d\xc7\xcf\xa2\x28\x29\xd8\xad\xc1\x3d\xe0\x66\x14\x0f\x21\xc0\x1a\x1e\xfd\xe9\x62\xe0\xfb\x88\xf2\x07\xb6\xc1\x01\x9e\x9f\x0b\xf2\x8e\xab\x2e\x85\x4c\x7c\x41\xb2\x95\x5e\x46\xe5\xa8\x5f\x70\x01\xbf\x9b\x93\x8c\x06\xc4\x50\xed\x01\xff\x5d\x49\xc3\xb5\xad\xb2\x72\x76\x94\x96\xdc\x84\x3d\x3e\x95\xf1\xb7\x65\x47\x2b\x2c\xe0\x0a\x15\x88\xb9\x43\x03\xa2\x2c\x73\xee\x9f\xf0\x60\x43\xa9\x3d\x9c\xd0\x4b\x45\xb5\x9a\xc2\x4a\x18\x29\x66\x39\x36\x0a\x6f\xd1\xd5\x10\x77\x97\xc4\x0b\xec\xb3\xa8\x66\x6e\xea\xd0\xeb\x2d\xfe\x55\x22\x13\x5e\xf8\xe1\xc3\x9e\xeb\x3c\xd7\x6b\x4f\x0d\xd1\xce\xf2\xf4\x1f\xb7\xdb\xe1\xec\x6b\x21\x1c\xae\xc5\x26\xa1\xa4\x87\x3b\xc6\x43\x89\xc5\xf5\x25\xfc\xe4\xf7\x70\xa2\xd4\x14\xb8\x44\x29\xe9\x87\x58\x63\x3a\x10\xae\xf3\xd2\x7a\x44\x2c\x4e\xec\xef\x47\x49\x21\xe5\x30\x48\x48\x57\x01\x41\x5d\x29\xde\x83\x31\xb2\x0e\x55\x0a\x63\xd1\xf4\xbe\x69\xda\x54\x48\x0c\x3a\x23\x91\x0d\x5e\x28\x8c\xd4\x1a\x7a\x18\xdb\x6f\xe7\x37\xbf\x5c\xfe\xf2\xd3\xf8\x4a\x7c\xdc\x70\x5c\x2d\x7e\x2d\x8c\xaa\xdb\xfd\x44\x64\x57\x52\x7e\x43\xcf\x48\x23\x3e\xc4\x3e\xff\x7d\xd0\x5c\x16\xc0\x99\x2f\x8e\x10\x43\xf7\x7d\x09\x5c\xc0\xc7\x73\x4f\x47\x97\x43\xda\x63\xd2\xad\xf2\x27\x64\xe8\x86\x53\x47\xc6\x4c\x36\x34\xc3\xd2\x60\x4a\x9e\x25\x31\x58\xe6\x22\xed\xcc\xad\xee\x96\x1e\x8f\xce\xb3\x50\xe8\xe5\x31\x33\x1f\x3a\xef\xce\x37\xf0\xbb\x9f\x56\x6b\x45\x49\x7f\x83\xa1\xb6\xac\x95\xf5\xa1\x39\x77\xa8\x70\xbd\x03\xce\x3a\x14\x23\x69\x0f\x92\x78\x4e\x8d\xda\x2e\x75\x95\x67\x44\x1e\x45\xca\xf0\xde\xfa\x66\xad\xef\x24\x79\x63\x4f\xab\xf9\xd3\xf0\x94\x46\x4d\x11\xaf\x1f\x38\x4a\xa2\xcb\x63\x20\xe3\xf2\xb4\x76\x4e\x57\xd5\xdf\xea\x23\x50\x72\x72\x2c\x56\xbd\x87\x37\x84\x94\xf7\xc7\x03\x8d\x5d\xc1\xf8\x32\x5c\xfb\x2d\xb8\x61\xc2\x72\x59\x48\x97\xc8\x85\xd2\xa6\x93\xa4\xa8\xd2\x21\x58\xe7\x2d\x3e\xf9\xa3\x4f\xfb\xf5\x71\x32\x76\x1e\xdc\x58\xec\xe9\x52\xa8\x05\x92\x03\xe8\x20\xe0\x6d\x8d\xb1\x2e\xc8\xdb\xc8\x77\xbe\xf1\x0d\xe1\x1a\xc6\x14\x2e\x09\xbd\x54\x8b\x31\xba\xc0\x14\xd8\x24\xd7\x8b\xc4\xca\x3f\xba\x08\xc8\xf5\xe2\x56\xfe\xc1\x75\x1f\xbf\x61\x87\xe3\x42\x70\xcd\x4c\x57\xce\xca\x2c\xa6\xb2\x5e\x41\x0d\x51\x45\xdb\x3e\xbc\x98\xc0\x8f\x2f\xee\xe1\xdd\xdf\x6b\x37\xb8\x42\x43\x9e\x9d\xdb\x9b\xa5\x7f\x21\xd4\x34\xc6\x9d\xdf\x83\xf6\x71\xca\x58\x26\x0a\x2c\xb4\xd9\xf4\xf1\xe1\x57\x7c\x29\x2b\x3f\xfe\xf5\x6f\x13\xf8\xeb\x8b\xff\xf8\xdb\x9f\xcb\x0e\xf9\x1b\x5d\x75\x55\xf1\xc3\xd3\x0e\x3e\x1a\xab\x21\x14\x87\x26\x94\xd6\xc4\x17\x35\x3f\xfc\xf8\xe2\xc5\x04\xfe\xf3\x05\xfd\xbb\x87\x42\xe6\xb9\xb4\x98\x6a\xd5\x4a\x88\xbe\x1e\x33\xdc\xcd\x4d\x4a\xa3\x4b\x34\x4e\x76\x66\x41\xd1\x66\xb7\x2c\xac\x9f\x01\xf0\xfe\x37\x4c\x01\xf8\xd6\x70\x03\x2c\x4e\x0b\x1c\xb6\xe2\xd1\x88\x67\x9a\xaf\x08\xd9\x72\xe9\xea\xb3\xd5\x73\xb8\x33\x62\x25\x2d\xcc\x2a\x99\x67\xfd\xad\x64\x66\xc5\x1b\x30\xd6\x83\x51\xc6\xab\xbe\xaf\x3b\x26\x4c\xed\xb9\xa0\x70\x54\xdc\x20\xa7\x74\xcd\xff\x1a\xcf\xea\xf1\x71\x5a\x48\x15\xda\xa5\xf4\x45\xa4\x03\xcd\x17\x26\x35\x06\x3b\xde\x2c\x74\x19\xb6\xd8\xd0\x0a\xab\x28\xe0\xd9\xeb\x6d\x1d\xa8\x7f\x77\xb6\xaf\x9e\xd5\xb3\x62\x6a\x43\x47\x9c\x6b\x2c\xbd\x45\xc2\x27\xcd\xce\x1d\xa3\xb8\x57\x3d\x6c\xc2\xed\x9c\x5f\xf5\x53\xda\x2d\x43\x72\x3f\x4c\x52\x4c\xda\x07\xfb\xbd\x77\x4f\xca\x71\xed\x10\x27\xbc\x0f\x81\x19\x28\x3d\x6e\x68\x81\xb1\xb7\xe6\x85\x58\x28\x63\x88\x38\x38\x4d\x13\x7c\xe4\x7e\xda\xb0\x0e\x4d\x35\xdf\x9a\x3e\x54\x54\x1c\x21\xa1\xd6\x5b\x4d\x89\x5e\xa1\x31\x32\xcb\xb0\xab\x34\x46\x14\xb6\x5f\x72\x6a\xe6\xbd\x9a\xad\x31\xba\x69\x8f\xf3\x8c\x3d\xa8\x44\xda\xa4\xac\x66\xb9\xec\x7a\x91\xdc\x9f\x0a\xaf\x8d\xad\x21\xff\x1e\x17\x25\x23\xbc\xf1\x49\xd9\x61\x42\xe6\x82\x6d\xcb\x0c\x61\x25\x7d\x05\x84\xee\x61\x2a\xd8\xd2\xf8\x41\x7e\xcc\x60\xb6\x01\xa1\x36\x5a\xf5\xbc\x17\xc5\xb4\xc6\x4a\x26\xce\xc2\xdb\xaa\x03\x81\xc7\xd3\x42\x26\xf7\x68\xb8\x53\xa4\x32\xfa\xff\x24\xbc\x58\xba\xdf\xa4\xa1\x8b\xc0\x7f\x19\x04\x67\x13\x1f\x8e\x84\x6f\x61\x43\x4f\xae\xe4\x29\x6d\x35\xe3\x88\xdc\xde\xb2\x67\x57\x8b\x86\x34\xac\xdd\xd7\x1a\xd5\x71\x0b\x7f\xd1\xa4\xde\x34\x85\x57\x5a\xad\xc8\xdc\x87\x24\xa6\x41\xe1\xf4\x0e\xf8\x61\x95\xdd\xe7\x6a\xa0\xb9\xd8\x57\xce\x6d\x78\x8b\x0f\x8e\xe4\xae\xee\xf1\xed\xf3\xd7\x46\x54\x73\x38\xaa\x23\x58\xf3\x18\x4b\x37\x06\x6d\xa9\x95\xc5\xbe\x19\xad\x3d\xa2\xb9\x68\xb7\x9f\x9c\x87\xe7\x31\x0d\x6f\xa5\xf5\xb1\xc0\x52\x17\x06\x97\xce\x95\xfe\xaf\x07\x79\xd4\xec\xd7\xa6\xf0\x8a\x3c\x0c\x0f\x75\xb4\x7f\xf7\x4e\x9d\x5d\x4e\xf8\x39\x30\xcd\x50\xc8\x9f\x34\x94\x0d\x69\x6c\x3c\x57\x54\x2b\x69\xb4\x62\xdb\x19\xeb\x2a\x5d\xed\xf2\x90\x9f\x5e\x34\x5b\xe0\xd7\xb0\x65\x37\xa9\x3a\x8c\xfb\xf5\xc5\xdf\xdf\xff\x34\x3a\xd1\xe7\xd5\xc7\x65\xf9\xd9\x6c\x91\x58\x14\x26\x5d\x12\x67\xd1\xe0\xd6\x5d\xc0\x4e\xb5\x0d\x3b\x6a\x83\xbb\xdb\x37\x8c\xc7\x17\xe5\xeb\x03\x93\x81\x64\x81\x48\xd9\xf7\x4a\x5f\xdb\x23\x3d\xd3\x1b\x11\x69\xb5\xbb\xf6\x73\xa8\x3d\x7f\xcc\xe5\xf5\x81\x61\xa8\x20\x91\x33\x78\xc3\x14\x34\x7f\x3b\x84\x6b\xe2\x04\xec\x58\x02\xfa\xdf\x7e\x3d\x9e\x86\xf6\xa8\x6b\x1c\xcd\x3e\xee\x8d\xc6\xbd\x57\xd5\x8e\x7e\x4b\xed\x88\x77\x0f\xc3\xeb\xac\xc9\x1f\xb2\x4c\xf0\x33\x0f\x3c\xf8\x46\x70\xcf\x5b\x28\x17\xbc\x8e\x94\xf6\x5a\xb8\xe5\x59\x5b\x24\x63\x51\x89\x2c\x8b\xaf\xbd\xf4\x61\x3a\xe7\x65\x3b\x37\xc1\x69\xf8\x1f\x59\xc2\x9b\x21\x4d\x6b\x63\x0b\x93\x1c\x71\xb0\xa9\x07\xe1\x9b\x30\x9a\x76\xeb\xa3\xe6\x67\xf3\x77\x00\x63\x92\xa1\x75\x52\x31\xaa\x2f\x21\x81\xc3\x89\xd7\x0d\xac\xd6\x8a\x16\x86\x91\xb4\x46\xef\x13\xe9\x45\xd5\x5d\x9e\x8c\xa5\x0a\xb8\x0c\x83\x31\x17\xb4\x98\x1c\x88\x74\xad\xb2\x31\x53\x12\xe0\x71\x23\x2b\x2e\x67\xd8\xec\x69\x51\x72\x74\xcf\x4e\xe8\x83\xe7\xf3\x1e\xc8\xc2\xf9\xcf\x93\x36\x7b\xfd\x77\x27\xf2\x11\x07\x82\x59\xf8\x3d\xfd\x8f\x57\x71\x70\x98\x24\x1c\xf5\xe8\xe8\x13\xce\xa5\x75\x89\x9e\x33\x22\x9b\xf0\xd0\x20\x1b\x7d\xe1\x1c\x9a\xae\xeb\xea\x6d\x05\x8f\xe2\xd6\xa5\x7f\xff\x77\x8c\x7c\xcb\x35\x40\x89\xe7\xce\x33\x16\xd7\xde\xb9\x33\xd8\x28\x87\x6f\xee\xbf\xf9\xdf\x00\x00\x00\xff\xff\xa8\x42\x74\x79\x96\x51\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 20886, mode: os.FileMode(420), modTime: time.Unix(1554410758, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

