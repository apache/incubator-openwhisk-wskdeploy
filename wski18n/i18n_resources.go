// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x6f\x14\x39\xf2\x7f\xcf\xa7\x28\xa1\xbf\xc4\x22\x85\x06\xf6\xaf\x93\x4e\x48\xe8\x84\x0e\x4e\x70\x0b\x04\x25\x61\x57\x2b\x16\x35\x9e\xee\xea\x1e\xef\xb8\xed\x96\xed\x9e\x61\x88\x72\x9f\xfd\x54\xb6\xfb\x61\x92\xb8\xdb\x13\x58\x1d\x6f\x98\x8c\xcb\xf5\x2b\x57\x95\xeb\xc9\xf3\xe9\x1e\xc0\xe5\x3d\x00\x80\xfb\xbc\xbc\xff\x0c\xee\x37\xa6\xce\x5b\x8d\x15\xff\x9a\xa3\xd6\x4a\xdf\x3f\xf1\xab\x56\x33\x69\x04\xb3\x5c\x49\x22\x7b\xe5\xd6\xee\x01\x5c\x9d\xcc\x70\xd8\x31\x2d\xb9\xac\x23\x3c\x7e\x0b\xab\x4b\x5c\x4c\x57\x14\x68\x4c\x84\xcb\x79\x58\x5d\xe2\xc2\x65\xa5\x22\x2c\xde\xd0\x52\x74\x3f\x6a\x9d\xff\x69\x94\xcc\x1b\x6e\x0c\x97\x75\x5e\x34\x65\xbe\xc1\x7d\x84\xd9\xbf\xcf\x4f\xdf\x03\x97\x6d\x67\xa1\x64\x96\xc1\x3b\xbf\x0b\x1e\x14\x4d\xf9\x00\x68\x5f\x14\x89\x18\x57\x82\xd5\xb9\xb1\x9a\x17\x36\x02\xc0\x84\x50\x3b\xe8\x0c\x6a\x28\xb1\xe2\x12\x4b\xd0\x9d\xb4\xbc\x41\xd8\xa2\x36\x44\xb5\x8c\xe0\x98\xe4\x5b\xd4\x2b\x65\x30\x02\x14\x56\x41\x75\xb6\xed\x6c\x32\xd3\x86\x49\x56\x63\x39\x2b\x7d\xab\xd5\x9f\x58\x58\x40\x69\xb9\xe5\x68\xc0\x2a\x58\x21\x34\x4c\x6f\xb0\x84\x9e\xc3\x32\xa2\x55\x75\x2d\x30\x5f\xa3\x68\x23\x78\x17\x8e\x02\x5e\xa3\x68\xa1\x41\x63\x58\x8d\x09\x7c\x0b\x25\x2b\x1e\xf3\x5b\xbf\x08\x15\x17\x08\x3f\x95\x58\xb1\x4e\x58\xe0\x06\xfe\xef\xf5\xe9\xbb\x57\x8f\xb3\x9d\xd9\xb4\x5a\xb5\xe6\x61\x02\x0e\x97\x16\x35\x2b\x2c\xdf\xc6\x8c\xe0\xf5\x35\xa1\x23\xdd\x35\xad\x9d\x71\xf8\x6b\xf6\x08\x12\xc6\xee\x8f\x07\x18\x88\x96\xb9\x4a\xd6\xa0\x69\x59\x11\x93\x78\x5c\x5f\xe6\x15\xfc\x20\xc2\xa9\x65\x76\x4d\x9e\x61\x50\x6f\x51\x0b\x34\xa6\x77\x9c\x04\xd6\x0d\x93\xbc\x42\xb3\xc4\xbb\x27\x73\xe6\x4c\x60\x5b\x62\x2b\xd4\xbe\x41\xb9\xc4\x78\x24\x4c\x65\xcd\x3a\xbb\x9e\x09\x2c\xb4\xac\x34\xff\xe6\xbe\x80\x2f\xbf\xbc\xfa\xfd\x4b\x0a\xd3\x96\xe7\x6b\x15\x55\xc3\x6e\xcd\xcd\x06\x5e\x7c\x78\x03\x5f\x5e\x9f\x9e\x5f\xa4\x72\xec\x03\xcd\x22\xd3\x5f\x5f\x9d\x9d\xbf\x39\x7d\x9f\xc2\x77\x83\xfb\xdc\x69\x6a\x46\xaf\xaa\x02\xbb\x46\xc8\x36\xb8\x4f\xd5\x6a\x81\xda\x26\xf3\x25\xe2\x04\xc6\x25\x9a\x22\x37\x6b\xa5\x6d\xae\x95\x8a\xe9\xf6\x05\x58\xa5\x04\x18\xb4\xe4\x0f\x14\xa3\x82\x53\xc0\x5e\x75\x1a\x54\x8b\xd2\x6b\xaa\x65\xc5\x86\xd5\x68\xa0\x73\x99\x82\x1d\x3a\x65\x96\x20\x8b\x50\xb2\x4e\x10\x65\x70\xcb\x13\xe8\x64\x90\x85\xc9\x12\xcc\x5e\x16\x49\xf2\x10\xb1\x6a\x89\x2b\x13\xd7\x3d\xbc\x27\xff\xfd\xc5\xbb\xb7\x29\x32\x7b\xfd\xb5\xdd\x4a\x70\xb3\x8e\xc8\xfd\xc1\xaf\x02\xeb\x65\xa2\x23\x30\xd0\x58\x73\x63\xf5\x3e\x59\x35\x77\x40\x21\x7f\xe8\x71\x9c\x0d\xb9\x84\xff\x8c\xd1\x3d\xfd\x84\x1a\x5b\xa5\x63\x86\xf9\xa0\xd5\x96\x97\x68\x80\x81\xe9\x9a\x86\xe9\x3d\x78\x7a\x72\xc9\xdd\x9a\xd9\x07\x06\x56\x88\x32\x28\x1b\x4b\x12\x83\x44\x33\x2d\x16\xbc\xe2\x58\xc2\x10\x6f\xd3\x1d\x65\x4e\xa2\x33\xb7\x68\x40\x4d\x30\x87\x34\xfd\x13\xcf\x30\x3b\x81\x0f\xc1\x41\x4e\xe0\x45\x41\xfb\xcc\x09\x5c\x68\x5e\xd7\xa8\xcd\x09\x9c\x75\x82\x56\xd0\x16\xd9\x43\x60\x06\x76\x28\x04\xfd\xaf\xb1\x20\x57\xa1\x1d\x5b\x87\x66\xee\x76\x16\x9f\xff\x42\x20\x8e\x1c\xe2\xa5\xa2\x3b\x06\x1a\x99\x10\x7b\xd8\x31\x69\x47\xdf\x07\xbb\xe6\xe6\x1f\xf0\xd3\xfe\xf1\xfb\x87\xcf\x60\x11\xa7\xbf\x28\x47\x21\x0d\xb7\xeb\x38\x2c\x0a\xf1\xf1\x04\xf0\x87\xfc\x20\x90\x19\x57\x01\x90\xd3\x00\x93\x40\x3b\xc8\x3a\x85\xcf\x0a\x56\x6d\x50\xa6\x00\xb5\x7c\x26\x29\xdc\x00\x22\x23\x11\x3d\x99\x07\x2a\xa5\xe1\xb4\x45\xf9\x1b\xc5\x8a\x04\xac\xa5\x7a\xe1\xe6\xb1\x46\x37\x80\x4f\x7d\x7d\xb5\x65\xa2\x43\xaa\xb2\xea\x0e\x8d\xfd\x3c\x87\x4b\x05\x7b\x1f\xb1\x72\xa9\x6c\x5e\xa9\x4e\xc6\xea\xd1\x77\xd3\x50\x0b\x52\x59\x70\xd4\xc0\x2c\xb8\xcc\xf0\xe9\xf2\x32\xa3\x0f\x57\x57\x9f\xb3\x3f\x66\x2a\x6b\x17\xfb\x46\xd8\x59\x9f\xf9\xe8\xe2\xe4\x84\xb3\xd3\xe9\x18\x4e\x8f\x01\x5a\x70\xcf\xdb\xa1\xfa\x4d\x8b\x60\xa4\xca\xd0\x5c\x50\xfb\xd3\x30\x5b\xc4\x82\xe8\x59\xe8\x41\x08\x2b\x6c\x21\xb8\xf1\x6e\x73\x39\xe6\x91\x52\xa1\x71\xca\x76\x1c\x61\xc7\xed\x1a\x98\x0b\x25\x0f\x0c\x18\xd5\xe9\x02\xbd\x41\xf0\xab\x45\x49\xa5\x86\xe3\x8b\x5f\x6d\x7f\x04\x4f\xed\xbe\xf5\x1f\x97\x0c\x44\xbd\xe8\x70\x96\x62\xcd\x64\xbc\x47\xe9\x8f\x12\xa8\xe8\x42\x5f\x3b\xd5\x8a\x19\x2c\x29\x44\xd2\xcd\x58\x10\xfc\x4e\xd2\x4e\x15\xcf\xe5\x96\x09\x1e\x13\xf6\x8d\x5f\x05\xa5\x21\x34\xa8\x43\x3b\x98\x64\x0a\x12\x6f\x3c\xc5\x11\x22\x7a\xaa\x5c\xf0\x86\xdb\x9c\xd7\x52\xe9\xa8\x42\x7b\x19\x03\x86\xdb\xe2\x90\xdc\x27\x92\x6d\x2a\x11\x37\x10\xd8\xcd\xe2\xfb\x36\x6c\xe8\xca\xe7\x63\xe7\x05\x9d\xf0\x30\x56\x52\x0d\xc9\xbd\x17\x7a\x56\xdd\xb1\x88\xb3\x41\x94\x10\xa9\x04\x26\x92\xef\xc3\x59\x0a\xa0\x84\x34\x46\xcc\x3b\x41\x85\xa3\xcc\x0d\x49\xae\x9f\xe7\xf2\x32\xa3\x8f\x57\x57\x27\x50\x69\xd5\xd0\xdf\xde\xff\xaf\xae\x92\x10\xbd\xb9\x96\x10\x89\xac\xb7\x94\x41\x7b\x37\xac\x41\x39\x4b\x68\x07\x5a\xbc\xbc\xcc\x86\xbf\x8f\x3e\x25\xdd\xdf\x1a\x6d\x7f\x87\x63\xcd\xf7\xbf\x18\x17\x3e\xc0\xd4\xd4\x25\x50\x2d\xd4\xb5\x54\x7f\x8d\x43\x1d\xe3\x81\x87\x8c\xeb\xba\x61\x5e\xe0\x33\x92\x05\xb5\x5e\x10\xa4\x93\x0d\xd3\x66\xcd\x84\xc8\x85\x2a\x98\x88\xe5\x89\x9e\x6c\x02\x44\xca\xf2\xe0\x6e\xa7\x4f\xc1\x26\x15\x4d\xa2\xdd\x29\xbd\xb9\x13\x9e\x1b\x77\x48\x9c\xcf\x4d\x63\x0a\xf3\x13\x42\x2c\xa3\xf1\xe7\xe5\xd8\xa9\x14\xaa\x69\x05\x92\x7e\xc3\x58\xb1\xea\x84\xd8\xa7\x02\x55\xce\x5e\xcb\x28\x25\x2f\xc3\x2d\xf4\x68\x04\x36\x60\xc1\x59\x27\xe1\xcb\xce\x6c\x42\x8d\xd8\x67\xe3\x2f\xe4\x07\x1a\x1b\xb5\x45\x68\x99\xb6\xdc\x95\x94\x43\x11\xce\x8c\x41\x3b\xaf\xfe\x89\xa4\x05\x93\x05\x8a\xb8\xb0\xa7\xbf\x64\xf0\x4f\x4f\x43\x29\x23\xb1\x1e\x98\x00\xf8\x26\x22\x37\x96\xd9\x2e\xe6\xde\x8f\x1e\x3d\x7a\xf4\xfc\xf9\xf3\xe7\x13\x23\x4f\x94\x74\xee\xb6\x02\x11\x10\xe1\x9c\x57\x1d\x61\xeb\x8f\x13\xe2\xbb\x58\xfb\x00\x6c\xd6\xde\x07\x48\xb3\x16\x4f\xc6\x3b\xd2\x6a\xc9\x75\xdc\x01\x48\x18\xaf\x1e\x71\x38\x55\x41\x89\x5e\x8f\x43\x2b\x38\x77\x60\x28\x3b\x4d\xf2\x05\xa4\xa9\x77\xfd\x75\xce\xef\x0a\x3c\x37\xc0\xa0\xce\xa3\x45\x4d\x62\xce\x04\x7b\xaa\x3f\x36\xb8\xa7\xea\x83\x12\xcc\xce\xb5\xa8\x56\x73\xdc\x62\xe9\xc3\x90\x63\x96\x8d\xcc\xe8\x0b\x57\xad\x0a\x01\x46\x29\x09\x2b\x24\x09\x35\x16\x8c\x54\xd3\xfa\x36\xa6\x54\x4e\x2f\x9d\x41\xe0\x16\x54\x67\x0d\x35\x35\xaa\x82\x0b\xcd\xb6\xdc\xc0\xaa\xe3\xa2\x4c\x38\x0a\x65\xc7\x91\x3b\xdd\x37\xc1\x8a\xa8\xbd\xfa\x13\x29\x51\x4e\x0e\x15\x1a\xec\xcb\xcb\x8c\x8a\x52\xbb\x6f\xf1\xea\xca\xd7\xa7\x91\x43\x9c\xf4\xa7\x20\xf1\x6d\xe0\x29\x71\x77\xc0\xd3\x58\x64\xf3\x65\x85\x6b\xc1\x42\xf9\xd2\x30\x59\x32\xab\xf4\x7e\x66\xb6\x49\xd2\x0f\x74\x0e\x65\x62\x1d\x6e\xfa\xca\x76\x59\x69\x3f\x0c\xd4\xac\x55\x27\x4a\x52\x8e\x41\x9b\x81\xef\xa3\x0e\x9b\x51\xa2\x76\x9f\xa8\x52\xce\x52\xf4\xe1\xba\x1d\x57\x8e\x2c\x4c\xbe\x2f\xbc\xd1\x9c\x2c\xae\x2a\x29\x1d\x5a\x49\x1f\x43\xb9\x7c\x6d\xfa\xe6\xd7\xfb\x26\xef\x5a\x7f\x65\x43\x6d\xe3\x88\x9a\x09\x93\x83\x41\xa3\x5f\xed\x9b\xdd\xa5\x24\x40\x5a\x2e\xb1\x45\x59\xa2\x2c\xa2\xd3\x91\x9e\x14\x46\x52\xef\x52\x5e\x86\x2c\x9b\xc1\xe9\x43\x43\x12\xd2\xc7\x91\xf8\x2e\x58\xe3\x96\x1b\x75\x45\xf4\xe5\xf1\xe5\xad\x30\xb0\x66\x61\x64\x37\x4d\x39\x43\x24\x5b\x4a\xaf\xb7\x48\x41\x71\xba\xd3\xb1\xea\xff\xe5\xb5\x30\x7d\xab\x4c\xff\xbb\x7a\xa4\x3f\xcf\xcd\x1c\xfe\x63\xf4\xda\xf3\x4d\xd7\xec\x8d\x04\x1f\xd7\xed\xcd\x24\x78\xbc\x76\xe7\xa4\x1a\x32\xb1\xea\x64\x99\x87\x14\x9b\xbb\x14\x1b\xbf\x51\x02\x2d\x39\xf9\x10\x1e\xa6\x92\x84\x04\xe5\x52\x19\xd9\x2d\x24\x32\xba\xff\x45\xa7\x35\x1d\xa3\xcf\xc9\xfd\x13\xac\x9b\x0d\xf9\xcf\xc4\x81\x19\x67\x6b\x3a\xed\x51\x53\x22\x2f\x74\x5e\x68\x64\x36\xa6\x4e\xf7\xa3\x01\x70\x24\x07\x27\x70\xe3\x1f\xf7\x6b\x83\xfe\x89\x76\x6c\x6e\xdc\x93\x83\x5f\x2b\x54\xe9\x17\xe8\x43\x42\xff\x15\x44\xf2\x6a\x9d\x15\xa9\xbc\xa1\xd4\xbf\x42\xa4\x5e\x9c\x10\xa6\x16\x43\xe6\xad\x16\x9e\x8d\x62\x01\x62\x12\x38\x13\xa2\xe5\x9d\x61\xfa\x8b\xb7\x70\x9d\x6f\xe5\xff\x1d\x41\xf2\xda\x21\x7f\x24\x7e\x62\x30\x21\xe7\xaa\x10\xcb\x9c\xcb\xad\xda\xc4\x5c\x6b\xec\xed\x3d\x99\xbb\x85\xb4\x0d\x76\x6b\xf7\xa0\x13\x7c\xce\xfa\x97\x93\xb0\xf4\xe3\xfd\x6e\x28\x26\x5d\xad\xe2\x06\xe2\x86\x6d\x67\x0b\x49\x5f\xdf\x54\x4a\xdf\x52\x8a\x51\xa0\x73\xfb\xfb\xe2\xb2\x0f\x2c\xe1\x4d\xd8\x3d\x5c\xf5\xb9\x64\x59\xb0\x30\xdc\x1c\x05\xfc\x0e\xb1\x1c\xa7\x65\x48\x37\x74\x34\x79\x83\x0d\xd5\x87\x86\x7f\x8b\x61\x7a\x8a\x73\xfe\xcd\x95\xef\x7e\xdb\x41\xd5\x34\x16\x89\x4c\xba\xa1\x05\xd9\x71\x85\x76\x47\x9e\xf5\xf4\xe7\xbf\x3b\x8b\xfd\xed\xe9\xcf\xc9\x32\x59\xde\xa0\xea\x62\x55\x61\x58\xbd\x93\x30\x4f\x9e\x38\x61\xfe\xff\x09\xfd\x3b\x56\x47\x42\xd5\x73\x7a\x12\xaa\xbe\xab\x92\xbc\x54\x4f\x53\x25\x0a\x83\x7b\xb6\x8a\x3e\xe7\xbf\x1d\x66\xcb\x43\x99\x6b\x7a\x17\x15\x7b\x9f\xa6\x07\x1e\x19\xbc\xa9\xa5\xa2\x56\x75\xa1\x7e\xf7\x8f\x07\x68\xf5\x3e\x2f\x54\x43\x4d\x43\xf4\xf5\xd4\xea\x7d\xff\xe4\x52\x34\xa5\x4b\xa9\x95\x45\xed\x2f\xee\x33\xff\x8c\x41\xb7\xf9\xf3\x52\x84\xe9\xb4\x38\x7e\xf4\x7f\x79\x99\x75\x5a\x84\x46\xef\xe3\xd9\x5b\x87\xd7\x69\x11\xea\xfd\x4f\x07\x9d\xe0\x67\xff\xfb\x82\x14\x41\x1a\x26\x2a\xa5\x9b\x68\xd4\x78\xd7\xaf\xcf\x49\x90\xc1\x85\xde\x03\xab\x19\x97\x29\xfa\x0e\xd3\xdb\xa3\x75\x30\xfd\x7d\xd6\xf4\xe5\xab\x44\x8b\x85\x4d\x88\xed\x93\xfa\xd0\xf5\x6a\x4b\x6f\x88\x07\xdd\xda\x81\xeb\xdd\x6c\xd3\xc6\x17\xc6\xeb\xed\xd7\x7c\xfd\xba\xf2\x3f\x90\xd9\xa2\xe6\x55\xac\x36\xfc\xd5\x2d\x06\x37\xf0\x32\x4c\xa3\x24\x7e\xe5\xc6\x9a\x14\xcd\xfb\x4c\xa1\xe9\x9a\x24\x85\xe3\x5b\xe1\xb8\xbc\x36\x77\x08\x81\x80\xfe\xa2\x95\xf0\x6d\x1f\x09\xa8\xf7\xe4\x32\x64\x39\xfa\x83\x15\x09\x35\xde\x41\x5d\xbf\x91\x6a\x27\x73\xe2\xbb\xdc\x59\x38\x29\xb8\x81\xb0\x2b\x83\x31\x69\x81\x92\x62\xdf\x0f\xe2\x0d\x3c\xf6\x63\x20\xb3\x37\x16\x1b\x58\x71\x59\x72\x59\x1b\x72\xb8\x9a\xdb\x75\xb7\xca\x0a\xd5\x0c\x3f\x99\x59\x34\xe2\xd8\xd2\xba\x87\xdc\xc5\x22\xd0\x51\x3d\x5b\xe2\x3a\x6d\x95\xe7\xf8\x4e\xeb\xbe\x03\xce\xf7\x3e\xdf\xfb\x6f\x00\x00\x00\xff\xff\xd3\x98\xde\xc4\x0b\x2c\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 11275, mode: os.FileMode(420), modTime: time.Unix(1516337998, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

