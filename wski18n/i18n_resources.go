/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
    "io/ioutil"
    "os"
    "path/filepath"
    "strings"
    "time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
    gz, err := gzip.NewReader(bytes.NewBuffer(data))
    if err != nil {
        return nil, fmt.Errorf("Read %q: %v", name, err)
    }

    var buf bytes.Buffer
    _, err = io.Copy(&buf, gz)
    clErr := gz.Close()

    if err != nil {
        return nil, fmt.Errorf("Read %q: %v", name, err)
    }
    if clErr != nil {
        return nil, err
    }

    return buf.Bytes(), nil
}

type asset struct {
    bytes []byte
    info  os.FileInfo
}

type bindataFileInfo struct {
    name    string
    size    int64
    mode    os.FileMode
    modTime time.Time
}

func (fi bindataFileInfo) Name() string {
    return fi.name
}
func (fi bindataFileInfo) Size() int64 {
    return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
    return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
    return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
    return false
}
func (fi bindataFileInfo) Sys() interface{} {
    return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesDe_deAllJson,
        "wski18n/resources/de_DE.all.json",
    )
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
    bytes, err := wski18nResourcesDe_deAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4d\x6f\xdb\x38\x13\xbe\xfb\x57\x0c\x72\xf1\x25\xd0\x7b\xef\x2d\xe8\xdb\x6d\x83\x6e\xd3\x20\xcd\x6e\x51\x74\x0b\x84\x11\x47\x16\x6b\x8a\x14\x48\xca\x85\x57\xf0\x7f\x5f\x50\x1f\xb6\x93\x90\x14\x25\x7f\xb4\x0b\xec\xcd\xb6\x38\xcf\xf3\x0c\x87\x9c\x0f\xf9\xeb\x0c\xa0\x9e\x01\x00\x5c\x30\x7a\xf1\x0a\x2e\xde\x21\xe7\xf2\xe2\xb2\xfd\xc9\x28\x22\x34\x27\x86\x49\x61\x9f\x5d\x09\xb8\xba\xbd\x86\x5c\x6a\x03\x45\xa5\x0d\x3c\x22\x94\x4a\xae\x18\x45\x9a\x5c\xcc\x00\x36\x97\xcf\xe1\x3e\x30\xad\x99\x58\x40\x5a\x50\x58\xe2\xda\x03\xdc\xaf\x9a\xa7\x05\x9d\x03\x13\x65\x65\x9a\xd5\x4e\xc8\xa2\x5b\x5c\x10\xc1\x32\xd4\x26\x59\x93\x82\x43\xc6\x38\x0e\xa0\x3b\x0c\x9c\x04\xa4\x32\xb9\x54\xec\xef\x06\x00\x1e\xde\xbf\xf9\xf2\xe0\x41\x76\xad\x74\x42\xfe\xc8\x99\x5e\x36\x9b\xf7\xf0\xee\xe3\xa7\x7b\x1f\xde\x8b\x65\x4e\x30\x41\x0a\xd4\x25\x49\x7d\xfe\xee\x9e\x0f\x69\xf9\xf3\xcd\xdd\xa7\xeb\x8f\x37\x11\x72\xb6\x2b\xdd\x51\xee\x76\xb6\xd9\x54\x10\xd2\x40\x26\x2b\x41\x81\x18\x28\x89\xc9\xa1\xae\x93\x52\xc9\xef\x98\x9a\x5b\x62\xf2\xcd\x26\xf9\x4b\xf8\x62\x35\x01\x29\x78\xf0\xea\xba\x09\xf7\x66\xf3\x3f\xfb\xc9\x7e\x68\xa0\x13\x18\x5e\x70\x3c\xa7\x7e\x8a\x96\x88\x48\x31\xfd\x14\xcb\xe4\xd8\xe2\x7d\xad\xeb\xc4\xae\x68\xd1\xbe\xc5\xc6\x6b\x0c\x9e\x53\xde\x1f\xfd\x36\xf4\x77\xb5\x35\x80\x4c\x2a\xa0\x58\x72\xb9\x2e\x50\x18\xbf\x9c\x78\xfb\xd1\xf4\x95\x38\x54\xc0\x73\x04\xa7\x04\xbb\x65\xaa\x12\x86\x15\xdb\xed\xd4\x55\x59\x4a\x65\x90\xc2\xe3\x1a\x3e\x96\x28\xda\x7b\x59\x72\x62\x32\xa9\x0a\xbf\x98\x69\x58\xee\xa4\xa1\x97\xad\x78\xc8\x89\x86\x34\x97\x1a\x05\x10\x28\x89\x32\x2c\xad\x38\x51\x5b\x22\xeb\xa9\x25\x26\xa9\x95\xe1\x17\x77\x08\xa2\x3b\x78\x62\xe7\x5c\x6f\x6a\xd6\x25\x5e\x82\x46\x03\x46\x82\x90\x14\xbf\x6b\x5f\xe0\x22\xad\x9d\xd4\xf7\x56\x5d\x65\x72\x14\x86\xa5\x6d\x31\x58\xe2\xba\xdf\xf3\x54\x8a\x8c\x2d\x2a\x85\xd4\xbf\x1b\x63\x10\xbc\x12\xb6\xc5\x79\x24\x71\xd8\xce\x4b\xb7\xad\x33\x63\xf9\x06\x0c\xa3\xfc\xab\xeb\x84\x94\xcc\x7e\xdb\x6c\x2e\x21\x53\xb2\xe8\x7e\xd2\xb2\x52\x29\x86\xd2\xf1\x24\xa8\x60\xdc\xfb\x58\x69\x34\x7b\x00\x95\xc9\xe3\xc4\x44\x43\xc4\x85\xa2\xae\x93\xed\xf7\x7d\x8f\xb6\x3f\xc6\xa9\x9a\x8e\xe9\x94\xf9\x1b\x61\x1c\xa9\xbd\x49\x0b\x6c\x2b\xc3\x8b\x0b\xa7\x5b\x58\x9b\x96\x3e\x37\x69\x49\xa3\x5a\xb1\x14\x5f\x59\x26\x54\x2a\xa4\xf8\x68\xf0\x4e\xf1\x9f\x0c\x51\x4d\x16\xa8\x44\x41\x94\xce\x09\xdf\x4b\x9e\x4c\x64\xb2\x85\xe6\x32\x25\x1c\x56\x84\x57\xa8\xfd\x52\x27\x82\x79\x92\x5e\x08\x82\x09\x83\x4a\x60\xa8\x5e\x45\xdb\x3b\xe9\xff\xbf\x2d\x68\x90\xca\xa2\xe4\x68\xb7\x5b\x57\x69\x8a\x5a\x67\x15\xe7\x6b\x3f\x73\x94\xa9\x93\xf4\xad\x34\x80\x4a\x49\x05\xa9\x42\x62\x6c\xc1\x2d\x49\xba\x24\x0b\x84\x1f\xcc\xe4\xdd\xb3\x02\xb5\x26\x8b\xbd\xe0\x02\x11\xb4\xb7\x93\xb4\x7d\x60\x3f\x84\x4e\xd5\x49\xa8\x62\x9d\x6a\xeb\xdd\xbf\xd8\xa7\xdd\x4d\x7b\xcd\x99\x0d\xf4\x1b\x6b\xee\x91\xe5\x59\xec\x04\xbe\x16\x2b\xc2\x19\xed\x26\x45\x99\xc1\x97\x81\x11\x30\x60\x10\x1d\x8d\x92\x9d\x23\x14\x87\xd1\xc4\x3a\xa3\x2a\x7e\x96\xcb\x72\x20\xcf\x80\x3b\x1a\x4d\xc3\xd2\x64\x7b\x43\x4c\xa5\x6d\x68\x4f\xec\xdb\x49\x48\x63\xe3\x66\x14\x5b\x2c\x50\x9d\x23\x74\x87\x53\x8d\x75\x2a\x43\xa4\xe7\xf4\xec\x40\xbe\xb1\xb5\xe9\x91\x09\x6a\xbf\x9f\x31\x9f\x1f\x4e\x39\x54\xf5\x65\x66\xe7\x6a\x14\x14\x45\xba\xb6\xa6\x14\xcb\x1b\x52\xe0\x66\x03\x94\xd1\xae\xb9\x6f\xab\xbb\x2d\xee\xdb\xda\x0e\x77\x95\x80\x87\xdd\x0c\xd8\xcf\xc6\x0f\xb6\x2f\x52\x58\xc8\x15\xb6\xa3\x20\xe1\x7c\xdd\x8d\xee\x48\x81\x68\x8d\x26\xd0\x5a\xfd\x0a\xca\x02\x5b\xb6\x57\xd5\xeb\x3a\x91\x95\x29\x2b\xb3\xd9\x40\x92\x24\x41\x7f\x02\x66\x03\x64\x4d\x5a\x1a\x4b\xe5\x34\x1a\x20\x7a\x72\xa7\xc6\x12\x06\x8d\x07\x88\xfb\xa3\x3e\x96\xd3\x67\x17\x49\xd7\xdf\xac\xa9\xb4\x3e\xfb\x01\xfa\xa7\x27\x7a\x14\x73\xc0\xd4\xdd\xbc\xbd\x4f\xe0\x35\x11\x29\x72\xde\x99\x0f\xbe\xfc\x0a\x9a\x0c\x90\x58\x83\xb8\x57\x6c\x61\x1b\xcf\x94\xb4\x5b\x14\xbe\xfd\x81\x41\x69\x04\xc4\x50\xd6\x6c\xd3\xc8\x84\x49\xc9\x67\xf8\xeb\x7a\xdd\x23\xbc\x3c\x82\xbb\x7c\xec\x3f\xbe\xb1\xd6\xc3\xfe\x4f\x2d\x07\x71\x5b\x73\x00\xfa\x40\x1b\x41\x91\xe3\x79\xa6\xc1\xe3\x31\xc5\xba\x74\xe2\x4e\xfd\x58\x3c\xff\x4d\x21\xcf\xf6\xf3\xf4\x53\xc8\x11\xa9\xc6\x3a\x75\xe2\x29\xe4\xd8\x7c\xb1\xee\x9d\xfe\x0d\xd9\x11\xa9\x9c\x4e\x7d\xbe\xba\xbb\xb9\xbe\x79\xfb\x0a\xee\x73\x84\x79\xfb\xbe\x79\x0e\x5f\xae\x3e\xfc\xde\xbe\x3b\x17\xdb\x2d\x45\x61\x98\x69\xde\xa6\x53\x2c\x15\xa6\xc4\x20\x4d\xe0\x96\x23\xd1\x08\x95\x46\x98\xdb\x4d\x9f\x03\x13\xda\x20\xb1\xbd\x3b\x50\xd4\xa9\x62\x8f\x48\x2d\x8e\x2e\x31\x65\x59\xf7\x3f\x4c\x60\xda\xf8\x99\x8a\x62\xe3\xde\x37\x9a\x67\x8c\xff\xf1\x28\x7d\x7d\x94\xab\x91\xcd\x89\x86\x47\x44\xf1\xa4\x37\xda\xce\x67\xc1\xee\x6a\x1a\x9c\x53\xdc\x6d\xa0\xbf\x9f\xaa\xf0\x30\xcc\xa0\xcc\x63\xca\x3b\x82\xac\xfb\xee\xba\x1c\x43\xd6\x34\xac\xa0\xac\x17\xf3\xe9\xa1\xda\x26\x00\x3a\x05\xde\x3d\x9f\xd8\xa7\x0a\x9b\x00\xe4\x14\x74\xf5\xf2\x6d\xc5\x54\x49\x93\xa0\x22\x12\xc7\xae\x43\x77\xc3\xf5\x83\x65\x7c\xee\x18\x87\x38\x74\x01\xba\xd2\xb1\x8f\xd6\x4d\x7f\x51\x67\x3e\x6c\x1e\x3c\x45\xb6\x8b\x1c\x45\x1b\x61\x38\x70\x4a\xda\x91\x63\x14\x69\xa4\xf1\xc0\x7f\xd1\x4c\xac\xe4\x12\x9b\x36\xba\x6d\xc4\x72\x14\x67\xea\x09\xcf\x2c\xc2\x6e\xc4\x6c\xf6\x6d\xf6\x4f\x00\x00\x00\xff\xff\x5b\xa9\xef\x26\xf2\x29\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesEn_usAllJson,
        "wski18n/resources/en_US.all.json",
    )
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
    bytes, err := wski18nResourcesEn_usAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 10738, mode: os.FileMode(420), modTime: time.Unix(1506012886, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesEs_esAllJson,
        "wski18n/resources/es_ES.all.json",
    )
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
    bytes, err := wski18nResourcesEs_esAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesFr_frAllJson,
        "wski18n/resources/fr_FR.all.json",
    )
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
    bytes, err := wski18nResourcesFr_frAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesIt_itAllJson,
        "wski18n/resources/it_IT.all.json",
    )
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
    bytes, err := wski18nResourcesIt_itAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesJa_jaAllJson,
        "wski18n/resources/ja_JA.all.json",
    )
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
    bytes, err := wski18nResourcesJa_jaAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesKo_krAllJson,
        "wski18n/resources/ko_KR.all.json",
    )
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
    bytes, err := wski18nResourcesKo_krAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesPt_brAllJson,
        "wski18n/resources/pt_BR.all.json",
    )
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
    bytes, err := wski18nResourcesPt_brAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesZh_hansAllJson,
        "wski18n/resources/zh_Hans.all.json",
    )
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
    bytes, err := wski18nResourcesZh_hansAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesZh_hantAllJson,
        "wski18n/resources/zh_Hant.all.json",
    )
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
    bytes, err := wski18nResourcesZh_hantAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
    cannonicalName := strings.Replace(name, "\\", "/", -1)
    if f, ok := _bindata[cannonicalName]; ok {
        a, err := f()
        if err != nil {
            return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
        }
        return a.bytes, nil
    }
    return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
    a, err := Asset(name)
    if err != nil {
        panic("asset: Asset(" + name + "): " + err.Error())
    }

    return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
    cannonicalName := strings.Replace(name, "\\", "/", -1)
    if f, ok := _bindata[cannonicalName]; ok {
        a, err := f()
        if err != nil {
            return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
        }
        return a.info, nil
    }
    return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
    names := make([]string, 0, len(_bindata))
    for name := range _bindata {
        names = append(names, name)
    }
    return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
    "wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
    "wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
    "wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
    "wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
    "wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
    "wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
    "wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
    "wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
    "wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
    "wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
    node := _bintree
    if len(name) != 0 {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        pathList := strings.Split(cannonicalName, "/")
        for _, p := range pathList {
            node = node.Children[p]
            if node == nil {
                return nil, fmt.Errorf("Asset %s not found", name)
            }
        }
    }
    if node.Func != nil {
        return nil, fmt.Errorf("Asset %s not found", name)
    }
    rv := make([]string, 0, len(node.Children))
    for childName := range node.Children {
        rv = append(rv, childName)
    }
    return rv, nil
}

type bintree struct {
    Func     func() (*asset, error)
    Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
    "wski18n": &bintree{nil, map[string]*bintree{
        "resources": &bintree{nil, map[string]*bintree{
            "de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
            "en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
            "es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
            "fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
            "it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
            "ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
            "ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
            "pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
            "zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
            "zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
        }},
    }},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
    data, err := Asset(name)
    if err != nil {
        return err
    }
    info, err := AssetInfo(name)
    if err != nil {
        return err
    }
    err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
    if err != nil {
        return err
    }
    err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
    if err != nil {
        return err
    }
    err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
    if err != nil {
        return err
    }
    return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
    children, err := AssetDir(name)
    // File
    if err != nil {
        return RestoreAsset(dir, name)
    }
    // Dir
    for _, child := range children {
        err = RestoreAssets(dir, filepath.Join(name, child))
        if err != nil {
            return err
        }
    }
    return nil
}

func _filePath(dir, name string) string {
    cannonicalName := strings.Replace(name, "\\", "/", -1)
    return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

