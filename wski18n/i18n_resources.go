/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
    "io/ioutil"
    "os"
    "path/filepath"
    "strings"
    "time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
    gz, err := gzip.NewReader(bytes.NewBuffer(data))
    if err != nil {
        return nil, fmt.Errorf("Read %q: %v", name, err)
    }

    var buf bytes.Buffer
    _, err = io.Copy(&buf, gz)
    clErr := gz.Close()

    if err != nil {
        return nil, fmt.Errorf("Read %q: %v", name, err)
    }
    if clErr != nil {
        return nil, err
    }

    return buf.Bytes(), nil
}

type asset struct {
    bytes []byte
    info  os.FileInfo
}

type bindataFileInfo struct {
    name    string
    size    int64
    mode    os.FileMode
    modTime time.Time
}

func (fi bindataFileInfo) Name() string {
    return fi.name
}
func (fi bindataFileInfo) Size() int64 {
    return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
    return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
    return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
    return false
}
func (fi bindataFileInfo) Sys() interface{} {
    return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesDe_deAllJson,
        "wski18n/resources/de_DE.all.json",
    )
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
    bytes, err := wski18nResourcesDe_deAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4f\x6f\xe3\xb6\x13\xbd\xfb\x53\x0c\x72\xf1\x25\xd0\xef\x9e\x5b\xb0\xbf\x74\x37\xd8\x6e\x12\x24\x69\x17\x41\x5b\xc0\x8c\x38\xb2\x58\x53\xa4\x40\x0e\x1d\xb8\x82\xbe\x7b\x41\xc9\x76\xb2\x59\x89\xa2\xfc\xaf\x5b\xa0\x37\x4b\xe2\x7b\x6f\x86\x43\x0e\x67\xe8\xdf\x26\x00\xd5\x04\x00\xe0\x4c\xf0\xb3\x0b\x38\xfb\x84\x52\xea\xb3\xf3\xf6\x15\x19\xa6\xac\x64\x24\xb4\xf2\xdf\x2e\x15\x5c\xde\x5d\x43\xae\x2d\x41\xe1\x2c\xc1\x33\x42\x69\xf4\x52\x70\xe4\xc9\xd9\x04\xa0\x3e\x7f\x4f\xf7\x45\x58\x2b\xd4\x1c\xd2\x82\xc3\x02\x57\x3d\xc4\x9b\x51\xd3\xb4\xe0\x53\x10\xaa\x74\xd4\x8c\xee\xa4\x2c\xd6\x83\x0b\xa6\x44\x86\x96\x92\x15\x2b\x24\x64\x42\xe2\x00\x7b\x07\xa0\x53\x80\x39\xca\xb5\x11\x7f\x35\x04\x30\xfb\x7c\xf5\x34\xeb\x61\xee\x1a\xd9\x49\xf9\x92\x0b\xbb\x68\x26\x6f\xf6\xe9\xf6\xe1\xb1\x8f\xef\xbb\x61\x9d\x64\x8a\x15\x68\x4b\x96\xf6\xf9\xfb\xfa\x7d\xc8\x96\x5f\xaf\xee\x1f\xae\x6f\x6f\x22\xcc\xd9\x8e\xec\x8e\xf2\x7a\x66\x9b\x49\x05\xa5\x09\x32\xed\x14\x07\x46\x50\x32\xca\xa1\xaa\x92\xd2\xe8\x3f\x31\xa5\x3b\x46\x79\x5d\x27\xbf\xab\xbe\x58\xed\xc0\x14\x5c\x78\x55\xd5\x84\xbb\xae\xff\xe7\x7f\xf9\x1f\x0d\x75\xc0\x82\x61\x60\xa7\xe0\x2f\x1b\xd4\x66\x99\xb5\x06\x42\xa6\x0d\x70\x2c\xa5\x5e\x15\xa8\xa8\x5f\x37\x1e\x3f\x5a\xde\xa9\x7d\x0d\x78\xcf\xd0\x9a\x30\x99\xbc\xb7\xe2\x31\x47\xf0\x9b\x02\x15\x89\xb4\xdd\x15\x0b\x5c\x81\xb0\x4d\x28\x53\xad\x32\x31\x77\x06\x79\xbf\x15\x63\x18\x3a\x27\xc2\x13\x6c\xb3\xd4\x48\xe1\x30\xae\x57\x6e\xbb\xe1\xc6\xea\x0d\x00\xa3\xfc\xab\xaa\x84\x95\xc2\x3f\xd5\xf5\x39\x64\x46\x17\xeb\x57\x56\x3b\x93\x62\x68\xb3\xed\x44\xd5\x6b\x94\x8f\xda\x26\x56\x16\xe9\x0d\x81\xa3\x3c\xce\x98\x68\x8a\xb8\x50\x54\x55\xb2\x7d\x7e\xeb\xd1\xf6\x65\x9c\x55\xbb\x73\x76\x9a\xf9\x13\x13\x12\x39\x90\x86\x39\x12\x50\x8e\x60\x5d\x59\x6a\x43\xc8\xc1\x38\x45\xa2\x40\xdb\xd2\xde\x96\xa8\xbe\x36\x39\xd8\xa2\x59\x8a\x14\x2f\xbc\x12\x1a\x13\xb2\xf8\x60\xf4\x9d\xc6\x3f\x10\x33\xe4\xc9\x9d\x2a\x98\xb1\x39\x93\x0d\x4d\x7b\x52\x08\x95\xe9\x96\x5a\xea\x94\x49\x58\x32\xe9\xd0\xf6\x9b\xba\x23\x59\x77\xfe\x0b\x52\x08\x45\x68\x14\x86\xb2\x5f\x34\xbe\x53\xfe\xff\xdb\xf4\x08\xa9\x2e\x4a\x89\x7e\xba\xad\x4b\x53\xb4\x36\x73\x52\xae\xfa\x95\xa3\xa0\x9d\xa2\x1f\x35\x01\x1a\xa3\x0d\xa4\x06\x19\xf9\xf4\x5d\xb2\x74\xc1\xe6\x08\x2f\x82\xf2\xf5\xb7\x02\xad\x65\xf3\x37\xc1\x05\xa6\xf8\x06\xa7\x79\xfb\xc1\xff\x08\xad\xaa\xa3\x48\xc5\x3a\xc5\xd2\xe6\x1c\xf8\xf7\xfa\xf4\xba\xd3\x3e\x48\xe1\x03\x7d\xe5\xe1\x3d\x66\xf5\x0c\xee\x24\xbe\x56\x4b\x26\x05\x5f\x97\xcc\x3a\x83\xa7\x81\x5a\x38\x00\x88\x8e\x46\x29\x4e\x11\x8a\xfd\x64\x62\x9d\x31\x4e\x9e\x64\xb3\xec\xa9\x33\xe0\x8e\x45\x6a\x54\x9a\x6c\x4f\x8c\x9c\xf5\xa1\x3d\xb2\x6f\x47\x11\x8d\x8d\x1b\x19\x31\x9f\xa3\x39\x45\xe8\xf6\x97\x1a\xeb\x54\x86\xc8\x4f\xe9\xd9\x9e\x7a\x63\xcf\xa6\x67\xa1\xb8\x7f\x3e\x61\x3e\xdf\x5f\x72\xe8\xd4\xd7\x99\xef\xd2\x50\x71\x54\xe9\xca\x43\x39\x96\x37\xac\xc0\xba\x06\x2e\xf8\xba\xb8\x6f\x4f\x77\x7f\xb8\x6f\xcf\x76\xb8\x77\x0a\x66\x2f\x76\xd1\x36\x58\xdb\x4e\x6b\xe6\xeb\x22\x83\x85\x5e\x22\x94\xcc\x90\x60\x52\xae\xd6\x8d\x20\x72\x60\xd6\x22\x05\x4a\xab\x1f\xc1\xb2\xc0\x94\xbd\x39\xd5\xab\x2a\xd1\x8e\x4a\x47\x75\x0d\x49\x92\x04\xfd\x09\xc0\x06\xc4\x9a\xb4\x34\x56\xaa\x13\x34\x20\xf4\xcd\x9e\x1a\x2b\x18\x04\x0f\x08\x6f\x96\xfa\x58\xcd\x3e\x5c\xa4\xdc\x66\x67\xed\x2a\xdb\x87\x1f\x90\xff\x76\x45\x8f\x52\x0e\x40\xbb\x8b\xb7\xcf\x09\x7c\x60\x2a\x45\x29\xd7\xf0\xc1\xab\x94\x20\x64\x40\xc4\x03\xe2\x2e\x6c\xc2\x98\x9e\x2e\xe9\x75\x50\x78\xf7\x07\x1a\xa5\x11\x14\x43\x59\xb3\x4d\x23\x3b\x74\x4a\x7d\xc0\x1f\xd7\xeb\x0d\xc3\xf7\x4b\xf0\x35\x1f\xf7\x2f\xdf\x58\xf4\xb0\xff\xbb\x1e\x07\x71\x53\xb3\x07\xfb\x40\x19\xc1\x51\xe2\x69\xba\xc1\xc3\x29\xc5\xba\x74\xe4\x4a\xfd\x50\x3a\xff\x75\x21\xef\xe6\xf3\xf8\x5d\xc8\x01\xa5\xc6\x3a\x75\xe4\x2e\xe4\xd0\x7a\xb1\xee\x1d\xff\x86\xec\x80\x52\x9d\x4e\x7d\xbd\xbc\xbf\xb9\xbe\xf9\x78\x01\x8f\x39\xc2\xb4\xbd\x6f\x9e\xc2\xd3\xe5\x97\x9f\xdb\xbb\x73\xb5\x9d\x52\x54\x24\xa8\xb9\x4d\xe7\x58\x1a\x4c\x19\x21\x4f\xe0\x4e\x22\xb3\x08\xce\x22\x4c\xfd\xa4\x4f\x41\x28\x4b\xc8\x7c\xed\x0e\x1c\x6d\x6a\xc4\x33\x72\xcf\x63\x4b\x4c\x45\xb6\xfe\x1f\x26\xd0\x6d\xfc\x93\x16\xc5\xc6\x7d\x53\x68\x9e\x30\xfe\x87\x93\xf4\x4e\x4e\xfe\x98\xfc\x1d\x00\x00\xff\xff\xb0\xd7\x8c\xeb\xae\x1f\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesEn_usAllJson,
        "wski18n/resources/en_US.all.json",
    )
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
    bytes, err := wski18nResourcesEn_usAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 8110, mode: os.FileMode(420), modTime: time.Unix(1505233045, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesEs_esAllJson,
        "wski18n/resources/es_ES.all.json",
    )
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
    bytes, err := wski18nResourcesEs_esAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesFr_frAllJson,
        "wski18n/resources/fr_FR.all.json",
    )
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
    bytes, err := wski18nResourcesFr_frAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesIt_itAllJson,
        "wski18n/resources/it_IT.all.json",
    )
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
    bytes, err := wski18nResourcesIt_itAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesJa_jaAllJson,
        "wski18n/resources/ja_JA.all.json",
    )
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
    bytes, err := wski18nResourcesJa_jaAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesKo_krAllJson,
        "wski18n/resources/ko_KR.all.json",
    )
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
    bytes, err := wski18nResourcesKo_krAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesPt_brAllJson,
        "wski18n/resources/pt_BR.all.json",
    )
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
    bytes, err := wski18nResourcesPt_brAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesZh_hansAllJson,
        "wski18n/resources/zh_Hans.all.json",
    )
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
    bytes, err := wski18nResourcesZh_hansAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesZh_hantAllJson,
        "wski18n/resources/zh_Hant.all.json",
    )
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
    bytes, err := wski18nResourcesZh_hantAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
    cannonicalName := strings.Replace(name, "\\", "/", -1)
    if f, ok := _bindata[cannonicalName]; ok {
        a, err := f()
        if err != nil {
            return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
        }
        return a.bytes, nil
    }
    return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
    a, err := Asset(name)
    if err != nil {
        panic("asset: Asset(" + name + "): " + err.Error())
    }

    return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
    cannonicalName := strings.Replace(name, "\\", "/", -1)
    if f, ok := _bindata[cannonicalName]; ok {
        a, err := f()
        if err != nil {
            return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
        }
        return a.info, nil
    }
    return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
    names := make([]string, 0, len(_bindata))
    for name := range _bindata {
        names = append(names, name)
    }
    return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
    "wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
    "wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
    "wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
    "wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
    "wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
    "wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
    "wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
    "wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
    "wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
    "wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
    node := _bintree
    if len(name) != 0 {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        pathList := strings.Split(cannonicalName, "/")
        for _, p := range pathList {
            node = node.Children[p]
            if node == nil {
                return nil, fmt.Errorf("Asset %s not found", name)
            }
        }
    }
    if node.Func != nil {
        return nil, fmt.Errorf("Asset %s not found", name)
    }
    rv := make([]string, 0, len(node.Children))
    for childName := range node.Children {
        rv = append(rv, childName)
    }
    return rv, nil
}

type bintree struct {
    Func     func() (*asset, error)
    Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
    "wski18n": &bintree{nil, map[string]*bintree{
        "resources": &bintree{nil, map[string]*bintree{
            "de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
            "en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
            "es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
            "fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
            "it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
            "ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
            "ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
            "pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
            "zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
            "zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
        }},
    }},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
    data, err := Asset(name)
    if err != nil {
        return err
    }
    info, err := AssetInfo(name)
    if err != nil {
        return err
    }
    err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
    if err != nil {
        return err
    }
    err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
    if err != nil {
        return err
    }
    err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
    if err != nil {
        return err
    }
    return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
    children, err := AssetDir(name)
    // File
    if err != nil {
        return RestoreAsset(dir, name)
    }
    // Dir
    for _, child := range children {
        err = RestoreAssets(dir, filepath.Join(name, child))
        if err != nil {
            return err
        }
    }
    return nil
}

func _filePath(dir, name string) string {
    cannonicalName := strings.Replace(name, "\\", "/", -1)
    return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

