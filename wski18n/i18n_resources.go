/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x4d\x6f\xdb\x38\x13\xbe\xe7\x57\x0c\x72\xf1\x25\xd0\xdb\xf6\xc5\x02\x8b\xde\x82\xed\x57\xd0\x36\x09\x92\x6c\x8b\xa2\x5b\x20\xb4\x38\xb6\x58\x53\xa4\x40\x52\x0e\x5c\xc3\xff\x7d\x41\x51\xb2\x9d\x44\xa2\x28\x59\x76\x82\x62\x73\x72\x64\xce\xf3\x3c\x33\xfc\x1c\x6a\xfc\xfd\x08\x60\x79\x04\x00\x70\xcc\xe8\xf1\x6b\x38\xfe\x80\x9c\xcb\xe3\x13\xf7\xc8\x28\x22\x34\x27\x86\x49\x61\xbf\x3b\x15\x70\x7a\x79\x06\x89\xd4\x06\xd2\x5c\x1b\x18\x23\x64\x4a\xce\x19\x45\x1a\x1d\x1f\x01\xac\x4e\x1e\xc2\x7d\x66\x5a\x33\x31\x85\x38\xa5\x30\xc3\x45\x03\x70\xd5\x6a\x14\xa7\x74\x04\x4c\x64\xb9\x29\x5a\xd7\x42\x92\xdc\x24\x52\xb1\x5f\x85\x35\xdc\x7e\x7c\xfb\xed\xb6\x01\xb6\xae\x65\x2d\xe4\x5d\xc2\xf4\xac\xf0\xed\xf6\xc3\xc5\xf5\x4d\x13\xde\xa3\x66\xb5\x60\x82\xa4\xa8\x33\x12\x63\x03\xca\xe6\xfb\x36\x2d\x5f\xde\x5e\x5d\x9f\x5d\x9c\x07\xc8\x59\xb7\xac\xef\x04\x22\xd8\x04\xb5\x81\x09\xe3\x08\x42\x1a\x98\xc8\x5c\x50\x20\x06\x32\x62\x12\x58\x2e\xa3\x4c\xc9\x9f\x18\x9b\x4b\x62\x92\xd5\x2a\xfa\x47\x34\x75\x54\x0f\x24\xef\xb8\x58\x2e\xa3\x05\x49\xf9\x6a\xf5\x3f\xfb\xc9\x7e\x28\xa0\x23\x18\x50\xf3\x3e\xa8\x02\xe2\xcc\xf4\x7d\x2c\x93\xa0\xc3\xfb\xbe\x5c\x46\xb6\x85\x43\xfb\x11\x1a\xed\x2e\x78\xb5\xf2\xfe\xae\xc2\x90\x96\xb8\xce\x00\x26\x52\x01\xc5\x8c\xcb\x45\x8a\xc2\x34\xcb\x09\xb7\xef\x4c\x9f\x8b\x5d\x05\x3c\x44\xa8\x95\x60\x43\xa6\x72\x61\x58\xba\x0e\xa7\xce\xb3\x4c\x2a\x83\x14\xc6\x0b\xb8\xc8\x50\xb8\x59\x95\x71\x62\x26\x52\xa5\xcd\x62\xfa\x61\xd5\x4f\x79\x3d\x73\xe2\x21\x21\x1a\xe2\x44\x6a\x14\x40\x20\x23\xca\xb0\x38\xe7\x44\xad\x89\xac\xa7\x96\x98\xc4\x56\x46\xb3\xb8\x5d\x10\xeb\x3b\x4f\x6c\x9c\xab\x4c\xcd\x22\xc3\x13\xd0\x68\xc0\x48\x10\x92\xe2\x4f\xdd\xd4\x71\x81\xd6\xb5\xd4\x37\x56\x5d\x6e\x12\x14\x86\xc5\x6e\x29\x9f\xe1\xa2\x8a\x79\x2c\xc5\x84\x4d\x73\x85\xb4\x39\x1a\x5d\x10\x1a\x25\xac\x77\xbe\x8e\xc4\x7e\xbb\x46\xba\xf5\x2e\xd1\x95\xaf\xc5\x30\xc8\xbf\xe5\x32\x22\x19\xb3\xff\xad\x56\x27\x30\x51\x32\x2d\x1f\x69\x99\xab\x18\x7d\xab\x6d\x2f\x28\x6f\xbf\x57\x7d\xa5\xd1\x6c\x01\xe4\x26\x09\x13\x13\x0c\x11\xd6\x15\xcb\x65\xb4\xfe\x7f\xdb\xa3\xf5\xc3\x30\x55\xfd\x31\x6b\x65\xbe\x23\x8c\x23\xb5\x33\x69\x8a\x6e\x67\x78\x34\xe1\xb4\x83\xb5\xcb\xd2\xd7\x62\x59\xd2\xa8\xe6\x2c\xc6\xd7\x96\x09\x95\xf2\x29\x1e\x0c\xbe\x56\xfc\xb5\x21\xaa\x58\x05\x72\x91\x12\xa5\x13\xc2\xb7\x16\x4f\x26\x26\xd2\x41\x73\x19\x13\x0e\x73\xc2\x73\xd4\xcd\x52\x7b\x82\x35\x2c\x7a\x3e\x08\x26\x0c\x2a\x81\xbe\xfd\x2a\xd8\xbe\x96\xfe\xcd\x7a\x43\x83\x58\xa6\x19\x47\x1b\x6e\x9d\xc7\x31\x6a\x3d\xc9\x39\x5f\x34\x33\x07\x99\xd6\x92\xbe\x97\x06\x50\x29\xa9\x20\x56\x48\x8c\xdd\x70\x33\x12\xcf\xc8\x14\xe1\x8e\x99\xa4\xfc\x2e\x45\xad\xc9\x74\xab\x73\x81\x08\x5a\xd9\x49\xea\xbe\xb0\x1f\x7c\xa3\x6a\x2f\x54\xa1\x4e\xb9\xfd\xee\x37\xf3\x29\x63\x87\x70\x68\x37\x9a\x50\x67\x54\xce\x0f\x32\xe4\x76\xe4\x69\x71\x47\xa3\x29\x58\x8a\x35\xd3\x10\x93\x6b\x90\x93\x7d\xfb\xb6\x17\xd2\xd0\x7e\x33\x8a\x4d\xa7\xa8\x0e\xd1\x75\xbb\x53\x75\x75\x6a\x82\x48\x0f\xe9\xd9\x8e\x7c\x5d\x57\xf8\x31\x13\xd4\xfe\x7f\xc0\x55\x71\x77\xca\xb6\xbd\x53\x4e\x6c\x76\x8a\x82\xa2\x88\x17\xd6\x94\x62\x76\x4e\x52\x5c\xad\x80\x32\x5a\x1e\x91\xdd\x1e\x69\xb7\xc8\xf5\x0e\x09\x57\xb9\x80\xdb\x4d\x26\x55\x65\x98\xb7\xf6\x74\xa1\x30\x95\x73\x74\x09\x15\xe1\x7c\x51\x26\xc0\x48\x81\x68\x8d\xc6\x73\x40\x79\x0e\xca\x3c\x21\xdb\xda\x1b\x97\xcb\x48\xe6\x26\xcb\xcd\x6a\x05\x51\x14\x79\xfd\xf1\x98\xb5\x90\x15\xcb\x52\x57\xaa\x5a\xa3\x16\xa2\x7b\x73\xaa\x2b\xa1\xd7\xb8\x85\xb8\x1a\xea\x5d\x39\x9b\xec\x02\xe9\xaa\x99\xd5\x97\xb6\xc9\xbe\x85\xfe\xfe\x88\xee\xc4\xec\x31\xad\x25\xbd\xf8\x18\xc1\x5f\x44\xc4\xc8\x79\x69\xde\x7a\x85\xe4\x35\x69\x21\xb1\x06\x61\x17\x55\x7e\x9b\x86\x5c\x63\xd3\xc8\x3f\xfb\x3d\xe9\x46\x07\x88\xb6\x55\xd3\x2d\x23\x3d\xf2\x8d\x26\xc3\xe7\xeb\x75\x85\xf0\x78\x08\x6e\xd6\xe3\xe6\xe1\x1b\x6a\xdd\xee\x7f\xdf\xed\x20\x2c\x34\x3b\xa0\xb7\x1c\x23\x28\x72\x3c\x4c\x4e\x35\x1c\x53\xa8\x4b\x7b\x3e\xa9\x0f\xc5\xf3\x5f\x16\xf2\x20\x9e\xfb\xcf\x42\x06\xa4\xea\xea\xd4\x9e\xb3\x90\xa1\xf9\x42\xdd\xdb\xff\x3d\xd3\x80\x54\xb5\x4e\x7d\x3d\xbd\x3a\x3f\x3b\x7f\xff\x1a\x6e\x12\x84\x91\xbb\xb5\x1d\xc1\xb7\xd3\xcf\x9f\xdc\x0d\xb4\x58\x87\x14\x85\x61\xa6\xb8\x93\xa6\x98\x29\x8c\x89\x41\x1a\xc1\x25\x47\xa2\x11\x72\x8d\x30\xb2\x41\x1f\x01\x13\xda\x20\xb1\x67\x77\xa0\xa8\x63\xc5\xc6\x48\x2d\x8e\xce\x30\x66\x93\xf2\x6d\x86\x27\xdb\x78\x4a\x45\xa1\xfd\x5e\x1d\x34\x0f\xd8\xff\xc3\x51\x36\x9d\xa3\xea\x0e\xb2\x09\xd1\x30\x46\x14\xf7\xce\x46\xeb\xfc\xcc\x7b\xba\xea\x07\x57\x2b\xee\xd2\x73\xbe\xef\xab\x70\x37\x4c\xaf\xcc\x21\xe5\x0d\x20\xeb\xa6\x9c\x2e\x43\xc8\xea\x87\xe5\x95\xf5\x28\x3f\xdd\x55\x5b\x0f\xc0\x5a\x81\x57\x0f\x33\xf6\xbe\xc2\x7a\x00\xd5\x0a\x3a\x7d\x7c\x5b\xd1\x57\x52\x2f\xa8\x80\x85\x63\x73\x42\xaf\x87\xab\x12\xcb\xf0\xb5\xa3\x1b\x62\xdb\x04\x28\xb7\x8e\x6d\xb4\x32\xfb\x0b\x1a\xf3\x7e\x73\xef\x28\xb2\xa7\xc8\x4e\xb4\x01\x86\x2d\xa3\xc4\xa5\x1c\x9d\x48\x03\x8d\x5b\xde\xe8\x32\x31\x97\x33\x2c\x8e\xd1\xee\x20\x96\xa0\x38\xd0\x99\xf0\xc0\x22\xfc\x67\xaa\xcf\x44\x50\x62\xa4\x5a\xc0\x84\x21\xa7\x50\x2d\xea\x5f\x50\x69\x1b\xe6\xaa\x22\x51\xfb\x5e\xc9\xf6\x45\xf3\x4b\x7b\x68\x5c\xd5\x03\x91\xb9\x3b\x1b\xd9\xb0\xc5\xb9\x52\x36\x0f\xdf\x5c\xdb\xce\x5d\xeb\x00\xb1\x3b\xe3\xf7\x8b\xec\x27\x16\xa3\xd0\x38\x50\x64\x1b\xd0\xc2\x22\x5b\x19\xef\x2b\xb2\xbd\xf1\xfd\xf2\x2b\xd8\xe5\x32\xe2\xee\xe3\xd9\x9b\xd5\xaa\x62\x21\x30\x27\x9c\x51\x90\x02\x03\xa4\x76\xc2\xaa\x95\x95\x62\x2a\xd5\xe2\x9a\xfd\x42\x9b\x89\x73\x96\x32\xa3\xad\x93\x55\x39\x1d\xe8\x44\xe6\x9c\xda\xce\x21\xa2\xa8\x4f\xb0\x93\x7a\x8c\xe6\xce\xae\x58\x2f\x5f\xfd\x59\x4c\xdf\x3f\x5e\xbe\x6a\x56\x3b\x28\x45\x7d\x0d\x1f\x4b\x51\xe6\xa6\x17\xfc\x8b\x17\x05\xfc\xff\x5f\xd8\x3f\x4f\x69\xdf\x90\x14\xb5\x4e\x70\x39\xed\x1b\x23\x87\xff\xd2\x23\x7f\x20\x70\xff\xc8\x3e\x13\x6e\xbc\x15\x0c\xae\xa6\x6e\x54\xc6\x6d\x64\x99\xcb\x1b\xba\x6d\x66\xa6\x81\x4d\x85\x54\x5b\x79\x65\x9c\x60\x3c\x73\x1b\x42\x48\x12\xbb\x1f\xd2\xee\x8e\x6e\x46\xf9\x61\x7d\x1d\x84\xb7\xbb\xbb\xe5\x80\x3a\xac\xaf\xbb\x93\xb6\x2d\xcd\xc5\xd4\x70\xcb\x69\xca\x8c\x70\xe7\xe2\x75\xd5\x64\x42\xc4\x94\x8c\x39\x02\xd1\xae\x42\xf5\xee\x04\xee\x12\x16\x27\x70\xc7\x38\xb7\xf3\xa7\xe2\x0f\x59\xba\x07\xe4\xaa\x75\xab\x28\x04\x97\x93\x62\xbf\x8a\x66\xb8\x28\x4a\xc6\x1b\x64\xd5\xb7\x6d\x87\x8d\x51\x99\x60\xdc\x4d\x63\x6f\x5d\x65\xd5\x9e\x64\x19\xaf\x6a\x73\x8b\xfa\xd0\x22\x4f\x71\xaf\x95\xec\x26\x27\xb6\x5e\xd5\xb9\x72\x78\x62\x8a\xc2\xf7\xcd\xe3\x77\xcc\x1e\xed\x7f\x00\x95\xe8\xc2\x9a\x12\x13\x27\x05\x7a\x3b\x53\x55\x6a\xbf\x72\x64\xe9\xbd\xca\xfb\x92\xaa\x7a\x58\x12\x35\xbd\x10\xfa\x2d\x5c\xf3\xcf\x9d\x6d\xa2\x1a\xfd\xc5\xa0\xd5\x52\x0a\x3b\x72\x37\xb7\x89\x27\x90\x6d\x6e\x13\xcb\x5f\x54\x54\xd7\x89\x01\x93\x68\x3f\xa4\x9d\x1c\xbd\x1f\xbb\x83\xb8\x39\x08\x65\xe0\xbb\x47\x57\x26\x5a\x5c\x04\x33\xd4\xde\xd7\x82\x40\x73\x65\x33\xbf\x94\x08\x32\x45\xba\xfd\x22\x7d\x4f\x75\x33\xcf\x56\x6e\x7d\xfa\x5e\xfc\x4a\x67\xf3\xc3\x8a\x7b\x97\x00\x6e\x69\x2f\x6e\xda\x9d\x0f\x45\x3d\xf0\x76\xaa\x51\xf5\xe1\xe6\xa7\x47\x75\x93\x77\x8d\x33\xc6\xed\x3a\x03\xdf\x96\xf4\xf4\xba\x5a\xc2\x65\xea\xee\x87\x9e\x45\xc0\x9e\x4e\x59\x4b\xc8\xb6\xea\x84\xca\x8f\xcf\x25\x64\x4f\xa7\xcc\x86\xec\xe8\xe8\xc7\xd1\xbf\x01\x00\x00\xff\xff\x5f\x5a\x74\xc9\xe0\x3a\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 15072, mode: os.FileMode(420), modTime: time.Unix(1510298069, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

