/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
    "io/ioutil"
    "os"
    "path/filepath"
    "strings"
    "time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
    gz, err := gzip.NewReader(bytes.NewBuffer(data))
    if err != nil {
        return nil, fmt.Errorf("Read %q: %v", name, err)
    }

    var buf bytes.Buffer
    _, err = io.Copy(&buf, gz)
    clErr := gz.Close()

    if err != nil {
        return nil, fmt.Errorf("Read %q: %v", name, err)
    }
    if clErr != nil {
        return nil, err
    }

    return buf.Bytes(), nil
}

type asset struct {
    bytes []byte
    info  os.FileInfo
}

type bindataFileInfo struct {
    name    string
    size    int64
    mode    os.FileMode
    modTime time.Time
}

func (fi bindataFileInfo) Name() string {
    return fi.name
}
func (fi bindataFileInfo) Size() int64 {
    return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
    return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
    return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
    return false
}
func (fi bindataFileInfo) Sys() interface{} {
    return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesDe_deAllJson,
        "wski18n/resources/de_DE.all.json",
    )
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
    bytes, err := wski18nResourcesDe_deAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x41\x6f\xdb\x3c\x12\xbd\xe7\x57\x0c\x72\xf1\x25\xd0\xb6\x5d\x2c\xb0\xe8\x2d\x68\xbb\x6d\xd0\x36\x0d\x92\x6c\x8b\xa2\x5b\x20\x8c\x34\xb2\x58\x53\xa4\x40\x52\x0e\x5c\xc1\xff\x7d\x41\x51\xb2\x9d\x84\xa2\x28\x59\xf6\x76\x81\x2f\x27\xc7\xe6\xbc\xf7\x66\x48\x0e\x67\x24\xfe\x38\x01\xa8\x4e\x00\x00\x4e\x69\x72\xfa\x1a\x4e\x3f\x20\x63\xe2\xf4\xcc\x7e\xa5\x25\xe1\x8a\x11\x4d\x05\x37\xbf\x9d\x73\x38\xbf\xba\x80\x4c\x28\x0d\x79\xa9\x34\xdc\x23\x14\x52\x2c\x69\x82\x49\x74\x7a\x02\xb0\x3e\x7b\x0a\xf7\x99\x2a\x45\xf9\x1c\xe2\x3c\x81\x05\xae\x3a\x80\xdb\x51\xb3\x38\x4f\x66\x40\x79\x51\xea\x7a\xb4\x13\x32\x6f\x06\xe7\x84\xd3\x14\x95\x8e\x56\x24\x67\x90\x52\x86\x3d\xe8\x0e\x03\x27\x01\x29\x75\x26\x24\xfd\x5d\x03\xc0\xdd\xc7\x77\xdf\xef\x3a\x90\x5d\x23\x9d\x90\x0f\x19\x55\x8b\x3a\x78\x77\x1f\xbe\xdc\xdc\x76\xe1\x3d\x1b\xe6\x04\xe3\x24\x47\x55\x90\xb8\xcb\xdf\xed\xef\x7d\x5a\xbe\xbe\xbb\xbe\xb9\xf8\x72\x19\x20\x67\x33\xd2\x3d\xcb\x4d\x64\xeb\xa0\x02\x17\x1a\x52\x51\xf2\x04\x88\x86\x82\xe8\x0c\xaa\x2a\x2a\xa4\xf8\x85\xb1\xbe\x22\x3a\x5b\xaf\xa3\xff\xf0\xae\xb9\x1a\x81\xe4\x5d\x78\x55\x55\x4f\xf7\x7a\xfd\x37\xf3\xc9\x7c\xa8\xa1\x23\x98\x50\xf3\x21\xa8\x02\xe2\x4c\xd5\x63\x2c\x9d\xa1\xc5\xfb\x51\x55\x91\x19\x61\xd1\x7e\x86\x46\x7b\x08\x9e\x53\xde\xbf\xdb\x30\xb4\x3b\xcd\x1a\x40\x2a\x24\x24\x58\x30\xb1\xca\x91\xeb\x6e\x39\xe1\xf6\x83\xe9\x4b\xbe\xaf\x80\xa7\x08\x4e\x09\x26\x64\xb2\xe4\x9a\xe6\x9b\x70\xaa\xb2\x28\x84\xd4\x98\xc0\xfd\x0a\xbe\x14\xc8\xed\xae\x2a\x18\xd1\xa9\x90\x79\xb7\x98\x71\x58\xee\x2d\xaf\x16\x56\x3c\x64\x44\x41\x9c\x09\x85\x1c\x08\x14\x44\x6a\x1a\x97\x8c\xc8\x0d\x91\xf1\xd4\x10\x93\xd8\xc8\xe8\x16\xb7\x0f\xa2\x7b\xf2\xf8\xd6\xb9\xd6\x54\xaf\x0a\x3c\x03\x85\x1a\xb4\x00\x2e\x12\xfc\xa5\xba\x26\x2e\xd0\xda\x49\x7d\x6b\xd4\x95\x3a\x43\xae\x69\x6c\x53\xf9\x02\x57\x6d\xcc\x63\xc1\x53\x3a\x2f\x25\x26\xdd\xd1\x18\x82\xd0\x29\x61\x73\xb4\x0e\x24\xf6\xdb\x75\xd2\x6d\x4e\x89\xa1\x7c\x3d\x86\x41\xfe\x55\x55\x44\x0a\x6a\xfe\x5b\xaf\xcf\x20\x95\x22\x6f\xbe\x52\xa2\x94\x31\xfa\xb2\xed\x28\x28\xef\xbc\xb7\x73\xa5\x50\xef\x00\x94\x3a\x0b\x13\x13\x0c\x11\x36\x15\x55\x15\x6d\xfe\xdf\xf5\x68\xf3\x65\x98\xaa\xf1\x98\x4e\x99\xff\x22\x94\x61\x62\x76\xd2\x1c\xed\xc9\xf0\x6c\xc3\x29\x0b\x6b\xd2\xd2\xb7\x3a\x2d\x29\x94\x4b\x1a\xe3\x6b\xc3\x84\x52\xfa\x14\x4f\x06\xef\x14\x7f\xa3\x89\xac\xb3\x40\xc9\x73\x22\x55\x46\xd8\x4e\xf2\xa4\x3c\x15\x16\x9a\x89\x98\x30\x58\x12\x56\xa2\xea\x96\x3a\x12\xac\x23\xe9\xf9\x20\x28\xd7\x28\x39\xfa\xce\xab\x60\x7b\x27\xfd\xdb\xcd\x81\x06\xb1\xc8\x0b\x86\x26\xdc\xaa\x8c\x63\x54\x2a\x2d\x19\x5b\x75\x33\x07\x99\x3a\x49\xdf\x0b\x0d\x28\xa5\x90\x10\x4b\x24\xda\x1c\xb8\x05\x89\x17\x64\x8e\xf0\x40\x75\xd6\xfc\x96\xa3\x52\x64\xbe\x33\xb9\x40\x78\xd2\xda\x89\xc4\xfe\x60\x3e\xf8\x56\xd5\x41\xa8\x42\x9d\xb2\xe7\xdd\xff\xb1\x4f\xdb\x9d\xf6\x86\x51\x33\xd1\xef\x8c\x79\x87\xac\x8e\xc1\x4e\xe0\x0b\xbe\x24\x8c\x26\x4d\x9f\x27\x52\xf8\xde\xd3\xc0\x79\x0c\x82\x67\xa3\xa0\xc7\x98\x8a\xfd\x68\x42\x9d\x91\x25\x3b\xca\x66\xd9\x93\xa7\xc7\x1d\x85\xba\x66\xa9\xb3\xbd\x26\xba\x54\x66\x6a\x0f\xec\xdb\x41\x48\x43\xe7\x4d\x4b\x3a\x9f\xa3\x3c\xc6\xd4\xed\x4f\x35\xd4\xa9\x14\x31\x39\xa6\x67\x7b\xf2\x0d\x3d\x9b\xee\x29\x4f\xcc\xff\x47\xcc\xe7\xfb\x53\xf6\x9d\xfa\x22\x35\x7d\x35\xf2\x04\x79\xbc\x32\xa6\x09\x16\x97\x24\xc7\xf5\x1a\x12\x9a\x34\xc5\xbd\x3d\xdd\xcd\xe1\xbe\x39\xdb\xe1\xba\xe4\x70\xb7\xed\x01\xdb\xde\xf8\xce\xd4\x45\x12\x73\xb1\x44\xdb\x0a\x12\xc6\x56\x4d\xeb\x8e\x09\x10\xa5\x50\x7b\x4a\xab\x3f\x41\x99\x27\x64\x3b\xa7\x7a\x55\x45\xa2\xd4\x45\xa9\xd7\x6b\x88\xa2\xc8\xeb\x8f\xc7\xac\x87\xac\x4e\x4b\x43\xa9\x9c\x46\x3d\x44\x8f\xf6\xd4\x50\x42\xaf\x71\x0f\x71\xbb\xd4\x87\x72\x76\xd9\x05\xd2\xb5\x3b\x6b\x2c\x6d\x97\x7d\x0f\xfd\xe3\x15\x3d\x88\xd9\x63\xea\x2e\xde\x3e\x46\xf0\x86\xf0\x18\x19\x6b\xcc\x7b\x1f\x7e\x79\x4d\x7a\x48\x8c\x41\xd8\x23\x36\xbf\x4d\x47\x97\xb4\x1d\xe4\xdf\xfd\x9e\x46\x69\x00\x44\x5f\xd6\xb4\x69\x64\x44\xa7\xd4\x65\xf8\xe7\x7a\xdd\x22\x3c\x5f\x82\xdb\x7c\xdc\xbd\x7c\x43\xad\xfb\xfd\x1f\x7b\x1c\x84\x85\x66\x0f\xf4\x9e\x32\x22\x41\x86\xc7\xe9\x06\xa7\x63\x0a\x75\xe9\xc0\x95\xfa\x54\x3c\x7f\x75\x21\x4f\xe2\x79\xf8\x2e\x64\x42\xaa\xa1\x4e\x1d\xb8\x0b\x99\x9a\x2f\xd4\xbd\xc3\x3f\x21\x9b\x90\xca\xe9\xd4\xb7\xf3\xeb\xcb\x8b\xcb\xf7\xaf\xe1\x36\x43\x98\xd9\xe7\xcd\x33\xf8\x7e\xfe\xf9\x93\x7d\x76\xce\x37\x21\x45\xae\xa9\xae\x9f\xa6\x27\x58\x48\x8c\x89\xc6\x24\x82\x2b\x86\x44\x21\x94\x0a\x61\x66\x82\x3e\x03\xca\x95\x46\x62\x6a\x77\x48\x50\xc5\x92\xde\x63\x62\x70\x54\x81\x31\x4d\x9b\xf7\x30\x9e\x6e\xe3\x7f\xa9\x28\x74\xde\xdb\x42\xf3\x88\xf3\x3f\x1d\x65\x57\x1d\xe5\x2a\x64\x33\xa2\xe0\x1e\x91\x3f\xaa\x8d\x36\xfd\x99\xb7\xba\x1a\x07\xe7\x14\x77\xe5\xa9\xef\xc7\x2a\xdc\x0f\xd3\x2b\x73\x4a\x79\x13\xc8\xba\x6d\xb6\xcb\x14\xb2\xc6\x61\x79\x65\x3d\xeb\x4f\xf7\xd5\x36\x02\xd0\x29\xf0\xfa\x69\xc7\x3e\x56\xd8\x08\x20\xa7\xa0\xf3\xe7\x4f\x2b\xc6\x4a\x1a\x05\x15\x90\x38\xb6\x15\xba\x1b\xae\x6d\x2c\xc3\x73\xc7\x30\xc4\xbe\x0d\xd0\x1c\x1d\xbb\x68\x4d\xf7\x17\xb4\xe6\xfd\xe6\xde\x55\x64\xaa\xc8\x41\xb4\x01\x86\x3d\xab\xc4\xb6\x1c\x83\x48\x03\x8d\x7b\xde\x45\x53\xbe\x14\x0b\xac\xcb\x68\x5b\x88\x65\xc8\x8f\x54\x13\x1e\x59\x84\xbf\xa6\xfa\x4c\x78\x42\xb4\x90\x2b\x48\x29\xb2\x04\xda\xa4\xfe\x15\xa5\x32\x61\x6e\x2f\x6b\x2a\xdf\xcb\xe4\xb1\x68\x7e\x69\x4f\x8d\xdb\x9b\x4c\x64\x69\x6b\x23\x13\xb6\xb8\x94\xd2\xf4\xe1\xdb\xc7\xb6\x4b\x3b\x3a\x40\xec\xde\xf8\xe3\x22\xfb\x89\xc6\xc8\x15\x4e\x14\xd9\x0e\xb4\xb0\xc8\xb6\xc6\x87\x8a\xec\x68\x7c\xbf\xfc\x16\xb6\xaa\x22\x66\x3f\x5e\xbc\x5d\xaf\x5b\x16\x02\xf6\x95\xaf\xe0\x18\x20\x75\x10\x96\xfb\x52\x31\xe6\x42\xae\x6e\xe8\x6f\x34\x9d\x38\xa3\x39\xd5\xca\x38\xd9\x5e\x04\x04\x95\x89\x92\x25\x66\x72\x08\xaf\x6f\x56\x98\x4d\x7d\x8f\xfa\xc1\x64\xac\x97\xaf\xfe\x59\x6f\xdf\x7f\xbc\x7c\xd5\xad\x76\x52\x0a\xf7\xed\x43\x9a\xa3\xb0\x6f\xc8\x07\xc3\xbf\x78\x51\xc3\xff\xfd\x85\xf9\xf3\x5c\x4a\x9c\x92\xc2\xe9\x04\x13\xf3\xb1\x31\xb2\xf8\x2f\x3d\xf2\x27\x02\xf7\xaf\xec\xf6\xba\x42\xcd\x60\x6f\x03\xce\x9a\xb8\xcd\x0c\x73\xf3\x84\x6e\x97\x99\x2a\xa0\x73\x2e\xe4\x4e\x5f\x19\x67\x18\x2f\xec\x81\x10\xd2\xc4\x1e\x86\x74\xb8\xa3\xdb\x55\x7e\x5c\x5f\x27\xe1\x1d\xee\x6e\xb3\xa0\x8e\xeb\xeb\xfe\xa4\x7d\xa9\xb9\xde\x1a\x36\x9d\xe6\x54\x73\x5b\x17\x6f\xee\x7b\x66\x84\xcf\xc9\x3d\x43\x20\xca\xde\xad\x7d\x38\x83\x87\x8c\xc6\x19\x3c\x50\xc6\xcc\xfe\x69\xf9\x43\x52\xf7\x84\x5c\x4e\xb7\xea\x2b\xec\x22\xad\xcf\xab\x68\x81\x2b\xdf\x4d\x23\xf7\xd8\x7e\xd8\x18\xa5\x0e\xc6\xdd\x0e\x36\xc0\x27\x3f\x4f\xfe\x1b\x00\x00\xff\xff\xaa\x39\x54\x99\x85\x33\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesEn_usAllJson,
        "wski18n/resources/en_US.all.json",
    )
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
    bytes, err := wski18nResourcesEn_usAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 13189, mode: os.FileMode(420), modTime: time.Unix(1506953492, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesEs_esAllJson,
        "wski18n/resources/es_ES.all.json",
    )
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
    bytes, err := wski18nResourcesEs_esAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesFr_frAllJson,
        "wski18n/resources/fr_FR.all.json",
    )
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
    bytes, err := wski18nResourcesFr_frAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesIt_itAllJson,
        "wski18n/resources/it_IT.all.json",
    )
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
    bytes, err := wski18nResourcesIt_itAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesJa_jaAllJson,
        "wski18n/resources/ja_JA.all.json",
    )
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
    bytes, err := wski18nResourcesJa_jaAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesKo_krAllJson,
        "wski18n/resources/ko_KR.all.json",
    )
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
    bytes, err := wski18nResourcesKo_krAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesPt_brAllJson,
        "wski18n/resources/pt_BR.all.json",
    )
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
    bytes, err := wski18nResourcesPt_brAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesZh_hansAllJson,
        "wski18n/resources/zh_Hans.all.json",
    )
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
    bytes, err := wski18nResourcesZh_hansAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesZh_hantAllJson,
        "wski18n/resources/zh_Hant.all.json",
    )
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
    bytes, err := wski18nResourcesZh_hantAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
    cannonicalName := strings.Replace(name, "\\", "/", -1)
    if f, ok := _bindata[cannonicalName]; ok {
        a, err := f()
        if err != nil {
            return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
        }
        return a.bytes, nil
    }
    return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
    a, err := Asset(name)
    if err != nil {
        panic("asset: Asset(" + name + "): " + err.Error())
    }

    return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
    cannonicalName := strings.Replace(name, "\\", "/", -1)
    if f, ok := _bindata[cannonicalName]; ok {
        a, err := f()
        if err != nil {
            return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
        }
        return a.info, nil
    }
    return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
    names := make([]string, 0, len(_bindata))
    for name := range _bindata {
        names = append(names, name)
    }
    return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
    "wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
    "wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
    "wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
    "wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
    "wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
    "wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
    "wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
    "wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
    "wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
    "wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
    node := _bintree
    if len(name) != 0 {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        pathList := strings.Split(cannonicalName, "/")
        for _, p := range pathList {
            node = node.Children[p]
            if node == nil {
                return nil, fmt.Errorf("Asset %s not found", name)
            }
        }
    }
    if node.Func != nil {
        return nil, fmt.Errorf("Asset %s not found", name)
    }
    rv := make([]string, 0, len(node.Children))
    for childName := range node.Children {
        rv = append(rv, childName)
    }
    return rv, nil
}

type bintree struct {
    Func     func() (*asset, error)
    Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
    "wski18n": &bintree{nil, map[string]*bintree{
        "resources": &bintree{nil, map[string]*bintree{
            "de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
            "en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
            "es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
            "fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
            "it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
            "ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
            "ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
            "pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
            "zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
            "zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
        }},
    }},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
    data, err := Asset(name)
    if err != nil {
        return err
    }
    info, err := AssetInfo(name)
    if err != nil {
        return err
    }
    err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
    if err != nil {
        return err
    }
    err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
    if err != nil {
        return err
    }
    err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
    if err != nil {
        return err
    }
    return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
    children, err := AssetDir(name)
    // File
    if err != nil {
        return RestoreAsset(dir, name)
    }
    // Dir
    for _, child := range children {
        err = RestoreAssets(dir, filepath.Join(name, child))
        if err != nil {
            return err
        }
    }
    return nil
}

func _filePath(dir, name string) string {
    cannonicalName := strings.Replace(name, "\\", "/", -1)
    return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

