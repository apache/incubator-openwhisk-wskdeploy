// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x51\x6f\x1b\xb9\x11\x7e\xf7\xaf\x18\xe4\xe5\x5a\xc0\x50\x93\x2b\x0a\x14\x01\x8a\x22\xa8\xdd\xd6\xbd\xc6\x0e\xec\xe4\x82\x22\x17\xac\xe9\xe5\xec\x8a\x27\x2e\xb9\x20\xb9\x52\x74\x82\xfe\x7b\x31\xe4\x52\x5a\xc9\xe2\xee\x4a\x91\x71\x7e\xa2\xc5\xe1\xf7\xcd\x0c\x87\x33\x43\xee\x97\x0b\x80\xd5\x05\x00\xc0\x2b\xc1\x5f\xbd\x85\x57\x95\x2d\xb3\xda\x60\x21\xbe\x65\x68\x8c\x36\xaf\x2e\xc3\xac\x33\x4c\x59\xc9\x9c\xd0\x8a\xc4\xae\xfd\xdc\x05\xc0\xfa\xb2\x07\x61\xc1\x8c\x12\xaa\x4c\x60\x7c\x6e\x67\x87\x50\x6c\x93\xe7\x68\x6d\x02\xe5\xa1\x9d\x1d\x42\x11\xaa\xd0\x09\x88\x1b\x9a\x4a\xae\xff\xd5\x6a\x95\x55\xc2\x5a\xa1\xca\x2c\xaf\x78\x36\xc3\x65\x02\xe8\x3f\x0f\x77\xb7\x20\x54\xdd\x38\xe0\xcc\x31\x78\x1f\x56\xc1\x0f\x79\xc5\x7f\x00\x5a\x97\x64\x21\xe0\x42\xb2\x32\x53\xac\x42\x5b\xb3\x1c\x13\x1c\xdb\xf9\x61\x2c\xd6\xb8\x69\x8f\xba\x34\xad\x8d\xf8\xcd\xff\x00\x8f\x3f\x5d\xff\xef\x71\x0c\x68\x2d\xb2\xa9\xb6\x2e\x01\xba\x98\x0a\x3b\x83\x77\x1f\x6e\xe0\xf1\xdf\x77\x0f\x1f\xc7\x22\xce\xd1\x58\x42\x18\x04\xfd\xf9\xfa\xfe\xe1\xe6\xee\x76\x0c\xee\x0c\x97\x59\x21\x64\xca\x93\x35\x73\x53\xd0\x05\xb8\x29\xc2\x64\x86\x4b\xf0\xb2\xc3\xb0\x39\x1a\x37\x1a\x97\x84\x07\x80\x6b\xa3\xab\xda\x65\x1c\x6b\xa9\x53\x5b\x75\xa5\x61\xa9\x1b\x30\xc8\xa4\x5c\xc2\x82\x29\x07\x4e\x43\x58\x02\x6e\x2a\xec\xdf\xe1\x0f\xcb\x3f\xdd\xfe\xf1\x2d\x0c\xf2\x34\xea\x04\xa6\xb8\xe8\x48\x2e\x8a\xb0\x74\xfc\xfd\xa2\x3e\x48\x64\x16\xa1\x36\x7a\x2e\x38\x02\x53\x40\x2b\x50\x39\x91\x87\xa0\x74\x7a\x86\x6a\x0c\x51\x2d\x7a\x62\xf2\x19\x11\x6d\x0d\xc9\xd3\x61\x82\x42\x1b\xb8\xab\x51\x7d\xa6\x20\x1b\xc1\x35\x74\x42\x9f\x9b\x05\x9b\x25\xf0\x85\x63\xc1\x1a\xe9\x60\xce\x64\x83\x20\x2c\x94\x0d\x5a\xf7\xb5\x8f\xb7\x62\x4a\x14\x68\x5d\xa6\xb4\xcb\x0a\xdd\x28\x9e\x60\x7e\xdf\x0a\xfa\x80\x03\xa5\x1d\x78\x69\x60\x0e\x7c\x50\x7e\x59\xad\x26\x34\x58\xaf\xbf\x4e\x7e\x51\x69\xc2\xc6\xe7\xba\x0d\x6d\x6f\xbc\x7c\xf2\x19\xae\x83\xec\xfd\x19\x96\x54\xa8\xdc\x31\x44\x03\xa1\x79\x98\x2a\x2e\x1a\x24\x33\x8d\x72\xa2\x42\xca\xe5\x15\x73\xf9\x34\xc1\x72\x1f\xc4\x3c\x4f\xbb\x84\xa8\x6c\x8d\xb9\x28\x04\x72\x10\x0a\xa2\xc6\xc0\x35\x5a\xef\x68\x8f\x08\x0b\xe1\xa6\xc0\x72\x1f\xba\x56\x37\x26\xc7\xb0\x15\xf8\xcd\xa1\xa2\xfc\xe6\x51\xf1\x9b\x8b\xca\xb7\xb2\xf4\x6b\x18\x0e\x6d\x4d\x34\x22\x9f\x32\x55\x62\x2a\x10\xa2\x0d\xad\x14\x9d\xe0\x3d\x73\x9e\x98\x45\x0e\x74\xc2\xa6\xd8\xaf\xf1\x77\xa9\xd9\x28\xdb\xd4\xb5\x36\x6e\x50\xd5\x51\xee\x16\xc1\xd9\x1b\x4c\xaf\x5c\xc7\x82\xf1\x0a\x06\xa9\x4c\x8a\x4a\xb8\x4c\x94\x4a\x9b\xa4\x86\x37\x6a\xce\xa4\xe0\x91\xc3\x2f\xf1\x4c\x7e\x44\xca\xee\xa9\xd8\xc2\xf5\xf2\xe7\x5a\x15\xa2\xdc\xf4\x15\xfd\x89\xf2\x23\x59\xb8\x9b\x18\xa9\x5e\xb5\xde\x08\x50\xcd\xb1\x8c\xbd\x19\x93\x18\xa9\xdc\x92\xc8\xf7\xf1\x0c\x65\x4b\x62\xda\xa6\xc7\x93\xa8\x5a\x53\xfa\x5a\xbc\x7d\x7b\x56\xab\x09\x0d\xd7\xeb\x4b\x28\x8c\xae\xe8\xff\x10\xfd\xeb\xf5\x28\xc6\xb0\x5d\x43\x8c\x24\x16\x77\xca\xa2\x3b\x8d\x6b\xe3\x9c\x21\xb6\x1d\x2f\xae\x56\x93\xcd\xff\x47\x5b\x89\xc6\x64\x25\xba\x78\x8a\x53\xad\xf7\x3f\x99\x90\x21\xb9\x94\xe8\xfc\x31\xdc\x1e\xcc\xb8\x34\x10\x6f\xca\x2b\x58\x34\x73\x91\xe3\x5b\xd2\x05\x8d\x19\x50\xa4\x51\x15\x33\x76\xca\xa4\xcc\xa4\xce\x99\x4c\x15\x86\x28\xd6\x21\x22\x67\x05\x72\xbf\x32\xd4\x5b\x3b\x96\x4d\xa1\x5b\x68\x33\x3b\x89\x4f\x28\x87\x46\x61\x7f\x31\xda\xd6\xac\x70\xbf\x41\x9e\xcc\x3f\x57\x1b\x51\xc8\x75\x55\x4b\x24\xff\xb6\x97\xa2\xa2\x91\x72\x39\x96\xa8\xf0\xfb\x35\xcc\xc2\x05\x6f\x4f\x61\x60\x23\xb2\x0d\x17\xdc\x37\x0a\x1e\x17\x76\xd6\x36\x84\xb1\xfc\x3e\x52\x1c\x18\xac\xf4\x1c\xa1\x66\xc6\x09\xdf\x3f\x86\x39\xe4\xc0\xac\x45\xd7\xef\xfe\x8e\xa6\x39\x53\x39\xca\xb4\xb2\x77\x3f\x4d\xe0\x1f\x41\x86\x5a\x82\xb1\xdd\x86\x3a\xc2\xeb\x9f\x3a\xc2\xa7\xf8\x7d\x87\xac\xd7\xf3\x3b\x4c\xbd\xbe\x1f\xcd\x77\xa4\xff\x46\xb7\x50\x3b\x24\x15\x53\xac\x44\x7e\x84\x71\xba\x00\x8e\xc1\x8f\x54\xca\x9c\x40\xdb\x6b\x30\xf0\xc6\x90\x7e\x2d\x53\x77\x9f\x5f\x2e\x0c\x17\xcc\xa8\xcc\x5f\x38\xa9\xe1\xaf\xd1\x90\x9a\x3d\x69\x97\x3a\x81\x19\x2e\xa9\x0f\xa0\x54\xbf\x60\x16\x0c\x3a\x23\x70\x4e\xfd\x09\x25\x04\x0f\x36\xd9\x82\xd1\x0f\xbe\x59\x94\x12\xac\xd6\x0a\x9e\x90\x34\x34\x98\x33\x72\x4d\x1d\x6e\x0f\x5c\x7b\xbf\x34\x16\x41\x38\xd0\x8d\xb3\x74\x97\xd0\x05\x7c\x34\x6c\x2e\x2c\x3c\x35\x42\xf2\x11\xa6\x50\x9d\xda\xa2\x67\x06\x6b\xc9\xf2\xe4\x7e\x45\x8b\xb4\xe4\x1d\xa3\x44\xe8\x13\x57\xab\x09\x35\x87\x6e\x59\xe3\x7a\x1d\xfa\xc4\x84\x11\x97\xd1\x0a\x52\xdf\xb5\x98\x0a\x17\x3b\x98\xd6\x21\xdb\x2d\xf0\xfb\x45\x28\x36\x11\x15\x53\x9c\x39\x6d\x96\x3d\xaf\x19\xa4\xf9\x46\xce\x33\x74\x76\x46\x58\x68\xb1\x26\xfd\x65\x2f\x5e\x0e\x7c\xd9\xa5\x00\xf8\x15\xf3\xbe\x26\x29\x52\xf8\xea\xcb\x3d\x25\xa7\x61\xdb\x16\x76\x82\xdf\xbb\xcb\xcf\xc7\xdb\xcb\xde\xe5\xc1\xb5\x35\xdc\x0b\x55\x1d\x90\x6a\xe7\x5a\xe7\x67\xe3\x2d\x6e\x28\x9b\x92\xf3\x38\xd6\xa8\x38\xaa\x3c\x79\xe5\x8f\xa2\xb0\x15\x0d\x1b\x16\x74\x98\x4c\x7a\x78\xe2\xc1\x1b\xc5\xf4\x69\x2b\x7c\x0a\xd7\x76\xc9\xb3\xfa\x99\x7c\x1f\xbc\x3a\x48\x03\x53\x66\xe1\x09\x51\xed\x24\xf4\x4d\x9e\x18\xaa\x53\x07\xb4\xa0\x2c\xd8\x98\x54\x97\x7b\xb5\x97\x04\x0f\xea\xf4\xfb\xd5\xdd\x68\xcf\xf3\x0a\x79\x1e\xbf\x46\xdc\xf1\x9e\x7d\x56\x3e\xd3\xbe\x7d\x5e\x62\x8e\xf7\x6e\x9f\x56\x9b\x3a\xa7\x1b\xc5\xb3\xb6\x80\x65\xbe\x80\xa5\x4f\x94\x44\x47\x41\xbe\x49\x0f\x5d\x4d\xda\xf4\xef\x0b\x05\xed\x5b\x5b\x26\xe8\xfc\xe7\x8d\x31\x64\x46\xac\x78\x6d\x02\x0a\x8f\x1e\x61\x4c\x08\xcc\xfa\xbd\x26\x6b\x47\xd7\x6e\xca\x6e\xb9\x41\xe6\xb0\x5f\x77\xff\xb4\x0f\x5e\x72\xc7\x02\xff\xb6\xe1\xbf\x09\x40\x85\xd6\xb2\xb2\xd3\xc4\x03\x53\xbc\x9d\xcb\x35\x0f\x13\x34\x18\x71\xcf\x08\xfe\x1c\xa3\x12\x7f\xe6\xd4\x97\x50\xc9\xeb\xb1\xcd\x9e\x83\x29\xf3\xe0\x0e\xf7\x66\xb1\x96\xa2\x93\x38\x47\x64\xcb\x93\x69\xe2\xc1\x1b\x38\xce\x07\xf1\xbf\x23\x49\xee\x19\x79\x4e\xfe\x91\xc9\x84\x82\xab\x40\xe4\x99\x50\x73\x3d\x4b\x25\x8f\xed\x1d\x36\x88\xf9\x53\x48\xcb\x60\x31\x45\xb5\x8d\x39\x67\x44\x59\xa2\x69\xa7\xce\x1b\x77\x0f\xd7\x1f\xde\xdd\xbf\xfb\x78\x77\x9f\xd0\xf1\x6f\x07\xff\xe0\x5a\x51\x97\x49\x1e\x92\x7a\xe1\x1f\xe6\x41\x0a\x85\xc0\x4c\x78\xfb\x9d\xa3\x09\x2f\x68\x87\xd7\xef\xfc\x1d\x56\xec\xf3\xbb\xfb\xdb\x9b\xdb\x7f\xbd\x85\xf7\x9b\xbe\xaa\x10\x28\x39\x7c\x60\xf9\x8c\x95\x08\x3f\x87\xaf\x36\x50\x35\xd6\x51\x03\x68\xc3\xad\x37\xf1\xbd\xef\x44\xb4\x7e\xd5\xf6\x17\xc7\x27\x42\x36\x0f\x6f\x87\xdd\xac\xba\xad\x9e\xed\xe7\xa6\x11\xca\x7e\x37\xfe\x69\x9e\xfd\xaf\xc8\x51\x59\x3c\x93\x67\x13\x68\xe3\x3c\x1b\x17\xbf\x94\x67\x4f\xc6\xef\x57\x3f\xc2\xfa\x87\x5a\x3f\xbc\xb9\x5a\xaf\x23\x0b\x83\xf0\xa8\xab\x15\x8e\x50\xf5\x28\xac\xc3\x19\x09\x2b\x6d\x96\x0f\xe2\x37\x7f\x85\xf3\x2f\xc7\x76\xa7\xb7\xb7\x53\xdd\x48\x4e\x9b\xc3\x94\x7f\x42\xa2\x6c\xf3\x84\x6e\x41\xf9\xef\xcd\x8f\x7f\xf5\x79\xe5\x2f\x6f\x7e\x4c\x6b\x7b\x56\x8a\x83\x46\x38\x51\xa1\x6e\xdc\x49\xf0\xaf\x5f\x7b\xf8\x3f\xbf\xa6\xbf\xb4\x11\x67\xa5\x38\x68\x84\xd4\xe5\xa9\x3e\x0a\xf8\x6f\x7a\xd4\x3f\x13\xf8\x50\x64\x7b\x64\x88\x9f\x20\x42\xb9\x84\xcd\xe3\xf9\x94\xa9\x92\x3d\x49\xa4\x36\xd1\x69\x50\x7a\x71\xd9\x7d\x72\x78\xc2\xee\x17\x8a\xc1\xc8\x3f\x23\x57\xbf\x59\xac\xae\x65\xfc\xbc\x71\xe0\xea\x3c\xe6\xa5\x21\xb6\xcb\x9d\xb7\x85\x01\xfb\x5e\x86\x94\x0c\xbd\xf8\x7a\xf1\xff\x00\x00\x00\xff\xff\x8d\x68\x03\xe5\x5e\x23\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 9054, mode: os.FileMode(420), modTime: time.Unix(1515718488, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

