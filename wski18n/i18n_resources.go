// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(436), modTime: time.Unix(1566374831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x3c\x6b\x6f\x1b\x39\x92\xdf\xe7\x57\x14\x06\x0b\x64\x16\x90\xe5\xec\xe2\x70\x58\x18\x97\x03\xbc\x89\x33\xeb\x9d\x64\x6c\xd8\xce\x0c\xe6\x12\xa3\x43\x75\x97\x24\xae\xbb\xc9\x5e\x92\x2d\x45\x63\xe8\xbf\x1f\xaa\x48\x76\xb7\x64\xf5\x43\x4e\x06\x77\xf9\x12\x49\x24\xeb\xc5\x62\xb1\x5e\xf4\xc7\xef\x00\x1e\xbf\x03\x00\xf8\x5e\x66\xdf\x9f\xc1\xf7\x85\x5d\x24\xa5\xc1\xb9\xfc\x92\xa0\x31\xda\x7c\x3f\xf1\xa3\xce\x08\x65\x73\xe1\xa4\x56\x34\xed\x82\xc7\xbe\x03\xd8\x4e\x7a\x20\x48\x35\xd7\x1d\x00\x2e\x69\x68\x68\xbd\xad\xd2\x14\xad\xed\x00\x71\x1b\x46\x87\xa0\xac\x85\x51\x52\x2d\x3a\xa0\xfc\x1a\x46\x3b\xa1\xa4\x45\x96\x64\x68\xd3\x24\xd7\x6a\x91\x18\x2c\xb5\x71\x1d\xb0\x6e\x78\xd0\x82\x56\x90\x61\x99\xeb\x0d\x66\x80\xca\x49\x27\xd1\xc2\x0f\x72\x8a\xd3\x09\x5c\x8b\xf4\x41\x2c\xd0\x4e\xe0\x3c\xa5\x75\x76\x02\x77\x46\x2e\x16\x68\xec\x04\x6e\xaa\x9c\x46\xd0\xa5\xd3\x3f\x83\xb0\xb0\xc6\x3c\xa7\xff\x0d\xa6\xa8\x1c\xaf\x58\x31\x36\x0b\x52\x81\x5b\x22\xd8\x12\x53\x39\x97\x98\x81\x12\x05\xda\x52\xa4\x38\x1d\xcd\x8b\xd6\x5d\x9c\xdc\x2d\x11\xae\x4a\x54\xbf\x2e\xa5\x7d\x80\x37\xcc\x4c\x41\x24\xdc\x69\x9d\x7f\x52\x9f\xd4\x9d\x86\x19\x2e\xa4\x82\xb5\x36\x0f\x52\x2d\x60\x2d\xdd\x12\xd6\xf6\xc1\x33\x3e\x01\x53\x79\x02\x5f\xd4\xbf\xbd\x80\x54\x17\x85\x50\xd9\x19\x01\xf8\xe4\xfe\xd4\x4c\x67\x88\x4b\x69\x61\x2d\xf3\x3c\xc8\xae\x85\x5f\x58\x8b\xce\xb6\x78\x95\x0a\x0a\xa1\xe4\x1c\xad\x9b\x6e\x44\x91\x83\x36\xad\x1f\x8a\xfc\x93\xba\x9c\x43\x5a\x19\x43\x24\x67\xd2\x60\xea\xb4\xd9\x40\xa6\xd1\x2a\x07\x4b\xb1\x42\x10\x6a\x53\x2f\x81\xb9\xcc\x71\xd2\x90\x03\xa5\x91\xca\x59\x70\x44\xd2\x12\xf3\x12\x0a\xb4\x56\x2c\x70\xea\x09\x45\x28\xb4\x75\xcc\x8e\x56\xb0\x16\x1b\x0b\x7a\x0e\x95\x65\x39\xd4\x40\x9c\x8e\x9c\x08\x95\x9d\x6a\x03\x95\xea\xe2\x4c\x18\x64\xa1\xec\x88\xa4\xf5\x05\x4e\x0a\x28\x85\x5b\x9e\x3a\x7d\xba\xc3\xf8\xb8\x59\x70\x92\xd5\x03\x59\xbd\x97\x07\x00\x44\x0a\x0f\xff\x3a\x92\x8a\xc1\xe9\xbd\xe4\x7c\x52\xe7\x95\x72\x4b\x3a\x36\x29\xab\xe3\xd9\x27\xd5\xc0\x36\x28\x32\x0b\xa9\xc1\x8c\x26\x88\xdc\xc2\xdc\xe8\x02\xfe\xf4\x8f\xab\xf7\x17\xa7\xd3\xb5\x7d\x28\x8d\x2e\x2d\xcc\x36\x90\xe1\x5c\x54\xb9\xfb\xa4\xae\x56\x68\xd6\x46\x3a\x8c\x3f\x41\xaa\xd5\x5c\x2e\x78\xd3\xe9\xa8\xbe\x7e\x77\x79\xf6\x49\x01\xec\x48\xf2\x24\x4c\xfa\xaf\xd6\xe4\xff\xee\x11\xc0\x95\x09\xea\xb9\x01\x91\xe7\xe0\x96\x06\x7b\x80\x8b\x52\x2e\x49\x83\xfe\x71\x75\x7b\x47\x5f\x2b\xb7\x84\x9f\x2e\x7e\x83\x93\x93\xfa\x14\xc3\xcf\xe7\xef\x2f\x6e\xaf\xcf\x5f\x5f\x74\x62\x1d\x71\xce\xed\x52\x1b\xd7\x6f\xb4\xae\x8d\x5e\xc9\x0c\x2d\x08\xb0\x55\x51\x08\x43\x52\xa6\xf9\xa4\xd3\x4f\x34\x75\x86\xa4\xe4\xd1\xba\x9d\xc6\xbd\xc6\x0c\x66\xc2\x62\x46\x2c\x47\x1a\x5b\x7b\x0b\xbf\x9d\xbf\x7f\x37\xc6\x2e\x05\x7a\xbb\x0d\xd3\x39\x38\xad\x73\xb0\xe8\xe8\x7c\xf1\xd9\x0c\x52\xdd\xe8\xca\x80\x2e\x51\xad\x99\xde\x32\xd8\xd9\x70\x2c\xc5\xee\x61\x1f\x4f\xcb\x0a\x8d\x25\xdc\x5d\xc2\x93\xca\xb1\x9d\x0b\xf3\x40\x55\xc5\x0c\x0d\xc9\xae\xde\xf0\xd1\xb8\xec\x46\xa5\xfd\x7c\x3b\x0d\x34\xc9\x33\xdb\x6c\x4e\xcd\xec\x0c\xdd\x1a\x51\x41\x9a\x4b\x12\xbb\x50\x19\x58\x34\x2b\x34\xa3\x2f\x85\xf1\x34\xb4\xb6\x97\xf0\x44\x55\xe0\x1f\x76\x54\xa7\x7b\x2b\x68\x9d\x2e\x09\xbe\xc8\xdb\xf0\x68\x8b\xe2\x74\x56\x1d\xb2\x0b\x6f\xe4\x7c\x8e\x6c\xd1\xa3\xc5\x35\x95\xa2\xbb\x9b\xc9\x39\xdb\x35\x42\xf4\xd3\xd3\x5f\x46\x5a\xb0\xde\xa9\x6d\xeb\xf5\x7c\x18\x27\xa5\xd1\xff\xc2\xd4\xd1\x79\x87\xeb\x9b\xab\x7f\x5e\xbc\xbe\x1b\xad\x27\x51\xd4\x1d\xfb\xf4\xa1\xf3\x9e\x61\x63\xe9\x15\x62\xac\x3e\x8c\xc5\x65\xb0\xd0\x2b\xb4\x4f\x71\xae\x97\x32\x5d\xc2\x1a\x0d\x36\x4e\x11\xd3\x41\xa7\x66\x47\x13\xf6\xed\xc5\x8e\x9f\x91\x61\x8e\x8e\x36\xfb\x30\x53\x3b\xc0\xfc\x75\x6e\x2a\x75\xf6\xff\xee\x7a\x3b\x0c\xe9\x90\x36\xc0\x0f\x5a\xe5\x1b\xf6\xaf\x2c\xcc\xb5\x69\x89\x87\xbd\x3f\x56\xb0\x42\x67\xf8\xe7\xd1\x7a\x83\x5f\x7a\xee\x81\x0b\x1e\x84\x40\xc9\x8e\x70\x6b\x91\x8f\x55\x9a\x11\x88\x2c\x6d\x97\x58\x60\xd6\x8f\x91\xac\xcd\x8e\x92\xcc\x2b\xc5\x7e\xb3\xb7\x11\x1d\xfe\x18\xad\x22\x07\xd4\xd3\xb1\xa7\x05\xfe\xc7\x0e\xa1\xb7\x36\xd5\xcf\xc3\xec\xe4\x88\x4b\x77\x9e\x8b\x45\x22\x4a\x99\xd0\xf5\xde\xc1\xbf\xbf\x9f\xce\xaf\x2f\xe1\x33\xdd\xff\x9f\x47\x42\xec\xbf\x88\x5a\x40\x7f\xb9\xb8\xb9\xbd\xbc\xfa\x79\x14\xdc\xca\x2d\x93\x07\xec\x3a\xdc\x34\xac\x8d\xfc\x9d\x7f\x80\xcf\x3f\x5d\xfc\x36\x06\x68\x8a\xc6\x25\xb4\x3b\x1d\x50\x49\xbe\x64\xbd\xe9\xc8\x4e\x69\x32\x6f\xe5\x18\xc0\xec\x8a\x75\x40\x6d\x3b\x75\x3f\x44\x4f\x4f\xda\x7d\xd7\x70\xe0\xb0\x78\xa9\xe4\xb9\x5e\x27\x01\x46\x57\xf4\xc9\x93\xa0\x9e\x34\x0c\xb5\x39\xbe\x7d\x72\xa9\x83\x86\xfa\x1e\x1c\x01\xba\x34\xb8\x92\xb8\xee\x80\x6b\x97\x4c\x68\x04\x7a\xba\x73\x51\x97\xb9\x50\x23\x30\x3c\xe0\x66\xf4\x96\x3e\xe0\x66\x2c\xe1\x5e\xd2\xc1\x10\xf4\x0a\x3a\x1a\x89\x3a\x9c\x76\x74\x31\x40\x21\xcc\x03\x66\xd1\x94\x8c\x12\x15\xc3\x49\xe8\xd0\x77\x31\x13\x50\xf1\x94\x61\x88\xd1\x3a\x0c\xec\xea\xce\xe5\x34\x02\x6c\x1d\x08\x74\xc0\x6d\xc6\x47\x33\x3d\x40\xa1\xf7\x0b\x72\xb4\x36\x4a\x7b\x04\x68\xeb\x8c\xec\x84\xec\xb7\xae\xb2\x48\x97\xd7\x5c\x2a\xcc\xc8\x2a\x3b\x59\xd4\xee\xf2\x08\x0c\xce\x74\x0b\x81\xc7\x40\x57\xae\xac\xc6\x10\xeb\xd5\x6d\x85\x66\xa6\x6d\x17\xc8\x30\x7a\x2c\xd0\x52\x18\x51\x74\x0a\xd8\x88\x02\x1d\x1a\x58\x89\xbc\x42\xbe\xbd\xc9\x98\xc2\x2f\xe7\xef\x3e\x5c\x7c\xa6\xcb\xbd\x10\x47\xa2\xea\x3b\x8d\x9f\xdf\x5e\xbe\xbb\xf8\x4c\x61\xae\x13\x92\x1d\xe4\x43\x14\xfc\xf3\xf6\xea\xe7\x61\xd4\x6c\x55\x93\x42\x5a\xf2\xc5\xf9\xbe\xe8\xbe\x2e\xe8\x22\xa6\x19\x4d\xec\x0e\x64\x0b\xa4\x05\xa5\x63\xd4\x5d\x19\xcc\xa6\x9f\xfa\xf6\x7d\x0f\xa3\x8f\x94\x7b\x30\xd2\x9d\xc7\xc1\xf4\x57\xe1\x19\x3a\x6e\x84\xa9\x89\xcd\x9f\x85\x2a\xb0\xd2\x97\x15\xdd\xe7\xe7\xe3\xe3\xe3\x94\x3e\x6f\xb7\xf7\x13\xef\x18\x3d\x3e\x4e\xad\xae\x4c\x8a\xdb\xed\x28\x9c\x7e\xc3\x86\x70\x72\x02\x22\xec\x95\x45\xf7\x3c\x5c\xb5\x78\x86\xb0\xed\xc8\x91\x58\xac\x7f\x78\x3e\x9f\xa5\x5c\xac\x13\xc1\x09\xe1\xc4\xe9\x07\x54\x83\x2c\xd3\x0a\xf0\x2b\x80\x57\x3c\x8f\xf9\x4a\x15\xc2\xd8\xa5\xc8\x93\x5c\xa7\x22\xef\x0c\x93\xc2\xac\x96\x67\x1b\x4c\x61\xf0\x78\x79\x75\x38\x9e\x23\x11\x2a\x74\x14\x1d\x3c\x1b\xa5\x54\x0e\x8d\x42\x07\xc2\x11\xbb\x95\xc9\x07\x78\x6d\xfc\x86\x24\x15\x2a\xc5\x3c\xef\xbc\xb5\xaf\x7e\x9a\xc2\x6b\x3f\xa7\x49\x18\x71\x1c\x34\x12\xc1\x5c\xc8\x6e\xe8\xad\x84\x74\x26\xb3\x70\x16\x8b\x32\x47\x87\x60\x2b\xda\xd2\x79\x95\xe7\x9b\x29\xdc\x54\x0a\x3e\x3f\x8d\xb8\x3e\x73\x80\xc0\x11\x2b\xd9\x46\x27\x45\x9e\x6f\x9a\xf0\xd4\x47\x22\x63\x29\xf5\xd9\xb2\xc4\x3a\xe1\xaa\x2e\x6f\xf1\xe4\xe4\xe4\xe4\xd5\xab\x57\xaf\x0e\x27\xd5\x6f\x79\x29\xd0\x04\x9a\x38\x0a\x2b\xd7\x46\x30\x1b\x23\xa2\x28\x9a\x0c\x42\x41\xc5\x0b\xa7\x5f\xc9\x9e\xbf\xd7\xed\xb5\xe3\x91\xf4\xee\xf7\x87\xb6\xcb\xda\xbb\xe3\xa3\xf1\x0d\xc9\x6f\x07\xe5\x33\x24\x18\x6a\x1d\x09\x27\xb1\xf8\xb6\x26\x2b\x97\x08\x97\x90\xbf\xd5\x81\xf4\xf1\x71\x9a\x16\xd9\x76\x1b\x52\x5f\x8f\x8f\x53\x5a\xe8\x36\x25\x6e\xb7\x6c\x29\x69\xed\x76\x7b\x3f\x9d\xf6\xe2\x66\x27\x79\x93\x44\x7d\x1e\xa8\xa3\x3d\x3e\x92\xcb\x1e\x10\x10\x91\xdb\xed\x3d\x2c\x85\x85\x19\xa2\xda\x61\xb8\x3e\x21\xe3\xb1\x77\x17\xde\xde\xc4\x71\x38\x48\xc0\x74\xda\x93\xb2\x0c\x28\x9a\xec\xf3\xb7\x63\xb1\x81\x39\x86\xc9\x38\xbb\x9b\xcd\x0f\xcd\x8c\x83\x8c\xf6\xf2\x99\x61\x89\x2a\x43\x95\x1e\x23\xce\x66\xd1\xf3\xf1\x34\x47\xa4\x53\xa6\x6f\x0e\xa2\xf9\x1a\xc5\x39\x4c\x05\x19\x86\xca\x74\xf9\x65\x6f\x76\x72\xce\x87\x59\xff\x3f\xbc\x23\x22\x3f\xc7\xe9\xc9\xd7\xed\xe0\x53\x33\xf7\x6d\xf6\x70\xe4\xc9\xe8\xa2\xa4\x7f\x1f\x3f\xec\x55\x0f\x9e\xb3\x93\x7d\x54\x85\x0c\xc1\x73\xef\x1c\xa6\xc8\xdf\x00\x75\x06\xa2\x8f\x16\xc8\x2a\x43\x3b\x19\x73\x9c\xad\x1b\xf1\x8f\xd3\xb7\xc8\xe3\x5c\x57\x2a\x4b\x02\xbd\xc1\x52\x75\x2a\x40\xc8\xaa\x1f\xb4\x90\x21\x75\xcf\x0d\x08\x44\x57\x2b\x71\x1f\x8b\xeb\xfb\x49\x5c\xbe\xa4\xfc\x67\x82\x20\x2c\xf3\xc2\xe5\xf1\xb1\x6e\x41\xc8\xa9\x25\xa1\x6c\xd4\x55\x79\xf3\xa3\x1c\x4c\x40\x2b\xdf\x67\x90\xf3\x18\xd9\x84\xeb\xb0\x8d\xbb\x55\x6f\x1b\xd1\x61\xea\x15\x01\x09\x88\x56\x79\xa2\x5d\xd5\xf4\xcd\x03\x41\xfb\x8d\xaf\xbb\x0d\x75\x5a\x5c\xdc\xdc\x5c\xdd\xdc\x76\xd0\xfd\x6a\xff\x1f\xf8\xe9\xf0\x64\xe0\xd5\xab\x9e\xeb\xc7\x98\xdd\x83\xf6\xa0\xf4\x5a\x25\xe4\x29\x0c\x1f\x75\x9a\x45\xa2\x0a\xab\xa6\xd0\x4a\x8e\x73\xcd\xc1\x56\xa5\x4f\xd1\x9f\x72\x5a\x79\x6a\x37\xd6\x61\x01\x33\xa9\x32\xa9\x16\x16\xb4\x81\x85\x74\xcb\x6a\x36\x4d\x75\x51\x97\xf7\xfa\xef\x4b\x63\xe2\x9d\x99\x1a\x14\xae\x8b\x4c\x6e\x2c\x02\x9e\xb2\xa3\x96\xdc\x5e\xc2\x1d\x49\xb1\x17\xe3\x8c\x06\xd1\x98\xed\x96\xeb\x02\x7e\x2c\xd5\x99\x1f\xa0\x0f\x03\xd1\x4c\x8b\x24\x7f\x56\x7a\x49\xca\x9e\x9c\x94\x3f\x88\xa4\x39\x62\x96\x48\xb5\xd2\x0f\x5d\x04\xbd\x65\xb3\x45\xe6\xc2\x4f\xe3\x03\x49\xcb\x60\xbd\xc4\x56\xa5\xcc\xf9\xbe\xa2\x30\xf4\xc7\x50\xfb\x80\x9b\x3a\x87\x42\xfe\xae\x70\xda\xf4\xe5\x87\xea\x39\x9c\x6e\xf8\x18\x85\x79\x4f\xfa\x18\xe0\x0c\xe2\x8c\xa9\xd4\x44\x69\xe7\x8d\x5d\x07\xc2\xf7\xed\x9c\x2b\xdb\x6a\x9e\x4d\xf1\x2e\x27\x3d\xdb\x1e\xf5\x10\x52\xf6\xde\x0b\x69\x0b\xe1\xd2\x2e\xf7\x9d\x18\xac\xd5\x83\x16\x64\x8c\x22\x8b\xf6\x54\xaa\xfd\xe4\xbe\x1f\x0f\x34\x70\x7f\x12\x93\xc9\x48\x78\x5b\xd9\xbc\xd1\xa4\xa2\x05\x64\x27\x97\xec\x47\x23\x1b\xfd\x4c\x84\xf8\x9f\xd4\x4b\xe4\xb2\x4b\x6c\x97\x7e\x94\x9b\xaa\xfc\x96\xd4\x69\x5b\xc2\x15\x3e\x13\x2d\x07\x3b\xb2\xb8\x58\x49\xb4\x0b\x5f\xa8\xa3\x35\xfe\xe3\x18\x39\x47\x12\x07\x44\x7d\x73\x0c\x41\x7b\x72\xe5\xa3\xe0\x29\x7a\x61\xc1\x67\x79\xbc\x28\xf1\x8b\x43\x65\x23\xd1\xf8\x85\xef\x30\x62\xe7\x6b\x58\xb1\xc9\x02\xbb\x12\x98\xcd\x51\x5e\xa0\xef\x23\x09\xb6\xb7\x49\x95\x3f\xa9\x88\xd2\xfd\x26\xd3\xd6\xf1\x1d\x2d\x53\x4f\x7a\xe2\x39\xe6\xd3\x53\x63\xeb\xa0\x6f\x87\x61\xf6\x0b\x49\x8c\x8d\x94\x85\xda\xd4\xba\x41\x46\xa4\xb5\xed\x83\x72\x0d\x49\xd4\x9a\x84\x41\x36\x2a\x93\x1f\xaf\xb9\x3e\xb1\x15\x42\xe8\x0f\x37\xef\x98\x02\x4e\x75\xf1\x51\xfa\xb8\x13\x63\xdf\xfb\xe6\xa0\x31\x84\x14\x22\x9f\x6b\x53\x74\x4a\xee\x7d\x1c\xef\xa3\x60\x0a\x77\x66\x03\x62\x21\xa4\x1a\x0a\xe9\x8d\x49\xfe\x65\xb5\xaa\x8d\x6d\x5a\x64\x3d\x95\x5b\x4e\xee\x4b\x55\x56\x0e\x32\xe1\x04\xbc\x0f\xd2\x78\x91\x16\xd9\x0b\x32\xbd\xfd\x98\x44\x29\x9b\x0c\xbc\x57\x1a\x6d\x12\x8b\xff\xae\x50\x75\xa6\xc8\x7d\x3f\xeb\xe9\x6d\x98\xb5\x7b\x58\x5a\xf6\xdd\xeb\xf3\x5e\xb3\xc6\xf9\xf5\xa5\x5f\x50\x4a\x9a\x9d\x0a\xe5\x5d\x91\x19\x7a\x67\xa0\xdd\x60\xd6\x28\xd9\x69\x24\xe9\x00\xcc\x29\x5c\xe7\x28\x2c\x42\x55\x66\xc2\xed\x75\x87\xf8\xcb\x33\xcd\xab\x6c\x9f\x4e\x61\x41\xc0\x1a\x67\xfb\x18\x06\x77\x27\xc8\xa9\x5f\x41\xcf\x0f\xd8\x11\x12\x4d\x58\x35\x85\x4b\xe7\xa3\x2f\xed\x96\x7c\x17\xef\xf6\x3c\xd4\x07\x6f\xe2\xa5\xa3\x15\x86\xb2\x6b\x41\x50\xf0\x4b\x89\xe9\x98\x93\x14\x68\x8d\x5b\x1c\xed\x03\x19\xc6\x84\xb0\x7e\x25\xf5\x4c\x78\x63\x24\x08\xac\xae\x5c\xdb\x58\x4c\xe1\xd7\xc6\x08\x47\x53\x41\xcb\x26\xb5\x39\x91\xb6\x71\x16\x06\xae\xb5\xc0\x4e\x14\x53\x42\xd1\x8a\xc3\x24\x93\x66\x94\x91\x3b\xc8\x16\xf1\x51\xcb\xbd\xd4\x52\x79\x97\xca\x87\x68\x0e\x5b\x5d\xc5\xcd\x71\x9e\x50\x08\x18\xb9\xe2\xae\xde\x3d\x0b\xd7\xcf\x46\x2a\x28\x60\x17\x2b\x4c\x32\x9d\x3e\x60\x57\xef\xfd\x6b\xa1\x18\xaa\x58\x21\xbc\xe1\x89\x20\x0b\x76\xc0\x07\x1c\x4b\x99\x63\x22\x72\x83\x22\xdb\x24\xf8\x45\xda\xce\xde\x86\xb7\x74\x42\xc2\x4c\xf0\x33\x07\x60\x67\xb1\x37\xaf\x89\x4a\x24\x5a\xaf\x50\x96\x3c\xa7\x5c\xcc\xb0\xab\x38\x72\xa5\x10\x48\x0f\x73\xdc\x0f\xfb\x9b\xaf\x71\x4b\xdc\x5a\x43\x8d\x8c\x8b\x26\x5e\xd6\x34\x3b\x7e\xf3\x86\x75\x29\x2d\x3c\x48\x95\xd1\x01\x09\xba\x18\x8a\x92\x4f\x2e\x9e\x3d\x4b\x41\xf6\xa5\x45\x08\x93\x7e\x80\x9c\xd0\x81\xff\xc4\xae\xb0\xb2\x70\x41\x9d\x7c\xb7\x48\x14\xc4\xb0\x06\x99\x07\x8b\xa5\x30\xf4\x85\xa1\xfb\x06\xaf\x0e\xde\xc6\x29\x7f\x38\x64\x09\xb1\x7c\xac\x9e\x2b\xed\x25\x65\xd1\x1d\x87\xec\x58\x5b\x11\x90\xb5\xce\xfb\x00\xbe\x68\x7d\x93\xa5\x58\x91\xa5\x62\x5d\xf2\x89\x74\x1b\x88\xe9\x7a\x1d\xd2\xbe\x86\x22\x98\x60\xaf\xa2\x6a\xc7\xa6\x04\xb2\xf9\x2a\x1a\x23\x1f\xe8\xb3\x2b\x46\xfb\x17\xa2\xdb\x69\x7c\xae\x11\x7a\x6a\x3d\x3c\xcb\x17\x15\x29\x13\xbf\x29\xe0\x05\xec\xb1\x4b\x05\x22\xea\x74\x84\x30\x70\xf8\xb5\x9a\xe7\x32\x25\x2b\x93\x84\xc0\x8d\x38\x34\xda\xda\x98\x09\xe9\x3a\xae\xad\xf3\x13\x43\x3e\x62\x3a\x7c\x0e\x3c\x47\x5e\xd9\xf9\x2d\xaa\xdc\xc9\x32\xf7\x51\xa3\x3f\x3c\xf4\x29\x78\x24\x1e\x39\x9b\xaf\x78\xf7\xee\xa5\x41\x5c\xbb\x8a\x3b\x01\xe9\xfc\x89\x2a\xb5\xb5\x72\xe6\x4f\x01\x0b\x24\x32\xe2\xb1\x36\xe2\x99\x91\x5f\x52\x6b\x3a\x13\xf1\xe4\x10\x06\x4e\x18\xcd\x93\xa0\xe7\x08\x61\x9a\x2a\xc7\x67\x48\x92\x96\x85\xe8\x22\xc7\x43\x32\x6c\xe8\x8f\xf6\x7e\xcf\x91\xf0\x8f\x3e\x6a\x11\xec\x6e\xc9\xd4\xbf\xf5\xf9\x16\x42\x66\x06\x0f\x49\x58\x58\xab\x53\xc9\xa0\x0f\x53\x7c\x1a\x89\xdb\x17\x3e\x33\xff\x2c\xc9\x0b\xd3\xf4\x54\x70\x31\xbb\xb3\x97\x3c\x14\xc8\x20\x97\x0a\x41\x98\x45\xc5\x41\x31\x89\xd0\x2c\xb6\xdb\xb6\xbf\xc8\x70\x26\x50\x7a\x12\xe3\x33\x0b\x92\x07\x8f\x1c\x41\xd1\x03\x6e\xbe\x19\x55\x0f\xb8\x39\x65\x58\x50\x0a\x69\x9e\x90\xb7\x3b\xcc\xf6\x1d\xbf\x88\xa2\x24\x67\xb7\x06\xf7\x80\x9b\x51\x3c\x04\x07\x6b\xb8\xf5\xa7\x8b\x81\x1f\x22\xca\x3f\xb3\x0d\x0e\xf0\x7c\x5f\x90\xbf\xb8\xea\x54\xc8\xc4\x27\x24\x5b\xe1\x65\x54\x8e\xfa\x81\x0b\xf8\xd5\x1c\x64\x34\x20\x86\x72\x0f\xf8\xef\x4a\x1a\xce\x6d\x95\x95\xb3\xa3\xb4\xe4\x26\xac\xf1\xa1\x8c\x3f\x2d\x3b\x5a\x61\x01\x57\xa8\x40\xcc\x1d\x1a\x10\x65\x99\x73\xfd\x84\x1b\x1b\x4a\xed\xe1\x84\x5a\x2a\xaa\xd5\x14\x56\xc2\x48\x31\xcb\xb1\x51\x78\x8b\xae\x86\xb8\x3b\x25\x1e\x60\x1f\x45\x35\x7d\x53\x87\x9e\xb7\xf8\xa7\x44\x26\x3c\xf8\xe1\xcd\x9e\xeb\x3c\xd7\x6b\x4f\x0d\xd1\xce\xf2\xf4\x1f\xb7\xdb\xe1\xe8\x6b\x21\x1c\xae\xc5\x26\xa1\xa0\x87\x2b\xc6\x43\x81\xc5\xf5\x25\xfc\xe8\xd7\x70\xa0\xd4\x24\xb8\x44\x29\xe9\x87\x98\x63\x3a\xe0\xae\xf3\xd4\xba\x45\x2c\x76\xec\xef\x7b\x49\x21\xe4\x30\x48\x48\x57\x01\x41\x9d\x29\xde\x83\x31\x32\x0f\x55\x0a\x63\xd1\xf4\xbe\x34\x6d\x32\x24\x06\x9d\x91\xc8\x06\x2f\x24\x46\x6a\x0d\x3d\x8c\xed\xd7\xf3\x9b\x9f\x2f\x7f\xfe\x71\x7c\x26\x3e\x2e\x38\x2e\x17\xbf\x16\x46\xd5\xe5\x7e\x22\xb2\x2b\x28\xbf\xa1\x31\xd2\x88\x8f\xb1\xce\x7f\x1f\x34\x97\x05\x70\xe6\x93\x23\xc4\xd0\x7d\x5f\x00\x17\xf0\x71\xdf\xd3\xd1\xe9\x90\x76\x9b\x74\x2b\xfd\x09\x19\xba\xe1\xd0\x91\x31\x93\x0d\xcd\xb0\x34\x98\xd2\xcd\x92\x18\x2c\x73\x91\x76\xc6\x56\x77\x4b\x8f\x47\xe7\x59\x48\xf4\x72\x9b\x99\x77\x9d\x77\xfb\x1b\xf8\xed\xa7\xd5\x5a\x51\xd0\xdf\x60\xa8\x2d\x6b\x65\xbd\x6b\xce\x15\x2a\x5c\xef\x80\xb3\x0e\xc5\x48\xda\x83\x24\x9e\x93\xa3\xb6\x4b\x5d\xe5\x19\x91\x47\x9e\x32\x7c\xb0\xbe\x58\xeb\x2b\x49\xde\xd8\xd3\x6c\xfe\x34\xdc\xa5\x51\x53\xc4\xf3\x07\xb6\x92\xe8\xf2\x18\xc8\xb8\x3c\xcd\x9d\xd3\x51\xf5\xa7\xfa\x08\x94\x1c\x1c\x8b\x55\xef\xe6\x0d\x21\xe5\xf5\x71\x43\x63\x55\x30\x3e\x86\x6b\xbf\x82\x1b\x26\x2c\x97\x85\x74\x89\x5c\x28\x6d\x3a\x49\x8a\x2a\x1d\x9c\x75\x5e\xe2\x83\x3f\xfa\xb4\x9f\x1f\x27\x63\xe7\xc1\x8d\xc5\x9e\x2e\x85\x5a\x20\x5d\x00\xfd\x71\xcd\xbb\x1a\x71\x9d\x97\xb7\x91\xfd\x7c\xe3\xeb\xc2\x35\xa8\x29\x5c\x12\x15\x52\x2d\xc6\xa8\x04\x13\x62\x93\x5c\x2f\x12\x2b\x7f\x1f\xa0\x83\x27\x9f\x41\xae\x17\xb7\xf2\x77\x52\x5d\x4e\x99\xe9\xca\x59\x99\xc5\x48\xd6\xeb\xa7\x21\x6a\x68\x47\x3e\xbe\x9c\xc0\x5f\x5e\xde\xc3\xfb\xbf\xd7\xb7\xe0\x0a\x0d\x5d\xec\x5c\xdd\x2c\xfd\x7b\x50\xd3\xd8\x76\x7e\x06\xed\xdd\x94\xb1\xc4\x17\x58\x68\xb3\x19\x4f\xbf\x9f\x3f\x9e\x85\xbf\xfc\xf5\x6f\x13\xf8\xeb\xcb\xff\xf8\xdb\x1f\xcb\x06\x5d\x33\xba\xea\x7c\x8b\xba\xc3\x42\x98\x3b\x92\xfe\x97\x2f\x27\xf0\x9f\x2f\xe9\xdf\x3d\x14\x32\xcf\xa5\xc5\x54\xab\x56\x18\xf4\xed\x78\xe1\x1a\x6e\x52\x1a\x5d\xa2\x71\xb2\x33\xf6\x89\x96\xba\x65\x57\x7d\xe5\xdf\xdf\xba\xa1\xf6\xef\x0b\xc2\x0d\xb0\xd8\x23\x70\xd8\x76\x47\xd3\x9d\x69\x3e\x11\x64\xc1\xa5\xab\x45\xa3\xe7\x70\x67\xc4\x4a\x5a\x98\x55\x32\xcf\xfa\x0b\xc8\xcc\x8a\x37\x5b\x2c\xc6\x51\x26\xab\x3e\x9e\x3b\x86\x4b\xed\x5d\x3c\xc1\xac\x73\x59\x9c\x82\x34\xff\x6b\x7c\x4a\xfb\xf8\x38\x2d\xa4\x0a\x45\x52\xfa\x22\xd2\x81\x92\x0b\x93\x1a\x5d\x1c\x6f\x05\xba\xcc\x59\x2c\x63\x85\x59\xe4\xe6\xec\x55\xb4\x0e\x64\xbd\x3b\x8b\x56\xcf\xaa\x54\x31\xb5\xa1\x0e\xce\x99\x95\xde\xd4\xe0\x93\x12\xe7\x8e\x0d\xdc\xcb\x19\x36\x4e\x76\xce\x0f\xfc\x94\x76\xcb\x10\xd2\x0f\x93\x14\x43\xf5\xc1\x2a\xef\xdd\x93\x24\x5c\xdb\xb1\x09\xaf\x20\x30\x03\xa5\xc7\xb5\x2a\x30\xf6\x56\x97\x10\x0b\x65\x0c\x11\x07\x7b\x68\xc2\xcd\xb8\x1f\x2c\xac\x43\x29\xcd\x17\xa4\x0f\xa5\x12\x47\x48\xa8\xf5\x96\x29\xd1\x2b\x34\x46\x66\x19\x76\x25\xc4\x88\xc2\xf6\xd3\xa6\xa6\xcb\xab\x59\x1a\x7d\x9a\x76\x13\xcf\xd8\x8d\x4a\xa4\x4d\xca\x6a\x96\xcb\xae\xe7\xe3\x7e\x57\x78\x6e\x2c\x08\xf9\xd7\x5b\x14\x82\xf0\xc2\x27\xc9\x86\x09\x99\x0b\xb6\x2d\x33\x84\x95\xf4\x79\x0f\x3a\x87\xa9\x60\x4b\xe3\xdb\xf7\x31\x83\xd9\x06\x84\xda\x68\xd5\xf3\x1a\x8a\x69\x8d\xf9\x4b\x9c\x85\x37\xaa\x03\xee\xc6\xd3\xf4\x25\x57\x66\xb8\x3e\xa4\x32\xfa\xff\x24\x3c\x27\xdd\x2f\xcd\xd0\x41\xe0\xbf\x07\x82\xb3\x89\x77\x42\xc2\xb7\xb0\xa0\x27\x42\xf2\x94\xb6\x4a\x70\x44\x6e\x6f\xb2\xb3\xab\x30\x43\x1a\xd6\xae\x66\x8d\xaa\xb3\x85\xbf\x63\x52\x2f\x9a\xc2\x6b\xad\x56\x64\xee\x43\xe8\xd2\xa0\x70\x7a\x07\xfc\xb0\xca\xee\x73\x35\x50\x52\xec\x4b\xe2\x36\xbc\xc5\x81\x23\xb9\xab\x2b\x7b\xfb\xfc\xb5\x11\xd5\x1c\x8e\xaa\x03\xd6\x3c\xc6\x84\x8d\x41\x5b\x6a\x65\xb1\xaf\x33\x6b\x8f\x68\x4e\xd5\xed\x87\xe4\x61\x3c\x06\xdf\xad\x60\x3e\xa6\x55\xea\x74\xe0\xd2\xb9\xd2\xff\xcd\x20\x8f\x9a\xef\xb5\x29\xbc\xa6\x1b\x86\x5b\x39\xda\xbf\xfb\x4b\x9d\xaf\x9c\xf0\x73\x60\x9a\xa1\xd0\x7d\xd2\x50\x36\xa4\xb1\x71\x5f\x51\xad\xa4\xd1\x8a\x6d\x67\xcc\xa6\x74\x15\xc9\x43\x54\x7a\xd1\x2c\x81\x5f\xc2\x92\xdd\x50\xea\x30\xee\x37\x17\x7f\xff\xf0\xe3\xe8\xf0\x9e\x67\x1f\x17\xdb\x67\xb3\x45\x62\x51\x98\x74\x49\x9c\x45\x83\x5b\xd7\xfe\x3a\xd5\x36\xac\xa8\x0d\xee\x6e\xb5\x30\x6e\x5f\x94\xaf\x77\x4c\x06\x62\x03\x22\x65\xff\x56\xfa\xd6\x37\xd2\x33\x6f\x23\x22\xad\xbe\xae\x7d\xf7\x69\xcf\x9f\x70\x79\x73\xa0\x05\x2a\x48\xe4\x0c\xde\x32\x05\xcd\x5f\x0c\xe1\x4c\x38\x01\x3b\x96\x80\xfe\x37\xaf\xc7\xd3\xd0\x6e\x70\x8d\x0d\xd9\xc7\xbd\x63\xdc\x7b\xa0\x76\xf4\xdb\xb4\xe3\x5f\x1c\x86\xb8\xa1\xee\xa8\xfd\xe6\x44\x4c\xd8\xa5\x7f\xf1\xf8\x38\xcd\xaa\xa2\xd8\xf0\xac\xed\xf6\x05\x99\x9f\x76\xdc\xa3\x55\xbf\xfe\x84\x37\xb7\xc9\xef\xb2\x4c\xf0\x0b\x77\x65\xf8\x6a\x75\xcf\x53\x99\x0b\x9e\x47\x67\xec\x5a\xb8\xe5\x59\x7b\x07\xc7\xa2\x12\x59\x16\xdf\xe6\xf4\x61\x3a\xe7\x69\x3b\x07\xd7\x69\xf8\x1f\x59\xc2\xdb\xa1\x83\xd1\xc6\x16\xda\x4d\x62\xf7\x55\x0f\xc2\xb7\xa1\x7f\xee\xd6\x3b\xf9\xcf\xe6\xef\x00\xc6\x24\x43\xeb\xa4\x62\x54\x5f\x43\x02\x7b\x3f\x6f\x1a\x58\xad\x19\x2d\x0c\x23\x69\x8d\x97\x65\xa4\x17\x55\x77\x0e\x35\x26\x52\xe0\x32\x74\xef\x5c\xd0\x64\x52\x38\xe9\x5a\xb9\x6d\xa6\x24\xc0\xe3\x6a\x5b\x9c\xce\xb0\xd9\x31\x40\xc9\xc1\x08\xdf\x99\x1f\x3d\x9f\xf7\x40\x06\xd9\x7f\x9e\xb4\xd9\xeb\x3f\xea\x91\x8f\xd8\xb5\xcc\xc2\xef\x29\xd2\xbc\x8e\xdd\xcd\x24\xe1\xa8\x47\x47\xef\x70\x2e\xad\x4b\xf4\x9c\x11\xd9\x84\x3b\x1b\xf9\x8e\x12\xce\xa1\xe9\x3a\xd8\xde\xb4\x71\xbf\x70\x5d\x9f\xf0\x7f\x6c\xc9\xd7\x85\x03\x94\xb8\xef\xdc\x08\x72\xed\x7d\x11\x06\x1b\xe5\xf0\xdd\xfd\x77\xff\x1b\x00\x00\xff\xff\xb1\xa5\x60\xc3\x3b\x52\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 21051, mode: os.FileMode(436), modTime: time.Unix(1568172362, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(436), modTime: time.Unix(1566374831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(436), modTime: time.Unix(1566374831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(436), modTime: time.Unix(1566374831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(436), modTime: time.Unix(1566374831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(436), modTime: time.Unix(1566374831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(436), modTime: time.Unix(1566374831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(436), modTime: time.Unix(1566374831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(436), modTime: time.Unix(1566374831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

