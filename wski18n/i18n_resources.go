// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5b\x5f\x8f\xdb\x36\x12\x7f\xcf\xa7\x18\x04\x07\xa4\x05\x1c\x25\xed\xe1\x80\x43\x80\x7d\xc8\x35\x69\xbb\xd7\x26\x1b\xec\x26\x17\x14\xb9\x85\x42\x8b\x63\x9b\xb5\x44\x0a\x24\x65\xc7\x35\xfc\xdd\x0f\xc3\x3f\x92\xec\x5d\x4a\x5a\xa7\xc5\xe5\xa5\x6e\x38\x9c\xf9\xcd\x90\xfc\x71\x66\xa8\x7c\x7a\x04\xb0\x7f\x04\x00\xf0\x58\xf0\xc7\x2f\xe0\x71\x65\x96\x79\xad\x71\x21\xbe\xe4\xa8\xb5\xd2\x8f\x67\x7e\xd4\x6a\x26\x4d\xc9\xac\x50\x92\xc4\x5e\xbb\xb1\x47\x00\x87\xd9\x80\x06\x21\x17\x2a\xa1\xe0\x92\x86\xc6\xe6\x9b\xa6\x28\xd0\x98\x84\x8a\x9b\x30\x3a\xa6\x65\xcb\xb4\x14\x72\x99\xd0\xf2\x31\x8c\x26\xb5\x14\x15\xcf\x39\x9a\x22\x2f\x95\x5c\xe6\x1a\x6b\xa5\x6d\x42\xd7\xb5\x1b\x34\xa0\x24\x70\xac\x4b\xb5\x43\x0e\x28\xad\xb0\x02\x0d\x7c\x23\x32\xcc\x66\xf0\x8e\x15\x6b\xb6\x44\x33\x83\x97\x05\xcd\x33\x33\x78\xaf\xc5\x72\x89\xda\xcc\xe0\xba\x29\x69\x04\x6d\x91\x7d\x0b\xcc\xc0\x16\xcb\x92\xfe\xab\xb1\x40\x69\xdd\x8c\x8d\xb3\x66\x40\x48\xb0\x2b\x04\x53\x63\x21\x16\x02\x39\x48\x56\xa1\xa9\x59\x81\xd9\x64\x5f\x94\x4a\x79\xf2\x12\xac\x52\x25\x58\x15\x1c\x99\x41\x23\xfd\x2f\x60\x92\x83\xd9\xc9\x02\x54\x8d\x72\xbb\x12\x66\x0d\x75\xf0\x09\x1a\x23\xe4\x12\x18\x54\x4c\x8a\x05\x1a\xeb\x84\x55\x4d\x5a\x59\x19\x54\x55\xe4\xc9\x42\x94\xad\xf8\x6f\x2f\xdf\xfc\x3a\x05\xb3\x59\x29\x6d\x87\x17\xe0\x9d\x56\x1b\xc1\xd1\x00\x03\xd3\x54\x15\xd3\x3b\xf0\xf2\xa0\x16\xb0\x5d\x31\xfb\xc4\xc0\x1c\xb1\xb7\x3c\x5f\x17\xc6\x00\x69\x34\x8e\x06\x2d\xc5\x72\x85\x65\x1d\x4c\xc3\x4e\x35\x7a\x52\x08\x29\x54\xd3\xb1\x6c\x50\x1b\xb2\x9d\x8a\x8f\x90\xd6\x39\x1c\xe4\x40\x36\xd5\x1c\xb5\x0b\x8f\x59\x7b\x68\xc3\xb6\x16\x25\x5b\xe6\xac\x16\xf9\x4a\x99\x94\xd7\xde\xa5\x97\xef\x2e\xe1\xf3\xcf\x57\x37\xef\x3f\x4f\xd4\x38\x8c\xbd\xa7\xf4\x3f\xaf\xaf\x6f\x2e\xaf\xde\x4e\xd2\xdb\xd8\x55\xbe\xc6\x5d\x42\x29\x0d\x2b\x2d\xfe\x70\x7f\x01\x9f\x7f\x79\xfd\xdb\x14\xa5\x05\x6a\x9b\xd3\xba\x24\xb4\xd6\xcc\xae\x28\xa4\x14\xe8\x8c\x84\xdd\x22\x4e\x51\xac\xe4\x42\xa4\x98\xca\x0f\x3a\x55\xf0\x0d\xc7\x05\x6b\x4a\x0b\xc2\xc0\xdf\x7e\xbe\x7a\xf3\xfa\x59\xb6\x35\xeb\x5a\xab\xda\x7c\x3b\x25\x2a\x65\xa9\xb6\x79\xd0\x91\xe2\x57\x27\x04\xad\xd0\xb8\xd6\xee\x7c\x0f\xc5\xa5\xe5\x94\x96\x08\x26\xa8\xae\x35\x6e\x04\x6e\x13\x7a\xcd\xca\x01\x8d\x4a\x9f\x45\xae\x72\x16\xea\x92\xc9\x09\x16\xd6\xb8\x9b\xbc\xa4\x6b\xdc\x4d\x05\xee\x23\x5d\x31\xc9\x96\xc8\x07\x03\x5d\x6b\xf5\x3b\x16\xb6\xbb\x30\xac\x82\x39\x42\xc5\xf4\x1a\x39\x44\x0d\x53\x42\xe5\xf4\xe4\x44\x64\x29\x67\x82\x29\x27\x32\xae\x31\x52\xd1\xc8\xaa\x1e\x31\xd6\x04\xb5\x2d\xd3\x26\xf4\x76\xe3\x93\x9d\x1e\x41\x68\x50\x6f\x50\x97\x68\x4c\x8c\xf6\x04\xd5\xc6\x6a\x91\xd4\xec\x97\xae\x31\xa8\xe9\xa0\x08\x89\x1c\x74\x23\xad\xa8\x5a\x86\x9d\x60\xc1\xea\x74\x10\xdc\x18\xa8\xc6\xd6\xcd\x14\xb0\x7e\xbb\x6d\x50\xcf\x95\x49\xa9\x0c\xa3\xe3\x4a\x1d\xdf\xe4\x95\x30\x74\x25\x39\x26\x4d\x13\xe9\xfb\x15\x02\x49\xd0\xee\x2d\x3c\x9b\xd2\x29\x11\x06\xa4\xb2\xe0\x55\x35\x1a\x79\xf6\xdf\xa1\x88\x9c\x58\xac\xc5\xc0\x25\x43\x16\xe9\x36\x20\x91\xaf\xb3\x33\xb6\x11\xc9\x52\x2b\x73\x9e\xa9\xe0\xca\x50\x46\x7c\xea\xcf\xa7\xfd\x3e\xa3\xdf\x87\xc3\xed\x0c\x16\x5a\x55\xb0\xdf\x67\x46\x35\xba\xc0\xc3\x61\x92\x4d\xbf\x60\x63\x36\x49\x2c\xae\x95\x41\x7b\x9e\xad\x36\x3c\x63\xd6\x8e\xe2\x48\x2e\xb6\x7f\x71\xbe\x9f\xb5\x58\x6e\x73\xe6\x8a\x81\xdc\xaa\x35\xca\x51\x97\x69\x06\xf8\x19\xe0\x66\x9c\xe7\x7c\x23\x2b\xa6\xcd\x8a\x95\x79\xa9\x0a\x56\x26\x2c\x7e\x88\x52\x70\x55\xa3\xfc\xe8\xd2\x98\x40\x12\xc6\xdb\x73\xb3\x61\xc3\xca\x06\xcd\x44\x83\x12\xed\x56\xe9\xf5\xd9\x26\x85\xb4\xa8\x25\x5a\x60\x96\xdc\x6d\x74\x39\xe2\x6b\x77\xa3\xe6\x05\x93\x05\x96\x65\xf2\x3e\xbb\xfa\x25\x83\x1f\xbc\x0c\xe5\xb2\xdd\xcc\xa9\x06\x16\x4c\xa4\xb5\xbf\xea\xae\x76\x2e\x78\x38\x8b\x55\x5d\xa2\x45\x30\x0d\x2d\xe9\xa2\x29\xcb\x5d\x06\xd7\x8d\x84\xcf\x6d\x56\xdb\x16\x30\x9f\xe9\x26\xd0\x58\xa9\x0d\x42\xcd\xb4\x15\xac\x2c\x77\x5d\x41\xc0\x8c\x41\x3b\xbc\x0a\x3d\xa4\xbe\xba\xc8\x8d\x65\xb6\x49\xe5\x51\x4f\x9f\x3e\x7d\x7a\x71\x71\x71\xd1\x5b\x8b\x9e\x0f\x37\x6e\x2a\x90\x00\x09\x4e\xb2\xea\xea\x62\xe4\x53\x42\x14\x43\xc3\x21\x14\xd3\x3e\x38\xc3\x9b\xec\xfc\xb5\xee\xcf\x9d\x6e\x64\x70\xbd\x3f\xf4\x93\xb9\xc1\x15\x9f\x6c\x6f\x2c\x7e\x47\x26\xcf\x88\x60\xa1\xaa\x8a\x49\x9e\xbb\x5a\xce\x65\x95\xc4\x72\x39\xb3\x39\x65\x22\x09\xa3\xfb\x7d\x56\x54\xfc\x70\x08\x15\xe0\x7e\x9f\xd1\x44\xbb\xab\xf1\x70\x70\x4c\x49\x73\x0f\x87\xdb\x2c\x1b\xb4\xed\xd2\xc7\x5d\x1e\xf7\xf3\x48\x0f\x65\xbf\xa7\x64\x36\x18\x20\x90\x87\xc3\x2d\xac\x58\xa8\x92\xfb\x0e\xb7\x27\x64\xba\xf5\x74\xd3\xe5\x55\x1c\x87\x7b\x01\x64\xd9\x40\xc1\x1b\x4c\xc4\x05\xfd\x33\x5d\xec\x74\x4e\x71\x32\x4a\xa7\xdd\xfc\xd0\x49\xdc\xeb\xe8\xa0\x9f\x1c\x6b\x94\x1c\x65\xf1\x90\x70\x76\x93\xce\xb7\xd3\x1d\x91\x64\x4c\x5f\xdd\x6b\xe6\x6b\x36\xce\xfd\x28\x88\x18\x1a\x9d\xca\xcb\x7a\x34\xa7\x16\x09\xd7\xff\x8f\x77\x44\xf4\xe7\x61\xfb\xe4\xeb\x56\xf0\x2e\xcd\xfd\x39\x6b\x38\xf1\x64\xa4\x90\x0c\xaf\xe3\x11\xdd\x9e\xb9\x92\x43\xa8\x42\xed\x7c\xee\x9d\xe3\x10\xf9\x1b\xa0\xad\xcd\x87\xb0\x00\x6f\x34\xad\x64\x30\xdb\xcf\x7f\xfe\xba\xfd\x16\x7d\x5c\xa8\x46\xf2\x3c\xe0\x0d\x4c\x95\xdc\x00\x25\xda\x24\x07\x6f\x57\xa2\x58\xc1\xd6\x35\x9f\x09\x17\xf7\x79\xa3\x5d\x21\x14\x8d\xd6\x14\x98\xe8\x60\x6c\x27\xb8\x4b\xca\xff\x26\x0d\xcc\x38\x5f\x28\x7e\x93\xd3\x82\xd0\x6d\xca\x43\x3b\x34\xd5\xc6\xf4\xa3\xae\x98\x80\x5e\x27\x4c\xa3\xab\xf0\xf9\x0c\x58\xd9\x4f\x7d\xdb\x65\x23\x1c\xba\x9d\x11\x8c\x00\xd3\xd8\xc6\xfa\x59\xb7\xd3\x81\x0b\x8d\x85\x0d\xbb\x5f\xfb\x8e\xed\x58\x7b\xf8\xf5\xf5\xf5\xd5\xf5\x4d\x02\xf7\xc5\xe9\x1f\xf0\xe2\x70\x67\xe0\xe2\x62\xe0\xfa\xd1\xfa\xf8\xa0\xad\xa5\xda\xca\x9c\x32\x85\xf1\xa3\x4e\x52\x14\xaa\x30\x2b\x83\xae\xef\x0b\x4a\x96\x3b\x30\x4d\xed\x1f\x31\x9e\xb9\x86\x6b\x66\x76\xc6\x62\x05\x73\x21\xb9\x90\x4b\x03\x4a\xc3\x52\xd8\x55\x33\xcf\x0a\x55\xb5\x6d\xeb\xe1\xfb\x52\xeb\x78\x67\x16\x1a\x99\x4d\xc1\x74\x8f\x4a\xe0\x44\x8e\xb6\xe5\x56\xd8\x15\xb8\xd7\x28\xa8\xd0\x18\xb6\xc4\x17\x34\x88\x5a\x1f\x0e\xee\x85\xc1\x8f\x15\x8a\xfb\x01\xfa\x31\x52\xcd\xf4\x20\xf9\xb3\x32\x08\x89\xdf\x39\x29\x7f\x11\xa4\x05\x22\xcf\x85\xdc\xa8\x75\x0a\xd0\x8f\x8e\xb6\x88\x2e\xbc\x98\x3b\x90\x34\x0d\xb6\x2b\xf7\xae\x11\x90\x5a\xff\xa6\x14\x86\xfe\x1a\xb4\x6b\xdc\xb5\x3d\x14\xca\x77\x99\x55\x7a\xa8\x3f\xd4\xca\xb8\x76\xc3\xa7\x18\xcc\x5b\xda\x8f\x41\xcf\xa8\xcd\xd8\x64\xcc\xa5\xb2\x9e\xec\x12\x06\xdf\xf4\xbb\x91\x8e\xab\x9d\x34\xd5\xbb\xae\x1d\xd8\xcf\xa8\xc7\x8c\xba\xec\xbd\x12\xa6\x62\xb6\x48\xa5\xef\xe4\x60\xbb\x3d\x68\x02\x77\x26\x78\xe4\x53\x21\x4f\xdb\xde\x7e\x3c\x60\x00\xae\xd0\x37\x96\x9c\x11\xb7\xac\x8e\xde\x48\xa8\xea\x29\x39\xea\xb2\xfa\xd1\xe8\xc6\xb0\x13\xa1\xfe\xa7\xed\xc5\x4a\x91\x0a\xdb\xa5\x1f\xa5\x63\x1e\x96\xa4\x6d\x68\x92\xad\xf0\x9b\xb0\x74\x4f\x66\x47\xa8\x94\x76\xd8\x99\x7b\xdc\x74\x73\xfc\xcf\x29\x71\x8e\x10\x47\x42\x7d\xfd\x10\x40\x27\x71\x75\x47\xc1\x23\x7a\x62\xc0\x77\x79\x7c\x28\xf1\x8b\x45\x69\x22\x68\xfc\xe2\xee\x30\x72\xe7\x6b\x5c\x31\xf9\x12\x53\x0d\xcc\xee\x28\x2f\xd1\x3f\xca\x05\xee\xed\x9a\xc8\xa1\x59\xd3\xdd\x64\x74\xbf\x89\xa2\x77\x7c\x27\xc7\xd4\x43\xcf\xbd\xc7\xee\xf4\xb4\xd6\x12\xf8\x8e\x1c\x76\x79\x21\x85\xb1\x8b\x32\x93\xbb\x76\x6f\x10\x89\xf4\x96\x7d\x34\xae\xa1\x89\xda\x42\x18\x75\xa3\xd1\xe5\xc3\x77\xae\x6f\x6c\x85\x12\xfa\xc3\xf5\xaf\x0e\x81\x6b\x75\xb9\xa3\xf4\xe9\xa8\xc6\xbe\xf5\x2f\xad\x53\x80\x54\xac\x5c\x28\x5d\x25\x23\xf7\x26\x8e\x0f\x21\xc8\xe0\xbd\xde\x01\x5b\x32\x21\xc7\x4a\x7a\xad\xf3\xdf\x8d\x92\x2d\xd9\x16\x15\x1f\x78\xd3\xfc\xf7\xcd\xd5\x5b\x10\xb2\x6e\x2c\x70\x66\x19\xbc\x09\xd1\x78\x52\x54\xfc\x09\x51\xef\xb0\x25\x56\x8b\xd6\xd0\x16\xe7\x61\xe3\xa4\xde\xb7\xef\x39\x1b\x71\x71\x19\x6c\x71\x1e\x76\xc4\xcc\xb5\xb6\x9d\x58\x2d\x48\xa6\x60\xd2\xe7\x1b\x73\xf4\x37\x3e\xf2\xd0\xf8\xe8\x26\x65\xf0\xae\x44\x66\x10\x9a\x9a\x33\x8b\x27\xd4\x67\x15\x14\x4a\x6e\x50\xdb\x13\xf3\x56\xf5\x75\x8c\x05\xb6\xef\xee\x59\xae\xc6\xcd\xe6\x4e\xea\x11\xc4\x49\x4e\xcf\x99\x41\x0e\x4a\xf6\x8f\xcf\x5d\x55\xa3\xa1\x10\xb2\x28\x1b\x8e\x27\xf0\x98\x39\x5a\x85\xf1\x60\x78\x92\x18\x3e\x68\xa9\x40\x84\x59\x19\x5c\x5a\x5f\x45\x2a\xbb\x72\x39\x85\x63\x87\x45\x23\x03\x37\x44\x02\x99\xf9\x58\x28\x89\xe1\x61\xb5\x22\x2d\xf8\xa5\xc6\x62\x0a\x23\x04\xac\x71\xed\x22\xcf\x11\xc1\xe7\x64\xf5\x2b\xd1\x3b\xe0\x1d\xd9\x91\x5a\xd5\xd8\x3e\xe9\x65\xf0\xb1\xbb\x4c\x22\xe5\xd1\xb4\x59\x4b\x8b\xb4\x3d\x62\xd2\x33\x72\x3d\x07\x77\x62\x98\x72\xaa\xba\x2c\xe6\x5c\xe8\x49\x64\x7d\xaf\x5b\xe4\x47\x1b\xf7\x5a\x09\xe9\x53\x43\x5f\x6a\x5a\x0c\x05\x0e\x25\x64\x1d\x2d\xcd\xa8\x94\x8d\x5e\x19\x57\x1b\x1d\x33\xf5\xb0\x1b\x05\x93\x36\x37\x6c\x83\x39\x57\xc5\x1a\x53\xdf\x8f\xfd\xc0\xa4\xd3\xca\x36\x08\xaf\x9c\x20\x88\xca\x15\x12\x23\x09\xb2\x28\x31\x67\xa5\x46\xc6\x77\x39\x7e\x11\x26\xf9\xf5\xc2\x8f\x74\x30\x82\x24\x78\xc9\x84\xee\x8f\x2f\xaf\xdf\x5e\xbe\xfd\x69\x7a\xd1\x16\x27\x3c\xac\x6c\xdb\x32\x2d\xdb\xce\xb0\x46\x9b\x4c\x95\xaf\x69\x8c\x16\xea\x53\x6c\x09\xdf\x02\x5b\x58\xd4\x3e\x4d\x7f\xe1\xef\x51\xba\xfc\x6f\x87\xce\x48\xb0\xe7\x9e\xc8\x1e\x7c\x73\xf6\xbf\x35\xe9\x65\xca\xc0\xd1\x8e\x9f\x4e\x67\x99\x8a\x03\x8e\xb5\xc6\x82\x68\x2e\xd7\x58\x97\xac\x48\x6e\x5f\xca\x9e\xc9\x8e\x2a\x79\xa8\x09\xdc\x8b\xa4\x67\xc5\xe3\x56\xf8\x56\x94\x25\x18\xa5\x24\xb1\x68\x67\x61\x06\x75\x60\x48\xe3\x8b\x22\xd7\xcc\xc0\xed\x91\x3a\x63\x91\x4d\xc4\x1e\x22\x71\x4e\x39\x63\x56\xaa\x29\x39\xc1\x33\x68\x33\xf8\x60\x7c\x5f\xcf\x37\x1d\xdc\x2b\x9f\x93\x76\xbf\xc6\x1b\xfa\x2d\x22\x27\x3f\xb2\x94\x84\xcb\x5b\xa0\xcc\xf5\x6e\x99\x45\x87\xce\xf3\xdc\x03\x4c\x3a\xfe\x61\x9b\xc1\xc5\x1b\x33\xea\xe6\xc7\x05\x8d\x0d\xa4\xf8\x11\x5a\xff\xeb\xb3\x71\x60\xa5\xa8\x84\xcd\xc5\x52\x2a\x9d\x84\x14\xb7\x74\x20\x67\x37\xc5\xa1\x72\xbf\x4e\x4b\x29\xa2\x7f\xaf\x6e\xaa\xf5\x62\xc5\xe4\x12\xd9\x3c\xf9\xbd\xd0\xaf\xad\xc5\xb6\x76\x33\xd1\xef\x72\xe7\x7b\x87\xad\x8e\x0c\x2e\xc9\x3c\xd5\xbf\x13\xf6\x82\x43\x60\xf2\x52\x2d\x73\x23\xfe\x48\x01\x28\xd5\xf2\x46\xfc\xe1\xae\x56\x3f\xe1\xc8\xe3\x6e\x8b\x32\xe9\xde\x82\x97\xa8\x61\x8e\x76\x8b\x28\xe1\xb9\xbb\xb0\xbf\x7b\x3e\x19\x4a\x85\x95\xd2\xbb\x21\x34\x5e\xe2\x5c\x40\xdf\x7d\xff\x4f\x07\xe9\x1f\xdf\x7d\x3f\x19\x13\xdd\xbf\xaa\x49\xd5\x5e\x61\xf4\x2c\x30\xcf\x7d\x7c\xfe\xfe\x9c\xfe\x8c\xe3\x71\x6d\xb4\xbc\xd6\xaa\x46\x6d\x05\xa6\xee\xab\xc8\x80\x3d\xbe\xf2\xcd\x57\xab\x05\xb6\xed\x57\xdf\x93\xeb\x94\xc5\x36\xed\xfd\x9c\x18\x29\x91\x2b\xb7\xe1\x88\x19\x85\x05\xd5\x58\x23\xb8\x5b\x88\xf7\x9a\x6d\x84\x81\x79\x23\x4a\x3e\xdc\xc3\x73\xae\x78\x3a\xd0\xb4\x6d\x27\x51\x41\xbb\xfb\x8f\x08\x41\x9e\x10\x7a\x88\xb6\xeb\x4c\xee\xf7\x59\xf8\xdb\x18\xee\xfd\x3e\xab\x84\x0c\x7d\x2a\xfa\x1f\x56\x8c\x54\xbd\x0e\x6a\x4c\x07\xfd\x21\x4b\xd1\x44\xec\x24\x04\x29\x4a\x8d\x4e\x9a\x0a\xf7\xa4\xe7\xc9\xbe\xc1\x59\xcd\x02\x87\x36\xb4\x22\x5d\x9f\x69\x30\xab\xb9\xd3\x65\x3a\xa2\x98\x93\x74\x27\xd6\x0c\x06\x4b\x2c\x28\x75\x55\x76\x85\xbe\x85\x3d\x0e\x29\x76\x76\x47\x1b\x6d\xe1\x2a\x3c\x69\x4a\xc5\x84\xa1\x50\xd2\x32\xf7\x5d\x9c\x54\xd3\xba\xc5\xce\x7a\xef\xa1\xc6\x05\x65\x0a\x88\x7b\x9f\x31\xc2\x8d\x73\xda\x7a\xdb\x86\x6e\x86\xef\x09\x06\xa1\xe3\x8a\x6b\x3c\x42\xbd\x0f\x2d\x73\xb5\x41\xad\x05\xe7\x98\x2a\x1f\x09\x61\xff\xbb\xcb\xee\xa1\xad\x9b\x1a\x73\x85\xfe\x3b\xca\xd4\x85\xca\x85\xc9\xeb\x66\x5e\x8a\x62\xa0\x9d\x13\x64\x63\xe5\xea\x3f\x2d\x65\x06\xfc\xc4\x3b\xed\xc5\x19\xd1\x85\xe3\x96\x39\xc2\x46\x18\x31\x2f\x7d\x31\x47\x85\x2c\xb1\xa3\x7b\x21\xa4\x22\x76\x47\x85\x91\x92\x89\x4f\x35\x5f\xbd\xfe\xd7\x87\x9f\x26\xa7\xd7\x4e\xfa\x61\xb9\x35\x9f\x2f\x73\x83\x4c\x17\x2b\x2a\x05\xe3\xc2\xb4\xe5\x4d\xea\x1f\x90\xc4\x19\xed\xc2\x1c\x17\x44\x71\x0f\xd3\xb9\xee\x08\x6c\xe4\x8a\x26\x28\xa7\xbb\xf7\xcf\xde\xb9\x67\xee\x5a\x82\xd6\x1e\x6b\xff\x50\x38\xf0\x4f\x17\x5e\xdd\xd3\xad\x0e\x11\x79\x01\x3f\x3a\x04\xdd\x3f\x5a\x70\x0f\x64\xa4\xec\xa1\x00\x86\x3f\xdc\x7d\x38\x86\xfe\x5b\x64\x7c\x3b\x0f\x90\x1e\xdd\x3e\xfa\x5f\x00\x00\x00\xff\xff\x03\x58\x3f\xe2\xef\x34\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 13551, mode: os.FileMode(420), modTime: time.Unix(1521501471, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json":   wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json":   wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json":   wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json":   wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json":   wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json":   wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json":   wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json":   wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json":   &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json":   &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json":   &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json":   &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json":   &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json":   &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json":   &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json":   &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
