// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5b\x6f\x6f\xdc\x36\xd2\x7f\x9f\x4f\x31\x08\x1e\x20\x2d\xe0\x28\x69\x1f\x1c\x70\x08\x60\x1c\x72\x97\xb4\xf5\xb5\x89\x03\x3b\xb9\xa0\x48\x0d\x85\x2b\xce\xee\xb2\x96\x48\x81\xa4\xbc\xd9\x1a\xfe\xee\x87\xe1\x1f\x49\xbb\x36\x25\xee\xa6\xc5\xf5\x4d\x37\xe1\x70\xe6\x37\x43\xf2\xc7\x99\xa1\xf2\xe9\x11\xc0\xed\x23\x00\x80\xc7\x82\x3f\x7e\x01\x8f\x1b\xb3\x2a\x5b\x8d\x4b\xf1\xa5\x44\xad\x95\x7e\x7c\xe2\x47\xad\x66\xd2\xd4\xcc\x0a\x25\x49\xec\xb5\x1b\x7b\x04\x70\x77\x32\xa1\x41\xc8\xa5\x4a\x28\x38\xa3\xa1\xb9\xf9\xa6\xab\x2a\x34\x26\xa1\xe2\x32\x8c\xce\x69\xd9\x30\x2d\x85\x5c\x25\xb4\x7c\x0c\xa3\x49\x2d\x55\xc3\x4b\x8e\xa6\x2a\x6b\x25\x57\xa5\xc6\x56\x69\x9b\xd0\x75\xe1\x06\x0d\x28\x09\x1c\xdb\x5a\x6d\x91\x03\x4a\x2b\xac\x40\x03\xdf\x88\x02\x8b\x13\x78\xc7\xaa\x6b\xb6\x42\x73\x02\x2f\x2b\x9a\x67\x4e\xe0\xbd\x16\xab\x15\x6a\x73\x02\x17\x5d\x4d\x23\x68\xab\xe2\x5b\x60\x06\x36\x58\xd7\xf4\x7f\x8d\x15\x4a\xeb\x66\xdc\x38\x6b\x06\x84\x04\xbb\x46\x30\x2d\x56\x62\x29\x90\x83\x64\x0d\x9a\x96\x55\x58\x64\xfb\xa2\x54\xca\x93\x97\x60\x95\xaa\xc1\xaa\xe0\xc8\x09\x74\xd2\xff\x02\x26\x39\x98\xad\xac\x40\xb5\x28\x37\x6b\x61\xae\xa1\x0d\x3e\x41\x67\x84\x5c\x01\x83\x86\x49\xb1\x44\x63\x9d\xb0\x6a\x49\x2b\xab\x83\xaa\x86\x3c\x59\x8a\xba\x17\xff\xf5\xe5\x9b\x5f\x72\x30\x9b\xb5\xd2\x76\x7a\x01\xde\x69\x75\x23\x38\x1a\x60\x60\xba\xa6\x61\x7a\x0b\x5e\x1e\xd4\x12\x36\x6b\x66\x9f\x18\x58\x20\x8e\x96\xe7\xeb\xc2\x18\x20\xcd\xc6\xd1\xa0\xa5\x58\xae\xb1\x6e\x83\x69\xd8\xaa\x4e\x67\x85\x90\x42\x95\x8f\xe5\x06\xb5\x21\xdb\xa9\xf8\x08\x69\x9d\xc3\x41\x0e\x64\xd7\x2c\x50\xbb\xf0\x98\x6b\x0f\x6d\xda\xd6\xb2\x66\xab\x92\xb5\xa2\x5c\x2b\x93\xf2\xda\xbb\xf4\xf2\xdd\x19\x7c\xfe\xe9\xfc\xf2\xfd\xe7\x4c\x8d\xd3\xd8\x47\x4a\xff\xf3\xfa\xe2\xf2\xec\xfc\x6d\x96\xde\xce\xae\xcb\x6b\xdc\x26\x94\xd2\xb0\xd2\xe2\x0f\xf7\x17\xf0\xf9\xe7\xd7\xbf\xe6\x28\xad\x50\xdb\x92\xd6\x25\xa1\xb5\x65\x76\x4d\x21\xa5\x40\x17\x24\xec\x16\x31\x47\xb1\x92\x4b\x91\x62\x2a\x3f\xe8\x54\xc1\x37\x1c\x97\xac\xab\x2d\x08\x03\xff\xf7\xd3\xf9\x9b\xd7\xcf\x8a\x8d\xb9\x6e\xb5\x6a\xcd\xb7\x39\x51\xa9\x6b\xb5\x29\x83\x8e\x14\xbf\x3a\x21\xe8\x85\xe6\xb5\x0e\xe7\x7b\x2a\x2e\x3d\xa7\xf4\x44\x90\xa1\x5a\x48\x8b\x9a\x11\xfd\xa5\x62\xee\xd1\x8e\xe4\xa0\xd5\xaa\x69\xb3\x80\x5f\xe3\x36\x7b\x39\xaf\x71\x9b\x0b\xda\x47\xb9\x61\x92\xad\x90\x4f\xc2\x6e\xb5\xfa\x1d\x2b\x3b\x5c\x16\x56\xc1\x02\xa1\x61\xfa\x1a\x39\x44\x0d\xf3\x16\x23\x69\xcc\xc4\x7f\x87\x5b\x32\xd4\xf6\x9c\x98\xd0\x3b\x8c\xcf\xeb\x0a\xae\xce\x20\x34\xa8\x6f\x50\xd7\x68\x4c\x8c\x4d\x86\x6a\x63\xb5\x48\x6a\xf6\x81\xee\x0c\x6a\xda\xd2\x42\x22\x07\xdd\x49\x2b\x9a\x9e\x0b\x33\x2c\x58\xb5\x5a\xd5\x58\x12\x8f\x27\xcc\xbc\x77\x12\xf0\x13\x31\x7d\x83\xc6\xb0\x55\xfe\x4e\xb9\x41\xbd\x50\x26\x15\xe4\x30\x0a\xaa\xb3\x6d\x37\x15\x0e\x47\x13\x65\x23\x0c\xdd\x24\x8e\x00\xd3\xfc\xf7\x7e\x8d\x40\x12\xb4\xf1\x2a\x4f\x82\xb4\xc1\x85\x01\xa9\x2c\x78\x55\x9d\x46\x5e\xfc\x36\x15\x9e\x3d\x8b\xad\x98\xb8\x1b\xc8\x22\x91\x38\x89\x7c\x9d\x9d\xb9\x5d\x49\x96\x7a\x99\xe3\x4c\x05\x57\xa6\x12\xd9\x7d\x7f\x3e\xdd\xde\x16\xf4\xfb\xee\xee\xea\x04\x96\x5a\x35\x70\x7b\x5b\x18\xd5\xe9\x0a\xef\xee\xb2\x6c\xfa\x05\x9b\xb3\x49\x62\x71\xad\x0c\xda\xe3\x6c\xf5\xe1\x99\xb3\xb6\x13\x47\x72\xb1\xff\x8b\xe3\xfd\x6c\xc5\x6a\x53\x32\x97\xc3\x97\x56\x5d\xa3\x9c\x75\x99\x66\x80\x9f\x01\x6e\xc6\x71\xce\x77\xb2\x61\xda\xac\x59\x5d\xd6\xaa\x62\x75\xc2\xe2\x87\x28\x05\xe7\x2d\xca\x8f\x2e\xfb\x08\x8c\x61\xbc\x3d\x37\x1b\x6e\x58\xdd\xa1\xc9\x34\x28\xd1\x6e\x94\xbe\x3e\xda\xa4\xbb\xdf\x24\x5a\x60\x96\xdc\xed\x74\x3d\xe3\xeb\x70\xd5\x96\x15\x93\x15\xd6\x75\xf2\x2a\x3a\xff\xb9\x80\x7f\x79\x19\x4a\x41\x87\x99\xb9\x06\x96\x4c\xa4\xb5\xbf\x1a\xee\x7c\x2e\x78\x38\x8b\x4d\x5b\xa3\x45\x30\x1d\x2d\xe9\xb2\xab\xeb\x6d\x01\x17\x9d\x84\xcf\x7d\x32\xda\xd7\x1d\x9f\xe9\x5a\xd0\xd8\x28\xba\xd9\x99\xb6\x82\xd5\xf5\x76\xc8\xe3\x99\x31\x68\xa7\x57\x61\x84\xd4\x17\x05\xa5\xb1\xcc\x76\xa9\xf4\xe7\xe9\xd3\xa7\x4f\x4f\x4f\x4f\x4f\x47\x6b\x31\xf2\xe1\xd2\x4d\x05\x12\x20\xc1\x2c\xab\xae\x9c\x45\x9e\x13\xa2\x18\x1a\x0e\xa1\x06\xf6\xc1\x99\xde\x64\xc7\xaf\xf5\x78\x6e\xbe\x91\xc9\xf5\xfe\x30\x92\x9c\x5e\xf1\x6c\x7b\x73\xf1\xdb\x31\x79\x44\x04\x63\x5a\x54\xba\x1a\x6c\x3e\x9d\xfd\xe0\x4a\x35\x62\x43\x4a\x5b\xee\xee\xae\x60\xa9\x74\xee\xb9\xd9\x33\x36\x76\xf4\x20\x73\xd9\x4b\xe7\x72\xcb\x6d\x19\x4f\xcc\x4c\x73\xe5\xf6\x96\x32\xdd\xbb\xbb\x9e\xec\xc9\xde\x9a\x85\xf2\x79\x1c\xd2\xfe\x0c\xe6\x5b\x4f\x77\x63\x5e\xc5\x71\x78\x10\x40\x51\x4c\x54\xc2\xc1\x44\x0c\xc8\x9f\xe9\xe2\xa0\x33\xc7\xc9\x28\x9d\x76\xf3\xc3\x20\x71\x84\xa3\x1c\x5b\x94\x1c\x65\x75\x48\x3c\x87\x49\x63\x43\x87\xd9\x19\x4e\x61\x32\xa8\xaf\x1e\x34\xf3\x35\x3b\xe7\x61\x14\xc4\x3d\x9d\x4e\xa5\x7e\x23\x26\x55\xcb\x84\xeb\xff\xc3\x6b\x28\xfa\x73\xd8\x46\xf9\xba\x15\xbc\xcf\xa4\x7f\xce\x1a\x66\x1e\x8d\x14\x92\xe9\x75\xdc\x61\xf4\x23\x57\x72\x86\x84\xa9\xb2\x3e\xf6\x5a\x73\x88\xfc\x25\xd3\x57\xee\x53\x58\x80\x77\x9a\x56\x32\x98\x1d\x5f\x15\x7f\xdd\x7e\x8b\x3e\x2e\x55\x27\x79\x19\xf0\x06\xaa\x4a\x6e\x80\x1a\x6d\x92\x9b\x36\x6b\x51\xad\x61\xe3\xda\xd2\x84\x8b\xfb\xd4\xd4\xae\x11\xaa\x4e\x6b\x0a\x4c\x74\x30\xf6\x35\xdc\xa5\xe5\x7f\x93\x06\x66\x9c\x2f\x14\xbf\xec\xeb\xcb\x77\x73\x66\x8a\xcb\xdf\xe4\xbb\x1a\x99\x71\xbd\x9f\x1b\xc1\xd1\x81\x22\x79\xc2\xee\xae\xcb\x3e\x99\x7b\x01\xf3\xb6\x26\x4b\xe7\x7b\xb6\x98\xdc\x2f\xa5\x5d\x8d\x92\x61\x28\xf4\x5d\x13\x8b\xa1\x60\xab\x3a\xd0\xe8\x56\x7e\xc3\xa4\x1d\x5a\x68\x60\xd7\xc2\xfc\x03\xbe\xd9\x3e\x7b\xfb\x6d\x86\x9d\xb9\x8a\xf9\xbe\x4b\xa3\xc2\xef\x53\x6c\x39\xba\x82\x87\x2a\xaf\x55\x87\xc6\x5e\x65\xd8\x8d\x8b\x7c\x90\x87\xfd\x83\x43\xa6\x8f\x01\x5e\x19\x3a\xe9\xa9\x0e\xb8\x1f\x75\x7e\xc1\xa8\x89\xaa\xd1\xb5\x9c\xf8\x09\xb0\x7a\x5c\x7e\xf5\xe7\x9a\xe0\xe8\x7e\x46\x30\x02\x4c\x63\x7f\x18\x9f\x0d\x54\x08\x5c\x68\xac\x6c\xa0\x47\xed\x9b\xfd\x73\x2f\x0b\xaf\x2f\x2e\xce\x2f\x2e\x13\xb8\x4f\xf7\xff\x03\x2f\x0e\xf7\x06\x4e\x4f\x27\x12\x14\xad\x77\x99\xf8\x5a\xaa\x8d\x2c\xed\xb6\x9d\xb8\x49\x23\xe3\x92\x14\x85\x2a\xcc\x2a\x60\x78\x32\x00\x25\xeb\x2d\x98\xae\xf5\xef\x5f\xcf\x5c\xaf\xbe\x30\x5b\x63\xb1\x81\x85\x90\x5c\xc8\x95\x01\xa5\x61\x25\xec\xba\x5b\x14\x95\x6a\xfa\x17\x8f\xe9\x8c\x4a\xeb\x98\x55\x55\x1a\x99\x4d\xc1\x74\xef\x91\xe0\x44\x76\x78\x6b\x23\xec\x1a\xdc\x43\x66\xec\xc6\xbd\xa0\x41\xd4\xfa\xee\xce\x3d\x4e\xf9\xb1\x4a\x71\x3f\x40\x3f\x66\x2a\xea\x11\x24\x4f\xa6\x93\x90\xf8\x3d\x2a\xfd\x8b\x20\x2d\x11\x79\x29\xe4\x8d\xba\x4e\x01\xfa\xc1\xdd\x6b\x74\xb4\xbc\x98\x23\x47\x9a\x06\x9b\xb5\x7b\x12\x0b\x48\xad\x7f\x8e\x0c\x43\x7f\x0d\xda\x6b\xdc\xf6\x7d\xbc\x86\x49\xce\xac\xd2\x53\x3d\xca\x5e\xc6\xb5\xbc\x3e\xc5\x60\x5e\xd1\x7e\x0c\x7a\x66\x6d\xf6\x15\x97\x54\xd6\xdf\x86\x09\x83\x6f\xc6\xed\x71\x77\x99\x3b\x69\x60\x74\xee\xed\x7a\x5c\x82\xcd\x1a\xa5\x43\x4f\x9e\x36\xcc\x56\xeb\x09\x07\xfb\xed\x41\x13\xb8\x33\xc1\xe3\x85\x2b\xe4\xfe\x8b\x89\x1f\x8f\x65\x20\x57\xe8\x9b\x9b\xce\x88\x5b\x56\x47\x6f\x24\xd4\x8c\x94\xec\xb4\xfd\xfd\x68\x74\x63\xda\x89\xd0\x83\xa2\xed\xc5\x6a\x91\x0a\xdb\x99\x1f\xa5\x63\x1e\x96\xa4\xef\xb0\x93\xad\xf0\x9b\xb0\x0c\xaf\xad\x3b\xa8\x94\x76\xd8\x99\x7b\x17\x77\x73\xfc\xcf\x9c\x38\x47\x88\x33\xa1\xbe\x38\x04\xd0\x5e\x5c\xdd\x51\xf0\x88\x9e\x18\xf0\x9d\x46\x1f\x4a\xfc\x62\x51\x9a\x08\x1a\xbf\xd8\x58\x9c\x7f\x8d\x2b\xa6\x5c\x61\x2a\xcf\x19\x8e\xf2\x0a\xfd\x7b\x6e\xe0\xde\xe1\x55\x23\x34\x0c\x87\x9b\x8c\xee\x37\x51\x8d\x8e\x6f\x76\x4c\x3d\xf4\xd2\x7b\xec\x4e\x4f\x6f\x2d\x81\x6f\xc7\x61\x57\x38\x50\x18\x87\x28\x33\xb9\xed\xf7\x06\x91\xc8\x68\xd9\x67\xe3\x1a\x1a\xf9\x3d\x84\x59\x37\x3a\x5d\x1f\xbe\x73\x7d\x73\x95\xae\xbc\xbb\x3b\xf8\x70\xf1\x8b\x43\xe0\xda\xad\xee\x28\xd1\x9f\x08\xa2\x17\xb8\xf2\x8f\xf4\x39\x40\x1a\x56\x2f\x95\x6e\x92\x91\x7b\x13\xc7\xa7\x10\x14\xf0\x5e\x6f\x81\xad\x98\x90\x45\x31\x6b\xf6\x77\xa3\x64\x4f\xb6\x55\xc3\x27\x9e\xc3\xff\x7d\x79\xfe\x16\x84\x6c\x3b\x0b\x9c\x59\x06\x6f\x42\x34\x9e\x54\x0d\x7f\x42\xd4\x3b\x6d\x89\xb5\xa2\x37\xb4\xc1\x45\xd8\x38\xa9\x4f\x23\x1e\x38\x1b\x71\x71\x19\x6c\x70\x11\x76\xc4\x89\x7b\x5e\x71\x62\xad\x20\x99\x8a\x49\x9f\x6f\x2c\xd0\xdf\xf8\xc8\xc3\x57\x13\xc3\xa4\x02\x42\x26\xdb\xb5\x9c\x59\xdc\xa3\x3e\xab\xa0\x52\xf2\x06\xb5\xdd\x33\x6f\xd5\x58\xc7\x5c\x60\xc7\xee\x1e\xe5\x6a\xdc\x6c\xee\xa4\xee\x40\xcc\x72\x7a\xc1\x0c\x72\x50\x72\x7c\x7c\xee\xab\x9a\x0d\x85\x90\x55\xdd\x71\xdc\x83\xc7\xcc\xce\x2a\xcc\x07\xc3\x93\xc4\xf4\x41\x4b\x05\x22\xcc\x2a\xe0\xcc\xfa\x36\x83\xb2\x6b\x97\x53\x38\x76\x58\x76\x32\x70\x43\x24\x90\x13\x1f\x0b\x25\x31\xbc\xcb\x37\xa4\x05\xbf\xb4\x58\xe5\x30\x42\xc0\x1a\xd7\x2e\xf2\x1c\x11\x7c\x49\x56\xbf\x12\xbd\x03\x3e\x90\x1d\xa9\x55\x9d\x1d\x93\x5e\x01\x1f\x87\xcb\x24\x52\x1e\x4d\x3b\xe9\x69\x91\xb6\x47\x4c\x7a\x66\xae\xe7\xe0\x4e\x0c\x53\x49\x65\xb9\xc5\x92\x0b\x9d\x45\xd6\x0f\xba\x45\x7e\xf4\x71\x6f\x95\x90\x3e\x35\xf4\xbd\x08\x8b\xa1\xc0\xa1\x84\x6c\x44\x8c\xbe\x33\x70\x8f\xa0\x1f\x46\xff\xf1\xe5\xc5\xdb\xb3\xb7\x3f\xe6\x17\x3c\x71\xc2\x61\x25\xcf\x86\x69\x59\x56\xaa\xa1\x60\x96\x1a\x6d\x32\xcd\xbc\xa0\xb1\xd8\x61\xaf\x1a\xee\x0e\xc1\xd2\xa2\xf6\x29\xee\x0b\x7f\x07\xd1\xc5\x79\x35\xb5\xbf\x82\x3d\xf7\xc4\x79\xf0\xad\x33\xfe\xc4\x67\xdc\xe8\xe7\x68\xe7\x77\xb6\xb3\x4c\x89\x35\xc7\x56\x63\x45\x14\x51\x6a\x6c\x6b\x56\x25\x97\x9e\x32\x4f\xb2\xa3\x6a\x1e\xf2\x69\xf7\xa2\xec\x19\x65\xe7\x8a\xf3\x98\x36\xa2\xae\xc1\x28\x25\x89\x86\x06\x33\x27\xd0\x06\x8a\x31\xbe\xaa\x70\xed\x22\xdc\xec\xe8\x34\x16\x59\xa6\x03\x21\x1c\xc7\xd4\x03\x66\xad\xba\x9a\x13\x3c\x83\xb6\x00\xff\x66\xb2\xdb\xb9\x20\x69\xf7\xcb\x77\x4f\xb3\x10\x39\xf9\x99\xf5\x24\x5c\xde\x02\xa5\x7e\xf7\xeb\x14\x3a\x14\x9e\x28\x0e\x30\xe9\x0e\x30\xbb\x99\x5c\xc1\x39\xa3\x6e\x7e\x5c\xd5\xd8\xa2\x8b\x1f\x00\x8e\xbf\xfc\x9b\x07\x56\x8b\x46\xd8\x52\xac\xa4\xd2\x49\x48\x71\x5f\x07\x76\x73\x53\x1c\x2a\xf7\x6b\xbf\x16\x21\xfe\xf4\xea\x72\xad\x57\x6b\x26\x57\xc8\x16\xc9\xef\xb5\x7e\xe9\x2d\xf6\xc5\x8f\x89\x7e\xd7\x5b\xdf\x9d\xed\x75\x14\x70\x46\xe6\xa9\x80\xcc\xd8\x0b\x0e\x81\x29\x6b\xb5\x2a\x8d\xf8\x23\x05\xa0\x56\xab\x4b\xf1\x87\xbb\x9b\xfc\x84\x1d\x8f\x87\x2d\xca\xa4\x7b\xd0\xa7\x62\x7b\x81\x76\x83\x28\xe1\xb9\xbb\xf1\xbe\x7b\x9e\x0d\xa5\xc1\x46\xe9\xed\x14\x1a\x2f\x71\x2c\xa0\xef\xbe\xff\xbb\x83\xf4\xb7\xef\xbe\xcf\xc6\x44\x17\x98\xea\x52\xc5\x4b\x18\x3d\x0a\xcc\x73\x1f\x9f\xff\x7f\x4e\xff\xcd\xe3\x71\x7d\xa8\xb2\xd5\xaa\x45\x6d\x05\xa6\x1e\x3c\x22\x0d\x8e\xf8\xca\xb7\xb7\xad\x16\xd8\x37\xb8\x7d\x53\x6b\x50\x16\x1b\xe1\x0f\x73\x62\xa4\x44\xae\xdc\x86\x23\x66\x14\x16\x54\x67\x8d\xe0\x6e\x21\xde\x6b\x76\x23\x0c\x2c\x3a\x51\xf3\xe9\x26\x98\x73\xc5\xd3\x81\xa6\x6d\x9b\x45\x05\xfd\xee\xdf\x21\x04\xb9\xc7\xea\x21\xda\xae\xb5\x77\x7b\x5b\x84\xbf\x8d\xe1\xbe\xbd\x2d\x1a\x21\x43\xa3\x87\xfe\xc0\xaa\x99\xb2\xd1\x41\x8d\xf9\x94\x3f\x64\x29\x9a\x88\xa5\x78\x90\xa2\xdc\x62\xaf\x2a\x7f\x20\xbf\x4d\x16\xde\x47\x55\xdb\x0e\x6d\xe8\xe5\xb9\x46\x0d\x7e\x11\x26\xf9\x3d\xec\xbd\x36\xcd\x0e\xc5\xb0\x5a\x23\xe3\x5b\xf0\x2a\xfa\xa4\xdb\x60\x8d\x15\xe5\x7e\xca\xae\xd1\xf7\x80\xe7\x21\xc5\xd6\xe8\x6c\xa7\x2a\x5c\x85\x7b\x5d\x9d\x98\x35\x54\x4a\x5a\xe6\xbe\x74\x94\x2a\xaf\xdd\xea\xac\x8f\x9e\xc2\x5c\x50\x72\x40\x3c\xf8\x50\x14\x6e\x9c\xfd\xde\xd5\x26\xb4\x03\x7c\x53\x2d\x08\xed\x96\x2c\x29\x8c\xaf\x5e\xff\xf3\xc3\x8f\xd9\x09\xa3\x93\x3e\x2c\x5b\xe4\x8b\xd5\xf0\xa6\xee\x3f\xcd\x98\x7d\x59\x77\x52\x2f\x26\x1f\x3f\x17\xab\xf1\x5b\xef\xa4\xde\xf1\x8b\x6f\x9e\x66\x83\x4c\x57\x6b\xd2\x1b\x9e\xd8\xca\x3e\x39\x4f\xfd\xcb\x99\x38\xa3\x7f\xa0\xdb\x4d\xe7\xc7\xdf\x97\x0c\xec\x31\x73\x3f\x0e\xa1\x1b\xb6\xce\x9f\xbd\x6d\x8e\xd8\x32\x11\x5a\x7f\xa6\xfc\x3b\xe8\xc4\xbf\xd9\x78\xf5\x40\xaf\x35\x44\xe4\x05\xfc\xe0\x10\x0c\xff\x5a\xc3\x3d\xef\x90\xb2\x43\x01\x4c\x7f\x07\x7d\x38\x86\xf1\x53\x6b\xfc\x34\x20\x40\x7a\x74\xf5\xe8\xbf\x01\x00\x00\xff\xff\x60\xc1\x07\xb9\xe8\x35\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 13800, mode: os.FileMode(420), modTime: time.Unix(1520473112, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

