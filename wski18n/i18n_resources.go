/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1518211603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x69\x8f\x1b\x37\xd2\xfe\xee\x5f\x51\x30\x5e\xc0\x09\x30\x56\x9c\xbc\x58\x60\x61\x60\xb0\xf0\xae\xbd\x89\x37\xb1\xc7\x98\x23\x41\xe0\x0c\xda\x54\xb3\x24\x31\x62\x93\x0d\x92\x2d\x59\x19\xe8\xbf\x2f\x8a\x64\x1f\xd2\x0c\xbb\x39\x72\x82\xcd\x97\xb4\x87\xc5\x7a\xea\x20\xeb\xa2\x3e\x3e\x01\xb8\x7b\x02\x00\xf0\x54\xf0\xa7\x2f\xe1\x69\x65\x97\x45\x6d\x70\x21\x3e\x17\x68\x8c\x36\x4f\xcf\xc2\xaa\x33\x4c\x59\xc9\x9c\xd0\x8a\xc8\xde\xf8\xb5\x27\x00\xfb\xb3\x11\x0e\x42\x2d\x74\x82\xc1\x5b\x5a\x9a\xda\x6f\x9b\xb2\x44\x6b\x13\x2c\xae\xe2\xea\x14\x97\x2d\x33\x4a\xa8\x65\x82\xcb\x2f\x71\x35\xc9\xa5\xac\x78\xc1\xd1\x96\x85\xd4\x6a\x59\x18\xac\xb5\x71\x09\x5e\x97\x7e\xd1\x82\x56\xc0\xb1\x96\x7a\x87\x1c\x50\x39\xe1\x04\x5a\xf8\x4a\xcc\x70\x76\x06\x1f\x58\xb9\x66\x4b\xb4\x67\xf0\xaa\xa4\x7d\xf6\x0c\xae\x8d\x58\x2e\xd1\xd8\x33\xb8\x6c\x24\xad\xa0\x2b\x67\x5f\x03\xb3\xb0\x45\x29\xe9\xff\x06\x4b\x54\xce\xef\xd8\x78\x34\x0b\x42\x81\x5b\x21\xd8\x1a\x4b\xb1\x10\xc8\x41\xb1\x0a\x6d\xcd\x4a\x9c\x65\xeb\xa2\x75\x4a\x93\x57\xe0\xb4\x96\xe0\x74\x54\xe4\x0c\x1a\x15\xbe\x80\x29\x0e\x76\xa7\x4a\xd0\x35\xaa\xed\x4a\xd8\x35\xd4\x51\x27\x68\xac\x50\x4b\x60\x50\x31\x25\x16\x68\x9d\x27\xd6\x35\x71\x65\x32\xb2\xaa\x48\x93\x85\x90\x1d\xf9\xaf\xaf\xde\xfd\x94\x23\xb3\x5d\x69\xe3\xc6\x1d\xf0\xc1\xe8\x8d\xe0\x68\x81\x81\x6d\xaa\x8a\x99\x1d\x04\x7a\xd0\x0b\xd8\xae\x98\x7b\x66\x61\x8e\x38\x70\xcf\x97\x99\x31\x8a\x34\x69\x47\x8b\x8e\x6c\xb9\x42\x59\x47\x68\xd8\xe9\xc6\x64\x99\x90\x4c\x95\x2f\xcb\x06\x8d\x25\xec\x94\x7d\x84\x72\x5e\xe1\x48\x07\xaa\xa9\xe6\x68\xbc\x79\xec\x3a\x88\x36\x8e\xb5\x90\x6c\x59\xb0\x5a\x14\x2b\x6d\x53\x5a\x07\x95\x5e\x7d\x78\x0b\x9f\x7e\xb8\xb8\xba\xfe\x94\xc9\x71\x5c\xf6\x01\xd3\x9f\xdf\x5c\x5e\xbd\xbd\x78\x9f\xc5\xb7\x71\xab\x62\x8d\xbb\x04\x53\x5a\xd6\x46\xfc\xe1\xff\x00\x9f\x7e\x7c\xf3\x6b\x0e\xd3\x12\x8d\x2b\xc8\x2f\x09\xae\x35\x73\x2b\x32\x29\x19\x7a\x46\xc4\xde\x89\x39\x8c\xb5\x5a\x88\x54\xa4\x0a\x8b\x9e\x15\x7c\xc5\x71\xc1\x1a\xe9\x40\x58\xf8\xbf\x1f\x2e\xde\xbd\xf9\x66\xb6\xb5\xeb\xda\xe8\xda\x7e\x9d\x63\x15\x29\xf5\xb6\x88\x3c\x52\xf1\xd5\x13\x41\x47\x34\xcd\xb5\xbf\xdf\x63\x76\xe9\x62\x4a\x17\x08\x32\x58\x0b\xe5\xd0\x30\x0a\x7f\x29\x9b\x07\x69\x07\x74\x50\x1b\x5d\xd5\x59\x82\xaf\x71\x97\xed\xce\x35\xee\x72\x85\x0e\x56\xae\x98\x62\x4b\xe4\xa3\x62\xd7\x46\xff\x8e\xa5\xeb\x93\x85\xd3\x30\x47\xa8\x98\x59\x23\x87\x96\xc3\x34\x62\x1b\x34\x26\xec\x7f\x10\x5b\x32\xd8\x76\x31\x31\xc1\xb7\x5f\x9f\xe6\x15\x55\x9d\x90\xd0\xa2\xd9\xa0\x91\x68\x6d\x6b\x9b\x0c\xd6\xd6\x19\x91\xe4\x1c\x0c\xdd\x58\x34\x74\xa4\x85\x42\x0e\xa6\x51\x4e\x54\x5d\x2c\xcc\x40\x70\x7a\xb9\x94\x58\x50\x1c\x4f\xc0\x5c\x7b\x0a\xf8\x81\x22\x7d\x85\xd6\xb2\x65\xfe\x49\xd9\xa0\x99\x6b\x9b\x32\x72\x5c\x05\xdd\xb8\xba\x19\x33\x87\x0f\x13\x45\x25\x2c\x65\x12\x1f\x00\xd3\xf1\xef\x7a\x85\x40\x14\x74\xf0\xca\x10\x04\xe9\x80\x0b\x0b\x4a\x3b\x08\xac\x1a\x83\x7c\xf6\xdb\x98\x79\x8e\x10\x6b\x31\x92\x1b\x08\x91\x82\x38\x91\x7c\x19\xce\xd4\xa9\x24\xa4\x8e\xe6\x34\xa8\xa8\xca\x58\x21\x7b\xac\xcf\xc7\xbb\xbb\x19\x7d\xef\xf7\xb7\x67\xb0\x30\xba\x82\xbb\xbb\x99\xd5\x8d\x29\x71\xbf\xcf\xc2\x0c\x0e\x9b\xc2\x24\xb2\xd6\x57\x16\xdd\x69\x58\x9d\x79\xa6\xd0\x0e\xec\x48\x2a\x76\x7f\x38\x5d\xcf\x5a\x2c\xb7\x05\xf3\x35\x7c\xe1\xf4\x1a\xd5\xa4\xca\xb4\x03\xc2\x0e\xf0\x3b\x4e\x53\xbe\x51\x15\x33\x76\xc5\x64\x21\x75\xc9\x64\x02\xf1\xa6\xa5\x82\x8b\x1a\xd5\x2f\xbe\xfa\x88\x11\xc3\x06\x3c\xbf\x1b\x36\x4c\x36\x68\x33\x01\x15\xba\xad\x36\xeb\x93\x21\x7d\x7e\x53\xe8\x80\x39\x52\xb7\x31\x72\x42\xd7\x3e\xd5\x16\x25\x53\x25\x4a\x99\x4c\x45\x17\x3f\xce\xe0\x5f\x81\x86\x4a\xd0\x7e\x67\x2e\xc0\x82\x89\x34\xf7\xd7\x7d\xce\xe7\x82\xc7\xbb\x58\xd5\x12\x1d\x82\x6d\xc8\xa5\x8b\x46\xca\xdd\x0c\x2e\x1b\x05\x9f\xba\x62\xb4\xeb\x3b\x3e\x51\x5a\x30\x58\x69\xca\xec\xcc\x38\xc1\xa4\xdc\xf5\x75\x3c\xb3\x16\xdd\xb8\x17\x06\x92\x86\xa6\xa0\xb0\x8e\xb9\x26\x55\xfe\x3c\x7f\xfe\xfc\xf9\xf9\xf9\xf9\xf9\xc0\x17\x03\x1d\xae\xfc\x56\x20\x02\x22\xcc\x42\xf5\xed\x2c\xf2\x1c\x13\xb5\xa6\xe1\x10\x7b\xe0\x60\x9c\xf1\x43\x76\xba\xaf\x87\x7b\xf3\x41\x46\xfd\x7d\x33\xa0\x1c\xf7\x78\x36\xde\x94\xfd\x0e\x20\x4f\xb0\x60\x5b\x16\x15\xbe\x07\x9b\x2e\x67\x6f\x7c\xab\x46\xd1\x90\xca\x96\xfd\xfe\x16\x16\xda\xe4\xde\x9b\x23\xb0\xa1\xa2\x8f\x82\xcb\x76\x9d\xaf\x2d\x77\x45\x7b\x63\x26\x86\x2b\x77\x77\x54\xe9\xee\xf7\x5d\xb0\x27\xbc\x15\x8b\xed\xf3\xd0\xa4\xdd\x1d\xcc\x47\x4f\x4f\x63\x5e\xb7\xeb\xf0\xa0\x00\xb3\xd9\x48\x27\x1c\x21\x5a\x83\xfc\x99\x2a\xf6\x3c\x73\x94\x6c\xa9\xd3\x6a\xde\xf4\x14\x27\x28\xca\xb1\x46\xc5\x51\x95\x8f\xb1\x67\xbf\x69\x08\xf4\x38\x9c\xfe\x16\x26\x8d\xfa\xfa\x41\x98\x2f\x39\x39\x0f\x4b\x41\xb1\xa7\x31\xa9\xd2\x6f\x10\x49\xf5\x22\xa1\xfa\xff\x30\x0d\xb5\xfa\x3c\xee\xa0\x7c\x99\x07\xef\x47\xd2\x3f\xc7\x87\x99\x57\x23\x25\xc9\xb8\x1f\x0f\x22\xfa\x89\x9e\x9c\x08\xc2\xd4\x59\x9f\x9a\xd6\xbc\x44\x21\xc9\x74\x9d\xfb\x98\x2c\xc0\x1b\x43\x9e\x8c\xb0\xc3\x54\xf1\xd7\x9d\xb7\x56\xc7\x85\x6e\x14\x2f\xa2\xbc\x31\x54\x25\x0f\x80\x44\x97\x8c\x4d\xdb\x95\x28\x57\xb0\xf5\x63\x69\x92\x8b\x87\xd2\xd4\xad\x10\xca\xc6\x18\x32\x4c\xab\x60\x3b\xd7\xf0\x49\x2b\x7c\x13\x07\x66\xbd\x2e\x64\xbf\xec\xf4\x15\xa6\x39\x13\xcd\xe5\x6f\xea\x83\x44\x66\xfd\xec\x67\x23\x38\x7a\xa1\x88\x9e\x64\xf7\xe9\xb2\x2b\xe6\x5e\xc2\x34\xd6\x68\xeb\x7c\x0f\x8b\xa9\xe3\x56\xda\xf7\x28\x19\x40\x71\xee\x9a\x70\x86\x86\x9d\x6e\xc0\xa0\xf7\xfc\x96\x29\xd7\x8f\xd0\xc0\xad\x84\xfd\x07\x7c\xb5\xfb\xe6\xfd\xd7\x19\x38\x53\x1d\xf3\x7d\x95\x06\x8d\xdf\xc7\x76\xe4\xe8\x1b\x1e\xea\xbc\x96\x0d\x5a\x77\x9b\x81\xdb\x3a\xf9\x51\x1a\x76\x0f\x0e\x19\x3a\xbe\xb9\xbc\xbc\xb8\xbc\x4a\xb0\x3f\x3f\xfe\x0f\x02\x39\xdc\x5b\x38\x3f\x1f\xc9\xed\xc6\x1c\x06\xb1\xb5\xd2\x5b\x55\xb8\x5d\x3d\x92\x84\xda\x60\x45\x54\x64\xb1\xb8\x6b\x06\xfd\xb4\x1d\xb4\x92\x3b\xb0\x4d\x1d\x9e\x8e\xbe\xf1\x63\xee\x99\xdd\x59\x87\x15\xcc\x85\xe2\x42\x2d\x2d\x68\x03\x4b\xe1\x56\xcd\x7c\x56\xea\xaa\x7b\x2c\x18\x2f\x46\x8c\x69\x0b\x92\xd2\x20\x73\x29\x31\xfd\x53\x1e\x78\x92\x83\x2b\xbf\x15\x6e\x05\xfe\x0d\xb0\x1d\x64\xbd\xa4\x45\x34\x66\xbf\xf7\xef\x3a\x61\xad\xd4\x3c\x2c\xd0\xc7\x44\x33\x3a\x10\x29\xc4\xa1\x51\x91\xf8\xbd\x28\xf4\x17\x89\xb4\x40\xe4\x85\x50\x1b\xbd\x4e\x09\xf4\x6f\x9f\x12\xe8\x54\x06\x32\x1f\x57\x68\x1b\x6c\x57\xfe\x35\x29\x4a\xea\xc2\x4b\x5e\x5c\xfa\x6b\xa4\x5d\xe3\xae\x1b\x81\x55\x4c\x71\xe6\xb4\x19\x1b\xef\x75\x34\x7e\x5a\xf4\xb1\x35\xe6\x2d\x9d\xc7\xc8\x67\x12\xb3\x6b\x56\x94\x76\x21\x91\x24\x00\xdf\x0d\x27\xcb\x3e\x0f\x7a\x6a\x60\x0e\xfc\x68\x77\xd0\xbd\x4c\x82\x52\xe8\x21\x4d\x2b\xe6\xca\xd5\x88\x82\xdd\xf1\xa0\x0d\xdc\x43\xf0\x36\x57\x09\x75\xfc\xd8\x10\xd6\xdb\x0e\x8a\x6b\x0c\x73\x41\x0f\xe2\xdd\xea\x53\x05\x11\x55\x03\x26\x07\x13\xf3\xb0\xda\xaa\x31\xae\x44\x1c\xdf\xd0\xf1\x62\x52\xa4\xcc\xf6\x36\xac\xd2\x35\x8f\x2e\xe9\x86\xd3\x84\x15\xbf\x49\x96\xfe\xa1\xf2\x40\x2a\x6d\xbc\xec\xcc\x3f\x29\xfb\x3d\xe1\x33\xc7\xce\xad\x88\x13\xa6\xbe\x7c\x8c\x40\x47\x76\xf5\x57\x21\x48\xf4\xcc\x42\x18\xd2\x05\x53\xe2\x67\x87\xca\xb6\x42\xe3\x67\xd7\xf6\xb5\x5f\xa2\x8a\x2d\x96\x98\x2a\x11\xfa\xab\xbc\xc4\xf0\x14\x1a\x63\x6f\xff\x20\x10\x67\x6d\xfd\xdc\xc7\xa2\xd9\x88\x72\x70\x7d\x27\x05\x69\x8c\x7c\xbc\xcb\xc3\x40\x8f\x72\xc5\x7e\x0f\x37\x97\x3f\x79\xe5\xfd\x88\xcf\x9f\x41\xfa\x17\xd9\x2c\x10\xdc\x86\x87\xe1\x1c\x41\x2a\x26\x17\xda\x54\xc9\x9a\xf6\x5d\xbb\x3e\x26\xc1\x0c\xae\xcd\x0e\xd8\x92\x09\x35\x9b\x4d\xc2\xfe\x6e\xb5\xea\xa2\x54\x59\xf1\x91\x27\xd8\xff\x5c\x5d\xbc\x07\xa1\xea\xc6\x01\x67\x8e\xc1\xbb\x68\x8d\x67\x65\xc5\x9f\x51\xcc\x1a\x47\x62\xb5\xe8\x80\xb6\x38\x2f\xc2\x61\x49\x3d\xc7\x3f\x70\xa8\xda\x97\x01\x06\x5b\x9c\xc7\x63\x77\xe6\x47\xfa\x9e\xac\x16\x44\x53\x32\x15\x12\xf5\x1c\x43\xaa\x44\x1e\x5f\xea\xfb\x4d\x33\x88\xd5\x53\x53\x73\xe6\xf0\x28\x66\x38\x0d\xa5\x56\x1b\x34\xee\x08\xde\xe9\x21\x8f\x29\xc3\x0e\xd5\x3d\x49\xd5\xf6\xb0\xf9\x23\x7e\x20\x62\x96\xd2\x73\x66\x91\x83\x56\xc3\x70\x73\x9f\xd5\xa4\x29\x84\x2a\x65\xc3\xf1\x48\x3c\x66\x0f\xbc\x90\x34\xc6\x2f\xaf\x2e\xdf\xbf\x7d\xff\x7d\x7e\xc1\xd7\x6e\x78\x5c\xc9\xb7\x65\x46\x15\xa5\xae\x28\x83\x16\x06\x5d\x32\xcd\x5e\xd2\x5a\x3b\x9c\x2b\x2b\xee\x75\x59\x38\x34\x21\xc5\xbf\x0c\xb1\x8d\x02\xc7\xed\x98\x7f\x23\x9e\x7f\x1d\x79\x74\xf0\x18\xfe\x3a\x60\x38\x23\xe4\xe8\xb0\x74\x13\xdd\xb9\x47\xa6\xc2\x82\x63\x6d\xb0\x24\x4f\x17\x06\x6b\xc9\xca\x64\xd0\xa0\xcc\x4b\x38\x5a\xf2\x58\x4f\xf8\xc7\xa8\x70\x30\x0e\x22\x55\x90\x69\x2b\xa4\x04\xab\xb5\xa2\xd3\xd4\xc3\x9c\x41\x1d\x4f\x8a\x0d\x55\x95\xef\x34\x71\x7b\xc0\xd3\x3a\x64\x99\x0a\x44\x73\x9c\x52\x0f\xd9\x95\x6e\x24\x27\xf1\x2c\xba\x19\x84\x71\xeb\x61\xd3\x43\xd4\xfe\x2b\x0c\x5e\xb2\x24\xf2\xf4\x13\xfe\x24\xb9\x02\x02\xa5\xbe\xfb\x75\x1a\xc5\x27\xbf\xff\x31\x90\x54\xab\x59\xb6\x19\xf5\xe0\x14\xa8\xdf\xdf\x7a\xb5\xed\xee\xdb\xdf\x0e\x0d\x7f\x34\x34\x2d\x98\x14\x95\x70\x85\x58\x2a\x6d\x92\x22\xb5\xe7\x3a\x06\x16\xbf\xc5\x4b\xe5\xbf\x8e\x6b\x31\x61\x21\xb2\xcb\x45\x2f\x57\x4c\x2d\x91\xcd\x93\x3f\xf5\xf8\xa9\x43\xec\x8a\x3f\xdb\xea\x2d\x77\x61\xb0\xd3\xf1\x98\xc1\x5b\x82\xa7\x02\x3a\xe3\x2c\x78\x09\x6c\x21\xf5\xb2\xb0\xe2\x8f\x94\x00\x52\x2f\xaf\xc4\x1f\x48\xb6\x0d\x1b\x0e\x34\xee\x8f\x28\x53\xfe\x2d\x90\x9a\x8d\x39\xba\x2d\xa2\x82\x17\xbe\xa9\xf8\xf6\x45\xb6\x28\x15\x56\xda\xec\xc6\xa4\x09\x14\xa7\x0a\xf4\xed\x77\x7f\xf7\x22\xfd\xed\xdb\xef\xb2\x65\xa2\xfa\x4b\x37\xa9\xe2\x2d\xae\x9e\x24\xcc\x8b\x60\x9f\xff\x7f\x41\xff\x4d\xcb\xe3\xfb\xf0\xa2\x36\xba\x46\xe3\x04\xa6\x66\xa5\x6d\x18\x1c\xc4\xab\x30\x19\x73\x46\x60\x37\x1b\x0b\x4d\x7d\xcf\xac\x9d\xa1\x3d\x1c\x13\xdb\x90\xc8\xb5\x3f\x70\x14\x19\x85\x03\xdd\x38\x2b\xb8\x77\xc4\xb5\x61\x1b\x61\x61\xde\x08\xc9\xc7\x87\x00\x5e\x95\x10\x0e\x0c\x1d\xdb\xac\x50\xd0\x9d\xfe\x83\x80\xa0\x8e\xa2\x7a\xb4\xb6\x1f\x6d\xdc\xdd\xcd\xe2\x5f\x5b\x73\x53\x87\x24\x54\x6c\x74\xe9\x1f\xac\x9c\x28\x9b\xbd\xa8\x6d\x2f\x12\x2e\x59\x2a\x4c\xb4\xad\x48\xa4\xa2\x82\xe2\xa8\x2b\x79\xa0\x4c\x49\x36\x1e\x27\x75\x1b\x5e\xda\x38\xcb\xf0\x8d\x2a\x7e\x16\x36\xf9\x53\xba\x7b\x6d\xea\x41\x88\x61\xd2\x20\xe3\x3b\x08\x2c\xba\xda\xc9\xa2\xc4\xd2\x01\x53\xda\xad\xd0\xf8\x6d\xd3\x22\xb5\xa3\xa1\xc9\x4e\x3d\xa6\xc2\xa3\xae\xb6\xad\x1a\x4a\xad\x1c\xf3\x3f\x92\x52\x3a\x6f\xdc\xe4\xd1\x07\x53\x74\x6f\x94\x1c\x21\x1e\x9c\x31\xc7\x8c\x73\xdc\xbb\xd3\xd5\xea\x87\x0a\x91\xe8\xb0\xf2\x4c\xc9\xf8\xfa\xcd\x3f\x6f\xbe\xcf\x2e\x18\x3d\xf5\xe3\xaa\x45\x3e\x0f\x3f\x24\xdc\xa0\x11\x8b\x54\xa5\xf8\xb3\x5f\x8c\xcd\xde\xfd\x4b\x16\x4f\xc0\x78\x36\x21\xa0\xee\x55\x28\x3c\x1f\x4f\xbe\xfe\x79\xaa\x97\x53\x5c\x07\xef\x51\xa3\x7c\x87\xaf\x52\x79\x9c\x2d\x32\x53\xae\x88\x6f\x7c\x06\x28\xb8\x30\x58\x8e\x8c\xae\xae\xda\x1d\xdd\x23\x42\xb7\xe3\xde\x1b\x78\x6f\xc1\xde\x74\x4f\x6e\x9f\xfc\x37\x00\x00\xff\xff\xbf\xc6\xc6\x42\xdd\x30\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 12509, mode: os.FileMode(420), modTime: time.Unix(1519918156, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1518211603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1518211603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1518211603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1518211603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1518211603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1518211603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1518211603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1518211603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json":   wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json":   wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json":   wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json":   wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json":   wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json":   wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json":   wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json":   wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": {nil, map[string]*bintree{
		"resources": {nil, map[string]*bintree{
			"de_DE.all.json":   {wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json":   {wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json":   {wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json":   {wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json":   {wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json":   {wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json":   {wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json":   {wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": {wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": {wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
