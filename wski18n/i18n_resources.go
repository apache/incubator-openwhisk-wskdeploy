// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x4d\x6f\xdb\x3c\x12\xbe\xe7\x57\x0c\x72\xc9\x25\x30\xda\x2e\x16\x58\x14\xd8\x43\xb0\xfd\xd8\x6c\x9b\xa4\x48\xd2\x16\x45\xb7\x70\x68\x69\x24\xb1\x96\x48\x81\xa4\xe2\xba\x86\xff\xfb\x0b\x92\x92\xad\x38\xa2\x28\xc9\x1f\x09\x8a\x37\x97\x2a\x11\xe7\x79\x66\x86\x43\x72\x86\x9a\x7e\x3f\x02\x58\x1c\x01\x00\x1c\xd3\xf0\xf8\x35\x1c\x67\x32\x1e\xe7\x02\x23\xfa\x6b\x8c\x42\x70\x71\x7c\x6a\xdf\x2a\x41\x98\x4c\x89\xa2\x9c\xe9\x61\x6f\xcd\xbb\x23\x80\xe5\x69\x0b\xc2\x8c\x08\x46\x59\xec\xc0\xf8\x5a\xbe\xf5\xa1\xc8\x22\x08\x50\x4a\x07\xca\x4d\xf9\xd6\x87\x42\x59\xc4\x1d\x10\xe7\xfa\x95\x53\xfe\xa7\xe4\x6c\x9c\x51\x29\x29\x8b\xc7\x41\x16\x8e\xa7\x38\x77\x00\xfd\xef\xe6\xea\x12\x28\xcb\x0b\x05\x21\x51\x04\x2e\xac\x14\x9c\x04\x59\x78\x02\x5a\xce\xc9\xa2\x81\xa3\x94\xc4\x63\x46\x32\x94\x39\x09\xd0\xc1\xb1\x7e\xef\xc7\x22\x85\x4a\x5a\xd4\xd5\xaf\xb9\xa0\xbf\xcd\x1f\xe0\xee\xc3\xdb\x6f\x77\x5d\x40\x73\x3a\x4e\xb8\x54\x0e\xd0\x59\x42\xe5\x14\xce\x3e\x9d\xc3\xdd\x7f\xaf\x6e\x6e\xbb\x22\xde\xa3\x90\x1a\xc1\x0b\xfa\xe5\xed\xf5\xcd\xf9\xd5\x65\x17\xdc\x29\xce\xc7\x11\x4d\x5d\x9e\xcc\x89\x4a\x80\x47\xa0\x12\x84\xd1\x14\xe7\x60\xc6\xfa\x61\x03\x14\xaa\x33\xae\x1e\xec\x01\xce\x08\xa3\x11\x4a\x35\x66\x5c\x8d\x23\x5e\xb0\xd0\x01\x7c\x51\x0e\x34\x78\xc0\xb8\x02\x33\x1a\x88\x02\xc3\xb9\x58\x8c\xf4\xbf\xcb\xe5\xe8\xff\xcc\x4d\x57\x98\x40\x5e\x91\x86\x98\xa7\xdc\x15\x21\x9f\x4d\xf8\xae\x70\x21\xe2\x02\xac\x40\x86\x4c\xf5\xa1\x29\x58\x6f\xa2\x4a\xc4\x4b\x25\x0a\xa6\x68\x86\x7a\x91\x66\x44\x05\x89\x83\xe3\xda\x0e\xd3\x2c\xa5\xc4\x72\x09\x32\xc7\x80\x46\x14\x43\xa0\x0c\x2a\x6d\x21\xe4\x28\x8d\x83\x0d\x1e\xcc\xa8\x4a\x80\x04\x66\x99\x48\x5e\x88\x00\xed\x14\xe0\x2f\x85\x4c\x87\xad\xc6\xc4\x5f\xaa\x54\xbc\x1c\xb9\x58\x8c\xec\x93\x67\x42\x2a\xf5\x83\x84\xb0\x18\x5d\x93\x5f\x69\x5f\x8e\x02\xc5\x1f\x1a\x32\x21\x12\x43\xe0\xcc\x84\x5d\xab\xae\x5b\xa8\x58\x30\x59\xe4\x39\x17\xca\xab\x66\x07\x27\x53\xeb\xe2\x15\xa2\x51\xac\xa6\x7d\x57\xe5\xec\xa0\x71\x4a\x33\xaa\xc6\x34\x66\x5c\x38\xb5\x3b\x67\xf7\x24\xa5\x61\xc5\x60\x44\x34\x8f\x79\x58\x2e\x37\xd5\x2b\xc1\x5a\xd9\x03\xce\x22\x1a\xaf\x0e\x08\xbd\xa7\xba\x77\xdc\x5b\x6d\x5d\xa1\x12\x64\x8a\x06\x76\xdb\xd5\x1b\x4f\xe9\x09\x0b\x55\xf4\x65\xcc\x69\xcb\x76\xac\x19\xf5\xbe\xa9\x87\x6c\xc7\xe3\x3b\x98\x34\xd3\x6a\xcc\x30\xaa\xd2\x94\xb6\xb3\x7a\xd3\x9e\xc5\x62\xa4\x1f\x97\xcb\x53\x88\x04\xcf\xf4\xef\x36\xea\x3d\x41\x53\x31\xda\xe9\xf2\x31\xea\x61\xd5\x4c\x49\x54\xc3\xb8\x56\xce\xf1\xb1\x3d\xf0\xe2\x62\x31\x5a\xfd\xde\xdb\x4a\x14\x62\x1c\xa3\xaa\xd6\xaf\x2b\x87\x7a\x47\x68\x6a\xb7\x94\x18\x95\x59\x82\xeb\x45\x59\x89\x5a\xe2\xab\x1c\xd9\x57\x73\x18\x4b\x14\xf7\x34\xc0\xd7\x66\xeb\x13\xa2\xae\x48\xe3\x71\xc0\x32\x22\x64\x42\xd2\x74\x9c\xf2\x80\xa4\xae\x73\xa0\x1a\x56\x63\xd2\xde\xb2\xec\x46\x12\xee\x49\x5a\xa0\x6c\x3f\x7c\xd6\x6c\x0c\xd5\x8c\x8b\xe9\x20\x3e\xca\x14\x0a\x86\xed\xa7\xcf\xfa\x90\xf2\x64\xaa\x6f\x56\x03\x21\xe0\x59\x9e\xa2\x76\x6f\x29\x12\x15\x69\x3a\x77\xd2\x44\xdc\x15\x2e\xff\xde\xee\xa7\x99\xee\x3d\x57\x60\x92\x7f\x08\x04\x12\xa5\x4f\xe6\x9c\x04\x53\x12\xa3\x3d\x09\xed\xbb\x0c\xa5\x24\x71\x2d\x00\x80\xb0\xb0\x92\xe3\xa1\x7d\xa1\x1f\x6c\x68\x34\xeb\xbf\x17\xaa\xae\x46\x95\xa7\xc0\x9f\x65\x53\x4e\x0f\x61\xd0\x76\x34\x5d\x8d\x11\x45\x7a\x90\x90\xdb\x92\xc7\x63\x8e\x44\x65\x58\xcc\xbe\xaa\x88\x2a\xa4\xae\x0e\xf6\x6c\xdb\x5e\x48\xbb\xce\x9b\x12\x34\x8e\x51\x1c\x62\xea\xb6\xa7\xea\x6b\x54\x84\x18\x1e\xd2\xb2\x2d\xf9\xfa\xee\xf0\x13\xca\x42\xfd\xfb\x01\x77\xc5\xed\x29\x1b\x8d\xac\x9d\xb7\x3c\xd2\x65\x2b\xb2\x10\x59\x30\xd7\xa2\x21\xe6\x97\xc4\xd4\x26\x21\x0d\xcb\x4c\xd5\x1e\xc9\xfa\x44\x5e\x1d\xc8\x70\x5d\x30\xb8\x9b\xc9\xa9\x3d\xe4\x57\x25\xe9\x9d\xce\x95\x04\x66\xfc\x1e\x21\x27\x42\x51\x92\xa6\xf3\xb2\x32\xc6\x10\x88\x94\xa8\xa4\xdb\x17\xcf\x41\xb3\x16\x97\xd5\xce\xc6\xc5\x62\xc4\x0b\x95\x17\xba\x38\x1a\x8d\x46\xad\xf6\xb4\x88\x79\xc8\xcc\xb6\xd4\x97\xaa\x51\xc8\x43\xf4\x60\x4d\xf5\x25\x6c\x15\xf6\x10\x57\xa1\xde\x97\xd3\x25\xd7\x91\xae\x5a\x59\x43\x69\x5d\xf2\x1e\xfa\x87\x11\xdd\x8b\xb9\x45\xb4\x91\xf4\xea\xc3\x08\xfe\x43\x58\x80\x69\x5a\x8a\xd7\x6e\x8c\x9a\xc9\x5a\x45\x3c\x24\x5a\x60\xf3\x5e\xca\xc7\xd2\x24\xd3\x48\xf3\xb9\x36\xa8\x7d\xf5\x3b\x59\x7b\x41\xf8\x76\x4d\xbb\x8d\x3c\xae\x51\xbc\x9b\x9a\x4b\xf0\xf9\x5a\x5d\x21\x3c\x0e\xc1\xf5\x7e\xec\x0e\xdf\xae\xd2\x7e\xfb\x87\x1e\x07\xdd\x5c\xb3\x05\xba\x27\x8d\x08\x31\xc5\xc3\xd4\x54\xbb\x63\xea\x6a\xd2\x9e\x33\xf5\x5d\xf1\xfc\x5d\x85\x6c\xf8\x73\xff\x55\xc8\x0e\xa9\xfa\x1a\xb5\xe7\x2a\x64\xd7\x7c\x5d\xcd\xdb\xff\x3d\xd3\x0e\xa9\x1a\x8d\xfa\x7a\x76\x7d\x79\x7e\xf9\xfe\x35\xdc\x26\x08\x27\xf6\x96\xf6\x04\xbe\x9d\x5d\x7c\xb4\x17\xc8\x6c\xe5\x52\x64\x8a\x2a\x73\xa5\x1c\x62\x2e\x30\x20\x0a\xc3\x11\x7c\x4a\x91\x48\x84\x42\x22\x9c\x68\xa7\x9f\x00\x65\x52\x21\xd1\xb9\x3b\x84\x28\x03\x41\x27\xf6\x43\x4a\xf9\x55\xc5\x7e\x47\x68\xa9\x36\x9e\x52\xa3\xae\xf3\x5e\x25\x9a\x07\x9c\xff\xdd\x51\xba\xf2\xa8\xa6\x44\x36\x21\x12\x26\x88\xec\x41\x6e\xb4\xaa\xcf\x5a\xb3\xab\x61\x70\x8d\xca\x7d\x6a\xc9\xef\x87\x6a\xb8\x1d\x66\xab\x9a\xbb\x54\x6f\x07\x6a\xdd\x96\xcb\x65\x17\x6a\x0d\xc3\x6a\x55\xeb\x51\x7d\xba\xad\x6e\x03\x00\x1b\x15\xbc\xde\xac\xd8\x87\x2a\x36\x00\xa8\x51\xa1\xb3\xc7\xb7\x15\x43\x55\x1a\x04\xd5\x61\xe3\x58\x67\xe8\xcd\x70\x55\x61\xd9\x7d\xef\xe8\x87\xe8\x5b\x00\xe5\xd1\x51\x47\x2b\xab\xbf\x4e\x31\xdf\x2e\xde\x1a\x45\x3a\x8b\xec\x45\xdb\x41\xd0\x13\x25\x55\x3b\x42\x0f\xd2\x8e\xc2\x8d\xc4\xeb\xcf\xb2\x94\xdd\xf3\x29\x9a\x34\xda\x26\x62\x09\xb2\x03\xe5\x84\x07\x56\xa2\x3d\xa7\xba\x20\x2c\x24\x8a\x8b\x39\x44\x14\xd3\x10\xaa\x4d\xfd\x8b\xed\x1e\x83\xac\x90\x0a\x26\xa8\xeb\x8e\x0e\xf9\x50\x4f\xb4\x76\xd5\x36\x85\xab\xee\x16\x72\x6f\x73\x23\xed\xb6\xa0\x10\x42\xd7\xe1\xeb\x6b\xdb\xb2\xed\xad\x83\xb2\x5b\xe3\x0f\xf3\xec\x47\x1a\x20\x93\xb8\x23\xcf\x3a\xd0\xba\x79\xb6\x12\xde\x97\x67\x07\xe3\xb7\xab\x5f\xc1\x9a\x36\x23\xf3\x78\xfe\x66\xb9\xac\x58\x08\xd8\x8e\x24\xce\xb0\x83\xaa\xbd\xb0\x9a\x3b\x16\x30\xe3\x62\x7e\x43\x7f\xa3\xae\xc4\x4d\xdf\x93\x7c\xd0\xf6\x24\x13\x5e\xa4\xa1\x9e\x1c\xc2\x4c\x03\x84\x5e\xd4\x13\x54\x33\xbd\x63\xbd\x7c\xf5\x2f\xb3\x7c\xff\xf9\xf2\x95\x5b\xdb\x9d\x52\x34\x1a\xa1\x68\x86\xbc\x50\x83\xe0\x5f\xbc\x30\xf0\xff\x78\xa1\x7f\xdc\x46\xec\x94\xa2\xd1\x88\x94\xc7\x43\x7d\x64\xf1\x5f\xb6\xa8\xbf\x23\x70\x5f\x64\x1b\xe4\x55\x03\x1d\xb3\x69\xc5\xaa\xf7\x2b\x21\x2c\x26\x93\x14\x75\x9d\xa8\x38\x30\x3e\x3b\x85\x59\x42\x4d\x43\x65\x9a\x6a\xfa\x5a\x83\x9d\x37\xf2\x77\xc8\xd5\x9c\xd4\x94\x9d\x57\x55\xeb\x2e\xc9\xf3\xb4\x6a\xd2\xd3\xc7\x77\x6e\xd2\x26\x7b\xcb\x6d\x5b\x05\x6b\x37\xab\xa6\xc5\x92\x28\xf8\x6e\x13\xac\xf2\xcf\xef\xa8\xce\x34\x7e\x6c\xb6\x93\xaa\x4e\x4c\x55\xb7\xef\x72\xa3\x2f\xb1\x4e\x55\xfd\xb1\x24\x72\xdd\x4f\xff\x11\xa6\xb5\xc7\x62\x9d\xa8\x41\x7f\x13\x04\x92\x73\xa6\x23\x61\x7d\xb9\x71\x0a\xf9\xfa\x72\x23\x17\xfc\x27\x06\xaa\xba\xdd\xe8\x10\x94\xfb\x21\xed\x65\xe8\x43\xdf\x1d\xc4\xcc\x9d\x50\x76\xfc\x14\x62\x9b\xe4\xcc\xbd\x14\x45\xd9\xfa\x95\x02\xc2\x42\xe8\x44\x34\x23\x8c\xc4\x18\xd6\xbf\xeb\xed\xe9\x33\xfe\xb3\x55\xb7\xb9\x9a\x30\xff\x57\xa0\xb9\xbf\xba\xdc\x2a\xcd\xc5\x9f\xb5\xc1\xf4\x3f\xd6\x33\x9f\x6a\x0e\x17\x8b\x51\xf9\xd8\xb4\x78\x57\x38\x13\xac\x7f\xf6\x6c\xdb\xe2\x9f\x5e\x2f\x8f\xbb\x54\x53\xb9\xfa\x2c\x1c\xf6\x74\x9a\x79\x5c\x56\x6b\x5b\x28\x1f\x9f\x8b\xcb\x9e\x4e\x33\xed\xb2\xa3\x1f\x47\x7f\x05\x00\x00\xff\xff\xe9\x33\xf1\x0c\x72\x37\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 14194, mode: os.FileMode(420), modTime: time.Unix(1515440098, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

