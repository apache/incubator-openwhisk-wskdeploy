// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5b\x6d\x6f\xdc\x36\xf2\x7f\x9f\x4f\x31\x08\xfe\x40\x5a\x60\xa3\xa4\xfd\xe3\x80\x43\x00\xe3\x90\xbb\xa4\xad\xaf\x4d\x1c\xd8\xc9\x05\x45\x6a\x28\x5c\x71\x76\x97\xb5\x44\x0a\x24\xe5\xcd\xd6\xf0\x77\x3f\x0c\x1f\x24\xed\xda\x94\xe8\x4d\x8b\xeb\x9b\x6e\xc2\xe1\xcc\x6f\x66\xc8\x79\xa2\xf2\xe9\x11\xc0\xcd\x23\x00\x80\xc7\x82\x3f\x7e\x01\x8f\x1b\xb3\x2e\x5b\x8d\x2b\xf1\xa5\x44\xad\x95\x7e\xbc\xf0\xab\x56\x33\x69\x6a\x66\x85\x92\x44\xf6\xda\xad\x3d\x02\xb8\x5d\x4c\x70\x10\x72\xa5\x12\x0c\x4e\x69\x69\x6e\xbf\xe9\xaa\x0a\x8d\x49\xb0\xb8\x08\xab\x73\x5c\xb6\x4c\x4b\x21\xd7\x09\x2e\x1f\xc3\x6a\x92\x4b\xd5\xf0\x92\xa3\xa9\xca\x5a\xc9\x75\xa9\xb1\x55\xda\x26\x78\x9d\xbb\x45\x03\x4a\x02\xc7\xb6\x56\x3b\xe4\x80\xd2\x0a\x2b\xd0\xc0\x37\xa2\xc0\x62\x01\xef\x58\x75\xc5\xd6\x68\x16\xf0\xb2\xa2\x7d\x66\x01\xef\xb5\x58\xaf\x51\x9b\x05\x9c\x77\x35\xad\xa0\xad\x8a\x6f\x81\x19\xd8\x62\x5d\xd3\xff\x35\x56\x28\xad\xdb\x71\xed\xa4\x19\x10\x12\xec\x06\xc1\xb4\x58\x89\x95\x40\x0e\x92\x35\x68\x5a\x56\x61\x91\xad\x8b\x52\x29\x4d\x5e\x82\x55\xaa\x06\xab\x82\x22\x0b\xe8\xa4\xff\x05\x4c\x72\x30\x3b\x59\x81\x6a\x51\x6e\x37\xc2\x5c\x41\x1b\x74\x82\xce\x08\xb9\x06\x06\x0d\x93\x62\x85\xc6\x3a\x62\xd5\x12\x57\x56\x07\x56\x0d\x69\xb2\x12\x75\x4f\xfe\xeb\xcb\x37\xbf\xe4\x60\x36\x1b\xa5\xed\xb4\x03\xde\x69\x75\x2d\x38\x1a\x60\x60\xba\xa6\x61\x7a\x07\x9e\x1e\xd4\x0a\xb6\x1b\x66\x9f\x18\x58\x22\x8e\xdc\xf3\x75\x66\x0c\x90\x66\xed\x68\xd0\x92\x2d\x37\x58\xb7\x41\x34\xec\x54\xa7\xb3\x4c\x48\xa6\xca\xc7\x72\x8d\xda\x90\xec\x94\x7d\x84\xb4\x4e\xe1\x40\x07\xb2\x6b\x96\xa8\x9d\x79\xcc\x95\x87\x36\x2d\x6b\x55\xb3\x75\xc9\x5a\x51\x6e\x94\x49\x69\xed\x55\x7a\xf9\xee\x14\x3e\xff\x74\x76\xf1\xfe\x73\x26\xc7\x69\xec\x23\xa6\xff\x79\x7d\x7e\x71\x7a\xf6\x36\x8b\x6f\x67\x37\xe5\x15\xee\x12\x4c\x69\x59\x69\xf1\x87\xfb\x0b\xf8\xfc\xf3\xeb\x5f\x73\x98\x56\xa8\x6d\x49\x7e\x49\x70\x6d\x99\xdd\x90\x49\xc9\xd0\x05\x11\x3b\x27\xe6\x30\x56\x72\x25\x52\x91\xca\x2f\x3a\x56\xf0\x0d\xc7\x15\xeb\x6a\x0b\xc2\xc0\xff\xfd\x74\xf6\xe6\xf5\xb3\x62\x6b\xae\x5a\xad\x5a\xf3\x6d\x8e\x55\xea\x5a\x6d\xcb\xc0\x23\x15\x5f\x1d\x11\xf4\x44\xf3\x5c\x87\xfb\x3d\x65\x97\x3e\xa6\xf4\x81\x20\x83\xb5\x90\x16\x35\xa3\xf0\x97\xb2\xb9\x47\x3b\xa2\x83\x56\xab\xa6\xcd\x02\x7e\x85\xbb\x6c\x77\x5e\xe1\x2e\x17\xb4\xb7\x72\xc3\x24\x5b\x23\x9f\x84\xdd\x6a\xf5\x3b\x56\x76\x48\x16\x56\xc1\x12\xa1\x61\xfa\x0a\x39\x44\x0e\xf3\x12\x03\x9f\x92\x82\x58\x4a\x99\x20\xca\x91\xcc\x73\x8c\x61\x68\xc6\xa3\x7b\xd1\x2a\x83\x6d\x1f\x65\x13\x7c\x87\xf5\x6c\xa5\x67\x10\x1a\xd4\xd7\xa8\x6b\x34\x26\x5a\x3b\x83\xb5\xb1\x5a\x24\x39\x7b\xd7\x75\x06\x35\x5d\x12\x21\x91\x83\xee\xa4\x15\x4d\x1f\x5d\x33\x24\x58\xb5\x5e\xd7\x58\x52\x66\x48\x88\x79\xef\x28\xe0\x27\xca\x1d\x0d\x1a\xc3\xd6\xf9\x67\xef\x1a\xf5\x52\x99\x94\x91\xc3\x2a\xa8\xce\xb6\xdd\x94\x39\x5c\xe0\x29\x1b\x61\x28\x37\xb9\x90\x9a\x8e\xa8\xef\x37\x08\x44\x41\x47\xb9\xf2\x61\x95\xae\x8c\x30\x20\x95\x05\xcf\xaa\xd3\xc8\x8b\xdf\xa6\xcc\x73\x20\xb1\x15\x13\xd9\x86\x24\x52\x5a\x20\x92\xaf\x93\x33\x77\x2a\x49\x52\x4f\x73\x9c\xa8\xa0\xca\x54\x69\x7c\xa8\xcf\xa7\x9b\x9b\x82\x7e\xdf\xde\x5e\x2e\x60\xa5\x55\x03\x37\x37\x85\x51\x9d\xae\xf0\xf6\x36\x4b\xa6\x77\xd8\x9c\x4c\x22\x8b\xbe\x32\x68\x8f\x93\xd5\x9b\x67\x4e\xda\x9e\x1d\x49\xc5\xfe\x2f\x8e\xd7\xb3\x15\xeb\x6d\xc9\x5c\x57\x50\x5a\x75\x85\x72\x56\x65\xda\x01\x7e\x07\xb8\x1d\xc7\x29\xdf\xc9\x86\x69\xb3\x61\x75\x59\xab\x8a\xd5\x09\x89\x1f\x22\x15\x9c\xb5\x28\x3f\xba\x7a\x26\x44\x0c\xe3\xe5\xb9\xdd\x70\xcd\xea\x0e\x4d\xa6\x40\x89\x76\xab\xf4\xd5\xd1\x22\x5d\xc6\x94\x68\x81\x59\x52\xb7\xd3\xf5\x8c\xae\x43\xf2\x2e\x2b\x26\x2b\xac\xeb\x64\x72\x3b\xfb\xb9\x80\x7f\x79\x1a\x2a\x6a\x87\x9d\xb9\x02\x56\x4c\xa4\xb9\xbf\x1a\xaa\x08\x2e\x78\xb8\x8b\x4d\x5b\xa3\x45\x30\x1d\xb9\x74\xd5\xd5\xf5\xae\x80\xf3\x4e\xc2\xe7\xbe\xbc\xed\x3b\x99\xcf\x94\x16\x34\x36\x8a\x6a\x05\xa6\xad\x60\x75\xbd\x1b\x3a\x03\x66\x0c\xda\x69\x2f\x8c\x90\xfa\x36\xa3\x34\x96\xd9\x2e\x55\x50\x3d\x7d\xfa\xf4\xe9\xc9\xc9\xc9\xc9\xc8\x17\x23\x1d\x2e\xdc\x56\x20\x02\x22\xcc\x92\xea\x1a\x64\xe4\x39\x26\x8a\xa6\xe1\x10\xba\x6a\x6f\x9c\xe9\x43\x76\xbc\xaf\xc7\x7b\xf3\x85\x4c\xfa\xfb\xc3\x88\x72\xda\xe3\xd9\xf2\xe6\xec\xb7\x27\xf2\x08\x0b\xc6\xb2\xa8\x74\x5d\xdd\x7c\x81\xfc\xc1\x35\x7f\x14\x0d\xa9\x6c\xb9\xbd\xbd\x84\x95\xd2\xb9\xf7\xe6\x40\xd8\x58\xd1\x07\x89\xcb\x76\x9d\xab\x56\x77\x65\xbc\x31\x33\xe3\x9a\x9b\x1b\xaa\x9d\x6f\x6f\xfb\x60\x4f\xf2\x36\x2c\x34\xe4\x63\x93\xf6\x77\x30\x5f\x7a\x7a\xbe\xf3\x2a\xae\xc3\xbd\x00\x8a\x62\xa2\xb7\x0e\x22\xa2\x41\xfe\x4c\x15\x07\x9e\x39\x4a\x46\xea\xb4\x9a\x1f\x06\x8a\x23\x14\xe5\xd8\xa2\xe4\x28\xab\x87\xd8\x73\xd8\x34\x16\xf4\x30\x39\xc3\x2d\x4c\x1a\xf5\xd5\xbd\x62\xbe\xe6\xe4\xdc\x8f\x82\x62\x4f\xa7\x53\xa5\xdf\x28\x92\xaa\x55\x42\xf5\xff\x61\x1a\x8a\xfa\x3c\xec\xa0\x7c\x9d\x07\xef\x46\xd2\x3f\xc7\x87\x99\x57\x23\x85\x64\xda\x8f\x7b\x11\xfd\x48\x4f\xce\x04\x61\xea\xd5\x8f\x4d\x6b\x0e\x91\x4f\x32\xfd\x2c\x60\x0a\x0b\xf0\x4e\x93\x27\x83\xd8\x71\xaa\xf8\xeb\xce\x5b\xd4\x71\xa5\x3a\xc9\xcb\x80\x37\x84\xaa\xe4\x01\xa8\xd1\x26\x63\xd3\x76\x23\xaa\x0d\x6c\xdd\xa0\x9b\x70\x71\x5f\x9a\xda\x0d\x42\xd5\x69\x4d\x86\x89\x0a\xc6\xf1\x85\x4b\x5a\xfe\x37\x71\x60\xc6\xe9\x42\xf6\xcb\x4e\x5f\x7e\x3e\x34\xd3\x5c\xfe\x26\xdf\xd5\xc8\x8c\x9b\x26\x5d\x0b\x8e\x0e\x14\xd1\x13\x76\x97\x2e\xfb\x62\xee\x05\xcc\xcb\x9a\x6c\x9d\xef\xc8\x62\xf2\xb0\x95\x76\x3d\x4a\x86\xa0\x30\xc9\x4d\x38\x43\xc1\x4e\x75\xa0\xd1\x79\x7e\xcb\xa4\x1d\x86\x72\x60\x37\xc2\xfc\x03\xbe\xd9\x3d\x7b\xfb\x6d\x86\x9c\xb9\x8e\xf9\xae\x4a\xa3\xc6\xef\x53\x1c\x62\xba\x86\x87\x3a\xaf\x75\x87\xc6\x5e\x66\xc8\x8d\x4e\x7e\x90\x86\xfd\x13\x46\xa6\x8e\x01\x5e\x19\x66\xf3\xa9\x99\xba\x5f\x75\x7a\xc1\x68\x2c\xab\xd1\x8d\x9c\xf8\x02\x58\x3d\x6e\xbf\xfa\x7b\x4d\x70\x74\xbf\x23\x08\x01\xa6\xb1\xbf\x8c\xcf\x86\x50\x08\x5c\x68\xac\x6c\x08\x8f\xda\x3f\x1f\xcc\xbd\x55\xbc\x3e\x3f\x3f\x3b\xbf\x48\xe0\x3e\x39\xfc\x0f\x3c\x39\xdc\x59\x38\x39\x99\x28\x50\xb4\xde\x8f\xc4\x57\x52\x6d\x65\x69\x77\xed\x44\x26\x8d\x11\x97\xa8\xc8\x54\x61\x57\x01\xc3\x23\x04\x28\x59\xef\xc0\x74\xad\x7f\x51\x7b\xe6\xa6\xff\x85\xd9\x19\x8b\x0d\x2c\x85\xe4\x42\xae\x0d\x28\x0d\x6b\x61\x37\xdd\xb2\xa8\x54\xd3\xbf\xa1\x4c\x57\x54\x5a\xc7\xaa\xaa\xd2\xc8\x6c\x0a\xa6\x7b\xe1\x04\x47\xb2\x17\xb7\xb6\xc2\x6e\xc0\x3d\x8d\xc6\x69\xdc\x0b\x5a\x44\xad\x6f\x6f\xdd\x73\x97\x5f\xab\x14\xf7\x0b\xf4\x63\xa6\xa3\x1e\x41\xf2\xc1\x74\x12\x12\xbf\x13\x4a\xff\x22\x48\x2b\x44\x5e\x0a\x79\xad\xae\x52\x80\x7e\x70\x79\x8d\xae\x96\x27\x73\xc1\x91\xb6\xc1\x76\xe3\x1e\xd9\x02\x52\xeb\x1f\x38\xc3\xd2\x5f\x83\xf6\x0a\x77\xfd\x1c\xaf\x61\x92\x33\xab\xf4\xd4\x8c\xb2\xa7\x71\x23\xaf\x4f\xd1\x98\x97\x74\x1e\x03\x9f\x59\x99\x7d\xc7\x25\x95\xf5\xd9\x30\x21\xf0\xcd\x78\x3c\xee\x92\xb9\xa3\x06\x46\xf7\xde\x6e\xc6\x2d\xd8\xac\x50\xba\xf4\xa4\x69\xc3\x6c\xb5\x99\x50\xb0\x3f\x1e\xb4\x81\x3b\x11\x3c\x26\x5c\x21\x0f\xdf\x60\xfc\x7a\x6c\x03\xb9\x42\x3f\xdc\x74\x42\x9c\x5b\x5d\x78\x23\xa2\x66\xc4\x64\x6f\xec\xef\x57\xa3\x1a\xd3\x4a\x84\x19\x14\x1d\x2f\x56\x8b\x94\xd9\x4e\xfd\x2a\x5d\xf3\xe0\x92\x7e\xc2\x4e\xb2\xc2\x6f\xc2\x32\xbc\xdf\xee\xa1\x52\xda\x61\x67\xee\xa5\xdd\xed\xf1\x3f\x73\xec\x1c\x21\xce\x98\xfa\xfc\x21\x80\x0e\xec\xea\xae\x82\x47\xf4\xc4\x80\x9f\x34\x7a\x53\xe2\x17\x8b\xd2\x44\xd0\xf8\xc5\xc6\xe6\xfc\x6b\x54\x31\xe5\x1a\x53\x75\xce\x70\x95\xd7\xe8\x5f\x88\x43\xec\x1d\x5e\x35\xc2\xc0\x70\xc8\x64\x94\xdf\x44\x35\xba\xbe\xd9\x36\xf5\xd0\x4b\xaf\xb1\xbb\x3d\xbd\xb4\x04\xbe\x3d\x85\x5d\xe3\x40\x66\x1c\xac\xcc\xe4\xae\x3f\x1b\x14\x44\x46\x6e\x9f\xb5\x6b\x18\xe4\xf7\x10\x66\xd5\xe8\x74\xfd\xf0\x93\xeb\x87\xab\x94\xf2\x6e\x6f\xe1\xc3\xf9\x2f\x0e\x81\x1b\xb7\xba\xab\x44\x7f\x22\x88\x9e\xe0\xd2\x3f\xfb\xe7\x00\x69\x58\xbd\x52\xba\x49\x5a\xee\x4d\x5c\x9f\x42\x50\xc0\x7b\xbd\x03\xb6\x66\x42\x16\xc5\xac\xd8\xdf\x8d\x92\x7d\xb0\xad\x1a\x3e\xf1\xc0\xfe\xef\x8b\xb3\xb7\x20\x64\xdb\x59\xe0\xcc\x32\x78\x13\xac\xf1\xa4\x6a\xf8\x13\x0a\xbd\xd3\x92\x58\x2b\x7a\x41\x5b\x5c\x86\x83\x93\xfa\xd8\xe2\x9e\xbb\x11\x9d\xcb\x60\x8b\xcb\x70\x22\x16\xee\x79\xc5\x91\xb5\x82\x68\x2a\x26\x7d\xbd\xb1\x44\x9f\xf1\x91\x87\xef\x30\x86\x4d\x05\x84\x4a\xb6\x6b\x39\xb3\x78\x10\xfa\xac\x82\x4a\xc9\x6b\xd4\xf6\x40\xbc\x55\x63\x1e\x73\x86\x1d\xab\x7b\x94\xaa\xf1\xb0\xb9\x9b\xba\x07\x31\x4b\xe9\x25\x33\xc8\x41\xc9\xf1\xf5\xb9\xcb\x6a\xd6\x14\x42\x56\x75\xc7\xf1\x00\x1e\x33\x7b\x5e\x98\x37\x86\x0f\x12\xd3\x17\x2d\x65\x88\xb0\xab\x80\x53\xeb\xc7\x0c\xca\x6e\x5c\x4d\xe1\xa2\xc3\xaa\x93\x21\x36\xc4\x00\xb2\xf0\xb6\x50\x12\xc3\x4b\x7f\x43\x5c\xf0\x4b\x8b\x55\x4e\x44\x08\x58\xa3\xef\x62\x9c\xa3\x00\x5f\x92\xd4\xaf\x44\xef\x80\x0f\xc1\x8e\xd8\xaa\xce\x8e\x83\x5e\x01\x1f\x87\x64\x12\x43\x1e\x6d\x5b\xf4\x61\x91\x8e\x47\x2c\x7a\x66\xd2\x73\x50\x27\x9a\xa9\xa4\xb6\xdc\x62\xc9\x85\xce\x0a\xd6\xf7\xaa\x45\x7a\xf4\x76\x6f\x95\x90\xbe\x34\xf4\xb3\x08\x8b\xa1\xc1\xa1\x82\x6c\x08\x4b\x0b\x30\x5d\x15\xb5\x32\xae\x37\xda\x8f\xd4\xf7\xab\xf1\xf1\xe5\xf9\xdb\xd3\xb7\x3f\xe6\x77\x3e\x71\xc3\xc3\x7a\x9f\x2d\xd3\xb2\xac\x54\x43\x56\x2d\x35\xda\x64\xbd\x79\x4e\x6b\x71\xd4\x5e\x35\xdc\xdd\x86\x95\x45\xed\x6b\xdd\x17\x3e\x19\x51\x06\xbd\x9c\x3a\x68\x41\x9e\x7b\xeb\x7c\x70\xfa\x19\x7f\x3d\x34\x9e\xf8\x73\xb4\xf3\x47\xdc\x49\xa6\x0a\x9b\x63\xab\xb1\xa2\x58\x51\x6a\x6c\x6b\x56\x25\xcf\x00\x95\xa0\x24\x47\xd5\x3c\x14\xd6\xee\x69\xd9\x87\x96\xbd\x5c\xe7\x31\x6d\x45\x5d\x83\x51\x4a\x52\x3c\x1a\xc4\x2c\xa0\x0d\xb1\xc6\xf8\xf6\xc2\xcd\x8d\x70\xbb\xc7\xd3\x58\x64\x99\x0a\x04\x73\x1c\xd3\x18\x98\x8d\xea\x6a\x4e\xf0\x0c\xda\x02\xfc\xe3\xc9\xfe\x08\x83\xa8\xdd\x2f\x3f\x46\xcd\x42\xe4\xe8\x67\xfc\x49\xb8\xbc\x04\xaa\x01\xef\x36\x2c\x74\x29\x7c\xc4\x78\x80\x48\x77\x93\xd9\xf5\xa4\x07\xe7\x84\xba\xfd\xd1\xab\x71\x56\x17\xbf\x2d\x1c\x7f\x54\x38\x0f\xac\x16\x8d\xb0\xa5\x58\x4b\xa5\x93\x90\xe2\xb9\x0e\x61\xce\x6d\x71\xa8\xdc\xaf\xc3\xa6\x84\x02\xa9\x67\x97\x2b\xbd\xda\x30\xb9\x46\xb6\x4c\x7e\x0a\xf6\x4b\x2f\xb1\xef\x82\x4c\xd4\xbb\xde\xf9\x31\x6d\xcf\xa3\x80\x53\x12\x4f\x9d\x64\xc6\x59\x70\x08\x4c\x59\xab\x75\x69\xc4\x1f\x29\x00\xb5\x5a\x5f\x88\x3f\x5c\x92\xf2\x1b\xf6\x34\x1e\x8e\x28\x93\xee\x65\x9f\xba\xee\x25\xda\x2d\xa2\x84\xe7\x2e\xf5\x7d\xf7\x3c\x1b\x4a\x83\x8d\xd2\xbb\x29\x34\x9e\xe2\x58\x40\xdf\x7d\xff\x77\x07\xe9\x6f\xdf\x7d\x9f\x8d\x89\x32\x99\xea\x52\x5d\x4c\x58\x3d\x0a\xcc\x73\x6f\x9f\xff\x7f\x4e\xff\xcd\xe3\x71\x03\xa9\xb2\xd5\xaa\x45\x6d\x05\xa6\x5e\x3e\x62\x18\x1c\xc5\x2b\x3f\xe7\xb6\x5a\x60\x3f\xe9\xf6\xd3\xad\x81\x59\x9c\x88\xdf\x1f\x13\x63\x48\xe4\xca\x1d\x38\x8a\x8c\xc2\x82\xea\xac\x11\xdc\x39\xe2\xbd\x66\xd7\xc2\xc0\xb2\x13\x35\x9f\x9e\x86\x39\x55\x7c\x38\xd0\x74\x6c\xb3\x42\x41\x7f\xfa\xf7\x02\x82\x3c\x88\xea\xc1\xda\x6e\xc6\x77\x73\x53\x84\xbf\x8d\xe6\xbe\xb9\x29\x1a\x21\xc3\xc4\x87\xfe\xc0\xaa\x99\xfe\xd1\x41\x8d\x85\x95\xbf\x64\xa9\x30\x11\x7b\xf2\x40\x45\x45\xc6\x41\x7b\x7e\x4f\xa1\x9b\xec\xc0\x8f\x6a\xbb\x1d\xda\x30\xd4\x73\x13\x1b\xfc\x22\x4c\xf2\x53\xdb\x3b\xf3\x9a\xbd\x10\xc3\x6a\x8d\x8c\xef\xc0\xb3\xe8\xab\x6f\x83\x35\x56\x54\x04\x2a\xbb\x41\x3f\x0c\x9e\x87\x14\x67\xa4\xb3\x23\xab\x90\x0a\x0f\xc6\x3b\xb1\x6a\xa8\x94\xb4\xcc\x7d\xf2\x28\x55\xde\xdc\xd5\x49\x1f\xbd\x89\x39\xa3\xe4\x80\xb8\xf7\xc5\x28\x64\x9c\xc3\x21\xd6\x36\xcc\x05\xfc\x74\x2d\x10\xed\xf7\x2e\xf3\x16\x1a\x7d\x43\x5b\xaa\x6b\xd4\x5a\x70\x8e\xa9\x46\x8c\x10\x8e\x3f\xa9\x1d\xde\x34\x87\xad\xb1\x56\x18\x3f\x59\xa5\x60\xbc\x7a\xfd\xcf\x0f\x3f\x66\xd7\xad\x8e\xfa\x61\x45\x2b\x5f\xae\x4b\x83\x4c\x57\x1b\x6a\x54\xa2\xb2\x7d\xf1\x9d\xfa\xb7\x36\x71\x47\xaf\xec\x7e\xb9\x3e\xfe\x7e\x64\x08\x0a\x33\x69\x8f\xa0\x1c\x9e\x88\x3f\xfb\x34\x1c\x79\x12\x08\x5a\x7f\x55\xfc\x3b\xe7\xc4\xbf\xf2\x78\x75\xcf\x2c\x35\x58\xe4\x05\xfc\xe0\x10\x0c\xff\xbe\xc3\x3d\xdf\x10\xb3\x87\x02\x98\xfe\xce\xf9\xe1\x18\xc6\x4f\xa9\xf1\xe9\x3f\x40\x7a\x74\xf9\xe8\xbf\x01\x00\x00\xff\xff\x55\xd2\x10\x76\x1a\x36\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 13850, mode: os.FileMode(420), modTime: time.Unix(1520542586, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

