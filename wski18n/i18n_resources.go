// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x3c\x6b\x6f\x1b\x39\x92\xdf\xe7\x57\x14\x06\x0b\x64\x06\x90\xe5\xec\xe2\x70\x58\xf8\x2e\x07\x78\x13\x67\xd6\x3b\x49\x1c\xd8\xce\x0c\xe6\x12\xa3\x43\x75\x97\x24\xae\xbb\xc9\x5e\x92\x2d\x45\x63\xe8\xbf\x1f\xaa\x48\x76\xb7\x64\xf5\x43\x4e\x06\xb7\xf9\x12\x49\x24\xeb\xc5\x62\xb1\x5e\xf4\xc7\xef\x00\x1e\xbe\x03\x00\xf8\x5e\x66\xdf\x9f\xc1\xf7\x85\x5d\x24\xa5\xc1\xb9\xfc\x92\xa0\x31\xda\x7c\x3f\xf1\xa3\xce\x08\x65\x73\xe1\xa4\x56\x34\xed\x82\xc7\xbe\x03\xd8\x4e\x7a\x20\x48\x35\xd7\x1d\x00\x2e\x69\x68\x68\xbd\xad\xd2\x14\xad\xed\x00\x71\x13\x46\x87\xa0\xac\x85\x51\x52\x2d\x3a\xa0\xfc\x1a\x46\x3b\xa1\xa4\x45\x96\x64\x68\xd3\x24\xd7\x6a\x91\x18\x2c\xb5\x71\x1d\xb0\xae\x79\xd0\x82\x56\x90\x61\x99\xeb\x0d\x66\x80\xca\x49\x27\xd1\xc2\x0f\x72\x8a\xd3\x09\xbc\x17\xe9\xbd\x58\xa0\x9d\xc0\x79\x4a\xeb\xec\x04\x6e\x8d\x5c\x2c\xd0\xd8\x09\x5c\x57\x39\x8d\xa0\x4b\xa7\x3f\x82\xb0\xb0\xc6\x3c\xa7\xff\x0d\xa6\xa8\x1c\xaf\x58\x31\x36\x0b\x52\x81\x5b\x22\xd8\x12\x53\x39\x97\x98\x81\x12\x05\xda\x52\xa4\x38\x1d\xcd\x8b\xd6\x5d\x9c\xdc\x2e\x11\xae\x4a\x54\xbf\x2e\xa5\xbd\x87\x57\xcc\x4c\x41\x24\xdc\x6a\x9d\x7f\x52\x9f\xd4\xad\x86\x19\x2e\xa4\x82\xb5\x36\xf7\x52\x2d\x60\x2d\xdd\x12\xd6\xf6\xde\x33\x3e\x01\x53\x79\x02\x9f\xd5\xbf\x3d\x83\x54\x17\x85\x50\xd9\x19\x01\xf8\xe4\xfe\xd4\x4c\x67\x88\x4b\x69\x61\x2d\xf3\x3c\xc8\xae\x85\x5f\x58\x8b\xce\xb6\x78\x95\x0a\x0a\xa1\xe4\x1c\xad\x9b\x6e\x44\x91\x83\x36\xad\x1f\x8a\xfc\x93\xba\x9c\x43\x5a\x19\x43\x24\x67\xd2\x60\xea\xb4\xd9\x40\xa6\xd1\x2a\x07\x4b\xb1\x42\x10\x6a\x53\x2f\x81\xb9\xcc\x71\xd2\x90\x03\xa5\x91\xca\x59\x70\x44\xd2\x12\xf3\x12\x0a\xb4\x56\x2c\x70\xea\x09\x45\x28\xb4\x75\xcc\x8e\x56\xb0\x16\x1b\x0b\x7a\x0e\x95\x65\x39\xd4\x40\x9c\x8e\x9c\x08\x95\x9d\x6a\x03\x95\xea\xe2\x4c\x18\x64\xa1\xec\x88\xa4\xf5\x05\x4e\x0a\x28\x85\x5b\x9e\x3a\x7d\xba\xc3\xf8\xb8\x59\x70\x92\xd5\x03\x59\xbd\x97\x07\x00\x44\x0a\x0f\xff\x3a\x92\x8a\xc1\xe9\xbd\xe4\x7c\x52\xe7\x95\x72\x4b\x3a\x36\x29\xab\xe3\xd9\x27\xd5\xc0\x36\x28\x32\x0b\xa9\xc1\x8c\x26\x88\xdc\xc2\xdc\xe8\x02\xfe\xf4\xf7\xab\xb7\x17\xa7\xd3\xb5\xbd\x2f\x8d\x2e\x2d\xcc\x36\x90\xe1\x5c\x54\xb9\xfb\xa4\xae\x56\x68\xd6\x46\x3a\x8c\x3f\x41\xaa\xd5\x5c\x2e\x78\xd3\xe9\xa8\xbe\x7c\x73\x79\xf6\x49\x01\xec\x48\xf2\x24\x4c\xfa\xef\xd6\xe4\xff\xe9\x11\xc0\x95\x09\xea\xb9\x01\x91\xe7\xe0\x96\x06\x7b\x80\x8b\x52\x2e\x49\x83\xfe\x7e\x75\x73\x4b\x5f\x2b\xb7\x84\x9f\x2f\x7e\x83\x93\x93\xfa\x14\xc3\xbb\xf3\xb7\x17\x37\xef\xcf\x5f\x5e\x74\x62\x1d\x71\xce\xed\x52\x1b\xd7\x6f\xb4\xde\x1b\xbd\x92\x19\x5a\x10\x60\xab\xa2\x10\x86\xa4\x4c\xf3\x49\xa7\x1f\x69\xea\x0c\x49\xc9\xa3\x75\x3b\x8d\x7b\x8d\x19\xcc\x84\xc5\x8c\x58\x8e\x34\xb6\xf6\x16\x7e\x3b\x7f\xfb\x66\x8c\x5d\x0a\xf4\x76\x1b\xa6\x73\x70\x5a\xe7\x60\xd1\xd1\xf9\xe2\xb3\x19\xa4\xba\xd1\x95\x01\x5d\xa2\x5a\x33\xbd\x65\xb0\xb3\xe1\x58\x8a\xdd\xc3\x3e\x9e\x96\x15\x1a\x4b\xb8\xbb\x84\x27\x95\x63\x3b\x17\xe6\x81\xaa\x8a\x19\x1a\x92\x5d\xbd\xe1\xa3\x71\xd9\x8d\x4a\xfb\xf9\x76\x1a\x68\x92\x67\xb6\xd9\x9c\x9a\xd9\x19\xba\x35\xa2\x82\x34\x97\x24\x76\xa1\x32\xb0\x68\x56\x68\x46\x5f\x0a\xe3\x69\x68\x6d\x2f\xe1\x89\xaa\xc0\x3f\xec\xa8\x4e\xf7\x56\xd0\x3a\x5d\x12\x7c\x91\xb7\xe1\xd1\x16\xc5\xe9\xac\x3a\x64\x17\x5e\xc9\xf9\x1c\xd9\xa2\x47\x8b\x6b\x2a\x45\x77\x37\x93\x73\xb6\x6b\x84\xe8\xa7\xc7\xbf\x8c\xb4\x60\xbd\x53\xdb\xd6\xeb\xe9\x30\x4e\x4a\xa3\xff\x89\xa9\xa3\xf3\x0e\xef\xaf\xaf\xfe\x71\xf1\xf2\x76\xb4\x9e\x44\x51\x77\xec\xd3\x87\xce\x7b\x86\x8d\xa5\x57\x88\xb1\xfa\x30\x16\x97\xc1\x42\xaf\xd0\x3e\xc6\xb9\x5e\xca\x74\x09\x6b\x34\xd8\x38\x45\x4c\x07\x9d\x9a\x1d\x4d\xd8\xb7\x17\x3b\x7e\x46\x86\x39\x3a\xda\xec\xc3\x4c\xed\x00\xf3\xd7\xb9\xa9\xd4\xd9\xbf\xdd\xf5\x76\x18\xd2\x21\x6d\x80\x1f\xb4\xca\x37\xec\x5f\x59\x98\x6b\xd3\x12\x0f\x7b\x7f\xac\x60\x85\xce\xf0\xc7\xd1\x7a\x83\x5f\x7a\xee\x81\x0b\x1e\x84\x40\xc9\x8e\x70\x6b\x91\x8f\x55\x9a\x11\x88\x2c\x6d\x97\x58\x60\xd6\x8f\x91\xac\xcd\x8e\x92\xcc\x2b\xc5\x7e\xb3\xb7\x11\x1d\xfe\x18\xad\x22\x07\xd4\xd3\xb1\xa7\x05\xfe\xc7\x0e\xa1\xb7\x36\xd5\xcf\xc3\xec\xe4\x88\x4b\x77\x9e\x8b\x45\x22\x4a\x99\xd0\xf5\xde\xc1\xbf\xbf\x9f\xce\xdf\x5f\xc2\x67\xba\xff\x3f\x8f\x84\xd8\x7f\x11\xb5\x80\xfe\x72\x71\x7d\x73\x79\xf5\x6e\x14\xdc\xca\x2d\x93\x7b\xec\x3a\xdc\x34\xac\x8d\xfc\x9d\x7f\x80\xcf\x3f\x5f\xfc\x36\x06\x68\x8a\xc6\x25\xb4\x3b\x1d\x50\x49\xbe\x64\xbd\xe9\xc8\x4e\x69\x32\x6f\xe5\x18\xc0\xec\x8a\x75\x40\x6d\x3b\x75\x3f\x44\x4f\x4f\xda\x7d\xd7\x70\xe0\xb0\x78\xa9\xe4\xb9\x5e\x27\x01\x46\x57\xf4\xc9\x93\xa0\x9e\x34\x0c\xb5\x39\xbe\x7d\x72\xa9\x83\x86\xfa\x1e\x1c\x01\xba\x34\xb8\x92\xb8\xee\x80\x6b\x97\x4c\x68\x04\x7a\xba\x73\x51\x97\xb9\x50\x23\x30\xdc\xe3\x66\xf4\x96\xde\xe3\x66\x2c\xe1\x5e\xd2\xc1\x10\xf4\x0a\x3a\x1a\x89\x3a\x9c\x76\x74\x31\x40\x21\xcc\x3d\x66\xd1\x94\x8c\x12\x15\xc3\x49\xe8\xd0\x77\x31\x13\x50\xf1\x94\x61\x88\xd1\x3a\x0c\xec\xea\xce\xe5\x34\x02\x6c\x1d\x08\x74\xc0\x6d\xc6\x47\x33\x3d\x40\xa1\xf7\x0b\x72\xb4\x36\x4a\x7b\x04\x68\xeb\x8c\xec\x84\xec\xb7\xae\xb2\x48\x97\xd7\x5c\x2a\xcc\xc8\x2a\x3b\x59\xd4\xee\xf2\x08\x0c\xce\x74\x0b\x81\xc7\x40\x57\xae\xac\xc6\x10\xeb\xd5\x6d\x85\x66\xa6\x6d\x17\xc8\x30\x7a\x2c\xd0\x52\x18\x51\x74\x0a\xd8\x88\x02\x1d\x1a\x58\x89\xbc\x42\xbe\xbd\xc9\x98\xc2\x2f\xe7\x6f\x3e\x5c\x7c\xa6\xcb\xbd\x10\x47\xa2\xea\x3b\x8d\x9f\x5f\x5f\xbe\xb9\xf8\x4c\x61\xae\x13\x92\x1d\xe4\x43\x14\xfc\xe3\xe6\xea\xdd\x30\x6a\xb6\xaa\x49\x21\x2d\xf9\xe2\x7c\x5f\x74\x5f\x17\x74\x11\xd3\x8c\x26\x76\x07\xb2\x05\xd2\x82\xd2\x31\xea\xae\x0c\x66\xd3\x4f\x7d\xfb\xbe\x87\xd1\x47\xca\x3d\x18\xe9\xce\xe3\x60\xfa\xab\xf0\x0c\x1d\x37\xc2\xd4\xc4\xe6\x4f\x42\x15\x58\xe9\xcb\x8a\xee\xf3\xf3\xf1\xe1\x61\x4a\x9f\xb7\xdb\xbb\x89\x77\x8c\x1e\x1e\xa6\x56\x57\x26\xc5\xed\x76\x14\x4e\xbf\x61\x43\x38\x39\x01\x11\xf6\xca\xa2\x7b\x1a\xae\x5a\x3c\x43\xd8\x76\xe4\x48\x2c\xd6\x3f\x3c\x9d\xcf\x52\x2e\xd6\x89\x43\x25\x94\x4b\x64\x36\x46\xc6\x3f\x09\x87\xe4\x2a\xde\xf2\x22\xb8\x7c\x15\xa9\xa9\x2a\x99\x7d\x25\x21\x82\x33\xd3\x89\xd3\xf7\xa8\x8e\xa1\xc5\xaf\x03\x5e\xf7\xb4\xbd\xa8\x54\x21\x8c\x5d\x8a\x3c\xc9\x75\x2a\xf2\xce\xa8\x2d\xcc\x6a\x39\xda\xc1\x32\x07\x07\x9c\x57\x07\x6b\x31\x12\xa1\x42\x47\xc1\xca\x93\x51\x4a\xe5\xd0\x28\x74\x20\x1c\xb1\x5b\x99\x7c\x80\xd7\xc6\x8d\x49\x52\xa1\x52\xcc\xf3\x4e\x27\xe2\xea\xe7\x29\xbc\xf4\x73\x9a\xfc\x15\x87\x65\x23\x11\xcc\x85\xec\x86\xde\xca\x8f\x67\x32\x0b\xa6\xa1\x28\x73\x74\x08\xb6\xa2\x2d\x9d\x57\x79\xbe\x99\xc2\x75\xa5\xe0\xf3\xe3\x00\xf0\x33\xc7\x2b\x1c\x40\x93\xa9\x76\x52\xe4\xf9\xa6\x89\x96\x7d\x60\x34\x96\x52\x9f\xbc\x4b\xac\x13\xae\xea\x72\x5e\x4f\x4e\x4e\x4e\x5e\xbc\x78\xf1\xe2\x70\x8e\xff\x86\x97\x02\x4d\xa0\x89\xa3\xb0\x72\xa9\x06\xb3\x31\x22\x8a\xa2\xc9\x20\xd4\x77\xbc\x70\xfa\x95\xec\xe9\x7b\xdd\x5e\x3b\x1e\x49\xef\x7e\x7f\x68\x7b\xd0\xbd\x3b\x3e\x1a\xdf\x90\xfc\x76\x50\x3e\x41\x82\xa1\xf4\x92\x70\x4e\x8d\x9d\x07\x32\xba\x89\x70\x09\xb9\x7f\x1d\x48\x1f\x1e\xa6\x69\x91\x6d\xb7\x21\x13\xf7\xf0\x30\xa5\x85\x6e\x53\xe2\x76\xcb\xa6\x92\xd6\x6e\xb7\x77\xd3\x69\x2f\x6e\xf6\xd9\x37\x49\xd4\xe7\x81\xb2\xde\xc3\x03\x45\x10\x01\x01\x11\xb9\xdd\xde\xc1\x52\x58\x98\x21\xaa\x1d\x86\xeb\x13\x32\x1e\x7b\x77\x1d\xf0\x55\x1c\x87\x83\x04\x4c\xa7\x3d\x19\xd4\x80\xa2\x49\x86\x7f\x3b\x16\x1b\x98\x63\x98\x8c\xb3\xbb\xd9\xfc\xd0\xcc\x38\xc8\x68\x2f\x9f\x19\x96\xa8\x32\x54\xe9\x31\xe2\x6c\x16\x3d\x1d\x4f\x73\x44\x3a\x65\xfa\xea\x20\x9a\xaf\x51\x9c\xc3\x54\x90\x61\xa8\x4c\x97\x9b\xf8\x6a\x27\x05\x7e\x98\xf5\xff\xc7\x3b\x22\xf2\x73\x9c\x9e\x7c\xdd\x0e\x3e\x36\x73\xdf\x66\x0f\x47\x9e\x8c\x2e\x4a\xfa\xf7\xf1\xc3\x5e\x31\xe3\x29\x3b\xd9\x47\x55\x48\x58\x3c\xf5\xce\x61\x8a\xfc\x0d\x50\x27\x44\xfa\x68\x81\xac\x32\xb4\x93\x31\xe5\xda\xba\x11\xff\x38\x7d\x8b\x3c\xce\x75\xa5\xb2\x24\xd0\x1b\x2c\x55\xa7\x02\x84\x24\xff\x41\x0b\x19\x2a\x09\xdc\x0f\x41\x74\xb5\xea\x08\xb1\xd6\xbf\x9f\x53\xe6\x4b\xca\x7f\x26\x08\xc2\x32\x2f\x5c\xad\x1f\xeb\x16\x84\x14\x5f\x12\xaa\x58\x5d\x85\x40\x3f\xca\xb1\x0d\xb4\xd2\x8f\x06\x39\xad\x92\x4d\xb8\x2c\xdc\xb8\x5b\xf5\xb6\x11\x1d\xa6\x5e\x11\x90\x80\x68\x55\x4b\xda\x45\x56\xdf\xcb\x10\xb4\xdf\xf8\x32\xe0\x50\xe3\xc7\xc5\xf5\xf5\xd5\xf5\x4d\x07\xdd\x2f\xf6\xff\x81\x9f\x0e\x8f\x06\x5e\xbc\xe8\xb9\x7e\x8c\xd9\x3d\x68\xf7\x4a\xaf\x55\x42\x9e\xc2\xf0\x51\xa7\x59\x24\xaa\xb0\x6a\x0a\xad\x5c\x3d\x97\x40\x6c\x55\xfa\x8a\xc1\x29\x67\xb9\xa7\x76\x63\x1d\x16\x30\x93\x2a\x93\x6a\x61\x41\x1b\x58\x48\xb7\xac\x66\xd3\x54\x17\x75\xb5\xb1\xff\xbe\x34\x26\xde\x99\xa9\x41\xe1\xba\xc8\xe4\x3e\x27\xe0\x29\x3b\x6a\xc9\xdd\x2e\xdc\x20\x15\x5b\x43\xce\x68\x10\x8d\xd9\x6e\xb9\x4c\xe1\xc7\x52\x9d\xf9\x01\xfa\x30\x10\xcd\xb4\x48\xf2\x67\xa5\x97\xa4\xec\xd1\x49\xf9\x83\x48\x9a\x23\x52\x38\xbd\xd2\xf7\x5d\x04\xbd\x66\xb3\x45\xe6\xc2\x4f\xe3\x03\x49\xcb\x60\xbd\xc4\x56\xe1\xce\xf9\x36\xa7\x30\xf4\xc7\x50\x7b\x8f\x9b\x3a\xa5\x43\xfe\xae\x70\xda\xf4\xa5\xab\xea\x39\x9c\xfd\xf8\x18\x85\x79\x47\xfa\x18\xe0\x0c\xe2\x8c\x99\xdd\x44\x69\xe7\x8d\x5d\x07\xc2\xb7\xed\x14\x30\xdb\x6a\x9e\x4d\xf1\x2e\xe7\x60\xdb\x1e\xf5\x10\x52\xf6\xde\x0b\x69\x0b\xe1\xd2\x2e\xf7\x9d\x18\xac\xd5\x83\x16\x64\x8c\x22\x8b\xf6\x54\xaa\xfd\x5a\x83\x1f\x0f\x34\x70\xbb\x14\x93\xc9\x48\x78\x5b\xd9\xbc\xd1\xa4\xa2\x05\x64\x27\xb5\xed\x47\x23\x1b\xfd\x4c\x84\xf8\x9f\xd4\x4b\xe4\xb2\x4b\x6c\x97\x7e\x94\x7b\xbc\xfc\x96\xd4\x59\x64\xc2\x15\x3e\x13\x2d\x07\x1b\xc4\xb8\x76\x4a\xb4\x0b\x5f\x37\xa4\x35\xfe\xe3\x18\x39\x47\x12\x07\x44\x7d\x7d\x0c\x41\x7b\x72\xe5\xa3\xe0\x29\x7a\x66\xc1\x67\x79\xbc\x28\xf1\x8b\x43\x65\x23\xd1\xf8\x85\xef\x30\x62\xe7\x6b\x58\xb1\xc9\x02\xbb\xf2\xa9\xcd\x51\x5e\xa0\x6f\x6b\x09\xb6\xb7\xc9\xdc\x3f\x2a\xd0\xd2\xfd\x26\xd3\xd6\xf1\x1d\x2d\x53\x4f\x7a\xe2\x39\xe6\xd3\x53\x63\xeb\xa0\x6f\x87\x61\xf6\x0b\x49\x8c\x8d\x94\x85\xda\xd4\xba\x41\x46\xa4\xb5\xed\x83\x72\x0d\x39\xdd\x9a\x84\x41\x36\x2a\x93\x1f\xaf\xb9\x3e\xb1\x15\x42\xe8\x0f\xd7\x6f\x7c\xc6\xd1\xe4\xe1\x28\x7d\xdc\x89\xb1\xef\x7c\xaf\xd2\x18\x42\x0a\x91\xcf\xb5\x29\x3a\x25\xf7\x36\x8e\xf7\x51\x30\x85\x5b\xb3\x01\xb1\x10\x52\x0d\x85\xf4\xc6\x24\xff\xb4\x5a\xd5\xc6\x36\x2d\xb2\x9e\x42\x32\xd7\x1a\xa4\x2a\x2b\x07\x99\x70\x02\xde\x06\x69\x3c\x4b\x8b\xec\x19\x99\xde\x7e\x4c\xa2\x94\x4d\x41\xc0\x2b\x8d\x36\x89\xc5\x7f\x55\xa8\x3a\x33\xf6\xbe\xbd\xf6\xf4\x26\xcc\xda\x3d\x2c\x2d\xfb\xee\xf5\x79\xaf\x77\xe4\xfc\xfd\xa5\x5f\x50\x4a\x9a\x9d\x0a\xe5\x5d\x91\x19\x7a\x67\xa0\xdd\xef\xd6\x28\xd9\x69\x24\xe9\x00\xcc\x29\xbc\xcf\x51\x58\x84\xaa\xcc\x84\xdb\x6b\x56\xf1\x97\x67\x9a\x57\xd9\x3e\x9d\xc2\x82\x80\x35\xce\xf6\x31\x0c\xee\x4e\x90\x53\xbf\x82\x9e\x1f\xb0\x23\x24\x9a\xb0\x6a\x0a\x97\xce\x47\x5f\xda\x2d\xf9\x2e\xde\x6d\xc1\xa8\x0f\xde\xc4\x4b\x47\x2b\x0c\x55\xe0\x82\xa0\xe0\x97\x12\xd3\x31\x27\x29\xd0\x1a\xb7\x38\xda\x07\x32\x8c\x09\x61\xfd\x4a\xea\x99\xf0\xc6\x48\x10\x58\x5d\xb9\xb6\xb1\x98\xc2\xaf\x8d\x11\x8e\xa6\x82\x96\x4d\x6a\x73\x22\x6d\xe3\x2c\x0c\x5c\x6b\x81\x9d\x28\xa6\x84\xa2\x15\x87\x49\x26\xcd\x28\x23\x77\x90\x2d\xe2\xa3\x96\x7b\xa9\xa5\xf2\x2e\x95\x0f\xd1\x1c\xb6\x9a\x9c\x9b\xe3\x3c\xa1\x10\x30\x72\xc5\x4d\xc6\x7b\x16\xae\x9f\x8d\x54\x50\xc0\x2e\x56\x98\x64\x3a\xbd\xc7\xae\xa7\x00\x2f\x85\x62\xa8\x62\x85\xf0\x8a\x27\x82\x2c\xd8\x01\x1f\x70\x2c\x65\x8e\x89\xc8\x0d\x8a\x6c\x93\xe0\x17\x69\x3b\x5b\x2d\x5e\xd3\x09\x09\x33\xc1\xcf\x1c\x80\x9d\xc5\x56\xc1\x26\x2a\x91\x68\xbd\x42\x59\xf2\x9c\x72\x31\xc3\xae\xe2\xc8\x95\x42\x20\x3d\xcc\x71\x3f\xec\x6f\xbe\xc6\x2d\x71\x6b\x0d\x35\x32\x2e\x9a\x78\x59\xd3\xec\xf8\xcd\x1b\xd6\xa5\xb4\x70\x2f\x55\x46\x07\x24\xe8\x62\xa8\x91\x3e\xba\x78\xf6\x2c\x05\xd9\x97\x16\x21\x4c\xfa\x01\x72\xc2\x83\x80\x47\x76\x85\x95\x85\xeb\xfb\xe4\xbb\x45\xa2\x20\x86\x35\xc8\x3c\x58\x2c\x85\xa1\x2f\x0c\xdd\xf7\x9b\x75\xf0\x36\x4e\xf9\xc3\x21\x4b\x88\xe5\x63\xf5\x5c\x69\x2f\x29\x8b\xee\x38\x64\xc7\xda\x8a\x80\xac\x75\xde\x07\xf0\x45\xeb\x9b\x2c\xc5\x8a\x2c\x15\xeb\x92\x4f\xa4\xdb\x40\x4c\xd7\x63\x95\xf6\x35\x14\xc1\x04\x7b\x15\x55\x3b\xf6\x48\x90\xcd\x57\xd1\x18\xf9\x40\x9f\x5d\x31\xda\xbf\x10\xdd\x4e\xe3\xeb\x91\xd0\xe2\xeb\xe1\x59\xbe\xa8\x48\x99\xf8\x89\x03\x2f\x60\x8f\x5d\x2a\x10\x51\xa7\x23\x84\x81\xc3\xaf\xd5\x3c\x97\x29\x59\x99\x24\x04\x6e\xc4\xa1\xd1\xd6\xc6\x4c\x48\xd7\x71\x6d\x9d\x9f\x18\xf2\x11\xd3\xe1\x73\xe0\x39\xf2\xca\xce\x6f\x51\xe5\x4e\x96\xb9\x8f\x1a\xfd\xe1\xa1\x4f\xc1\x23\xf1\xc8\xd9\x7c\xc5\xbb\x77\x2f\x0d\xe2\xda\x45\xe5\x09\x48\xe7\x4f\x54\xa9\xad\x95\x33\x7f\x0a\x58\x20\x91\x11\x8f\xb5\x11\xcf\x8c\xfc\x92\x5a\xd3\x99\x88\x47\x87\x30\x70\xc2\x68\x1e\x05\x3d\x47\x08\xd3\x54\x39\x3e\x41\x92\xb4\x2c\x44\x17\x39\x1e\x92\x61\x43\x7f\xb4\xf7\x7b\x8e\x84\x7f\x83\x52\x8b\x60\x77\x4b\xa6\xfe\xe9\xd1\xb7\x10\x32\x33\x78\x48\xc2\xc2\x5a\x9d\x4a\x06\x7d\x98\xe2\xd3\x48\xdc\xbe\xf0\x99\xf9\x27\x49\x5e\x98\xa6\xc5\x83\x8b\xd9\x9d\xad\xed\xa1\x40\x06\xb9\x54\x08\xc2\x2c\x2a\x0e\x8a\x49\x84\x66\xb1\xdd\xb6\xfd\x45\x86\x33\x81\xd2\x93\x18\x5f\x7d\x90\x3c\x78\xe4\x08\x8a\xee\x71\xf3\xcd\xa8\xba\xc7\xcd\x29\xc3\x82\x52\x48\xf3\x88\xbc\xdd\x61\xb6\xef\xf8\x45\x14\x25\x39\xbb\x35\xb8\x7b\xdc\x8c\xe2\x21\x38\x58\xc3\x9d\x48\x5d\x0c\xfc\x10\x51\xfe\xc8\x36\x38\xc0\xf3\x6d\x4a\xfe\xe2\xaa\x53\x21\x13\x9f\x90\x6c\x85\x97\x51\x39\xea\xf7\x36\xe0\x57\x73\x90\xd1\x80\x18\xca\x3d\xe0\xbf\x2a\x69\x38\xb7\x55\x56\xce\x8e\xd2\x92\xeb\xb0\xc6\x87\x32\xfe\xb4\xec\x68\x85\x05\x5c\xa1\x02\x31\x77\x68\x40\x94\x65\xce\xf5\x13\x6e\x6c\x28\xb5\x87\x13\x6a\xa9\xa8\x56\x53\x58\x09\x23\xc5\x2c\xc7\x46\xe1\x2d\xba\x1a\xe2\xee\x94\x78\x80\x7d\x14\xd5\xb4\x71\x1d\x7a\x6d\xe3\x5f\x36\x99\xf0\xfe\x88\x37\x7b\xae\xf3\x5c\xaf\x3d\x35\x44\x3b\xcb\xd3\x7f\xdc\x6e\x87\xa3\xaf\x85\x6f\x50\x49\x28\xe8\xe1\x8a\xf1\x50\x60\xd1\x6a\x6a\xa1\x35\x4d\x82\x4b\x94\x92\x7e\x88\x39\xa6\x03\xee\x3a\x4f\xad\x3b\xd6\xe2\x03\x82\x7d\x2f\x29\x84\x1c\x06\x09\xe9\x2a\x20\xa8\x33\xc5\x7b\x30\x46\xe6\xa1\x4a\x61\x2c\x9a\xde\x87\xaf\x4d\x86\xc4\xa0\x33\x12\xd9\xe0\x85\xc4\x48\xad\xa1\xfd\xd8\xd6\x38\x8b\x8e\x4b\x50\x42\xdf\x87\x1d\xbb\x85\xfa\xe4\xfa\x41\x89\x60\x6b\x2d\xa6\x95\xf1\xce\x61\x13\x1e\xfe\x17\x1c\xf4\x73\xce\xc9\x43\x17\xf5\x40\x48\x71\xb6\x4f\x9e\x37\x0d\x34\xc8\x9f\xba\x53\x77\xbf\x9e\x5f\xbf\xbb\x7c\xf7\xd3\xf8\x72\x42\x5c\x70\x5c\x41\x61\x2d\x8c\xaa\x7b\x16\x48\xd2\x5d\x99\x85\x6b\x1a\x23\xb5\xfe\x18\x9b\x15\xee\xc2\xf1\xe3\x5d\x3c\xf3\x19\x1e\xda\x95\xbb\xbe\x28\x34\xe0\xe3\x16\xae\xa3\x73\x3a\xed\xd6\xf3\x56\x0e\x17\x32\x74\xc3\xf1\x2f\x63\xa6\x8b\x20\xc3\xd2\x60\x4a\xd7\x63\x62\xb0\xcc\x45\xda\x19\x20\xde\x2e\x3d\x1e\x9d\x67\x61\x2b\xb9\x75\xcf\xfb\xff\xbb\x4d\x1a\xfc\x9e\xd6\x6a\xad\x60\xc6\x41\x44\xc0\x50\x5f\x0f\x95\xf5\x2a\xc4\x65\x36\x5c\xef\x80\xb3\x0e\xc5\x48\xda\x83\x24\x9e\x92\x68\xb7\x4b\x5d\xe5\x19\x91\x47\xee\x3e\x7c\xb0\xbe\xe2\xec\xcb\x61\x07\xd4\xb2\x3f\x2f\x55\x53\xc4\xf3\x07\xb6\x92\xe8\xf2\x18\xc8\x42\x3e\x2e\x00\x90\xbd\xf1\xa6\xe9\x08\x94\x1c\xe1\x8b\x55\xef\xe6\x0d\x21\xe5\xf5\x71\x43\x63\x69\x33\x3e\x30\x6c\xbf\x2c\x1c\x26\x2c\x97\x85\x74\x89\x5c\x28\x6d\x3a\x49\x8a\x2a\x1d\x22\x0e\x5e\xe2\x23\x58\xfa\xb4\x9f\xe4\x27\x8b\xed\xc1\x8d\xc5\x9e\x2e\x85\x5a\x20\x19\xae\xfe\xe0\xec\x4d\x8d\xb8\x2e\x2e\xd8\xc8\x7e\xbe\xf1\xc5\xed\x1a\xd4\x14\x2e\x89\x0a\xa9\x16\x63\x54\x82\x09\xb1\x49\xae\x17\x89\x95\xbf\x0f\xd0\xc1\x93\xcf\x20\xd7\x8b\x1b\xf9\x3b\xa9\x2e\xe7\xfd\x74\xe5\xac\xcc\x62\x38\xee\xf5\xd3\x10\x35\xb4\x23\x1f\x9f\x4f\xe0\xcf\xcf\xef\xe0\xed\xdf\xea\xab\x7c\x85\x86\xbc\x13\x2e\xd1\x96\xfe\x8d\xad\x69\x2e\x28\x7e\x5a\xee\x7d\xad\xb1\xc4\x17\x58\x68\xb3\x19\x4f\xbf\x9f\x3f\x9e\x85\x3f\xff\xe5\xaf\x13\xf8\xcb\xf3\xff\xf8\xeb\x1f\xcb\x06\xdd\x95\xba\xea\x7c\xdf\xbb\xc3\x42\x98\x3b\x92\xfe\xe7\xcf\x27\xf0\x9f\xcf\xe9\xdf\x1d\x14\x32\xcf\xa5\xc5\x54\xab\x56\x2c\xf7\xed\x78\xe1\x42\x74\x52\x1a\x5d\xa2\x71\xb2\x33\x80\x8b\x96\xba\x65\x57\x7d\xfb\x82\x77\x1d\x42\x03\x83\xaf\x6a\x37\xc0\x62\xa3\xc3\x61\xdb\x1d\x4d\x77\xa6\xf9\x44\x90\x05\x97\xae\x16\x8d\x9e\xc3\xad\x11\x2b\x69\x61\x56\xc9\x3c\xeb\xaf\x82\x33\x2b\xde\x6c\xb1\x18\x47\x99\xac\xfa\x78\xee\x18\x2e\xb5\x77\xf1\x04\xb3\xce\xb5\x7d\x8a\x34\xfd\xaf\xf1\x79\xf2\xc3\xc3\xb4\x90\x2a\x54\x7a\xe9\x8b\x48\x07\xea\x46\x4c\x6a\xf4\xd3\xbc\x15\xe8\x32\x67\xb1\x16\x17\x66\x91\xb3\xb4\x57\x96\x3b\x90\xba\xef\xac\xbc\x3d\xa9\xdc\xc6\xd4\x86\x62\x3e\xa7\x87\x7a\xf3\x9b\x8f\xea\xb4\x3b\x36\x70\x2f\xf1\xd9\x44\x0a\x39\x3f\x9a\x54\xda\x2d\x43\x5e\x62\x98\xa4\x98\x6f\x18\x2c\x55\xdf\x3e\xca\x24\xb6\x1d\x9b\xf0\xb2\x04\x33\x50\x7a\x5c\xbf\x05\x63\x6f\xb5\x3a\xb1\x50\xc6\x10\x71\xb0\x11\x28\xdc\x8c\xfb\x11\xcf\x3a\xd4\x03\x7d\x55\xfd\x50\x3e\x74\x84\x84\x5a\xef\xc3\x12\xbd\x42\x63\x64\x96\x61\x57\x56\x8f\x28\x6c\x3f\x17\x6b\x5a\xd5\x9a\xa5\xd1\xa7\x69\x77\x22\x8d\xdd\xa8\x44\xda\xa4\xac\x66\xb9\xec\x7a\x92\xef\x77\x85\xe7\xc6\xaa\x96\x7f\x11\x47\x71\x14\x2f\x7c\x94\x31\x99\x90\xb9\x60\xdb\x32\x43\x58\x49\x9f\xbc\xa1\x73\x98\x0a\xb6\x34\xfe\x0d\x02\x66\x30\xdb\x80\x50\x1b\xad\x7a\x5e\x98\x31\xad\x31\x09\x8b\xb3\xf0\xee\x77\xc0\xdd\x78\x9c\x83\xe5\xf2\x12\x47\x31\x2a\xa3\xff\x4f\xc2\x13\xdd\xfd\xfa\x12\x1d\x04\xfe\x1b\x2b\x38\x9b\x78\x27\x24\x7c\x0b\x0b\x7a\x02\x2f\x4f\x69\xab\x8e\xd8\x44\x61\x47\x56\x97\x48\xc3\xda\x25\xb9\x51\xc5\xc2\xf0\xb7\x61\xea\x45\x53\x78\xa9\xd5\x8a\xcc\x7d\x08\x5d\x1a\x14\x4e\xef\x80\x1f\x56\xd9\x7d\xae\x06\xea\xa2\x7d\x99\xe8\x86\xb7\x38\x70\x24\x77\x75\x79\x72\x9f\xbf\x36\xa2\x9a\xc3\x51\xc5\xcc\x9a\xc7\x98\x75\x32\x68\x4b\xad\x2c\xf6\xb5\x97\xed\x11\xcd\xf9\xc6\xfd\xbc\x42\x18\x8f\x19\x84\x56\x46\x22\xe6\x86\xea\x9c\xe6\xd2\xb9\xd2\xff\x1d\x26\x8f\x9a\xef\xb5\x29\xbc\xa4\x1b\x86\xfb\x51\xda\xbf\xfb\x4b\x9d\xaf\x9c\xf0\x73\x60\x9a\xa1\xd0\x7d\xd2\x50\x36\xa4\xb1\x71\x5f\x51\xad\xa4\xd1\x8a\x6d\x67\x4c\x09\x75\x55\xfa\x43\x54\x7a\xd1\x2c\x81\x5f\xc2\x92\x31\x11\xfe\xab\x8b\xbf\x7d\xf8\x69\x74\x78\xcf\xb3\x8f\x8b\xed\xb3\xd9\x22\xb1\x28\x4c\xba\x24\xce\xa2\xc1\xad\x0b\x98\x9d\x6a\x1b\x56\xd4\x06\x77\xb7\xe4\x19\xb7\x2f\xca\xd7\x3b\x26\x03\xb1\x01\x91\xb2\x7f\x2b\x7d\xeb\x1b\xe9\x89\xb7\x11\x91\x56\x5f\xd7\xbe\x85\xb6\xe7\xcf\xe2\xbc\x3a\xd0\xc7\x15\x24\x72\x06\xaf\x99\x82\xe6\xaf\xb0\x70\x3a\x9f\x80\x1d\x4b\x40\xff\x3b\xe2\xe3\x69\x68\x77\xe9\xc6\xae\xf2\xe3\xde\x86\xee\xbd\xb5\xeb\x7b\xe2\x48\x93\x1f\x3d\xb0\x3b\xfe\x15\x67\x88\x1b\xea\xb6\xe0\x6f\x4e\xc4\x84\x5d\xfa\x67\x0f\x0f\xd3\xac\x2a\x8a\x0d\xcf\xda\x6e\x9f\x91\xf9\x69\xc7\x3d\x5a\xf5\xeb\x4f\x78\xc7\x9c\xfc\x2e\xcb\x04\xbf\x70\x6b\x89\x2f\xb9\xf7\xbc\xf7\xb9\xe0\x79\x74\xc6\xde\x0b\xb7\x3c\x6b\xef\xe0\x58\x54\x22\xcb\xe2\x03\xa3\x3e\x4c\xe7\x3c\x6d\xe7\xe0\x3a\x0d\xff\x2b\x4b\x78\x3d\x74\x30\xda\xd8\x42\xcf\x4c\x6c\x21\xeb\x41\xf8\x3a\x34\x01\xde\x78\x27\xff\xc9\xfc\x1d\xc0\x98\x64\x68\x9d\x54\x8c\xea\x6b\x48\x60\xef\xe7\x55\x03\xab\x35\xa3\x85\x61\x24\xad\xf1\xb2\x8c\xf4\xa2\xea\xce\xa1\xc6\x44\x0a\x5c\x86\x16\xa4\x0b\x9a\x4c\x0a\x27\x5d\x2b\x41\xcf\x94\x04\x78\x5c\x32\x8c\xd3\x19\x36\x3b\x06\x28\x39\x18\xe1\x3b\xf3\xa3\xe7\xf3\x0e\xc8\x20\xfb\xcf\x93\x36\x7b\xfd\x47\x3d\xf2\x11\x5b\xaf\x59\xf8\x3d\x95\xa6\x97\xb1\x45\x9b\x24\x1c\xf5\xe8\xe8\x1d\xce\xa5\x75\x89\x9e\x33\x22\x9b\x70\x7b\x26\xdf\x51\xc2\x39\x34\x5d\x07\xdb\x9b\x36\x6e\x7a\xae\x8b\x2c\xfe\x0f\x58\xf9\xe2\x76\x80\x12\xf7\x9d\xbb\x59\xde\x7b\x5f\x84\xc1\x46\x39\x7c\x77\xf7\xdd\xff\x05\x00\x00\xff\xff\x69\x8d\x5e\x0c\x8f\x53\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 21391, mode: os.FileMode(420), modTime: time.Unix(1579551913, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

