// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5b\x6f\x6f\xdc\x36\xd2\x7f\x9f\x4f\x31\x08\x1e\x20\x2d\xb0\x51\xd2\x3e\x38\xe0\x10\xc0\x38\xe4\x2e\x69\xeb\x6b\x13\x07\x76\x72\x41\x91\x1a\x0a\x57\x9c\xdd\x65\x2d\x91\x02\x49\x79\xb3\x35\xfc\xdd\x0f\xc3\x3f\x92\x76\x6d\x4a\xf4\xa6\xc5\xf5\x4d\x37\xe1\x70\xe6\x37\x43\xf2\xc7\x99\xa1\xf2\xe9\x11\xc0\xcd\x23\x00\x80\xc7\x82\x3f\x7e\x01\x8f\x1b\xb3\x2e\x5b\x8d\x2b\xf1\xa5\x44\xad\x95\x7e\xbc\xf0\xa3\x56\x33\x69\x6a\x66\x85\x92\x24\xf6\xda\x8d\x3d\x02\xb8\x5d\x4c\x68\x10\x72\xa5\x12\x0a\x4e\x69\x68\x6e\xbe\xe9\xaa\x0a\x8d\x49\xa8\xb8\x08\xa3\x73\x5a\xb6\x4c\x4b\x21\xd7\x09\x2d\x1f\xc3\x68\x52\x4b\xd5\xf0\x92\xa3\xa9\xca\x5a\xc9\x75\xa9\xb1\x55\xda\x26\x74\x9d\xbb\x41\x03\x4a\x02\xc7\xb6\x56\x3b\xe4\x80\xd2\x0a\x2b\xd0\xc0\x37\xa2\xc0\x62\x01\xef\x58\x75\xc5\xd6\x68\x16\xf0\xb2\xa2\x79\x66\x01\xef\xb5\x58\xaf\x51\x9b\x05\x9c\x77\x35\x8d\xa0\xad\x8a\x6f\x81\x19\xd8\x62\x5d\xd3\xff\x35\x56\x28\xad\x9b\x71\xed\xac\x19\x10\x12\xec\x06\xc1\xb4\x58\x89\x95\x40\x0e\x92\x35\x68\x5a\x56\x61\x91\xed\x8b\x52\x29\x4f\x5e\x82\x55\xaa\x06\xab\x82\x23\x0b\xe8\xa4\xff\x05\x4c\x72\x30\x3b\x59\x81\x6a\x51\x6e\x37\xc2\x5c\x41\x1b\x7c\x82\xce\x08\xb9\x06\x06\x0d\x93\x62\x85\xc6\x3a\x61\xd5\x92\x56\x56\x07\x55\x0d\x79\xb2\x12\x75\x2f\xfe\xeb\xcb\x37\xbf\xe4\x60\x36\x1b\xa5\xed\xf4\x02\xbc\xd3\xea\x5a\x70\x34\xc0\xc0\x74\x4d\xc3\xf4\x0e\xbc\x3c\xa8\x15\x6c\x37\xcc\x3e\x31\xb0\x44\x1c\x2d\xcf\xd7\x85\x31\x40\x9a\x8d\xa3\x41\x4b\xb1\xdc\x60\xdd\x06\xd3\xb0\x53\x9d\xce\x0a\x21\x85\x2a\x1f\xcb\x35\x6a\x43\xb6\x53\xf1\x11\xd2\x3a\x87\x83\x1c\xc8\xae\x59\xa2\x76\xe1\x31\x57\x1e\xda\xb4\xad\x55\xcd\xd6\x25\x6b\x45\xb9\x51\x26\xe5\xb5\x77\xe9\xe5\xbb\x53\xf8\xfc\xd3\xd9\xc5\xfb\xcf\x99\x1a\xa7\xb1\x8f\x94\xfe\xe7\xf5\xf9\xc5\xe9\xd9\xdb\x2c\xbd\x9d\xdd\x94\x57\xb8\x4b\x28\xa5\x61\xa5\xc5\x1f\xee\x2f\xe0\xf3\xcf\xaf\x7f\xcd\x51\x5a\xa1\xb6\x25\xad\x4b\x42\x6b\xcb\xec\x86\x42\x4a\x81\x2e\x48\xd8\x2d\x62\x8e\x62\x25\x57\x22\xc5\x54\x7e\xd0\xa9\x82\x6f\x38\xae\x58\x57\x5b\x10\x06\xfe\xef\xa7\xb3\x37\xaf\x9f\x15\x5b\x73\xd5\x6a\xd5\x9a\x6f\x73\xa2\x52\xd7\x6a\x5b\x06\x1d\x29\x7e\x75\x42\xd0\x0b\xcd\x6b\x1d\xce\xf7\x54\x5c\x7a\x4e\xe9\x89\x20\x43\xb5\x90\x16\x35\x23\xfa\x4b\xc5\xdc\xa3\x1d\xc9\x41\xab\x55\xd3\x66\x01\xbf\xc2\x5d\xf6\x72\x5e\xe1\x2e\x17\xb4\x8f\x72\xc3\x24\x5b\x23\x9f\x84\xdd\x6a\xf5\x3b\x56\x76\xb8\x2c\xac\x82\x25\x42\xc3\xf4\x15\x72\x88\x1a\xe6\x2d\x06\x3d\x25\x91\x58\xca\x99\x60\xca\x89\xcc\x6b\x8c\x34\x34\xb3\xa2\x7b\x6c\x95\xa1\xb6\x67\xd9\x84\xde\x61\x3c\xdb\xe9\x19\x84\x06\xf5\x35\xea\x1a\x8d\x89\xd1\xce\x50\x6d\xac\x16\x49\xcd\x7e\xe9\x3a\x83\x9a\x0e\x89\x90\xc8\x41\x77\xd2\x8a\xa6\x67\xd7\x0c\x0b\x56\xad\xd7\x35\x96\x74\x33\x24\xcc\xbc\x77\x12\xf0\x13\xdd\x1d\x0d\x1a\xc3\xd6\xf9\x7b\xef\x1a\xf5\x52\x99\x54\x90\xc3\x28\xa8\xce\xb6\xdd\x54\x38\x1c\xf1\x94\x8d\x30\x74\x37\x39\x4a\x4d\x33\xea\xfb\x0d\x02\x49\xd0\x56\xae\x3c\xad\xd2\x91\x11\x06\xa4\xb2\xe0\x55\x75\x1a\x79\xf1\xdb\x54\x78\x0e\x2c\xb6\x62\xe2\xb6\x21\x8b\x74\x2d\x90\xc8\xd7\xd9\x99\xdb\x95\x64\xa9\x97\x39\xce\x54\x70\x65\x2a\x35\x3e\xf4\xe7\xd3\xcd\x4d\x41\xbf\x6f\x6f\x2f\x17\xb0\xd2\xaa\x81\x9b\x9b\xc2\xa8\x4e\x57\x78\x7b\x9b\x65\xd3\x2f\xd8\x9c\x4d\x12\x8b\x6b\x65\xd0\x1e\x67\xab\x0f\xcf\x9c\xb5\xbd\x38\x92\x8b\xfd\x5f\x1c\xef\x67\x2b\xd6\xdb\x92\xb9\xaa\xa0\xb4\xea\x0a\xe5\xac\xcb\x34\x03\xfc\x0c\x70\x33\x8e\x73\xbe\x93\x0d\xd3\x66\xc3\xea\xb2\x56\x15\xab\x13\x16\x3f\x44\x29\x38\x6b\x51\x7e\x74\xf9\x4c\x60\x0c\xe3\xed\xb9\xd9\x70\xcd\xea\x0e\x4d\xa6\x41\x89\x76\xab\xf4\xd5\xd1\x26\xdd\x8d\x29\xd1\x02\xb3\xe4\x6e\xa7\xeb\x19\x5f\x87\xcb\xbb\xac\x98\xac\xb0\xae\x93\x97\xdb\xd9\xcf\x05\xfc\xcb\xcb\x50\x52\x3b\xcc\xcc\x35\xb0\x62\x22\xad\xfd\xd5\x90\x45\x70\xc1\xc3\x59\x6c\xda\x1a\x2d\x82\xe9\x68\x49\x57\x5d\x5d\xef\x0a\x38\xef\x24\x7c\xee\xd3\xdb\xbe\x92\xf9\x4c\xd7\x82\xc6\x46\x51\xae\xc0\xb4\x15\xac\xae\x77\x43\x65\xc0\x8c\x41\x3b\xbd\x0a\x23\xa4\xbe\xcc\x28\x8d\x65\xb6\x4b\x25\x54\x4f\x9f\x3e\x7d\x7a\x72\x72\x72\x32\x5a\x8b\x91\x0f\x17\x6e\x2a\x90\x00\x09\x66\x59\x75\x05\x32\xf2\x9c\x10\xc5\xd0\x70\x08\x55\xb5\x0f\xce\xf4\x26\x3b\x7e\xad\xc7\x73\xf3\x8d\x4c\xae\xf7\x87\x91\xe4\xf4\x8a\x67\xdb\x9b\x8b\xdf\x9e\xc9\x23\x22\x18\xd3\xa2\xd2\x55\x75\xf3\x09\xf2\x07\x57\xfc\x11\x1b\x52\xda\x72\x7b\x7b\x09\x2b\xa5\x73\xcf\xcd\x81\xb1\xb1\xa3\x0f\x32\x97\xbd\x74\x2e\x5b\xdd\x95\xf1\xc4\xcc\xb4\x6b\x6e\x6e\x28\x77\xbe\xbd\xed\xc9\x9e\xec\x6d\x58\x28\xc8\xc7\x21\xed\xcf\x60\xbe\xf5\x74\x7f\xe7\x55\x1c\x87\x7b\x01\x14\xc5\x44\x6d\x1d\x4c\xc4\x80\xfc\x99\x2e\x0e\x3a\x73\x9c\x8c\xd2\x69\x37\x3f\x0c\x12\x47\x38\xca\xb1\x45\xc9\x51\x56\x0f\x89\xe7\x30\x69\x6c\xe8\x61\x76\x86\x53\x98\x0c\xea\xab\x7b\xcd\x7c\xcd\xce\xb9\x1f\x05\x71\x4f\xa7\x53\xa9\xdf\x88\x49\xd5\x2a\xe1\xfa\xff\xf0\x1a\x8a\xfe\x3c\x6c\xa3\x7c\xdd\x0a\xde\x65\xd2\x3f\x67\x0d\x33\x8f\x46\x0a\xc9\xf4\x3a\xee\x31\xfa\x91\x2b\x39\x43\xc2\x54\xab\x1f\x7b\xad\x39\x44\xfe\x92\xe9\x7b\x01\x53\x58\x80\x77\x9a\x56\x32\x98\x1d\x5f\x15\x7f\xdd\x7e\x8b\x3e\xae\x54\x27\x79\x19\xf0\x06\xaa\x4a\x6e\x80\x1a\x6d\x92\x9b\xb6\x1b\x51\x6d\x60\xeb\x1a\xdd\x84\x8b\xfb\xd4\xd4\x6e\x10\xaa\x4e\x6b\x0a\x4c\x74\x30\xb6\x2f\xdc\xa5\xe5\x7f\x93\x06\x66\x9c\x2f\x14\xbf\xec\xeb\xcb\xf7\x87\x66\x8a\xcb\xdf\xe4\xbb\x1a\x99\x71\xdd\xa4\x6b\xc1\xd1\x81\x22\x79\xc2\xee\xae\xcb\x3e\x99\x7b\x01\xf3\xb6\x26\x4b\xe7\x3b\xb6\x98\x3c\x2c\xa5\x5d\x8d\x92\x61\x28\x74\x72\x13\x8b\xa1\x60\xa7\x3a\xd0\xe8\x56\x7e\xcb\xa4\x1d\x9a\x72\x60\x37\xc2\xfc\x03\xbe\xd9\x3d\x7b\xfb\x6d\x86\x9d\xb9\x8a\xf9\xae\x4b\xa3\xc2\xef\x53\x6c\x62\xba\x82\x87\x2a\xaf\x75\x87\xc6\x5e\x66\xd8\x8d\x8b\xfc\x20\x0f\xfb\x27\x8c\x4c\x1f\x03\xbc\x32\xf4\xe6\x53\x3d\x75\x3f\xea\xfc\x82\x51\x5b\x56\xa3\x6b\x39\xf1\x05\xb0\x7a\x5c\x7e\xf5\xe7\x9a\xe0\xe8\x7e\x46\x30\x02\x4c\x63\x7f\x18\x9f\x0d\x54\x08\x5c\x68\xac\x6c\xa0\x47\xed\x9f\x0f\xe6\xde\x2a\x5e\x9f\x9f\x9f\x9d\x5f\x24\x70\x9f\x1c\xfe\x07\x5e\x1c\xee\x0c\x9c\x9c\x4c\x24\x28\x5a\xef\x33\xf1\x95\x54\x5b\x59\xda\x5d\x3b\x71\x93\x46\xc6\x25\x29\x0a\x55\x98\x55\xc0\xf0\x08\x01\x4a\xd6\x3b\x30\x5d\xeb\x5f\xd4\x9e\xb9\xee\x7f\x61\x76\xc6\x62\x03\x4b\x21\xb9\x90\x6b\x03\x4a\xc3\x5a\xd8\x4d\xb7\x2c\x2a\xd5\xf4\x6f\x28\xd3\x19\x95\xd6\x31\xab\xaa\x34\x32\x9b\x82\xe9\x5e\x38\xc1\x89\xec\xf1\xd6\x56\xd8\x0d\xb8\xa7\xd1\xd8\x8d\x7b\x41\x83\xa8\xf5\xed\xad\x7b\xee\xf2\x63\x95\xe2\x7e\x80\x7e\xcc\x54\xd4\x23\x48\x9e\x4c\x27\x21\xf1\x3b\x54\xfa\x17\x41\x5a\x21\xf2\x52\xc8\x6b\x75\x95\x02\xf4\x83\xbb\xd7\xe8\x68\x79\x31\x47\x8e\x34\x0d\xb6\x1b\xf7\xc8\x16\x90\x5a\xff\xc0\x19\x86\xfe\x1a\xb4\x57\xb8\xeb\xfb\x78\x0d\x93\x9c\x59\xa5\xa7\x7a\x94\xbd\x8c\x6b\x79\x7d\x8a\xc1\xbc\xa4\xfd\x18\xf4\xcc\xda\xec\x2b\x2e\xa9\xac\xbf\x0d\x13\x06\xdf\x8c\xdb\xe3\xee\x32\x77\xd2\xc0\xe8\xdc\xdb\xcd\xb8\x04\x9b\x35\x4a\x87\x9e\x3c\x6d\x98\xad\x36\x13\x0e\xf6\xdb\x83\x26\x70\x67\x82\xc7\x0b\x57\xc8\xc3\x37\x18\x3f\x1e\xcb\x40\xae\xd0\x37\x37\x9d\x11\xb7\xac\x8e\xde\x48\xa8\x19\x29\xd9\x6b\xfb\xfb\xd1\xe8\xc6\xb4\x13\xa1\x07\x45\xdb\x8b\xd5\x22\x15\xb6\x53\x3f\x4a\xc7\x3c\x2c\x49\xdf\x61\x27\x5b\xe1\x37\x61\x19\xde\x6f\xf7\x50\x29\xed\xb0\x33\xf7\xd2\xee\xe6\xf8\x9f\x39\x71\x8e\x10\x67\x42\x7d\xfe\x10\x40\x07\x71\x75\x47\xc1\x23\x7a\x62\xc0\x77\x1a\x7d\x28\xf1\x8b\x45\x69\x22\x68\xfc\x62\x63\x71\xfe\x35\xae\x98\x72\x8d\xa9\x3c\x67\x38\xca\x6b\xf4\x2f\xc4\x81\x7b\x87\x57\x8d\xd0\x30\x1c\x6e\x32\xba\xdf\x44\x35\x3a\xbe\xd9\x31\xf5\xd0\x4b\xef\xb1\x3b\x3d\xbd\xb5\x04\xbe\x3d\x87\x5d\xe1\x40\x61\x1c\xa2\xcc\xe4\xae\xdf\x1b\x44\x22\xa3\x65\x9f\x8d\x6b\x68\xe4\xf7\x10\x66\xdd\xe8\x74\xfd\xf0\x9d\xeb\x9b\xab\x74\xe5\xdd\xde\xc2\x87\xf3\x5f\x1c\x02\xd7\x6e\x75\x47\x89\xfe\x44\x10\xbd\xc0\xa5\x7f\xf6\xcf\x01\xd2\xb0\x7a\xa5\x74\x93\x8c\xdc\x9b\x38\x3e\x85\xa0\x80\xf7\x7a\x07\x6c\xcd\x84\x2c\x8a\x59\xb3\xbf\x1b\x25\x7b\xb2\xad\x1a\x3e\xf1\xc0\xfe\xef\x8b\xb3\xb7\x20\x64\xdb\x59\xe0\xcc\x32\x78\x13\xa2\xf1\xa4\x6a\xf8\x13\xa2\xde\x69\x4b\xac\x15\xbd\xa1\x2d\x2e\xc3\xc6\x49\x7d\x6c\x71\xcf\xd9\x88\x8b\xcb\x60\x8b\xcb\xb0\x23\x16\xee\x79\xc5\x89\xb5\x82\x64\x2a\x26\x7d\xbe\xb1\x44\x7f\xe3\x23\x0f\xdf\x61\x0c\x93\x0a\x08\x99\x6c\xd7\x72\x66\xf1\x80\xfa\xac\x82\x4a\xc9\x6b\xd4\xf6\xc0\xbc\x55\x63\x1d\x73\x81\x1d\xbb\x7b\x94\xab\x71\xb3\xb9\x93\xba\x07\x31\xcb\xe9\x25\x33\xc8\x41\xc9\xf1\xf1\xb9\xab\x6a\x36\x14\x42\x56\x75\xc7\xf1\x00\x1e\x33\x7b\xab\x30\x1f\x0c\x4f\x12\xd3\x07\x2d\x15\x88\x30\xab\x80\x53\xeb\xdb\x0c\xca\x6e\x5c\x4e\xe1\xd8\x61\xd5\xc9\xc0\x0d\x91\x40\x16\x3e\x16\x4a\x62\x78\xe9\x6f\x48\x0b\x7e\x69\xb1\xca\x61\x84\x80\x35\xae\x5d\xe4\x39\x22\xf8\x92\xac\x7e\x25\x7a\x07\x7c\x20\x3b\x52\xab\x3a\x3b\x26\xbd\x02\x3e\x0e\x97\x49\xa4\x3c\x9a\xb6\xe8\x69\x91\xb6\x47\x4c\x7a\x66\xae\xe7\xe0\x4e\x0c\x53\x49\x65\xb9\xc5\x92\x0b\x9d\x45\xd6\xf7\xba\x45\x7e\xf4\x71\x6f\x95\x90\x3e\x35\xf4\xbd\x08\x8b\xa1\xc0\xa1\x84\x6c\xa0\xa5\x05\x98\xae\x8a\x5e\x19\x57\x1b\xed\x33\xf5\xfd\x6e\x7c\x7c\x79\xfe\xf6\xf4\xed\x8f\xf9\x95\x4f\x9c\xf0\xb0\xda\x67\xcb\xb4\x2c\x2b\xd5\x50\x54\x4b\x8d\x36\x99\x6f\x9e\xd3\x58\x6c\xb5\x57\x0d\x77\xa7\x61\x65\x51\xfb\x5c\xf7\x85\xbf\x8c\xe8\x06\xbd\x9c\xda\x68\xc1\x9e\x7b\xeb\x7c\xf0\xf5\x33\xfe\x7a\x68\xdc\xf1\xe7\x68\xe7\xb7\xb8\xb3\x4c\x19\x36\xc7\x56\x63\x45\x5c\x51\x6a\x6c\x6b\x56\x25\xf7\x00\xa5\xa0\x64\x47\xd5\x3c\x24\xd6\xee\x69\xd9\x53\xcb\xde\x5d\xe7\x31\x6d\x45\x5d\x83\x51\x4a\x12\x1f\x0d\x66\x16\xd0\x06\xae\x31\xbe\xbc\x70\x7d\x23\xdc\xee\xe9\x34\x16\x59\xa6\x03\x21\x1c\xc7\x14\x06\x66\xa3\xba\x9a\x13\x3c\x83\xb6\x00\xff\x78\xb2\xdf\xc2\x20\x69\xf7\xcb\xb7\x51\xb3\x10\x39\xf9\x99\xf5\x24\x5c\xde\x02\xe5\x80\x77\x0b\x16\x3a\x14\x9e\x31\x1e\x60\xd2\x9d\x64\x76\x3d\xb9\x82\x73\x46\xdd\xfc\xb8\xaa\xb1\x57\x17\xbf\x2d\x1c\x7f\x54\x38\x0f\xac\x16\x8d\xb0\xa5\x58\x4b\xa5\x93\x90\xe2\xbe\x0e\x34\xe7\xa6\x38\x54\xee\xd7\x61\x51\x42\x44\xea\xd5\xe5\x5a\xaf\x36\x4c\xae\x91\x2d\x93\x9f\x82\xfd\xd2\x5b\xec\xab\x20\x13\xfd\xae\x77\xbe\x4d\xdb\xeb\x28\xe0\x94\xcc\x53\x25\x99\xb1\x17\x1c\x02\x53\xd6\x6a\x5d\x1a\xf1\x47\x0a\x40\xad\xd6\x17\xe2\x0f\x77\x49\xf9\x09\x7b\x1e\x0f\x5b\x94\x49\xf7\xb2\x4f\x55\xf7\x12\xed\x16\x51\xc2\x73\x77\xf5\x7d\xf7\x3c\x1b\x4a\x83\x8d\xd2\xbb\x29\x34\x5e\xe2\x58\x40\xdf\x7d\xff\x77\x07\xe9\x6f\xdf\x7d\x9f\x8d\x89\x6e\x32\xd5\xa5\xaa\x98\x30\x7a\x14\x98\xe7\x3e\x3e\xff\xff\x9c\xfe\x9b\xc7\xe3\x1a\x52\x65\xab\x55\x8b\xda\x0a\x4c\xbd\x7c\x44\x1a\x1c\xf1\x95\xef\x73\x5b\x2d\xb0\xef\x74\xfb\xee\xd6\xa0\x2c\x76\xc4\xef\xe7\xc4\x48\x89\x5c\xb9\x0d\x47\xcc\x28\x2c\xa8\xce\x1a\xc1\xdd\x42\xbc\xd7\xec\x5a\x18\x58\x76\xa2\xe6\xd3\xdd\x30\xe7\x8a\xa7\x03\x4d\xdb\x36\x8b\x0a\xfa\xdd\xbf\x47\x08\xf2\x80\xd5\x43\xb4\x5d\x8f\xef\xe6\xa6\x08\x7f\x1b\xc3\x7d\x73\x53\x34\x42\x86\x8e\x0f\xfd\x81\x55\x33\xf5\xa3\x83\x1a\x13\x2b\x7f\xc8\x52\x34\x11\x6b\xf2\x20\x45\x49\xc6\x41\x79\x7e\x4f\xa2\x9b\xac\xc0\x8f\x2a\xbb\x1d\xda\xd0\xd4\x73\x1d\x1b\xfc\x22\x4c\xf2\x53\xdb\x3b\xfd\x9a\x3d\x8a\x61\xb5\x46\xc6\x77\xe0\x55\xf4\xd9\xb7\xc1\x1a\x2b\x4a\x02\x95\xdd\xa0\x6f\x06\xcf\x43\x8a\x3d\xd2\xd9\x96\x55\xb8\x0a\x0f\xda\x3b\x31\x6b\xa8\x94\xb4\xcc\x7d\xf2\x28\x55\x5e\xdf\xd5\x59\x1f\xbd\x89\xb9\xa0\xe4\x80\xb8\xf7\xc5\x28\xdc\x38\x87\x4d\xac\x6d\xe8\x0b\xf8\xee\x5a\x10\xda\xaf\x5d\xe6\x23\x34\xfa\x86\xb6\x54\xd7\xa8\xb5\xe0\x1c\x53\x85\x18\x21\x1c\x7f\x52\x3b\xbc\x69\x0e\x53\x63\xae\x30\x7e\xb2\xca\x5d\xa8\x52\x98\xb2\xed\x96\xb5\xa8\x26\x1a\x23\x41\x36\xd6\x80\xfe\xab\x61\x66\xc0\x4f\xbc\xd3\xa8\x5b\x10\x5d\x38\x6e\x59\x22\x5c\x0b\x23\x96\xb5\x2f\x8b\xa8\x24\x24\x76\x74\x8f\xb1\x54\x0e\xee\xa8\xc4\x50\x32\xf1\xc1\xe9\xab\xd7\xff\xfc\xf0\x63\x76\x8e\xed\xa4\x1f\x96\x60\xf3\xe5\x7a\xf8\x1e\xc1\x7f\xd6\x32\xfb\x55\x82\x93\x7a\x31\xf9\x70\xbc\x5c\x8f\xdf\xc9\x27\xf5\x8e\x5f\xcb\xf3\x34\x1b\x64\xba\xda\x90\xde\xb8\x91\xfa\xc2\x26\xf5\xef\x98\xe2\x8c\x7e\x23\xed\x97\x42\xe3\x6f\x73\x06\xc2\x9d\x49\x29\x86\xd0\x0d\xa7\xed\xcf\x3e\x69\x47\x9e\x32\x82\xd6\xd3\x90\x7f\x43\x9e\xf8\x17\x34\xaf\xee\xe9\x53\x87\x88\xbc\x80\x1f\x1c\x82\xe1\xdf\xce\xb8\xa7\x31\x52\xf6\x50\x00\xd3\xdf\x90\x3f\x1c\xc3\xf8\x99\x3a\x7e\x56\x11\x20\x3d\xba\x7c\xf4\xdf\x00\x00\x00\xff\xff\x32\xca\xe7\x2a\x76\x37\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 14198, mode: os.FileMode(420), modTime: time.Unix(1520543722, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json":   wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json":   wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json":   wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json":   wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json":   wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json":   wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json":   wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json":   wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json":   &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json":   &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json":   &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json":   &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json":   &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json":   &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json":   &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json":   &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
