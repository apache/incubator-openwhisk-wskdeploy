// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x4d\x6f\xdc\x38\x12\xbd\xfb\x57\x14\x72\xe9\x8b\xa1\x4d\x66\xb1\xc0\x22\xb7\x60\x93\x99\x35\x66\x62\x1b\xb6\x77\x82\xc1\x6c\x30\x66\x4b\xa5\x16\xa7\x25\x52\x20\x29\x3b\x3d\x42\xff\xf7\x05\x49\xa9\x3f\x6c\x8a\xa2\xd4\xea\xb6\x11\xac\x4f\x72\x4b\xf5\xde\xab\xe2\x57\x15\x45\xfd\x7e\x06\x50\x9f\x01\x00\xbc\xa1\xc9\x9b\xf7\xf0\xa6\x90\x8b\x3f\x4a\x81\x29\xfd\xf6\x07\x0a\xc1\xc5\x9b\x73\x7b\x57\x09\xc2\x64\x4e\x14\xe5\x4c\x3f\xf6\xc9\xdc\x3b\x03\x58\x9f\x7b\x10\x1e\x89\x60\x94\x2d\x3a\x30\xbe\x34\x77\xfb\x50\x64\x15\xc7\x28\x65\x07\xca\x6d\x73\xb7\x0f\x85\xb2\x94\x77\x40\x5c\xe8\x5b\x4e\xfb\xcf\x54\x4a\xca\x16\x10\x17\x09\x2c\x71\xd5\x61\xdf\x3e\x35\x8b\x8b\x64\x06\x94\x95\x95\x32\x4f\x3b\x21\x49\xa5\x32\x2e\xe8\x5f\xc6\x1a\xee\x7f\xfe\xf4\xdb\x7d\x07\xac\xeb\x49\x27\xe4\x63\x46\xe5\x12\x3e\x5c\x5f\xc0\xfd\xbf\xaf\x6e\xef\xba\xf0\x9e\x3d\xe6\x04\x63\xa4\x40\x59\x92\x18\x3b\x50\xb6\xf7\xfb\xb4\xfc\xfa\xe9\xe6\xf6\xe2\xea\x32\x40\xce\xe6\x49\x77\x23\x10\x46\x53\x94\x0a\x52\x9a\x23\x30\xae\x20\xe5\x15\x4b\x80\x28\x28\x89\xca\xa0\xae\xa3\x52\xf0\x3f\x31\x56\xd7\x44\x65\xeb\x75\xf4\x5f\xd6\xd5\x50\x23\x90\xbc\xfd\xa2\xae\xa3\x15\x29\xf2\xf5\xfa\x6f\xfa\x4a\x5f\x18\xe8\x08\x26\xd4\x7c\x0c\xaa\x80\x38\x53\xb9\x8f\xa5\x32\xb4\x78\xbf\xd7\x75\xa4\x9f\xb0\x68\x5f\x43\xa3\x3d\x04\xcf\x29\xef\x3f\x6d\x18\x8a\x06\xd7\x1a\x40\xca\x05\x24\x58\xe6\x7c\x55\x20\x53\xdd\x72\xc2\xed\x07\xd3\x57\xec\x50\x01\x4f\x11\x9c\x12\x74\xc8\x44\xc5\x14\x2d\x36\xe1\x94\x55\x59\x72\xa1\x30\x81\xf9\x0a\xae\x4a\x64\x76\x54\x95\x39\x51\x29\x17\x45\xb7\x98\x71\x58\x4e\x59\x5f\x3e\xdc\x5c\x5e\x5c\xfe\xf4\x1e\x6e\x1a\x3c\x59\x62\x4c\x53\x8a\x09\x50\x06\xad\xb3\xf0\xdb\x87\xcf\xbf\x68\xef\x1b\xd6\xf5\x1a\x12\x8e\x96\xb9\x20\x2a\xce\xe0\x91\xaa\x0c\x48\x6c\x66\x3b\xc9\x2b\x11\xa3\xed\x39\xf8\x4d\x21\x93\xfa\xd7\xba\x8e\xf0\x9b\x6a\x42\xd6\x3c\x59\xd7\x91\xbd\xf2\x0d\xa2\x57\x25\xd1\x1f\xc4\x2f\x26\xe8\x1f\x4d\x6f\x80\x8c\x48\x88\x33\x2e\x91\x01\x29\x4b\xc1\x4b\x41\x89\xda\x36\xdc\x9e\xd4\x39\x91\x98\x00\x67\x66\x64\x79\x35\x6a\x69\x2a\x23\x6a\x5c\x08\x5f\x5e\xe0\xb4\xbd\xb0\xab\xf7\x5b\x3f\x25\x8a\x07\x14\x8d\x22\x3c\x4d\xa7\x9b\x40\x91\x7b\x0a\x63\x5b\xc8\xb6\x85\xd4\xaa\xc4\x73\x90\xa8\x40\x71\x60\x3c\xc1\x3f\xbb\x12\xad\x50\x6b\x27\xf5\x9d\x56\x5a\xa9\x0c\x99\xa2\xb1\x4d\x68\x96\xb8\x6a\x3d\x8d\x39\x4b\xe9\xa2\x12\x98\x74\x47\x73\x08\x42\xa7\x04\x9d\x6d\x64\x5c\xaa\xa1\xc4\x7e\xbb\x4e\xba\x4d\xae\x34\x94\xaf\xc7\x30\xc8\x3f\xdd\x23\x4a\xaa\xff\x5b\xaf\xcf\x21\x15\xbc\x68\x7e\xb2\x63\xce\xd7\x73\x47\x41\x79\xdb\xbd\x6d\x2b\x89\x6a\x07\xa0\x52\x59\x98\x98\x60\x88\xb0\xa6\xa8\xeb\x68\xf3\xff\xae\x47\x9b\x1f\xc3\x54\x8d\xc7\x74\xca\xfc\x91\xd0\x1c\x13\x3d\x92\x16\x68\xf3\xa3\x67\x03\x4e\x5a\xd8\xfd\xc9\x80\xc6\xf8\xde\xac\x3b\x42\xf8\x14\x4f\x06\xef\x14\x7f\xab\x88\x30\xb3\x40\xc5\x0a\x22\x64\x46\xf2\x9d\x14\x42\xd7\x5e\x16\x3a\xe7\x31\xc9\xe1\x81\xe4\x15\xca\x6e\xa9\x23\xc1\x3a\x26\x3d\x1f\x04\x65\x0a\x05\x43\x5f\xd6\x16\x6c\xef\xa4\xff\xb8\x49\xeb\x20\xe6\x45\x99\xa3\x0e\x77\x53\xd1\xa6\x55\x9e\xaf\xba\x99\x83\x4c\x9d\xa4\x3f\x71\x05\xa6\x7a\x87\x58\x20\x51\x3a\xed\x2c\x49\xbc\x24\x0b\xb4\x19\x8c\xbd\x57\xa0\x94\x64\xb1\xd3\xb8\x40\x58\xd2\xda\xf1\xc4\xde\xd0\x17\xbe\x5e\x75\x14\xaa\x50\xa7\x9a\xb5\xef\xfb\xf2\xa9\xa4\xa7\x70\xe8\x30\x9a\x50\x67\x44\x95\x9f\xa4\xcb\x1d\xc8\xd3\xe3\x8e\x44\x65\x58\xcc\x9c\xa9\x88\xaa\x24\xf0\xf4\xd8\xbe\x1d\x85\x34\xb4\xdd\x94\xa0\x8b\x05\x8a\x53\x34\xdd\xe1\x54\x43\x9d\x4a\x11\x93\x53\x7a\x76\x20\xdf\xd0\x19\x7e\x4e\x59\xa2\xff\x3f\xe1\xac\x78\x38\x65\xdf\xda\xc9\x53\x48\xb0\x44\x96\x20\x8b\x57\xda\x34\xc1\xf2\x92\xd8\x12\x9d\x26\x4d\x8a\x6c\xd7\x48\xbd\x44\x6e\x56\x48\x5d\x7b\xc1\xfd\xa3\x5c\xda\xed\x95\xcd\x3e\xcb\xbd\xce\x2e\x04\x16\xfc\x01\xa1\x24\x42\x51\x92\xe7\xab\x66\x1b\x08\x13\x20\x52\xa2\xf2\x24\x28\xaf\x41\x99\x27\x64\x3b\x6b\x63\x5d\x47\xbc\x52\x65\xa5\xd6\x6b\x88\xa2\xc8\xeb\x8f\xc7\xac\x87\xcc\x4c\x4b\x43\xa9\x9c\x46\x3d\x44\x7b\x63\x6a\x28\xa1\xd7\xb8\x87\xb8\xed\xea\x43\x39\xbb\xec\x02\xe9\xda\x91\x35\x96\xb6\xcb\xbe\x87\x7e\xbf\x47\x0f\x62\xf6\x98\x3a\x49\xaf\x7e\x8e\xe0\x5f\x84\xc5\x98\xe7\x8d\x79\xef\x46\xaa\xd7\xa4\x87\x44\x1b\x84\x6d\xd7\xfa\x6d\x3a\x6a\x8d\xed\x43\xfe\xd1\xef\x29\x37\x06\x40\xf4\xcd\x9a\x76\x1a\x19\x51\x6f\x74\x19\xbe\x5e\xaf\x5b\x84\xe7\x5d\x70\x3b\x1f\x77\x77\xdf\x50\xeb\x7e\xff\xc7\x2e\x07\x61\xa1\x39\x00\xbd\x27\x8d\x48\x30\xc7\xd3\xd4\x54\xd3\x31\x85\xba\x74\xe4\x4c\x7d\x2a\x9e\xff\x57\x21\x4f\xe2\x79\xfc\x2a\x64\x42\xaa\xa1\x4e\x1d\xb9\x0a\x99\x9a\x2f\xd4\xbd\xe3\xef\x33\x4d\x48\xe5\x7f\x91\x74\x97\x21\xcc\xec\xae\xed\xcc\xbe\xa5\x31\x3b\xd0\x6c\x13\x52\x64\x8a\x2a\xb3\x27\x9d\x60\x29\x30\x26\x0a\x93\x08\xae\x73\x24\x12\xa1\x92\x08\x33\x1d\xf4\x19\x50\x26\x15\x12\x9d\xbb\x43\x82\x32\x16\x74\x6e\x5f\x01\x35\xef\x83\xec\xdb\x0c\x4f\xb5\xf1\x92\x8a\x42\xdb\xbd\x4d\x34\x4f\xd8\xfe\xd3\x51\x76\xe5\x51\xae\x44\x36\x23\x12\xe6\x88\x6c\x2f\x37\xda\xd4\x67\xde\xec\x6a\x1c\x9c\x53\xdc\xb5\x27\xbf\x1f\xab\xf0\x30\x4c\xaf\xcc\x29\xe5\x4d\x20\xeb\xae\x19\x2e\x53\xc8\x1a\x87\xe5\x95\xf5\xac\x3e\x3d\x54\xdb\x08\x40\xa7\xc0\x9b\xa7\x15\xfb\x58\x61\x23\x80\x9c\x82\x3e\x3c\xdf\xad\x18\x2b\x69\x14\x54\xc0\xc4\xb1\xcd\xd0\xdd\x70\x6d\x61\x19\x3e\x77\x0c\x43\xec\x1b\x00\xcd\xd2\xb1\x8b\xd6\x54\x7f\x41\x7d\xde\x6f\xee\xed\x45\x3a\x8b\x1c\x44\x1b\x60\xd8\xd3\x4b\xda\x23\x12\x03\x48\x03\x8d\x7b\xde\xe8\x52\xf6\xc0\x97\x68\xd2\x68\x9b\x88\x65\xc8\x4e\x94\x13\x9e\x58\x84\x3f\xa7\xfa\x4c\x58\x42\x14\x17\x2b\x48\x29\xe6\x09\xb4\x93\xfa\xaf\x28\xcc\xc9\x9f\xa2\x92\x0a\xe6\xa8\xeb\x8e\x80\x7c\x68\x20\x9a\x5f\xda\x53\xe3\xf6\x14\x0e\x79\xb0\xb9\x91\x0e\x5b\x5c\x09\xa1\xeb\xf0\xed\xb6\xed\x83\x7d\x3a\x40\xec\xc1\xf8\xe3\x22\xfb\x0b\x8d\x91\x49\x9c\x28\xb2\x1d\x68\x61\x91\x6d\x8d\x8f\x15\xd9\xd1\xf8\x7e\xf9\x2d\x6c\x5d\x47\xb9\xbd\xbc\xf8\xb8\x3d\xa5\x45\xe0\x81\xe4\x34\x01\xce\x30\x40\xea\x20\x2c\xf7\x91\x76\x2c\xb8\x58\xdd\xd2\xbf\x50\x57\xe2\x39\x2d\xa8\x92\x7b\xe7\xc9\x64\xc6\xab\x3c\xd1\x8d\x43\x98\x39\x9f\xa0\x07\xf5\x1c\xd5\xa3\x9e\xb1\xde\xfd\xf0\x4f\x33\x7c\xff\xf1\xee\x87\x6e\xb5\x93\x52\xb8\x4f\xb2\xd2\x02\x79\xa5\x46\xc1\xbf\x7d\x6b\xe0\xff\xfe\x56\xff\x79\x0e\xb8\x4e\x49\xe1\x74\x22\xe7\x8b\xb1\x31\xb2\xf8\xef\x3c\xf2\x27\x02\xf7\xf7\xec\x0b\x66\xfb\x9b\x61\xb0\x67\xea\x66\x4d\xdc\x66\x9a\xb9\xd9\xa1\xdb\x65\xa6\x12\xe8\x82\x71\xb1\x53\x57\xc6\x19\xc6\x4b\xbb\x20\x84\x14\xb1\xc7\x21\x1d\xee\xe8\xb6\x97\x9f\xd6\xd7\x49\x78\x87\xbb\xdb\x74\xa8\xd3\xfa\x7a\x38\x69\xdf\xd4\x6c\x86\x86\x9d\x4e\x0b\xaa\x98\xcd\x8b\x37\xa7\x26\x33\xc2\x16\x64\x9e\x23\x10\x69\x4f\xa8\x3e\x9e\xc3\x63\x46\xcd\x49\xee\x3c\xd7\xe3\xa7\xe5\x0f\x99\xba\x27\xe4\x72\xba\x65\x3e\x87\xe0\xa9\x59\xaf\xa2\x25\xae\xcc\xb1\xe8\x0e\x59\xee\x67\xfb\x61\x63\x14\x2a\x18\x77\xfb\xb0\xf7\x5c\x65\xfb\x3c\x29\xcb\xbc\x3d\x9b\x6b\xce\x87\x9a\x3a\xc5\xbe\x56\xd2\x8b\x1c\xdb\x79\x55\x67\x8f\x7c\x13\x65\x3e\xff\xd8\xfe\xfc\x23\xd5\xa9\xfd\xd7\xa7\xe7\xee\x55\x10\x53\xfb\xc1\xc9\xda\x92\x15\x7b\xdf\x9f\x34\x54\xed\x8f\x0d\x51\xd7\x0b\xa1\xef\xc2\x35\xff\xd8\xd9\x25\x72\xe8\x37\x9d\x56\x72\xce\x74\xcf\xdd\xee\x26\x9e\x43\xb9\xdd\x4d\x6c\xbe\x2b\x6a\xb7\x13\x03\x06\xd1\x71\x48\x07\x39\xba\x1f\xbb\x93\xb8\x39\x09\x65\xe0\xbb\x47\x7b\x4c\xd4\x6c\x04\x53\x94\xde\xd7\x82\x90\x54\x42\x57\x7e\x05\x61\x64\x81\xc9\xee\x8b\xf4\x23\x9d\x9b\x79\xb5\x72\xdd\xe5\xbb\xf9\x56\xcd\xfd\x91\x45\x33\xb5\x9b\x9d\x76\xeb\x83\x39\x0f\xbc\x5b\x6a\xb4\x6d\xb8\xfd\x00\xcf\x35\x78\x37\x38\x73\xdc\x3d\x67\xe0\x5b\x92\x5e\x5e\x57\x4f\xb8\x94\x6b\x7f\xe8\x55\x04\xec\xe5\x94\xf5\x84\x6c\xe7\x9c\x50\x73\xf9\x5a\x42\xf6\x72\xca\x74\xc8\xce\xce\xbe\x9e\xfd\x2f\x00\x00\xff\xff\xa6\x69\x1e\xd2\xa5\x3e\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 16037, mode: os.FileMode(420), modTime: time.Unix(1514922051, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

