// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5b\x6f\x8f\xdb\x36\xd2\x7f\x9f\x4f\x31\x08\x1e\x20\x2d\xe0\x28\x69\x1f\x1c\x70\x08\xb0\x38\xe4\x2e\x69\xbb\xd7\x26\x1b\xec\x26\x17\x14\xe9\x42\xa1\xc5\xb1\xcd\x5a\x22\x05\x92\xb2\xe3\x1a\xfe\xee\x87\xe1\x1f\x49\xf6\x2e\x25\xad\xd3\xe2\xf2\x26\xde\xe5\x70\xe6\x37\x43\xf2\xc7\x99\xa1\xf7\xd3\x23\x80\xfd\x23\x00\x80\xc7\x82\x3f\x7e\x01\x8f\x2b\xb3\xcc\x6b\x8d\x0b\xf1\x25\x47\xad\x95\x7e\x3c\xf3\xa3\x56\x33\x69\x4a\x66\x85\x92\x24\xf6\xda\x8d\x3d\x02\x38\xcc\x06\x34\x08\xb9\x50\x09\x05\x97\x34\x34\x36\xdf\x34\x45\x81\xc6\x24\x54\xdc\x84\xd1\x31\x2d\x5b\xa6\xa5\x90\xcb\x84\x96\x8f\x61\x34\xa9\xa5\xa8\x78\xce\xd1\x14\x79\xa9\xe4\x32\xd7\x58\x2b\x6d\x13\xba\xae\xdd\xa0\x01\x25\x81\x63\x5d\xaa\x1d\x72\x40\x69\x85\x15\x68\xe0\x1b\x91\x61\x36\x83\x77\xac\x58\xb3\x25\x9a\x19\xbc\x2c\x68\x9e\x99\xc1\x7b\x2d\x96\x4b\xd4\x66\x06\xd7\x4d\x49\x23\x68\x8b\xec\x5b\x60\x06\xb6\x58\x96\xf4\xbf\xc6\x02\xa5\x75\x33\x36\xce\x9a\x01\x21\xc1\xae\x10\x4c\x8d\x85\x58\x08\xe4\x20\x59\x85\xa6\x66\x05\x66\x93\x7d\x51\x2a\xe5\xc9\x4b\xb0\x4a\x95\x60\x55\x70\x64\x06\x8d\xf4\x9f\x80\x49\x0e\x66\x27\x0b\x50\x35\xca\xed\x4a\x98\x35\xd4\xc1\x27\x68\x8c\x90\x4b\x60\x50\x31\x29\x16\x68\xac\x13\x56\x35\x69\x65\x65\x50\x55\x91\x27\x0b\x51\xb6\xe2\xbf\xbe\x7c\xf3\xcb\x14\xcc\x66\xa5\xb4\x1d\x5e\x80\x77\x5a\x6d\x04\x47\x03\x0c\x4c\x53\x55\x4c\xef\xc0\xcb\x83\x5a\xc0\x76\xc5\xec\x13\x03\x73\xc4\xde\xf2\x7c\x5d\x18\x03\xa4\xd1\x38\x1a\xb4\x14\xcb\x15\x96\x75\x30\x0d\x3b\xd5\xe8\x49\x21\xa4\x50\x4d\xc7\xb2\x41\x6d\xc8\x76\x2a\x3e\x42\x5a\xe7\x70\x90\x03\xd9\x54\x73\xd4\x2e\x3c\x66\xed\xa1\x0d\xdb\x5a\x94\x6c\x99\xb3\x5a\xe4\x2b\x65\x52\x5e\x7b\x97\x5e\xbe\xbb\x84\xcf\x3f\x5d\xdd\xbc\xff\x3c\x51\xe3\x30\xf6\x9e\xd2\xff\xbc\xbe\xbe\xb9\xbc\x7a\x3b\x49\x6f\x63\x57\xf9\x1a\x77\x09\xa5\x34\xac\xb4\xf8\xc3\xfd\x02\x3e\xff\xfc\xfa\xd7\x29\x4a\x0b\xd4\x36\xa7\x75\x49\x68\xad\x99\x5d\x51\x48\x29\xd0\x19\x09\xbb\x45\x9c\xa2\x58\xc9\x85\x48\x31\x95\x1f\x74\xaa\xe0\x1b\x8e\x0b\xd6\x94\x16\x84\x81\xff\xfb\xe9\xea\xcd\xeb\x67\xd9\xd6\xac\x6b\xad\x6a\xf3\xed\x94\xa8\x94\xa5\xda\xe6\x41\x47\x8a\x5f\x9d\x10\xb4\x42\xe3\x5a\xbb\xf3\x3d\x14\x97\x96\x53\x5a\x22\x98\xa0\x5a\x48\x8b\x9a\x11\xfd\xa5\x62\xee\xd1\xf6\xe4\xa0\xd6\xaa\xaa\x27\x01\x5f\xe3\x6e\xf2\x72\xae\x71\x37\x15\xb4\x8f\x72\xc5\x24\x5b\x22\x1f\x84\x5d\x6b\xf5\x3b\x16\xb6\xbb\x2c\xac\x82\x39\x42\xc5\xf4\x1a\x39\x44\x0d\xe3\x16\x83\x9e\x9c\x48\x2c\xe5\x4c\x30\xe5\x44\xc6\x35\x46\x1a\x1a\x59\xd1\x23\xb6\x9a\xa0\xb6\x65\xd9\x84\xde\x6e\x7c\xb2\xd3\x23\x08\x0d\xea\x0d\xea\x12\x8d\x89\xd1\x9e\xa0\xda\x58\x2d\x92\x9a\xfd\xd2\x35\x06\x35\x1d\x12\x21\x91\x83\x6e\xa4\x15\x55\xcb\xae\x13\x2c\x58\x9d\x0e\x82\x1b\x03\xd5\xd8\xba\x99\x02\xd6\x6f\xb7\x0d\xea\xb9\x32\x29\x95\x61\x74\x5c\xa9\xe3\x9a\xbc\x12\x86\xae\x23\xc7\xa2\x69\x12\x7d\xbf\x42\x20\x09\xda\xbd\x85\x67\x52\x3a\x25\xc2\x80\x54\x16\xbc\xaa\x46\x23\xcf\x7e\x1b\x8a\xc8\x89\xc5\x5a\x0c\x5c\x30\x64\x91\x6e\x02\x12\xf9\x3a\x3b\x63\x1b\x91\x2c\xb5\x32\xe7\x99\x0a\xae\x0c\x65\xc3\xa7\xfe\x7c\xda\xef\x33\xfa\x7c\x38\xdc\xce\x60\xa1\x55\x05\xfb\x7d\x66\x54\xa3\x0b\x3c\x1c\x26\xd9\xf4\x0b\x36\x66\x93\xc4\xe2\x5a\x19\xb4\xe7\xd9\x6a\xc3\x33\x66\xed\x28\x8e\xe4\x62\xfb\x8b\xf3\xfd\xac\xc5\x72\x9b\x33\x57\x08\xe4\x56\xad\x51\x8e\xba\x4c\x33\xc0\xcf\x00\x37\xe3\x3c\xe7\x1b\x59\x31\x6d\x56\xac\xcc\x4b\x55\xb0\x32\x61\xf1\x43\x94\x82\xab\x1a\xe5\x47\x97\xc2\x04\x92\x30\xde\x9e\x9b\x0d\x1b\x56\x36\x68\x26\x1a\x94\x68\xb7\x4a\xaf\xcf\x36\xe9\x2e\x49\x89\x16\x98\x25\x77\x1b\x5d\x8e\xf8\xda\xdd\xd7\x79\xc1\x64\x81\x65\x99\xbc\xcf\xae\x7e\xce\xe0\x5f\x5e\x86\xf2\xd8\x6e\xe6\x54\x03\x0b\x26\xd2\xda\x5f\x75\x89\x03\x17\x3c\x9c\xc5\xaa\x2e\xd1\x22\x98\x86\x96\x74\xd1\x94\xe5\x2e\x83\xeb\x46\xc2\xe7\x36\xa3\x6d\x8b\x97\xcf\x74\x13\x68\xac\x14\xa5\x07\x4c\x5b\xc1\xca\x72\xd7\x15\x03\xcc\x18\xb4\xc3\xab\xd0\x43\xea\x2b\x8b\xdc\x58\x66\x9b\x54\x0e\xf5\xf4\xe9\xd3\xa7\x17\x17\x17\x17\xbd\xb5\xe8\xf9\x70\xe3\xa6\x02\x09\x90\xe0\x24\xab\xae\x26\x46\x3e\x25\x44\x31\x34\x1c\x42\x21\xed\x83\x33\xbc\xc9\xce\x5f\xeb\xfe\xdc\xe9\x46\x06\xd7\xfb\x43\x4f\x72\x78\xc5\x27\xdb\x1b\x8b\xdf\x91\xc9\x33\x22\x58\xa8\xaa\x62\x92\xe7\xae\x8e\x73\x59\x25\xb1\x5c\xce\x6c\x4e\x99\x48\xc2\xe8\x7e\x9f\x15\x15\x3f\x1c\x42\xf5\x17\xa8\xf1\x70\x70\x2c\x49\xf3\x0e\x87\xdb\x2c\x1b\xb4\xeb\x52\xc7\x5d\x1e\xf7\xf2\x48\xef\x64\xbf\xa7\x44\x36\x18\xf0\xb6\x6e\x61\xc5\x42\x75\xdc\x77\xb6\x3d\x1d\xd3\xad\xa7\x9b\x2d\xaf\xe2\x38\xdc\x0b\x20\xcb\x06\x0a\xdd\x60\x22\x2e\xe6\x9f\xe9\x62\xa7\x73\x8a\x93\x51\x3a\xed\xe6\x87\x4e\xe2\x5e\x47\x07\xfd\xe4\x58\xa3\xe4\x28\x8b\x87\x84\xb3\x9b\x74\xbe\x9d\xee\x78\x24\x63\xfa\xea\x5e\x33\x5f\xb3\x71\xee\x47\x41\xa4\xd0\xe8\x54\x4e\xd6\xa3\x38\xb5\x48\xb8\xfe\x3f\xbc\x1f\xa2\x3f\x0f\xdb\x27\x5f\xb7\x82\x77\x29\xee\xcf\x59\xc3\x89\x27\x23\x85\x64\x78\x1d\x8f\xa8\xf6\xcc\x95\x1c\x42\x15\xea\xe6\x73\xef\x1b\x87\xc8\xb3\x7f\x5b\x97\x0f\x61\x01\xde\x68\x5a\xc9\x60\xb6\x9f\xfb\xfc\x75\xfb\x2d\xfa\xb8\x50\x8d\xe4\x79\xc0\x1b\x98\x2a\xb9\x01\x4a\xb4\x49\x0e\xde\xae\x44\xb1\x82\xad\x6b\x3a\x13\x2e\xee\x73\x46\xbb\x42\x28\x1a\xad\x29\x30\xd1\xc1\xd8\x4a\x70\x97\x94\xff\x4c\x1a\x98\x71\xbe\x50\xfc\x26\xa7\x04\xbe\x57\x33\x52\xf5\xfd\x26\xdf\x95\xc8\x8c\xeb\xec\x6c\x04\x47\x07\x8a\xe4\x09\x3b\x2c\x94\xee\xb2\xac\x17\x30\x6e\x6b\xb0\xa6\xbd\x63\x8b\xc9\xd3\x1a\xd7\x15\x0f\x13\x0c\x85\xae\x6a\x62\x31\x14\xec\x54\x03\x1a\xdd\xca\x6f\x99\xb4\x5d\x83\x0c\xec\x4a\x98\x7f\xc0\x37\xbb\x67\x6f\xbf\x9d\x60\x67\xac\x94\xbd\xeb\x52\xaf\x22\xfb\x14\x1b\x8a\xae\x12\xa1\x92\x68\xd9\xa0\xb1\xb7\x13\xec\xc6\x45\x7e\x90\x87\xed\x73\xc2\x44\x1f\x03\xbc\x3c\xf4\xc9\x53\xfd\x6d\x3f\xea\xfc\x82\x5e\x8b\x54\xa3\x6b\xff\xf0\x19\xb0\xb2\x5f\x17\xb5\xe7\x9a\xe0\xe8\x76\x46\x30\x02\x4c\x63\x7b\x18\x9f\x75\x54\x08\x5c\x68\x2c\x6c\xa0\x47\xed\x5b\xf9\x63\xef\x06\xaf\xaf\xaf\xaf\xae\x6f\x12\xb8\x2f\x4e\xff\x81\x17\x87\x3b\x03\x17\x17\x03\xf9\x89\xd6\xc7\x4c\xbc\x96\x6a\x2b\x73\xbb\xab\x07\x6e\xd2\xc8\xb8\x24\x45\xa1\x0a\xb3\x32\xe8\x1e\x04\x40\xc9\x72\x07\xa6\xa9\xfd\xeb\xd6\x33\xd7\x89\xcf\xcc\xce\x58\xac\x60\x2e\x24\x17\x72\x69\x40\x69\x58\x0a\xbb\x6a\xe6\x59\xa1\xaa\xf6\x3d\x63\x38\xa1\xd2\x3a\x26\x55\x85\x46\x66\x53\x30\xdd\x6b\x23\x38\x91\x23\xde\xda\x0a\xbb\x02\xf7\x4c\x09\x15\x1a\xc3\x96\xf8\x82\x06\x51\xeb\xc3\xc1\x3d\x3d\xf9\xb1\x42\x71\x3f\x40\x1f\x46\x4a\xdd\x1e\x24\x4f\xa6\x83\x90\xf8\x1d\x2a\xfd\x8b\x20\x2d\x10\x79\x2e\xe4\x46\xad\x53\x80\x7e\x70\xf7\x1a\x1d\x2d\x2f\xe6\xc8\x91\xa6\xc1\x76\xe5\x1e\xbc\x02\x52\xeb\x1f\x1b\xc3\xd0\x5f\x83\x76\x8d\xbb\xb6\xc1\x46\xc5\x10\xb3\x4a\x0f\x35\x0f\x5b\x19\xd7\x8b\xfa\x14\x83\x79\x4b\xfb\x31\xe8\x19\xb5\x19\x3b\xd0\xb9\x54\xd6\xdf\x86\x09\x83\x6f\xfa\xad\x6a\x77\x99\x3b\x69\x60\x74\xee\xed\xea\xa8\xe4\x1a\x33\xea\x4a\xbb\x4a\x98\x8a\xd9\x22\x55\xdb\x91\x83\xed\xf6\xa0\x09\xdc\x99\xe0\xf1\xc2\x15\xf2\xf4\x3d\xc4\x8f\x07\x0c\xc0\x15\xfa\xae\xa3\x33\xe2\x96\xd5\xd1\x1b\x09\x55\x3d\x25\x47\x2d\x78\x3f\x1a\xdd\x18\x76\x22\x34\x87\x68\x7b\xb1\x52\xa4\xc2\x76\xe9\x47\xe9\x98\x87\x25\x69\xbb\xdd\x64\x2b\x7c\x26\x2c\xdd\x5b\xea\x11\x2a\xa5\x1d\x76\xe6\x5e\xbd\xdd\x1c\xff\x71\x4a\x9c\x23\xc4\x91\x50\x5f\x3f\x04\xd0\x49\x5c\xdd\x51\xf0\x88\x9e\x18\xf0\x2d\x40\x1f\x4a\xfc\x62\x51\x9a\x08\x1a\xbf\xb8\x24\x87\xdc\xf9\x1a\x57\x4c\xbe\xc4\x54\x9e\xd3\x1d\xe5\x25\xfa\xd7\xda\xc0\xbd\xdd\x0b\x43\xe8\xe4\x75\x37\x19\xdd\x6f\xa2\xe8\x1d\xdf\xc9\x31\xf5\xd0\x73\xef\xb1\x3b\x3d\xad\xb5\x04\xbe\x23\x87\x5d\xe1\x40\x61\xec\xa2\xcc\xe4\xae\xdd\x1b\x44\x22\xbd\x65\x1f\x8d\x6b\xe8\xb0\xb7\x10\x46\xdd\x68\x74\xf9\xf0\x9d\xeb\xbb\x9e\x74\xe5\x1d\x0e\xf0\xe1\xfa\x17\x87\xc0\xf5\x41\xdd\x51\xa2\x9f\x08\xa2\x17\xb8\xf5\x4f\xf0\x53\x80\x54\xac\x5c\x28\x5d\x25\x23\xf7\x26\x8e\x0f\x21\xc8\xe0\xbd\xde\x01\x5b\x32\x21\xc7\x7a\x3e\x5a\xe7\xbf\x1b\x25\x5b\xb2\x2d\x2a\x3e\xf0\xd8\xfd\xef\x9b\xab\xb7\x20\x64\xdd\x58\xe0\xcc\x32\x78\x13\xa2\xf1\xa4\xa8\xf8\x13\xa2\xde\x61\x4b\xac\x16\xad\xa1\x2d\xce\xc3\xc6\x49\x7d\xf1\xe1\x9e\xb3\x11\x17\x97\xc1\x16\xe7\x61\x47\xcc\xdc\xbb\x87\x13\xab\x05\xc9\x14\x4c\xfa\x7c\x63\x8e\xfe\xc6\x47\x1e\xba\x62\xdd\xa4\x0c\x42\x26\xdb\xd4\x9c\x59\x3c\xa1\x3e\xab\xa0\x50\x72\x83\xda\x9e\x98\xb7\xaa\xaf\x63\x2c\xb0\x7d\x77\xcf\x72\x35\x6e\x36\x77\x52\x8f\x20\x4e\x72\x7a\xce\x0c\x72\x50\xb2\x7f\x7c\xee\xaa\x1a\x0d\x85\x90\x45\xd9\x70\x3c\x81\xc7\xcc\xd1\x2a\x8c\x07\xc3\x93\xc4\xf0\x41\x4b\x05\x22\xcc\xca\xe0\xd2\xfa\x36\x83\xb2\x2b\x97\x53\x38\x76\x58\x34\x32\x70\x43\x24\x90\x99\x8f\x85\x92\x18\x5e\xdd\x2b\xd2\x82\x5f\x6a\x2c\xa6\x30\x42\xc0\x1a\xd7\x2e\xf2\x1c\x11\x7c\x4e\x56\xbf\x12\xbd\x03\xde\x91\x1d\xa9\x55\x8d\xed\x93\x5e\x06\x1f\xbb\xcb\x24\x52\x1e\x4d\x9b\xb5\xb4\x48\xdb\x23\x26\x3d\x23\xd7\x73\x70\x27\x86\x29\xa7\xb2\xdc\x62\xce\x85\x9e\x44\xd6\xf7\xba\x45\x7e\xb4\x71\xaf\x95\x90\x3e\x35\xf4\xbd\x08\x8b\xa1\xc0\xa1\x84\xac\xa3\xa5\x19\x98\xa6\x88\x5e\x19\x57\x1b\x1d\x33\xf5\xfd\x6e\x7c\x7c\x79\xfd\xf6\xf2\xed\x8f\xd3\x2b\x9f\x38\xe1\x61\xb5\xcf\x96\x69\xd9\xf6\xde\x35\xda\x64\xbe\x79\x4d\x63\xe4\xed\xa7\xd8\x74\xbf\x05\xb6\xb0\xa8\x7d\xae\xfb\xc2\x5f\x46\x74\x83\xde\x0e\x6d\xb4\x60\xcf\x3d\x42\x3e\xf8\xfa\xe9\x7f\x93\xa7\x97\x6e\x02\x47\x3b\xbe\xc5\x9d\x65\xca\xb0\x39\xd6\x1a\x0b\xe2\x8a\x5c\x63\x5d\xb2\x22\xb9\x07\x28\x05\x25\x3b\xaa\xe4\x21\xb1\x76\x6f\xbe\x9e\x5a\x8e\xee\x3a\xd8\x8a\xb2\x04\xa3\x94\x24\x2a\xea\x2c\xcc\xa0\x0e\x34\x63\x7c\x65\xe1\x5a\x46\xb8\x3d\x52\x67\x2c\xb2\x89\xd8\x43\x24\xce\xa9\x09\xcc\x4a\x35\x25\x27\x78\x06\x6d\x06\x1f\x8c\xef\x9e\xf6\xbb\x17\x24\xed\x3e\x8d\x3f\x9b\xb4\x88\x9c\xfc\xc8\x52\x12\x2e\x6f\x81\xd2\xbf\xbb\xb5\x0a\x9d\x07\x4f\x16\x0f\x30\xe9\x0e\x31\xdb\x0c\x2e\xde\x98\x51\x37\x3f\x2e\x68\x6c\xd3\xc5\xaf\xf8\xf5\xbf\xdb\x37\x0e\xac\x14\x95\xb0\xb9\x58\x4a\xa5\x93\x90\xe2\x96\x0e\x0c\xe7\xa6\x38\x54\xee\xd3\x69\x3d\x42\x1c\xea\xd5\x4d\xb5\x5e\xac\x98\x5c\x22\x9b\x27\xbf\x91\xf5\x4b\x6b\xb1\x2d\x80\x4c\xf4\xbb\xdc\xf9\x0e\x6d\xab\x23\x83\x4b\x32\x4f\x45\xe4\x84\xbd\xe0\x10\x98\xbc\x54\xcb\xdc\x88\x3f\x52\x00\x4a\xb5\xbc\x11\x7f\xb8\xfb\xc9\x4f\x38\xf2\xb8\xdb\xa2\x4c\xba\xd7\x76\x2a\xb8\xe7\x68\xb7\x88\x12\x9e\xbb\x5b\xef\xbb\xe7\x93\xa1\x54\x58\x29\xbd\x1b\x42\xe3\x25\xce\x05\xf4\xdd\xf7\x7f\x77\x90\xfe\xf6\xdd\xf7\x93\x31\xd1\x25\xa6\x9a\x54\x01\x13\x46\xcf\x02\xf3\xdc\xc7\xe7\xff\x9f\xd3\xbf\x71\x3c\xae\x17\x95\xd7\x5a\xd5\xa8\xad\xc0\xd4\xa3\x47\x64\xc0\x1e\x5f\xf9\x16\xb7\xd5\x02\xdb\x26\xb7\x6f\x6c\x75\xca\x62\x33\xfc\x7e\x4e\x8c\x94\xc8\x95\xdb\x70\xc4\x8c\xc2\x82\x6a\xac\x11\xdc\x2d\xc4\x7b\xcd\x36\xc2\xc0\xbc\x11\x25\x1f\x6e\x84\x39\x57\x3c\x1d\x68\xda\xb6\x93\xa8\xe0\xf8\x95\x38\x12\x82\x3c\x21\xf4\x10\x6d\xd7\xde\xdb\xef\xb3\xf0\xdb\x18\xee\xfd\x3e\xab\x84\x0c\xcd\x1e\xfa\x81\x15\x23\xa5\xa3\x83\x1a\x73\x2a\x7f\xc8\x52\x34\x11\xcb\xf1\x20\x45\xf9\xc5\x49\x65\x7e\x4f\x8e\x9b\x2c\xbe\xcf\xaa\xb8\x1d\xda\xd0\xcf\x73\xcd\x1a\xfc\x22\x4c\xf2\x1b\xaf\x77\x5a\x35\x47\x14\xc3\x4a\x8d\x8c\xef\xc0\xab\x68\x13\x6f\x83\x25\x16\x94\xff\x29\xbb\x42\xdf\x07\x1e\x87\x14\xdb\xa3\xa3\xdd\xaa\x70\x15\x9e\x74\x76\x62\xc2\x50\x28\x69\x99\xfb\xe6\xa1\x54\xd3\x5a\xae\xce\x7a\xef\x39\xcc\x05\x65\x0a\x88\x7b\x1f\x8b\xc2\x8d\x73\xda\xbf\xda\x86\x96\x80\x6f\xac\x05\xa1\xe3\xb2\x65\x3c\x42\xbd\xaf\xb2\xe6\x6a\x83\x5a\x0b\xce\x31\x55\x83\x11\xc2\xfe\x37\x5b\xbb\xe7\xcc\x6e\x6a\xcc\x15\xfa\xaf\x55\x29\x18\xaf\x5e\xff\xf3\xc3\x8f\x93\x53\x56\x27\xfd\xb0\x7c\x95\xcf\x97\xb9\x41\xa6\x8b\x15\xd5\x28\xd1\xd9\x36\xef\x4e\xfd\xc9\x4b\x9c\xd1\x3a\x7b\x9c\xa9\xc7\x7d\x41\x67\xa5\x23\x85\x91\x6b\x8f\xa0\x9c\xee\x88\x3f\x7b\x37\x9c\xb9\x13\x08\x5a\x7b\x54\xfc\x13\xe7\xc0\x1f\x5b\xbc\xba\xa7\x8d\x1a\x22\xf2\x02\x7e\x70\x08\xba\x3f\xb3\x70\x2f\x37\xa4\xec\xa1\x00\x86\xbf\x6e\xfc\x70\x0c\xfd\x57\xd4\xf8\xea\x1f\x20\x3d\xba\x7d\xf4\xdf\x00\x00\x00\xff\xff\x30\x3e\x05\x9f\xa1\x35\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 13729, mode: os.FileMode(420), modTime: time.Unix(1520546054, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

