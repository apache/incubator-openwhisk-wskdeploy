// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5b\x6d\x8f\xdb\x36\xf2\x7f\x9f\x4f\x31\x08\xfe\x40\x5a\xc0\x51\xd2\xfe\x71\xc0\x21\x40\x5e\xe4\x9a\xb4\xdd\x6b\x93\x0d\x76\xb3\x17\x14\xb9\x85\x42\x4b\x63\x9b\xb5\x44\x0a\x24\x65\xc7\x35\xfc\xdd\x0f\x33\xa4\x1e\xec\x5d\x4a\x5a\xa7\xbd\xeb\x9b\x3a\xe1\x70\xe6\x37\xc3\xe1\x3c\x51\xf9\xf4\x08\x60\xff\x08\x00\xe0\xb1\xcc\x1f\xbf\x80\xc7\xa5\x5d\xa6\x95\xc1\x85\xfc\x92\xa2\x31\xda\x3c\x9e\xf9\x55\x67\x84\xb2\x85\x70\x52\x2b\x22\x7b\xc3\x6b\x8f\x00\x0e\xb3\x01\x0e\x52\x2d\x74\x84\xc1\x05\x2d\x8d\xed\xb7\x75\x96\xa1\xb5\x11\x16\xd7\x61\x75\x8c\xcb\x56\x18\x25\xd5\x32\xc2\xe5\x63\x58\x8d\x72\xc9\xca\x3c\xcd\xd1\x66\x69\xa1\xd5\x32\x35\x58\x69\xe3\x22\xbc\xae\x78\xd1\x82\x56\x90\x63\x55\xe8\x1d\xe6\x80\xca\x49\x27\xd1\xc2\x37\x32\xc1\x64\x06\xef\x45\xb6\x16\x4b\xb4\x33\x78\x95\xd1\x3e\x3b\x83\x0f\x46\x2e\x97\x68\xec\x0c\xae\xea\x82\x56\xd0\x65\xc9\xb7\x20\x2c\x6c\xb1\x28\xe8\xff\x06\x33\x54\x8e\x77\x6c\x58\x9a\x05\xa9\xc0\xad\x10\x6c\x85\x99\x5c\x48\xcc\x41\x89\x12\x6d\x25\x32\x4c\x26\xeb\xa2\x75\x4c\x93\x57\xe0\xb4\x2e\xc0\xe9\xa0\xc8\x0c\x6a\xe5\x7f\x81\x50\x39\xd8\x9d\xca\x40\x57\xa8\xb6\x2b\x69\xd7\x50\x05\x9d\xa0\xb6\x52\x2d\x41\x40\x29\x94\x5c\xa0\x75\x4c\xac\x2b\xe2\x2a\x8a\xc0\xaa\x24\x4d\x16\xb2\x68\xc9\x7f\x7b\xf5\xf6\xd7\x29\x98\xed\x4a\x1b\x37\x7c\x00\xef\x8d\xde\xc8\x1c\x2d\x08\xb0\x75\x59\x0a\xb3\x03\x4f\x0f\x7a\x01\xdb\x95\x70\x4f\x2c\xcc\x11\x7b\xc7\xf3\x75\x66\x0c\x90\x46\xed\x68\xd1\x91\x2d\x57\x58\x54\x41\x34\xec\x74\x6d\x26\x99\x90\x4c\x35\x1d\xcb\x06\x8d\x25\xd9\x31\xfb\x48\xe5\x58\xe1\x40\x07\xaa\x2e\xe7\x68\xd8\x3c\x76\xed\xa1\x4d\x96\x45\x5e\x30\xea\x3f\xec\x2a\xac\xec\x65\x85\xea\xe3\xb1\xb2\x73\x74\x5b\x3a\x8e\xac\x90\xe4\x15\xec\x5a\x68\x36\x68\x26\xfb\xf0\x74\x0c\x3d\xef\x23\x39\x8d\x3f\xf3\x5f\xe8\xc5\x7f\xd3\x9b\x17\x85\x58\xa6\xa2\x92\xe9\x4a\xdb\x98\xe3\x78\x28\xaf\xde\x5f\xc0\xe7\x9f\x2f\xaf\x3f\x7c\x9e\xc8\x71\xf8\xf8\x7b\x4c\xff\xf5\xe6\xea\xfa\xe2\xf2\xdd\x24\xbe\xb5\x5b\xa5\x6b\xdc\x45\x98\xd2\xb2\x36\xf2\x0f\xfe\x0b\xf8\xfc\xcb\x9b\xdf\xa6\x30\xcd\xd0\xb8\x94\xec\x16\xe1\x5a\x09\xb7\xa2\x63\x21\x5f\x4d\x88\x98\x8d\x3c\x85\xb1\x56\x0b\x19\x0b\xf6\x7e\x91\x59\xc1\x37\x39\x2e\x44\x5d\x38\x90\x16\xfe\xef\xe7\xcb\xb7\x6f\x9e\x25\x5b\xbb\xae\x8c\xae\xec\xb7\x53\xac\x52\x14\x7a\x9b\x06\x1e\xb1\x14\xc5\x44\xd0\x12\x8d\x73\xed\x9c\x6a\xc8\x2e\x6d\x58\x6e\xbd\x6f\x02\xeb\xca\xe0\x46\xe2\x36\xc2\xd7\xae\x18\x68\xc3\xf4\xd9\xd1\xf5\xa8\x0a\xa1\x26\x48\x58\xe3\x6e\xf2\x91\xae\x71\x37\x15\xb8\xb7\x74\x29\x94\x58\x62\x3e\x68\xe8\xca\xe8\xdf\x31\x73\x5d\xce\x75\x1a\xe6\x08\xa5\x30\x6b\xcc\xa1\xe1\x30\xc5\x54\xcc\x27\xa5\x5c\x10\x53\x26\x88\x62\x92\x71\x8e\x4d\x08\x19\x39\xd5\xa3\xa0\x3f\x81\x6d\x9b\xac\x22\x7c\xbb\xf5\xc9\x4a\x8f\x20\xf4\xe1\xb9\x40\x6b\x1b\x6b\x4f\x60\x6d\x9d\x91\x51\xce\xfe\xe8\x6a\x8b\x86\x2e\x8a\x54\x98\x83\xa9\x95\x93\x65\x9b\xa4\x26\x48\x70\x26\x6e\x04\x5e\x03\x5d\xbb\xaa\x9e\x02\xd6\xbb\xdb\x06\xcd\x5c\xdb\x18\xcb\xb0\x3a\xce\x94\xe3\x4d\x5a\x4a\x4b\xb9\x81\x23\x69\x3c\x90\x7e\x58\x21\x10\x05\x79\x6f\xe6\xa3\x29\xdd\x12\x69\x41\x69\x07\x9e\x55\x6d\x30\x4f\xfe\x3d\x64\x91\x13\x89\x95\x1c\x48\x32\x24\x91\xb2\x01\x91\x7c\x9d\x9c\x31\x47\x24\x49\x2d\xcd\x79\xa2\x82\x2a\x43\x4d\xc5\xa9\x3e\x9f\xf6\xfb\x84\x7e\x1f\x0e\xb7\x33\x58\x18\x5d\xc2\x7e\x9f\x58\x5d\x9b\x0c\x0f\x87\x49\x32\xfd\x81\x8d\xc9\x24\xb2\xe6\xac\x2c\xba\xf3\x64\xb5\xe6\x19\x93\x76\x64\x47\x52\xb1\xfd\x8b\xf3\xf5\xac\xe4\x72\x9b\x0a\xee\xa7\x52\xa7\xd7\xa8\x46\x55\xa6\x1d\xe0\x77\x00\xef\x38\x4f\xf9\x5a\x95\xc2\xd8\x95\x28\xd2\x42\x67\xa2\x88\x48\xbc\x69\xa8\x7a\x45\x64\x08\x12\xd6\xcb\xe3\xdd\xb0\x11\x45\x8d\x76\xa2\x40\x85\x6e\xab\xcd\xfa\x6c\x91\x52\x39\x34\x0a\x1d\x08\x47\xea\xd6\xa6\x18\xd1\xb5\xcb\xa8\x69\x26\x54\x86\x45\x11\xcd\x67\x97\xbf\x24\xf0\x83\xa7\xa1\xa2\xb2\xdb\x39\x55\xc0\x42\xc8\x38\xf7\xd7\x5d\x6a\xcf\x65\x1e\xee\x62\x59\x15\xe8\x10\x6c\x4d\x47\xba\xa8\x8b\x62\x97\xc0\x55\xad\xe0\x73\xdb\x18\xb4\x35\xf3\x67\xca\x04\x06\x4b\xbd\x41\xa8\x84\x71\x52\x14\xc5\xae\xeb\xa9\x84\xb5\xe8\x86\x4f\xa1\x87\xd4\x37\x68\xa9\x75\xc2\xd5\xb1\x3a\xea\xe9\xd3\xa7\x4f\x5f\xbe\x7c\xf9\xb2\x77\x16\x3d\x1d\xae\x79\x2b\x10\x01\x11\x4e\x92\xca\xa3\x05\xcc\xa7\x98\xa8\x31\x4d\x0e\x61\x1e\xe1\x8d\x33\xec\x64\xe7\x9f\x75\x7f\xef\x74\x21\x83\xe7\x7d\xd3\x2f\xe6\x06\x4f\x7c\xb2\xbc\x31\xfb\x1d\x89\x3c\xc3\x82\x99\x2e\x4b\xa1\xf2\x94\x9b\x2a\xae\x2a\x29\xca\xa5\xc2\xa5\x54\x89\x44\x84\xee\xf7\x49\x56\xe6\x87\x43\x68\xc5\xf6\xfb\x84\x36\xba\x5d\x85\x87\x03\x47\x4a\xda\x7b\x38\xdc\x26\xc9\xa0\x6c\x2e\x1f\x77\x69\xe3\xcf\x23\x63\xa8\xfd\x9e\x8a\xd9\x20\x80\x40\x1e\x0e\xb7\xb0\x12\x61\xd0\xd0\x57\xb8\xbd\x21\xd3\xa5\xc7\xe7\x56\xaf\x9b\x75\xb8\x17\x40\x92\x0c\x34\xa1\x41\x44\x73\xa0\x7f\xa6\x8a\x1d\xcf\x29\x4a\x36\xd4\x71\x35\x6f\x3a\x8a\x7b\x15\x1d\xd4\x33\xc7\x0a\x55\x8e\x2a\x7b\x88\x39\xbb\x4d\xe7\xcb\xe9\xae\x48\xd4\xa6\xaf\xef\x15\xf3\x35\x8e\x73\x3f\x0a\x0a\x0c\xb5\x89\xd5\x65\xaf\x8f\x66\x20\xf7\xab\xfe\x3f\xcc\x11\x8d\x3e\x0f\xf3\x93\xaf\x3b\xc1\xbb\x61\xee\xcf\x39\xc3\x89\x37\x23\x86\x64\xf8\x1c\x6f\x4e\xa6\x59\xe7\x9c\xe4\x10\xaa\xd0\x3b\x9f\x9b\x73\x18\x91\xcf\x00\x6d\x6f\x3e\x84\x05\xf2\xda\xd0\x49\x06\xb1\xfd\xfa\xe7\xaf\xf3\xb7\x46\xc7\x85\xae\x55\x9e\x06\xbc\x21\x52\x45\x1d\xa0\x40\x17\x8d\xc1\xdb\x95\xcc\x56\xb0\xe5\xf9\x3d\xe1\xca\x7d\xdd\xe8\x56\x08\x59\x6d\x0c\x19\xa6\x51\xb0\x19\x27\x70\x92\xf2\xbf\x89\x83\xb0\xac\x0b\xd9\x6f\x72\x59\x10\xa6\x4d\x69\x18\x63\xc6\x26\xc1\x7e\x95\x9b\x09\xe8\x4d\xc2\x0c\x72\x87\x9f\xcf\x40\x14\xfd\xd2\xb7\x3d\x36\xc2\x61\xda\x1d\x41\x08\x08\x83\xad\xad\x9f\x75\x9e\x0e\xb9\x34\x98\xb9\xe0\xfd\xc6\xcf\x81\xc7\x26\xec\x6f\xae\xae\x2e\xaf\xae\x23\xb8\x5f\x9e\xfe\x07\x9e\x1c\xee\x2c\xbc\x7c\x39\x90\x7e\x8c\x39\xbe\x68\x6b\xa5\xb7\x2a\xa5\x4a\x61\xfc\xaa\x13\x15\x99\x2a\xec\x4a\xa0\x1b\x9d\x83\x56\xc5\x0e\x6c\x5d\xf9\x77\xa0\x67\x3c\x70\x4d\xec\xce\x3a\x2c\x61\x2e\x55\x2e\xd5\xd2\x82\x36\xb0\x94\x6e\x55\xcf\x93\x4c\x97\xed\xb8\x79\x38\x5f\x1a\xd3\xe4\xcc\xcc\xa0\x70\x31\x98\xfc\x2e\x07\x4c\x72\xe4\x96\x5b\xe9\x56\xc0\x0f\x7a\x50\xa2\xb5\x62\x89\x2f\x68\x11\x8d\x39\x1c\x78\xac\xed\xd7\x32\x9d\xfb\x05\xfa\x31\xd2\xcd\xf4\x20\xf9\xbb\x32\x08\x29\xbf\x73\x53\xfe\x22\x48\x0b\xc4\x3c\x95\x6a\xa3\xd7\x31\x40\x3f\x72\xd8\xa2\x70\xe1\xc9\xf8\x42\xd2\x36\xd8\xae\xf8\x69\x28\x20\x75\xfe\x59\x2e\x2c\xfd\x35\x68\xd7\xb8\x6b\x67\x28\x54\xef\x0a\xa7\xcd\xd0\x7c\xa8\xa5\xe1\x71\xc3\xa7\xc6\x98\xb7\xe4\x8f\x81\xcf\xa8\xcc\x66\xc8\x98\x2a\xed\x7c\xb0\x8b\x08\x7c\xdb\x9f\x46\x72\xac\x66\x6a\xea\x77\x79\x1c\xd8\xaf\xa8\xc7\x84\x72\xf5\x5e\x4a\x5b\x0a\x97\xc5\xca\x77\x52\xb0\x75\x0f\xda\x90\xb3\x88\xbc\x89\xa7\x52\x9d\x8e\xbd\xfd\x7a\xc0\x00\xb9\x46\x3f\x58\x62\x21\x7c\xac\x1c\xde\x88\xa8\xec\x31\x39\x9a\xb2\xfa\xd5\x46\x8d\x61\x25\x42\xff\x4f\xee\x25\x0a\x19\x33\xdb\x85\x5f\xa5\x6b\x1e\x8e\xa4\x1d\x68\x92\xac\xf0\x9b\xb0\x74\xaf\x8e\x47\xa8\xb4\x61\xec\x82\xdf\x87\x79\x8f\xff\x39\xc5\xce\x0d\xc4\x11\x53\x5f\x3d\x04\xd0\x89\x5d\xf9\x2a\x78\x44\x4f\x2c\xf8\x29\x8f\x37\x25\x7e\x71\xa8\x6c\x03\x1a\xbf\x70\x0e\x23\x75\xbe\x46\x15\x9b\x2e\x31\x36\xc0\xec\xae\xf2\x12\xfd\xbb\x66\x88\xbd\xdd\x10\x39\x0c\x6b\xba\x4c\x46\xf9\x4d\x66\xbd\xeb\x3b\xd9\xa6\x1e\x7a\xea\x35\xe6\xdb\xd3\x4a\x8b\xe0\x3b\x52\x98\xeb\x42\x32\x63\x67\x65\xa1\x76\xad\x6f\x50\x10\xe9\x1d\xfb\xa8\x5d\xc3\x10\xb5\x85\x30\xaa\x46\x6d\x8a\x87\x7b\xae\x1f\x6c\x85\x16\xfa\xe6\xea\x57\x46\xc0\xa3\x2e\xbe\x4a\x9f\x8e\x7a\xec\x5b\xff\x58\x3d\x05\x48\x29\x8a\x85\x36\x65\xd4\x72\x6f\x9b\xf5\x21\x04\x09\x7c\x30\x3b\x10\x4b\x21\xd5\x58\x4b\x6f\x4c\xfa\xbb\xd5\xaa\x0d\xb6\x59\x99\x0f\xbc\x69\xfe\xf3\xfa\xf2\x1d\x48\x55\xd5\x0e\x72\xe1\x04\xbc\x0d\xd6\x78\x92\x95\xf9\x13\x0a\xbd\xc3\x92\x44\x25\x5b\x41\x5b\x9c\x07\xc7\x89\x3d\x53\xdf\x73\x37\x9a\xc3\x15\xb0\xc5\x79\xf0\x88\x19\x8f\xb6\x99\xac\x92\x44\x93\x09\xe5\xeb\x8d\x39\xfa\x8c\x8f\x79\x18\x7c\x74\x9b\x12\x78\x5f\xa0\xb0\x08\x75\x95\x0b\x87\x27\xa1\xcf\x69\xc8\xb4\xda\xa0\x71\x27\xe2\x9d\xee\xf3\x18\x33\x6c\x5f\xdd\xb3\x54\x6d\x9c\x8d\x6f\xea\x11\xc4\x49\x4a\xcf\x85\xc5\x1c\xb4\xea\x5f\x9f\xbb\xac\x46\x4d\x21\x55\x56\xd4\x39\x9e\xc0\x13\xf6\xe8\x14\xc6\x8d\xe1\x83\xc4\xf0\x45\x8b\x19\x22\xec\x4a\xe0\xc2\xf9\x2e\x52\xbb\x15\xd7\x14\x1c\x1d\x16\xb5\x0a\xb1\xa1\x09\x20\x33\x6f\x0b\xad\x30\x3c\xac\x96\xc4\x05\xbf\x54\x98\x4d\x89\x08\x01\x6b\x73\x76\x4d\x9c\xa3\x00\x9f\x92\xd4\xaf\x44\xcf\xc0\xbb\x60\x47\x6c\x75\xed\xfa\x41\x2f\x81\x8f\x5d\x32\x69\x42\x1e\x6d\x9b\xb5\x61\x91\xdc\xa3\x29\x7a\x46\xd2\x73\x50\xa7\x31\x53\x4a\x5d\x97\xc3\x34\x97\x66\x52\xb0\xbe\x57\x2d\xd2\xa3\xb5\x7b\xa5\xa5\xf2\xa5\xa1\x6f\x35\x1d\x86\x06\x87\x0a\xb2\x2e\x2c\xcd\xa8\x95\x6d\xb4\xb2\xdc\x1b\x1d\x47\xea\x61\x35\x32\xa1\x5c\x6a\xc5\x06\xd3\x5c\x67\x6b\x8c\x7d\x82\xf7\x83\x50\xcc\x55\x6c\x10\x5e\x33\x21\xc8\x92\x1b\x89\x91\x02\x59\x16\x98\x8a\xc2\xa0\xc8\x77\x29\x7e\x91\x36\xfa\xf5\xc2\x8f\x74\x31\x02\x25\x78\xca\x08\xef\x8f\xaf\xae\xde\x5d\xbc\xfb\x69\x7a\xd3\xd6\x6c\x78\x58\xdb\xb6\x15\x46\xb5\x93\x61\x83\x2e\x5a\x2a\x5f\xd1\x1a\x1d\xd4\xa7\x66\x24\x7c\x0b\x62\xe1\xd0\xf8\x32\xfd\x85\xcf\xa3\x94\xfc\x6f\x87\xee\x48\x90\xc7\x4f\x64\x0f\xce\x9c\xfd\x6f\x4d\x7a\x95\x32\xe4\xe8\xc6\x6f\x27\x4b\xa6\xe6\x20\xc7\xca\x60\x46\x61\x2e\x35\x58\x15\x22\x8b\xba\x2f\x55\xcf\x24\x47\x17\x79\xe8\x09\xf8\x45\xd2\x47\xc5\xe3\x51\xf8\x56\x16\x05\x58\xad\x15\x45\xd1\x4e\xc2\x0c\xaa\x10\x21\xad\x6f\x8a\x78\x98\x81\xdb\x23\x76\xd6\xa1\x98\x88\x3d\x58\xe2\x9c\x76\xc6\xae\x74\x5d\xe4\x04\xcf\xa2\x4b\xe0\xc6\xfa\xb9\x9e\x1f\x3a\xf0\x2b\x1f\x53\xf3\xaf\xf1\x81\x7e\x8b\x88\xe9\x47\x8e\x92\x70\x79\x09\x54\xb9\xde\x6d\xb3\xe8\xd2\xf9\x38\xf7\x00\x91\x1c\x7f\xc4\x66\xf0\xf0\xc6\x84\xf2\xfe\xe6\x40\x9b\x01\x52\xf3\x1d\x5f\xff\x03\xbe\x71\x60\x85\x2c\xa5\x4b\xe5\x52\x69\x13\x85\xd4\xb8\x74\x08\xce\xbc\x85\x51\xf1\xaf\xd3\x56\x8a\xc2\xbf\x67\x37\x55\x7a\xb6\x12\x6a\x89\x62\x1e\xfd\x5e\xe8\xd7\x56\x62\xdb\xbb\xd9\x46\xef\x62\xe7\x67\x87\x2d\x8f\x04\x2e\x48\x3c\xf5\xbf\x13\x7c\x81\x11\xd8\xb4\xd0\xcb\xd4\xca\x3f\x62\x00\x0a\xbd\xbc\x96\x7f\x70\x6a\xf5\x1b\x8e\x34\xee\x5c\x54\x28\x7e\x0b\x5e\xa2\x69\x3f\x68\x7c\xce\x09\xfb\xbb\xe7\x93\xa1\x94\x58\x6a\xb3\x1b\x42\xe3\x29\xce\x05\xf4\xdd\xf7\x7f\x67\x48\x7f\xfb\xee\xfb\xc9\x98\x28\xff\xea\x3a\xd6\x7b\x85\xd5\xb3\xc0\x3c\xf7\xf6\xf9\xff\xe7\xf4\xdf\x38\x1e\x1e\xa3\xa5\x95\xd1\x15\x1a\x27\x31\x96\xaf\x9a\x08\xd8\x8b\x57\x7e\xf8\xea\x8c\xc4\x76\xfc\xea\x67\x72\x1d\xb3\x66\x4c\x7b\x7f\x4c\x6c\x42\x62\xae\xd9\xe1\x28\x32\x4a\x07\xba\x76\x56\xe6\x7c\x10\x1f\x8c\xd8\x48\x0b\xf3\x5a\x16\xf9\xf0\x0c\x8f\x55\xf1\xe1\xc0\x90\xdb\x4e\x0a\x05\xad\xf7\x1f\x05\x04\x75\x12\xd0\x83\xb5\x79\x32\xb9\xdf\x27\xe1\x6f\x1b\x73\xef\xf7\x49\x29\x55\x98\x53\xd1\x1f\x44\x36\xd2\xf5\x32\xd4\xa6\x1c\xf4\x97\x2c\x16\x26\x9a\x49\x42\xa0\xa2\xd2\xe8\x64\xa8\x70\x4f\x79\x1e\x9d\x1b\x9c\x35\x2c\x60\xb4\x61\x14\xc9\x73\xa6\xc1\xaa\xe6\xce\x94\xe9\x28\xc4\x9c\x94\x3b\x4d\xcf\x60\xb1\xc0\x8c\x4a\x57\xed\x56\xe8\x47\xd8\xe3\x90\x9a\xc9\xee\xe8\xa0\x2d\xa4\xc2\x93\xa1\x54\x53\x30\x64\x5a\x39\xc1\xdf\xc5\x29\x3d\x6d\x5a\xcc\xd2\x7b\x0f\x35\x6c\x94\x29\x20\xee\x7d\xc6\x08\x19\xe7\x74\xf4\xb6\x0d\xd3\x0c\x3f\x13\x0c\x44\xc7\x1d\xd7\xb8\x85\x7a\x1f\x5a\xa6\x7a\x83\xc6\xc8\x3c\xc7\x58\xfb\x48\x08\xfb\xdf\x5d\x76\x0f\x6d\xdd\xd6\xa6\x56\xe8\xbf\xa3\x4c\x3d\xa8\x54\xda\xb4\xaa\xe7\x85\x8c\x7d\x51\xee\x4f\x85\x69\x9b\xce\xd5\x7f\x5a\x2a\x2c\xf8\x8d\x77\xc6\x8b\x33\x0a\x17\x1c\x5b\xe6\x08\x1b\x69\xe5\xbc\xf0\xcd\x1c\x35\xb2\x14\x1d\xf9\x85\x90\x9a\xd8\x1d\x35\x46\x5a\x0d\x7c\xaa\xc9\x58\x43\x93\xb3\xc5\x79\x8a\x5f\xf8\xcb\x99\xe1\x34\x7e\xb7\x9d\xe1\xa6\x92\x3b\x5a\x95\xd3\xff\x9f\x7a\x3e\x77\xba\x4a\xba\x08\x61\x9a\x30\xf3\xc9\x3d\xfc\x29\x6c\x88\xf4\x02\xaf\xdf\xfc\xe3\xe6\xa7\xc9\x8d\x00\x53\x3f\xac\x0b\xc8\xe7\xcb\xd4\xa2\x30\xd9\x8a\x9a\xd6\xc6\x85\xda\x46\x2c\xf6\xaf\x85\x9a\x1d\xad\x0b\x1d\xb7\x6e\xcd\x6d\xa3\x08\xd4\x85\xda\x91\x62\x82\xa0\x9c\xde\xb3\x3f\xfb\x8e\x9d\x79\xbf\x08\x5a\x1b\x80\xfc\x93\xe6\xc0\xbf\x53\x79\x7d\xcf\x5c\x3d\x58\xe4\x05\xfc\xc8\x08\xba\x7f\x16\xc1\x4f\x79\xc4\xec\xa1\x00\x86\x3f\x31\x7e\x38\x86\xfe\xab\x69\xf3\xca\x1f\x20\x3d\xba\x7d\xf4\x9f\x00\x00\x00\xff\xff\x0e\x2b\xb7\x6d\xdc\x36\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 14044, mode: os.FileMode(420), modTime: time.Unix(1522270979, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json":   wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json":   wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json":   wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json":   wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json":   wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json":   wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json":   wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json":   wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json":   &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json":   &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json":   &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json":   &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json":   &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json":   &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json":   &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json":   &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
