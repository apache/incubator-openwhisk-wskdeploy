/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
    "io/ioutil"
    "os"
    "path/filepath"
    "strings"
    "time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
    gz, err := gzip.NewReader(bytes.NewBuffer(data))
    if err != nil {
        return nil, fmt.Errorf("Read %q: %v", name, err)
    }

    var buf bytes.Buffer
    _, err = io.Copy(&buf, gz)
    clErr := gz.Close()

    if err != nil {
        return nil, fmt.Errorf("Read %q: %v", name, err)
    }
    if clErr != nil {
        return nil, err
    }

    return buf.Bytes(), nil
}

type asset struct {
    bytes []byte
    info  os.FileInfo
}

type bindataFileInfo struct {
    name    string
    size    int64
    mode    os.FileMode
    modTime time.Time
}

func (fi bindataFileInfo) Name() string {
    return fi.name
}
func (fi bindataFileInfo) Size() int64 {
    return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
    return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
    return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
    return false
}
func (fi bindataFileInfo) Sys() interface{} {
    return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesDe_deAllJson,
        "wski18n/resources/de_DE.all.json",
    )
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
    bytes, err := wski18nResourcesDe_deAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5d\x6f\xdb\x3a\x12\x7d\xcf\xaf\x18\xe4\xc5\x2f\x81\xb6\xbd\x8b\x05\x16\x7d\x0b\x6e\xbf\x82\xb6\x69\x90\x64\x5b\x14\xdd\x02\x61\xc4\xb1\xc5\x9a\x22\x05\x92\x72\xe0\x1a\xfe\xef\x0b\x8a\x92\xed\x24\x14\x45\xc9\xb2\xb7\xbb\xb8\x7d\x72\x6c\xce\x39\x67\x86\xe4\x70\x46\x62\xbf\x9f\x00\xac\x4e\x00\x00\x4e\x19\x3d\x7d\x05\xa7\xef\x91\x73\x79\x7a\xe6\xbe\x32\x8a\x08\xcd\x89\x61\x52\xd8\xdf\xce\x05\x9c\x5f\x5d\x40\x26\xb5\x81\xbc\xd4\x06\xee\x11\x0a\x25\x17\x8c\x22\x4d\x4e\x4f\x00\xd6\x67\x4f\xe1\x3e\x31\xad\x99\x98\x41\x9a\x53\x98\xe3\xb2\x05\xb8\x19\x35\x49\x73\x3a\x01\x26\x8a\xd2\x54\xa3\xbd\x90\x79\x3d\x38\x27\x82\x4d\x51\x9b\x64\x49\x72\x0e\x53\xc6\xb1\x03\xdd\x63\xe0\x25\x20\xa5\xc9\xa4\x62\xbf\x2a\x00\xb8\xfb\xf0\xe6\xdb\x5d\x0b\xb2\x6f\xa4\x17\xf2\x21\x63\x7a\x5e\x05\xef\xee\xfd\xe7\x9b\xdb\x36\xbc\x67\xc3\xbc\x60\x82\xe4\xa8\x0b\x92\xb6\xf9\xbb\xfd\xbd\x4b\xcb\x97\x37\xd7\x37\x17\x9f\x2f\x23\xe4\x6c\x46\xfa\x67\xb9\x8e\x6c\x15\x54\x10\xd2\xc0\x54\x96\x82\x02\x31\x50\x10\x93\xc1\x6a\x95\x14\x4a\xfe\xc4\xd4\x5c\x11\x93\xad\xd7\xc9\xbf\x45\xdb\x5c\x0d\x40\x0a\x2e\xbc\xd5\xaa\x9a\xee\xf5\xfa\x6f\xf6\x93\xfd\x50\x41\x27\x30\xa2\xe6\x43\x50\x45\xc4\x99\xe9\xc7\x58\x26\x43\x87\xf7\x7d\xb5\x4a\xec\x08\x87\xf6\x23\x36\xda\x7d\xf0\xbc\xf2\xfe\xd5\x84\xa1\xd9\x69\xce\x00\xa6\x52\x01\xc5\x82\xcb\x65\x8e\xc2\xb4\xcb\x89\xb7\xef\x4d\x5f\x8a\x7d\x05\x3c\x45\xf0\x4a\xb0\x21\x53\xa5\x30\x2c\xdf\x84\x53\x97\x45\x21\x95\x41\x0a\xf7\x4b\xf8\x5c\xa0\x70\xbb\xaa\xe0\xc4\x4c\xa5\xca\xdb\xc5\x0c\xc3\xf2\x6f\x79\x3d\x77\xe2\x21\x23\x1a\xd2\x4c\x6a\x14\x40\xa0\x20\xca\xb0\xb4\xe4\x44\x6d\x88\xac\xa7\x96\x98\xa4\x56\x46\xbb\xb8\x7d\x10\xfd\x93\x27\xb6\xce\x35\xa6\x66\x59\xe0\x19\x68\x34\x60\x24\x08\x49\xf1\xa7\x6e\x9b\xb8\x48\x6b\x2f\xf5\xad\x55\x57\x9a\x0c\x85\x61\xa9\x4b\xe5\x73\x5c\x36\x31\x4f\xa5\x98\xb2\x59\xa9\x90\xb6\x47\xa3\x0f\x42\xab\x84\xcd\xd1\xda\x93\x38\x6c\xd7\x4a\xb7\x39\x25\xfa\xf2\x75\x18\x46\xf9\xb7\x5a\x25\xa4\x60\xf6\xaf\xf5\xfa\x0c\xa6\x4a\xe6\xf5\x57\x5a\x96\x2a\xc5\x50\xb6\x1d\x04\x15\x9c\xf7\x66\xae\x34\x9a\x1d\x80\xd2\x64\x71\x62\xa2\x21\xe2\xa6\x62\xb5\x4a\x36\x7f\xef\x7a\xb4\xf9\x32\x4e\xd5\x70\x4c\xaf\xcc\xb7\x84\x71\xa4\x76\x27\xcd\xd0\x9d\x0c\xcf\x36\x9c\x76\xb0\x36\x2d\x7d\xad\xd2\x92\x46\xb5\x60\x29\xbe\xb2\x4c\xa8\x54\x48\xf1\x68\xf0\x5e\xf1\x37\x86\xa8\x2a\x0b\x94\x22\x27\x4a\x67\x84\xef\x24\x4f\x26\xa6\xd2\x41\x73\x99\x12\x0e\x0b\xc2\x4b\xd4\xed\x52\x07\x82\xb5\x24\xbd\x10\x04\x13\x06\x95\xc0\xd0\x79\x15\x6d\xef\xa5\x7f\xbd\x39\xd0\x20\x95\x79\xc1\xd1\x86\x5b\x97\x69\x8a\x5a\x4f\x4b\xce\x97\xed\xcc\x51\xa6\x5e\xd2\x77\xd2\x00\x2a\x25\x15\xa4\x0a\x89\xb1\x07\x6e\x41\xd2\x39\x99\x21\x3c\x30\x93\xd5\xbf\xe5\xa8\x35\x99\xed\x4c\x2e\x10\x41\x1b\x3b\x49\xdd\x0f\xf6\x43\x68\x55\x1d\x84\x2a\xd6\x29\x77\xde\xfd\x0f\xfb\xb4\xdd\x69\x7f\x72\x66\x27\xfa\x8d\x35\x6f\x91\xd5\x32\xd8\x0b\x7c\x21\x16\x84\x33\x5a\xf7\x79\x72\x0a\xdf\x3a\x1a\xb8\x80\x41\xf4\x6c\x14\xec\x18\x53\xb1\x1f\x4d\xac\x33\xaa\xe4\x47\xd9\x2c\x7b\xf2\x74\xb8\xa3\xd1\x54\x2c\x55\xb6\x37\xc4\x94\xda\x4e\xed\x81\x7d\x3b\x08\x69\xec\xbc\x19\xc5\x66\x33\x54\xc7\x98\xba\xfd\xa9\xfa\x3a\x35\x45\xa4\xc7\xf4\x6c\x4f\xbe\xbe\x67\xd3\x3d\x13\xd4\xfe\x7d\xc4\x7c\xbe\x3f\x65\xd7\xa9\x2f\xa7\xb6\xaf\x46\x41\x51\xa4\x4b\x6b\x4a\xb1\xb8\x24\x39\xae\xd7\x40\x19\xad\x8b\x7b\x77\xba\xdb\xc3\x7d\x73\xb6\xc3\x75\x29\xe0\x6e\xdb\x03\x36\xbd\xf1\x9d\xad\x8b\x14\xe6\x72\x81\xae\x15\x24\x9c\x2f\xeb\xd6\x1d\x29\x10\xad\xd1\x04\x4a\xab\xdf\x41\x59\x20\x64\x3b\xa7\xfa\x6a\x95\xc8\xd2\x14\xa5\x59\xaf\x21\x49\x92\xa0\x3f\x01\xb3\x0e\xb2\x2a\x2d\xf5\xa5\xf2\x1a\x75\x10\x3d\xda\x53\x7d\x09\x83\xc6\x1d\xc4\xcd\x52\xef\xcb\xd9\x66\x17\x49\xd7\xec\xac\xa1\xb4\x6d\xf6\x1d\xf4\x8f\x57\x74\x2f\xe6\x80\xa9\xbf\x78\xfb\x90\xc0\x9f\x44\xa4\xc8\x79\x6d\xde\xf9\xf0\x2b\x68\xd2\x41\x62\x0d\xe2\x1e\xb1\x85\x6d\x5a\xba\xa4\xed\xa0\xf0\xee\x0f\x34\x4a\x3d\x20\xba\xb2\xa6\x4b\x23\x03\x3a\xa5\x36\xc3\xdf\xd7\xeb\x06\xe1\xf9\x12\xdc\xe6\xe3\xf6\xe5\x1b\x6b\xdd\xed\xff\xd0\xe3\x20\x2e\x34\x7b\xa0\x77\x94\x11\x14\x39\x1e\xa7\x1b\x1c\x8f\x29\xd6\xa5\x03\x57\xea\x63\xf1\xfc\xd5\x85\x3c\x89\xe7\xe1\xbb\x90\x11\xa9\xfa\x3a\x75\xe0\x2e\x64\x6c\xbe\x58\xf7\x0e\xff\x84\x6c\x44\x2a\xaf\x53\x5f\xcf\xaf\x2f\x2f\x2e\xdf\xbd\x82\xdb\x0c\x61\xe2\x9e\x37\x4f\xe0\xdb\xf9\xa7\x8f\xee\xd9\xb9\xd8\x84\x14\x85\x61\xa6\x7a\x9a\x4e\xb1\x50\x98\x12\x83\x34\x81\x2b\x8e\x44\x23\x94\x1a\x61\x62\x83\x3e\x01\x26\xb4\x41\x62\x6b\x77\xa0\xa8\x53\xc5\xee\x91\x5a\x1c\x5d\x60\xca\xa6\xf5\x7b\x98\x40\xb7\xf1\xdf\x54\x14\x3b\xef\x4d\xa1\x79\xc4\xf9\x1f\x8f\xb2\xad\x8e\xf2\x15\xb2\x19\xd1\x70\x8f\x28\x1e\xd5\x46\x9b\xfe\x2c\x58\x5d\x0d\x83\xf3\x8a\xbb\x0a\xd4\xf7\x43\x15\xee\x87\x19\x94\x39\xa6\xbc\x11\x64\xdd\xd6\xdb\x65\x0c\x59\xc3\xb0\x82\xb2\x9e\xf5\xa7\xfb\x6a\x1b\x00\xe8\x15\x78\xfd\xb4\x63\x1f\x2a\x6c\x00\x90\x57\xd0\xf9\xf3\xa7\x15\x43\x25\x0d\x82\x8a\x48\x1c\xdb\x0a\xdd\x0f\xd7\x34\x96\xf1\xb9\xa3\x1f\x62\xd7\x06\xa8\x8f\x8e\x5d\xb4\xba\xfb\x8b\x5a\xf3\x61\xf3\xe0\x2a\xb2\x55\x64\x2f\xda\x08\xc3\x8e\x55\xe2\x5a\x8e\x5e\xa4\x91\xc6\x1d\xef\xa2\x99\x58\xc8\x39\x56\x65\xb4\x2b\xc4\x32\x14\x47\xaa\x09\x8f\x2c\x22\x5c\x53\x7d\x22\x82\x12\x23\xd5\x12\xa6\x0c\x39\x85\x26\xa9\x7f\x41\xa5\x6d\x98\x9b\xcb\x9a\x3a\xf4\x32\x79\x28\x5a\x58\xda\x53\xe3\xe6\x26\x13\x59\xb8\xda\xc8\x86\x2d\x2d\x95\xb2\x7d\xf8\xf6\xb1\xed\xc2\x8d\x8e\x10\xbb\x37\xfe\xb0\xc8\x7e\x64\x29\x0a\x8d\x23\x45\xb6\x05\x2d\x2e\xb2\x8d\xf1\xa1\x22\x3b\x18\x3f\x2c\xbf\x81\x5d\xad\x12\xee\x3e\x5e\xbc\x5e\xaf\x1b\x16\x02\xee\x95\xaf\x14\x18\x21\xb5\x17\x96\xff\x52\x31\xe6\x52\x2d\x6f\xd8\x2f\xb4\x9d\x38\x67\x39\x33\xda\x3a\xd9\x5c\x04\x04\x9d\xc9\x92\x53\x3b\x39\x44\x54\x37\x2b\xec\xa6\xbe\x47\xf3\x60\x33\xd6\xcb\x3f\xfe\x59\x6d\xdf\x7f\xbc\xfc\xa3\x5d\xed\xa8\x14\xfe\xdb\x87\x2c\x47\xe9\xde\x90\xf7\x86\x7f\xf1\xa2\x82\xff\xfb\x0b\xfb\x2f\x70\x29\x71\x4c\x0a\xaf\x13\x5c\xce\x86\xc6\xc8\xe1\xbf\x0c\xc8\x1f\x09\x3c\xbc\xb2\x9b\xeb\x0a\x15\x83\xbb\x0d\x38\xa9\xe3\x36\xb1\xcc\xf5\x13\xba\x5d\x66\xa6\x81\xcd\x84\x54\x3b\x7d\x65\x9a\x61\x3a\x77\x07\x42\x4c\x13\x7b\x18\xd2\xfe\x8e\x6e\x57\xf9\x71\x7d\x1d\x85\xb7\xbf\xbb\xf5\x82\x3a\xae\xaf\xfb\x93\x76\xa5\xe6\x6a\x6b\xb8\x74\x9a\x33\x23\x5c\x5d\xbc\xb9\xef\x99\x11\x31\x23\xf7\x1c\x81\x68\x77\xb7\xf6\xe1\x0c\x1e\x32\x96\x66\xf0\xc0\x38\xb7\xfb\xa7\xe1\x8f\x49\xdd\x23\x72\x79\xdd\xaa\xae\xb0\xcb\x69\x75\x5e\x25\x73\x5c\x86\x6e\x1a\xf9\xc7\x76\xc3\xa6\xa8\x4c\x34\xee\x76\x70\xf0\x46\x68\x33\x9e\x14\x05\x6f\x6e\x15\x57\x37\x5b\xab\x3e\xc5\xbd\x56\xb2\x87\x9c\xd8\x79\x55\xe7\x2e\xf2\x13\x53\x5d\xd9\xdf\x7e\xfd\x96\xd9\xd2\xfe\x07\x50\x89\x2e\xac\x39\x31\x69\x56\xa1\x77\x33\x35\xff\x49\x60\xed\xc8\xf2\x47\xff\x67\xa0\xa6\x6a\xbe\xac\x89\xda\x5e\x08\xfd\x5f\xb8\x66\x27\xed\xe4\xe4\xc7\xc9\x7f\x02\x00\x00\xff\xff\x9b\xad\x0e\xe5\x3b\x35\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesEn_usAllJson,
        "wski18n/resources/en_US.all.json",
    )
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
    bytes, err := wski18nResourcesEn_usAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 13627, mode: os.FileMode(420), modTime: time.Unix(1507040831, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesEs_esAllJson,
        "wski18n/resources/es_ES.all.json",
    )
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
    bytes, err := wski18nResourcesEs_esAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesFr_frAllJson,
        "wski18n/resources/fr_FR.all.json",
    )
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
    bytes, err := wski18nResourcesFr_frAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesIt_itAllJson,
        "wski18n/resources/it_IT.all.json",
    )
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
    bytes, err := wski18nResourcesIt_itAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesJa_jaAllJson,
        "wski18n/resources/ja_JA.all.json",
    )
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
    bytes, err := wski18nResourcesJa_jaAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesKo_krAllJson,
        "wski18n/resources/ko_KR.all.json",
    )
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
    bytes, err := wski18nResourcesKo_krAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesPt_brAllJson,
        "wski18n/resources/pt_BR.all.json",
    )
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
    bytes, err := wski18nResourcesPt_brAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesZh_hansAllJson,
        "wski18n/resources/zh_Hans.all.json",
    )
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
    bytes, err := wski18nResourcesZh_hansAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesZh_hantAllJson,
        "wski18n/resources/zh_Hant.all.json",
    )
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
    bytes, err := wski18nResourcesZh_hantAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
    cannonicalName := strings.Replace(name, "\\", "/", -1)
    if f, ok := _bindata[cannonicalName]; ok {
        a, err := f()
        if err != nil {
            return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
        }
        return a.bytes, nil
    }
    return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
    a, err := Asset(name)
    if err != nil {
        panic("asset: Asset(" + name + "): " + err.Error())
    }

    return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
    cannonicalName := strings.Replace(name, "\\", "/", -1)
    if f, ok := _bindata[cannonicalName]; ok {
        a, err := f()
        if err != nil {
            return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
        }
        return a.info, nil
    }
    return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
    names := make([]string, 0, len(_bindata))
    for name := range _bindata {
        names = append(names, name)
    }
    return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
    "wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
    "wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
    "wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
    "wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
    "wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
    "wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
    "wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
    "wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
    "wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
    "wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
    node := _bintree
    if len(name) != 0 {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        pathList := strings.Split(cannonicalName, "/")
        for _, p := range pathList {
            node = node.Children[p]
            if node == nil {
                return nil, fmt.Errorf("Asset %s not found", name)
            }
        }
    }
    if node.Func != nil {
        return nil, fmt.Errorf("Asset %s not found", name)
    }
    rv := make([]string, 0, len(node.Children))
    for childName := range node.Children {
        rv = append(rv, childName)
    }
    return rv, nil
}

type bintree struct {
    Func     func() (*asset, error)
    Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
    "wski18n": &bintree{nil, map[string]*bintree{
        "resources": &bintree{nil, map[string]*bintree{
            "de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
            "en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
            "es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
            "fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
            "it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
            "ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
            "ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
            "pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
            "zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
            "zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
        }},
    }},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
    data, err := Asset(name)
    if err != nil {
        return err
    }
    info, err := AssetInfo(name)
    if err != nil {
        return err
    }
    err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
    if err != nil {
        return err
    }
    err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
    if err != nil {
        return err
    }
    err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
    if err != nil {
        return err
    }
    return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
    children, err := AssetDir(name)
    // File
    if err != nil {
        return RestoreAsset(dir, name)
    }
    // Dir
    for _, child := range children {
        err = RestoreAssets(dir, filepath.Join(name, child))
        if err != nil {
            return err
        }
    }
    return nil
}

func _filePath(dir, name string) string {
    cannonicalName := strings.Replace(name, "\\", "/", -1)
    return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

