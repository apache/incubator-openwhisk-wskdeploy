/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x7b\x8f\x1b\xb7\x11\xff\xdf\x9f\x62\x60\x14\x70\x02\x9c\xd7\x4e\x8a\x02\x85\x81\x43\xe1\xd6\x6e\x72\x4d\xec\x33\xee\x91\x20\x70\x0e\x6b\x6a\x39\x92\x18\x71\xc9\x05\xc9\x95\xac\x1c\xd4\xcf\x5e\x0c\xb9\x2f\xe9\x8e\xbb\x94\x9c\xa0\xf9\x27\xf2\x71\x38\xbf\x79\x71\x38\x33\xdc\x8f\x4f\x00\xee\x9f\x00\x00\x3c\x15\xfc\xe9\x2b\x78\x5a\xda\x45\x5e\x19\x9c\x8b\xcf\x39\x1a\xa3\xcd\xd3\xb3\xb0\xea\x0c\x53\x56\x32\x27\xb4\x22\xb2\xb7\x7e\xed\x09\xc0\xee\x6c\x84\x83\x50\x73\x1d\x61\x70\x41\x4b\x53\xfb\x6d\x5d\x14\x68\x6d\x84\xc5\x75\xb3\x3a\xc5\x65\xc3\x8c\x12\x6a\x11\xe1\xf2\x73\xb3\x1a\xe5\x52\x94\x3c\xe7\x68\x8b\x5c\x6a\xb5\xc8\xab\x7a\x26\x85\x5d\x46\x98\x7d\x08\xab\xc0\xa0\x62\xc5\x8a\x2d\x10\x9c\x06\xb7\x44\x30\xb8\x10\xd6\x99\x2d\x58\x74\x20\x14\xfc\xf7\x45\xb6\xb1\xab\xca\xe8\xca\x66\xa9\xd0\x06\x2b\x6d\x5c\x04\xf9\xca\x2f\x5a\xd0\x0a\x38\x56\x52\x6f\x91\x03\x2a\x27\x9c\x40\x0b\x5f\x89\x0c\xb3\x33\xf8\x10\x64\xb2\x67\xf0\xba\xa0\x7d\xf6\x0c\x6e\x8c\x58\x2c\xd0\xd8\x33\xb8\xaa\x25\xad\xa0\x2b\xb2\xaf\x81\x59\xd8\xa0\x94\xf4\x7f\x83\x05\x2a\xe7\x77\xac\x3d\x9a\x25\xf9\x49\x27\x5b\x61\x21\xe6\x02\x39\x28\x56\xa2\xad\x58\x81\xe9\xba\x68\x1d\xd3\xe4\x35\x38\xad\x25\x19\x2e\x28\x72\x06\xb5\x0a\xbf\x80\x29\x0e\x76\xab\x0a\xd0\x15\xaa\xcd\x52\xd8\x55\x6b\x67\x0b\xb5\x15\x6a\x01\x0c\x4a\xa6\xc4\x1c\xad\xf3\xc4\xba\x22\xae\x4c\x36\xac\x4a\xd2\x64\x2e\x64\x47\xfe\xcb\xeb\x77\x3f\xa6\xc8\x6c\x97\xda\xb8\x53\x7c\xcf\x3a\xcf\xa7\xc3\x8c\xfa\xf9\x83\xd1\x6b\xc1\xd1\x02\x03\x5b\x97\x25\x33\x5b\x08\xf4\xa0\xe7\xb0\x59\x32\xf7\xcc\xc2\x0c\x71\x10\x05\x5f\xe6\xad\x46\xa4\x49\x77\x51\x5c\x3b\x0d\x4b\x94\x55\x03\x0d\x5b\x5d\x9b\x24\x4f\x91\x47\xd2\x65\x61\x9c\xc7\x44\xe1\x1c\x98\x02\xe6\x83\xfb\x0c\xe6\x88\xfc\x0c\x5c\x88\x70\xd0\x06\x4c\x2d\xbb\x03\xd9\x82\x1f\x03\x9b\xfb\x03\xb5\x1d\x43\x7f\xc1\x14\xdc\xdf\x67\x2b\xdc\xee\x76\x87\x50\x5e\xcf\x64\xbc\x35\x1a\x4b\x9c\x63\x61\x20\x94\xf3\xdc\x1b\x3a\x50\x75\x39\x23\x35\xe7\xb0\xb1\xab\xe0\x81\x71\xac\xb9\x64\x8b\x9c\x55\x22\x5f\x6a\x1b\x73\x6e\xf0\xdc\xeb\x0f\x17\xf0\xe9\xfb\xcb\xeb\x9b\x4f\x89\x1c\xc7\x65\x1f\x30\xfd\xe9\xed\xd5\xf5\xc5\xe5\xfb\x24\xbe\xb5\x5b\xe6\x2b\x8c\x59\x9f\x96\xb5\x11\xbf\xfb\x3f\xc0\xa7\x1f\xde\xfe\x92\xc2\xb4\x40\xe3\x72\xef\x96\xc7\xb9\x56\xcc\x2d\xc9\xa4\x64\xe8\x8c\x88\x13\x7c\x18\x18\x6b\x35\x17\xb1\x2b\x27\x2c\x7a\x56\xf0\x15\xc7\x39\xab\xa5\x03\x61\xe1\x2f\xdf\x5f\xbe\x7b\xdb\x5f\x0c\x5f\xa7\x58\x45\x4a\xbd\xc9\x1b\x1e\xb1\x8b\xd2\x13\x41\x47\x34\xcd\xb5\xcf\x96\x63\x76\xe9\x32\x74\x97\x56\x13\x58\x0b\xe5\xd0\xd0\x09\x5d\xc7\x6c\x1e\xa4\x1d\xd0\x41\x65\x74\x59\x25\x09\xbe\xc2\x6d\xb2\x3b\x57\xb8\x4d\x15\x3a\x58\xb9\x64\x8a\x2d\x30\x96\x7c\x82\xd8\x95\xd1\xbf\x61\xe1\xfa\xab\xd7\x69\x98\x51\x0a\x30\x2b\xe4\xd0\x72\x98\x46\xec\xd2\xd3\xb8\xfd\x8f\x48\x2d\x9e\x6d\x97\xfa\x23\x7c\xfb\xf5\x69\x5e\x8d\xaa\x13\x12\x5a\x34\x6b\x34\x12\xad\x6d\x6d\x93\xc0\xda\x3a\x23\xa2\x9c\x83\xa1\x6b\x8b\x86\x42\x5a\x28\xe4\x60\x6a\xe5\x44\xd9\xe5\xc2\x04\x04\xa7\x17\x0b\x89\x39\x5d\x57\x11\x98\x1b\x4f\x01\xdf\xd3\x85\x56\xa2\xb5\x6c\x91\x1e\x29\x6b\x34\x33\x6d\x63\x46\x6e\x56\x41\xd7\xae\xaa\xc7\xcc\xe1\xd3\x44\x5e\x0a\x4b\x17\xa6\x4f\x80\xf1\xfc\x77\xb3\x44\x20\x0a\x0a\xbc\x22\x24\x41\x0a\x70\x61\x41\x69\x07\x81\x55\x6d\x90\x67\xbf\x8e\x99\xe7\x00\xb1\x12\x23\x77\x03\x21\x52\x12\x27\x92\x2f\xc3\x99\x8a\x4a\x42\xea\x68\x4e\x83\x6a\x54\x19\xeb\x48\x0e\xf5\xf9\x78\x7f\x9f\xd1\xef\xdd\xee\xee\x0c\xe6\x46\x97\x74\xb1\x5b\x5d\x9b\x02\x77\xbb\x24\xcc\xe0\xb0\x29\x4c\x22\x6b\x7d\x65\xd1\x9d\x86\xd5\x99\x67\x0a\x6d\xcf\x8e\xa4\x62\xf7\x87\xe3\xf5\xac\x55\xc9\x8c\x5d\x32\x29\x73\xa9\x0b\x26\x23\xb0\xb7\x2d\x19\x5c\x56\xa8\x7e\xf6\xb7\x3f\x49\x19\xc0\xfc\x4e\x58\x33\x59\xa3\x4d\x45\x53\xe8\x36\xda\xac\x4e\xc2\xf3\x17\x8b\x42\x37\x8a\xd5\xdf\x6b\x79\xc1\x54\x81\x52\x46\xf3\xfe\xe5\x0f\x19\xfc\x2b\xd0\x50\x59\xdb\xef\x4c\x05\x98\x33\x11\xe7\xfe\xa6\xbf\x60\xb9\xe0\x4d\xe0\x97\x95\x44\x87\x60\x6b\x6a\x7f\xe7\xb5\x94\xdb\x0c\xae\x6a\x05\x9f\xba\xca\xaf\x6b\x99\x3e\x51\x0e\x36\x58\x6a\xba\x46\x99\x71\x82\x49\xb9\xed\x7b\x03\x66\x2d\xba\x71\xb3\x0f\x24\x0d\x8d\x46\x6e\x1d\x73\x75\xac\xd6\x78\xfe\xfc\xf9\xf3\xf3\xf3\xf3\xf3\x81\xed\x07\x3a\x5c\xfb\xad\x40\x04\x44\x98\x84\xea\x87\x00\xc8\x53\x4c\xd4\x9a\x86\x43\x33\x39\x08\xc6\x19\x8f\xaa\xd3\x7d\x3d\xdc\x9b\x0e\x32\xea\xef\xdb\x01\xe5\xb8\xc7\x93\xf1\xa6\xec\xb7\x07\x79\x82\x05\xdb\x1a\x24\xf7\x7d\xdd\x74\xed\x78\xeb\xdb\x3f\x4a\x3d\x54\x23\xec\x76\x77\x30\xd7\x26\xf5\xdc\x1c\x80\x0d\x15\x3d\x0a\x2e\xd9\x75\xa1\xe5\xcb\xdb\x13\x33\x31\x92\xea\x5a\xbf\x36\xb3\x12\xde\x92\x35\x2d\xf9\xd0\xa4\xdd\x19\x4c\x47\x8f\xcf\xb0\xde\xb4\xeb\xf0\xa8\x00\x59\x36\xd2\x5d\x37\x10\xad\x41\xfe\x48\x15\x7b\x9e\x29\x4a\xb6\xd4\x71\x35\x6f\x7b\x8a\x13\x14\xe5\x58\xa1\xe2\xa8\x8a\x63\xec\xd9\x6f\x1a\x02\x1d\x87\xd3\x9f\xc2\xa8\x51\xdf\x3c\x0a\xf3\x25\x91\xf3\xb8\x14\x94\x7b\x6a\x13\xab\xb3\x06\x99\x54\xcf\x23\xaa\xff\x1f\xaf\xa1\x56\x9f\xe3\x02\xe5\xcb\x3c\xf8\x30\x93\xfe\x31\x3e\x4c\x3c\x1a\x31\x49\xc6\xfd\xb8\x97\xd1\x4f\xf4\xe4\x44\x12\xa6\x36\xf6\xd4\x6b\xcd\x4b\x14\x2e\x99\xae\x4d\x1e\x93\x05\x78\x6d\xc8\x93\x0d\xec\xf0\xaa\xf8\xf3\xe2\xad\xd5\x71\xae\x6b\xc5\xf3\x46\xde\xf1\x01\xe0\x1b\x22\x8a\xe6\xa6\xcd\x52\x14\x4b\xd8\xf8\x89\x3a\xc9\xc5\x43\x39\xea\x96\x08\x45\x6d\x0c\x19\xa6\x55\xb0\x1d\x22\xf8\x4b\x2b\xfc\x26\x0e\xcc\x7a\x5d\xc8\x7e\xc9\xd7\x57\x18\x9d\x4c\x74\x72\xbf\xaa\x0f\x12\x99\xf5\x83\x96\xb5\xe0\xe8\x85\x22\x7a\x92\xdd\x5f\x97\x5d\x31\xf7\x0a\xa6\xb1\x46\xfb\xd4\x07\x58\x4c\x1d\xf6\xad\x4e\xaf\x50\x25\x00\x35\x43\xce\x88\x33\x34\x6c\x75\x0d\x06\xbd\xe7\x37\x4c\xb9\x7e\x5e\x05\x6e\x29\xec\x3f\xe0\xab\xed\x8b\xf7\x5f\x27\xe0\x4c\xb5\xa7\x0f\x55\x1a\x74\x59\x1f\xdb\xf9\x9e\xef\x70\xa8\xe9\x5a\xd4\x68\xdd\x5d\x02\x6e\xeb\xe4\xa3\x34\xec\xde\x4a\x12\x74\x7c\x7b\x75\x75\x79\x75\x1d\x61\x7f\x7e\xf8\x1f\x04\x72\x78\xb0\x70\x7e\x3e\x72\xb7\x1b\xb3\x9f\xc4\x56\x4a\x6f\x54\xee\xb6\xd5\xc8\x25\xd4\x26\x2b\xa2\x22\x8b\x35\xbb\x32\xe8\x47\xdb\xa0\x95\xdc\x82\xad\xab\xf0\xea\xf5\xc2\xcf\x94\x33\xbb\xb5\x0e\x4b\x98\x09\xc5\x85\x5a\x58\xd0\x06\x16\xc2\x2d\xeb\x59\x56\xe8\xb2\x7b\x80\x18\x2f\x46\x82\xc0\x6d\x56\x23\x47\xe6\x4a\xbb\x90\x07\x46\xfa\xea\x47\xcf\xbc\x50\x87\x13\x52\x9f\xe4\x3c\x2f\x5a\xdc\x7f\x01\x99\x12\xab\xa9\x93\x0a\x83\xcc\xc5\xac\xe7\xdf\x65\xc1\x93\xec\x65\xa2\x8d\x70\x4b\xf0\x0f\xba\xed\x30\xeb\x15\x2d\xa2\x31\xbb\x9d\x7f\x29\x0b\x6b\x85\xe6\x61\x81\x7e\x4c\x74\xff\x03\x91\x42\x7a\x1c\x15\x89\x3f\x48\x8e\x7f\x92\x48\x73\x44\x9e\x0b\xb5\xd6\xab\x98\x40\xff\xf6\x37\x15\x1d\x96\x40\xe6\xd3\x1d\x6d\x83\xcd\xd2\x3f\x9c\x35\x92\xb6\x2f\x47\x61\xe9\xcf\x91\x76\x85\xdb\x6e\x0c\x56\x32\xc5\x99\xd3\x66\x6c\xc4\xd7\xd1\xf8\x89\xd1\xc7\xd6\x98\x77\x74\x4c\x1a\x3e\x93\x98\x5d\x0f\x35\x15\xd7\xef\x86\xe1\x39\x88\x5c\xe6\xc0\x8f\x77\x07\x4d\xd5\x24\xa8\x3f\x48\xa5\xb0\x25\x73\x45\xec\x05\x75\xef\x1c\xd1\x06\xee\x21\xf8\xc8\x71\xf2\xeb\x6d\x63\xc7\x35\x86\xd9\xa0\x07\xf1\x6e\xf5\x37\x18\x11\x95\x03\x26\x7b\xc7\x2e\xac\xb6\x6a\x8c\x2b\xd1\xcc\x99\x29\xbc\x98\x14\x31\xb3\x5d\x84\x55\xca\x3e\x8d\x4b\xba\x01\x35\x61\x35\xbf\x49\x96\xfe\x4d\x76\x4f\x2a\x6d\xbc\xec\xe1\x1d\xd3\xef\x09\x3f\x53\xec\xdc\x8a\x38\x61\xea\xab\x63\x04\x3a\xb0\xab\x3f\x0a\x41\xa2\x67\x16\xc2\xa4\x30\x98\x12\x3f\x3b\x54\xb6\x15\x1a\x3f\xbb\xb6\xdd\xfe\x12\x55\x6c\xbe\xc0\x58\xe5\xd2\x1f\xe5\x05\x86\xe7\xd0\xe6\x4a\xe8\x1f\x05\x6c\xa8\xb3\xfa\x71\x94\x45\xb3\x16\xc5\xe0\xf8\x4e\x0a\x52\x1b\x79\xbc\xcb\xef\xef\xb3\xda\x48\xba\xc2\x76\x3b\xb8\xbd\xfa\xd1\x2b\x5f\x1b\xd9\xc4\x20\xfd\x8b\x6c\x16\x08\xee\xd2\x6e\x00\x12\xa4\x64\x72\xae\x4d\x19\x2d\xb5\xdf\xb5\xeb\x63\x12\x64\x70\x63\xb6\xc0\x16\x4c\xa8\x2c\x9b\x84\xfd\xcd\x6a\xd5\x65\xa9\xa2\xe4\x23\xcf\xb0\xff\xb9\xbe\x7c\x0f\x42\x55\xb5\x03\xce\x1c\x83\x77\x8d\x35\x9e\x15\x25\x7f\x46\x39\x6b\x1c\x89\x55\xa2\x03\xda\xe0\x2c\x0f\xc1\x12\x7b\x70\x0f\x41\x35\x88\xa9\xf6\x6d\x80\xc1\x06\x67\xdd\x77\x00\xaf\x3f\x5c\x78\xa2\x4a\xec\x76\x50\x30\x15\x6a\x87\x19\x86\x6b\x12\x79\xf3\x41\x42\xbf\x25\x83\xa6\xa0\xab\x2b\xce\xdc\xc1\x03\x3e\x05\x5b\xa1\xd5\x1a\x8d\xdb\x83\x76\x7a\xc8\x21\x5d\xcd\x13\x54\x6c\x43\xcc\x07\xf6\x9e\x70\x09\xca\xce\x98\x45\x0e\x5a\x0d\x53\xcc\x43\x46\x93\x26\x10\xaa\x90\x35\xc7\x3d\xd1\x98\xdd\xb3\x7c\xc4\x08\x3f\xbf\xbe\x7a\x7f\xf1\xfe\xbb\xf4\xba\xb3\xdd\x70\x5c\xe5\xb9\x61\x46\xe5\x85\x2e\xe9\xc6\xcc\x0d\xba\xe8\xb5\x7a\x45\x6b\xed\x8c\xb0\x28\xb9\x6f\xb5\xe6\x0e\x4d\xb8\xd2\x5f\x85\x5c\x46\x89\xe2\x6e\xec\xa0\x34\x78\xfe\x35\xe6\xe8\x64\x31\xfc\x22\x60\x38\xaa\xe4\xe8\xb0\x70\x13\x43\x02\x8f\x4c\x85\x04\xc7\xca\x60\x41\x5e\xce\x0d\x56\x92\x15\xd1\x24\x41\x37\x2d\xe1\x68\xc9\x9b\xfa\xc1\x3f\x40\x85\xa0\xd8\xcb\x4c\x41\xa6\x8d\x90\x12\xac\xd6\x8a\x22\xa9\x87\x39\x83\xaa\x89\x12\x1b\xaa\x28\x5f\xfc\xe2\x66\x8f\xa7\x75\xc8\x12\x15\x68\xcc\x71\x4a\xfd\x63\x97\xba\x96\x9c\xc4\xb3\xe8\x32\x08\x53\xdf\xfd\xde\x8b\xa8\xfd\xaf\x30\xff\x49\x92\xc8\xd3\x4f\xf8\x93\xe4\x0a\x08\x74\xd5\x3d\xac\xcb\x28\x23\xf9\xfd\xc7\x40\x52\x6d\x66\xd9\x7a\xd4\x83\x53\xa0\x7e\x7f\xeb\xd5\x76\xc8\xd0\x7e\x2f\x34\xfc\x50\x68\x5a\x30\x29\x4a\xe1\x72\xb1\x50\xda\x44\x45\x6a\xe3\xba\x49\x2a\x7e\x8b\x97\xca\xff\x3a\xac\xbd\x84\x85\x86\x5d\x2a\x7a\xb1\x64\x6a\x81\x6c\x16\xfd\xbc\xe3\xc7\x0e\xb1\x2b\xf6\x6c\xab\xb7\xdc\x86\xf9\x52\xc7\x23\x83\x0b\x82\xa7\x82\x39\x21\x16\xbc\x04\x36\x97\x7a\x91\x5b\xf1\x7b\x4c\x00\xa9\x17\xd7\xe2\x77\x24\xdb\x86\x0d\x7b\x1a\xf7\x21\xca\x94\x7f\x86\xa4\xe6\x62\x86\x6e\x83\xa8\xe0\xa5\x6f\x22\xbe\x79\x99\x2c\x4a\x89\xa5\x36\xdb\x31\x69\x02\xc5\xa9\x02\x7d\xf3\xed\xdf\xbd\x48\x7f\xfb\xe6\xdb\x64\x99\xa8\xde\xd2\x75\xac\x58\x6b\x56\x4f\x12\xe6\x65\xb0\xcf\x5f\x5f\xd2\x7f\xd3\xf2\xf8\x71\x40\x5e\x19\x5d\xa1\x71\x02\x63\x23\xdb\x36\x0d\x0e\xf2\x55\x18\xd0\x39\x23\xb0\x1b\xd1\x85\xd9\x42\xcf\xac\x1d\xe5\x3d\x9e\x13\xdb\x94\xc8\xb5\x0f\x38\xca\x8c\xc2\x81\xae\x9d\x15\xdc\x3b\xe2\xc6\xb0\xb5\xb0\x30\xab\x85\xe4\xe3\xb3\x08\xaf\x4a\x48\x07\x86\xc2\x36\x29\x15\x74\xd1\xbf\x97\x10\xd4\x41\x56\x6f\xac\xed\x27\x2c\xf7\xf7\x59\xf3\xd7\xd6\xdc\xd4\x11\x09\xd5\x34\xb6\xf4\x0f\x56\x4c\x94\xc9\x5e\xd4\xb6\xf7\x08\x87\x2c\x96\x26\xda\xd6\xa3\xa1\xa2\x62\xe2\xa0\x0b\x79\xa4\x44\x89\x36\x1a\x27\x75\x17\x5e\xda\x66\x76\xe1\x1b\x53\xfc\x2c\x6c\xf4\xf3\xb9\x07\x6d\xe9\x5e\x8a\x61\xd2\x20\xe3\x5b\x08\x2c\xba\xba\xc9\xa2\xc4\xc2\x01\x53\xda\x2d\xd1\xf8\x6d\x51\x91\xde\xbc\xfd\xe7\xed\x77\xc9\xe5\x90\xa7\x3e\xae\x16\xe2\xb3\xf0\x69\xdc\x1a\x8d\x98\xc7\xea\xa0\x9f\xfc\x62\xd3\xba\x3c\x0c\xa1\x46\xbf\xf1\x5c\x49\x40\xdd\xd3\x4b\x78\xa3\x9d\x7c\x62\xf3\x54\xaf\xa6\xb8\x0e\x1e\x7d\x46\xf9\x0e\x9f\x7e\xd2\x38\x5b\x64\xa6\x58\x12\xdf\x66\xd6\x9e\x73\x61\xb0\x18\x19\xc4\x5c\xb7\x3b\xba\x49\x7d\xb7\xe3\xc1\x43\x73\x6f\xc1\xde\x74\x4f\xee\x9e\xfc\x2f\x00\x00\xff\xff\x82\x2f\xfb\x96\x78\x31\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 12664, mode: os.FileMode(420), modTime: time.Unix(1518037319, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json":   wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json":   wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json":   wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json":   wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json":   wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json":   wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json":   wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json":   wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json":   &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json":   &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json":   &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json":   &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json":   &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json":   &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json":   &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json":   &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
