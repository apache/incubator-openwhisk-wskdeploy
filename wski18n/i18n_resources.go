/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x6f\xe3\x36\x16\x7e\xcf\xaf\x38\xc8\x4b\x5e\x02\xed\x4c\x17\x0b\x2c\xe6\x2d\xd8\xe9\x25\x68\xe7\x82\x99\xd9\x16\x45\x77\x80\xd0\xe2\xb1\xc5\x86\x22\x05\x92\x72\xea\x0a\xfe\xef\x0b\x92\x92\x2d\x27\x12\x45\xc9\xb2\x13\x14\xcd\x93\x63\xeb\x7c\xdf\x77\x0e\x6f\x87\xe4\xd1\x6f\x17\x00\xd5\x05\x00\xc0\x25\xa3\x97\x6f\xe0\xf2\x07\xe4\x5c\x5e\x5e\xfb\xaf\x8c\x22\x42\x73\x62\x98\x14\xf6\xb7\x1b\x01\x37\x1f\x6f\x21\x93\xda\x40\x5e\x6a\x03\x0b\x84\x42\xc9\x35\xa3\x48\x93\xcb\x0b\x80\xed\xf5\x63\xb8\x77\x4c\x6b\x26\x56\x90\xe6\x14\xee\x71\xd3\x03\xdc\x3c\x75\x95\xe6\xf4\x0a\x98\x28\x4a\xe3\x9e\xee\x84\x24\xa5\xc9\xa4\x62\x7f\x3a\x6b\xb8\xfb\xf1\xdb\x5f\xef\x7a\x60\xbb\x9e\xec\x84\x7c\xc8\x98\xbe\x77\xbe\xdd\xfd\xf0\xe1\xf3\x97\x3e\xbc\x27\x8f\x75\x82\x09\x92\xa3\x2e\x48\x8a\x3d\x28\xfb\xdf\x87\xb4\xfc\xfc\xed\xa7\xcf\xb7\x1f\xde\x47\xc8\xd9\x3d\xd9\xdd\x08\x44\xb0\x25\x6a\x03\x4b\xc6\x11\x84\x34\xb0\x94\xa5\xa0\x40\x0c\x14\xc4\x64\x50\x55\x49\xa1\xe4\xef\x98\x9a\x8f\xc4\x64\xdb\x6d\xf2\x3f\xd1\xd7\x50\x13\x90\x82\xfd\xa2\xaa\x92\x0d\xc9\xf9\x76\xfb\x0f\xfb\xc9\x7e\x70\xd0\x09\xcc\xa8\xf9\x14\x54\x11\x71\x66\xfa\x10\xcb\x64\xe8\xf1\x7e\xab\xaa\xc4\x3e\xe1\xd1\xbe\xc6\x46\x7b\x0c\x5e\xa7\xbc\xff\x36\x61\xc8\x6b\x5c\x6f\x00\x4b\xa9\x80\x62\xc1\xe5\x26\x47\x61\xfa\xe5\xc4\xdb\x8f\xa6\x2f\xc5\xb1\x02\x1e\x23\x74\x4a\xb0\x21\x53\xa5\x30\x2c\xdf\x85\x53\x97\x45\x21\x95\x41\x0a\x8b\x0d\x7c\x28\x50\xf8\x51\x55\x70\x62\x96\x52\xe5\xfd\x62\xa6\x61\x75\xca\xfa\xe5\xe6\xd3\xfb\xdb\xf7\xdf\xbf\x81\x4f\x35\x9e\x2e\x30\x65\x4b\x86\x14\x98\x80\xc6\x59\xf8\xf5\xe6\xdd\x4f\xd6\xfb\x9a\x75\xbb\x05\x2a\xd1\x33\xe7\xc4\xa4\x19\x3c\x30\x93\x01\x49\xdd\x6c\xa7\x65\xa9\x52\xf4\x3d\x07\xff\x30\x28\xb4\xfd\xb6\xaa\x12\xfc\xc3\xd4\x21\xab\x9f\xac\xaa\xc4\x7f\xda\x6e\x93\x7e\x77\x5f\x96\xc6\x70\x18\x7f\x71\x61\x7f\xeb\xfa\x03\x64\x44\x43\x9a\x49\x8d\x02\x48\x51\x28\x59\x28\x46\xcc\xbe\xe9\x0e\xb4\x2e\x88\x46\x0a\x52\xb8\xb1\x15\x14\x69\xb5\x99\x8c\x98\x0e\x81\x10\x11\xc4\xe7\x55\xd8\x3f\x44\xc5\xbe\x0b\x37\xf4\x66\x53\xe0\x35\x68\x34\x60\x24\x08\x49\xf1\x77\xdd\x37\x3c\x23\xad\x3b\xa9\xbf\x58\x7f\x4a\x93\xa1\x30\x2c\xf5\x0b\xf6\x3d\x6e\x9a\x91\x95\x4a\xb1\x64\xab\x52\x21\xed\x0f\xee\x18\x84\x5e\x09\xbb\xfc\x66\x24\x71\xd8\xae\x97\x6e\x97\x0b\x8c\xe5\x1b\x30\x8c\xf2\xcf\xf6\x88\x82\xd9\xff\xb6\xdb\x6b\x58\x2a\x99\xd7\x5f\xf9\x0e\x15\x5a\x53\x27\x41\x05\xdb\xbd\x69\x2b\x8d\xa6\x05\x50\x9a\x2c\x4e\x4c\x34\x44\x5c\x53\x54\x55\xb2\xfb\xbf\xed\xd1\xee\xcb\x38\x55\xd3\x31\x3b\x65\x7e\x47\x18\x47\x6a\x47\xd2\x0a\xfd\xfa\xff\x64\xc0\x69\x0f\x6b\x17\x1f\x3f\xc7\x68\x54\x6b\x96\xe2\x1b\x37\xad\x2a\x15\x52\x3c\x1b\x7c\xa7\xf8\xcf\x86\x28\x37\x0b\x94\x22\x27\x4a\x67\x84\xb7\x96\x48\x26\x96\xd2\x43\x73\x99\x12\x0e\x6b\xc2\x4b\xd4\xfd\x52\x27\x82\xf5\x4c\x7a\x21\x08\x26\x0c\x2a\x81\xa1\xac\x24\xda\xbe\x93\xfe\xed\x2e\x6d\x81\x54\xe6\x05\x47\x1b\x6e\x5d\xa6\x29\x6a\xbd\x2c\x39\xdf\xf4\x33\x47\x99\x76\x92\x7e\x2f\x0d\xa0\x52\x52\x41\xaa\x90\x18\x9b\x56\x15\x24\xbd\x27\x2b\xf4\x0b\xb4\xff\x2d\x47\xad\xc9\xaa\xd5\xb8\x40\x04\x6d\xec\x24\xf5\x3f\xd8\x0f\xa1\x5e\x75\x12\xaa\x58\xa7\xea\xb5\xef\xaf\xe5\x53\xc1\xce\xe1\xd0\x71\x34\xb1\xce\xa8\x92\x9f\xa5\xcb\x1d\xc9\x33\xe0\x8e\x46\xe3\x58\xdc\x9c\x69\x88\x29\x35\xc8\xe5\xa9\x7d\x3b\x09\x69\x6c\xbb\x19\xc5\x56\x2b\x54\xe7\x68\xba\xe3\xa9\xc6\x3a\xb5\x44\xa4\xe7\xf4\xec\x48\xbe\xb1\x33\xfc\x82\x09\x6a\xff\x3f\xe3\xac\x78\x3c\xe5\xd0\xda\x29\x97\x40\xb1\x40\x41\x51\xa4\x1b\x6b\x4a\xb1\x78\x4f\xfc\x0e\x94\xd1\x3a\x45\xf6\x6b\xa4\x5d\x22\x77\x2b\xa4\xdd\xcf\xc2\xdd\x83\xbe\xf7\xc7\x07\xbb\x73\x84\x3b\x9b\x5d\x28\xcc\xe5\x1a\xa1\x20\xca\x30\xc2\xf9\xa6\x3e\xe6\x40\x0a\x44\x6b\x34\x81\x04\xe5\x25\x28\x0b\x84\xac\xb5\x36\x56\x55\x22\x4b\x53\x94\x76\xc7\x9d\x24\x49\xd0\x9f\x80\xd9\x00\x99\x9b\x96\xc6\x52\x75\x1a\x0d\x10\x1d\x8c\xa9\xb1\x84\x41\xe3\x01\xe2\xa6\xab\x8f\xe5\xec\xb3\x8b\xa4\x6b\x46\xd6\x54\xda\x3e\xfb\x01\xfa\xc3\x1e\x3d\x8a\x39\x60\xda\x49\xfa\xe1\xc7\x04\xfe\x43\x44\x8a\x9c\xd7\xe6\x83\x07\x85\x41\x93\x01\x12\x6b\x10\x77\x1c\x19\xb6\xe9\xd9\x6b\xec\x1f\x0a\x8f\xfe\xc0\x76\x63\x04\xc4\xd0\xac\xe9\xa7\x91\x09\xfb\x8d\x3e\xc3\x97\xeb\x75\x83\xf0\xb4\x0b\xee\xe7\xe3\xfe\xee\x1b\x6b\x3d\xec\xff\xd4\xe5\x20\x2e\x34\x47\xa0\x0f\xa4\x11\x14\x39\x9e\x67\x4f\x35\x1f\x53\xac\x4b\x27\xce\xd4\xe7\xe2\xf9\x7b\x17\xf2\x28\x9e\xa7\xdf\x85\xcc\x48\x35\xd6\xa9\x13\xef\x42\xe6\xe6\x8b\x75\xef\xf4\xe7\x4c\x33\x52\x85\xef\x99\xbe\x64\x08\x57\xfe\xd4\xf6\xca\xdf\x7c\xb9\x13\x68\xb1\x0b\x29\x0a\xc3\x8c\x3b\x93\xa6\x58\x28\x4c\x89\x41\x9a\xc0\x47\x8e\x44\x23\x94\x1a\xe1\xca\x06\xfd\x0a\x98\xd0\x06\x89\xcd\xdd\x81\xa2\x4e\x15\x5b\xf8\x6b\xb5\xfa\x8e\xcd\xdf\x66\x04\x76\x1b\xcf\xa9\x28\xb6\xdd\x9b\x44\xf3\x8c\xed\x3f\x1f\x65\x5f\x1e\xd5\x95\xc8\x66\x44\xc3\x02\x51\x1c\xe4\x46\xbb\xfd\x59\x30\xbb\x9a\x06\xd7\x29\xee\x63\x20\xbf\x9f\xaa\xf0\x38\xcc\xa0\xcc\x39\xe5\xcd\x20\xeb\x4b\x3d\x5c\xe6\x90\x35\x0d\x2b\x28\xeb\xc9\xfe\xf4\x58\x6d\x13\x00\x3b\x05\x7e\x7a\xbc\x63\x9f\x2a\x6c\x02\x50\xa7\xa0\x9b\xa7\xa7\x15\x53\x25\x4d\x82\x8a\x98\x38\xf6\x19\x7a\x37\x5c\xb3\xb1\x8c\x9f\x3b\xc6\x21\x0e\x0d\x80\x7a\xe9\x68\xa3\xd5\xbb\xbf\xa8\x3e\x1f\x36\x0f\xf6\x22\x9b\x45\x8e\xa2\x8d\x30\x1c\xe8\x25\xbb\x22\x8e\x78\xd2\x48\xe3\x81\x1b\x5d\x26\xd6\xf2\x1e\x5d\x1a\xed\x13\xb1\x0c\xc5\x99\x72\xc2\x33\x8b\x08\xe7\x54\xef\x88\xa0\xc4\x48\xb5\x81\x25\x43\x4e\xa1\x99\xd4\x7f\x46\xe5\xca\x5a\x9a\xba\x53\x1d\xba\x92\x9d\x8a\x16\x96\xf6\xd8\xb8\xa9\xfa\x22\x6b\x9f\x1b\xd9\xb0\xa5\xa5\x52\x76\x1f\xbe\x3f\xb6\x5d\xfb\xa7\x23\xc4\x1e\x8d\x3f\x2d\xb2\x3f\xb1\x14\x85\xc6\x99\x22\xdb\x83\x16\x17\xd9\xc6\xf8\x54\x91\x9d\x8c\x1f\x96\xdf\xc0\x56\x55\xc2\xfd\xc7\xdb\xb7\xdb\x6d\xc3\x42\x60\x4d\x38\xa3\x20\x05\x46\x48\x1d\x85\xd5\x29\x2b\xc7\x5c\xaa\xcd\x67\xf6\x27\xda\x9d\x38\x67\x39\x33\xfa\xa0\x46\x4f\x67\xb2\xe4\xd4\x36\x0e\x11\xae\x3e\xc1\x0e\xea\x05\x9a\x07\x3b\x63\xbd\xfe\xe6\xdf\x6e\xf8\xfe\xeb\xf5\x37\xfd\x6a\x67\xa5\xe8\xae\xd4\x64\x39\xca\xd2\x4c\x82\x7f\xf5\xca\xc1\xff\xf3\x95\xfd\x0b\x14\x70\xce\x49\xd1\xe9\x04\x97\xab\xa9\x31\xf2\xf8\xaf\x03\xf2\x67\x02\x0f\xf7\xec\x5b\xe1\xfb\x9b\x63\xf0\x35\x75\x57\x75\xdc\xae\x2c\x73\x7d\x42\xd7\x66\x66\x1a\xd8\x4a\x48\xd5\xda\x57\xa6\x19\xa6\xf7\x7e\x41\x88\xd9\xc4\x9e\x86\x74\xbc\xa3\xfb\x5e\x7e\x5e\x5f\x67\xe1\x1d\xef\x6e\xdd\xa1\xce\xeb\xeb\xf1\xa4\x43\x53\xb3\x1b\x1a\x7e\x3a\xcd\x99\x11\x3e\x2f\xde\x55\x4d\x66\x44\xac\xc8\x82\x23\x10\xed\x2b\x54\x1f\xae\xe1\x21\x63\xae\x50\x99\x73\x3b\x7e\x1a\xfe\x98\xa9\x7b\x46\xae\x4e\xb7\x5c\xb9\xbf\x5c\xba\xf5\x2a\xb9\xc7\x8d\xab\xf9\xed\x91\xd5\xfd\xec\x30\x6c\x8a\xca\x44\xe3\xee\x1f\x0e\xd6\x55\x36\xcf\x93\xa2\xe0\x4d\x6d\xae\xab\x0f\x75\xfb\x14\x7f\xad\x64\x17\x39\xd1\xba\xaa\xf3\xf5\xcc\xc4\xb8\xd7\x1b\xf6\x5f\x7f\xc7\x6c\x6a\xff\xf5\x71\x59\xb9\x89\x62\x6a\x5e\xa8\xd8\x7a\xb2\xfc\xe0\xfd\x8a\x9a\xaa\xf9\xb2\x26\xea\xbb\x10\xfa\x4b\xb8\x16\x1e\x3b\x6d\xa2\x0e\xfd\xae\xd3\x6a\x29\x85\xed\xb9\xfb\xd3\xc4\x6b\x28\xf6\xa7\x89\xf5\x7b\x33\xcd\x71\x62\xc4\x20\x3a\x0d\xe9\x28\x47\x0f\x63\x77\x16\x37\x67\xa1\x8c\xbc\x7b\xf4\x65\xa2\xee\x20\x98\xa1\x0e\x5e\x0b\x02\x2d\x95\xdd\xf9\xe5\x44\x90\x15\xd2\xf6\x45\xfa\x89\xea\x66\x5e\xac\xdc\xee\xed\xbb\x7b\x17\xab\xf5\x2a\x46\xfb\x10\xc0\x4f\xed\xee\xa4\xdd\xfb\xe0\xea\x81\xdb\x5b\x8d\xa6\x0d\xf7\x2f\x98\x75\x0d\xde\x1d\xce\x02\xdb\x75\x06\xa1\x25\xe9\xf9\x75\x0d\x84\xcb\x74\x9d\x0f\xbd\x88\x80\x3d\x9f\xb2\x81\x90\xb5\xea\x84\xea\x8f\x2f\x25\x64\xcf\xa7\xcc\x86\xec\xe2\xe2\xeb\xc5\xff\x03\x00\x00\xff\xff\xaa\x98\xd2\x94\xc6\x3c\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 15558, mode: os.FileMode(420), modTime: time.Unix(1512779837, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

