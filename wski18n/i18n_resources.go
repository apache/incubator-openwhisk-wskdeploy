// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x7b\x8f\xdb\x36\x12\xff\x3f\x9f\x62\x10\x1c\x90\x16\xd8\x28\x69\x0f\x07\x1c\x02\x2c\x0e\xb9\xcb\x5e\xbb\xd7\x26\x1b\xec\xa3\x45\x91\x2e\x14\x5a\x1c\xcb\xac\x29\x52\x20\x29\x3b\xce\xc2\xf7\xd9\x0f\x43\x4a\xb2\xbc\xbb\x94\x68\xa7\xc1\xf5\x9f\x2a\xcb\xe1\xfc\xe6\x41\xce\x8b\xfe\xf0\x04\xe0\xee\x09\x00\xc0\x53\xc1\x9f\xbe\x82\xa7\x95\x2d\xf3\xda\xe0\x5c\x7c\xca\xd1\x18\x6d\x9e\x9e\x84\x55\x67\x98\xb2\x92\x39\xa1\x15\x91\x9d\xf9\xb5\x27\x00\xdb\x93\x11\x0e\x42\xcd\x75\x84\xc1\x39\x2d\x4d\xed\xb7\x4d\x51\xa0\xb5\x11\x16\x57\xed\xea\x14\x97\x35\x33\x4a\xa8\x32\xc2\xe5\xd7\x76\x35\xca\xa5\xa8\x78\xce\xd1\x16\xb9\xd4\xaa\xcc\xeb\x66\x26\x85\x5d\x44\x98\xbd\x0f\xab\xc0\xa0\x66\xc5\x92\x95\x08\x4e\x83\x5b\x20\x18\x2c\x85\x75\x66\x03\x16\x1d\x08\x05\xff\x7d\x91\xad\xed\xb2\x36\xba\xb6\x59\x2a\xb4\xc1\x5a\x1b\x17\x41\xbe\xf4\x8b\x16\xb4\x02\x8e\xb5\xd4\x1b\xe4\x80\xca\x09\x27\xd0\xc2\x37\x22\xc3\xec\x04\xde\x07\x99\xec\x09\xbc\x2e\x68\x9f\x3d\x81\x6b\x23\xca\x12\x8d\x3d\x81\xcb\x46\xd2\x0a\xba\x22\xfb\x16\x98\x85\x35\x4a\x49\xff\x37\x58\xa0\x72\x7e\xc7\xca\xa3\x59\x92\x9f\x74\xb2\x35\x16\x62\x2e\x90\x83\x62\x15\xda\x9a\x15\x98\xae\x8b\xd6\x31\x4d\x5e\x83\xd3\x5a\x92\xe1\x82\x22\x27\xd0\xa8\xf0\x05\x4c\x71\xb0\x1b\x55\x80\xae\x51\xad\x17\xc2\x2e\x3b\x3b\x5b\x68\xac\x50\x25\x30\xa8\x98\x12\x73\xb4\xce\x13\xeb\x9a\xb8\x32\xd9\xb2\xaa\x48\x93\xb9\x90\x3d\xf9\x6f\xaf\xdf\xfe\x9c\x22\xb3\x5d\x68\xe3\x8e\xf1\x3d\xeb\x3d\x9f\x0e\x33\xea\xe7\xf7\x46\xaf\x04\x47\x0b\x0c\x6c\x53\x55\xcc\x6c\x20\xd0\x83\x9e\xc3\x7a\xc1\xdc\x33\x0b\x33\xc4\xc1\x29\xf8\x32\x6f\xb5\x22\x4d\xba\x8b\xce\xb5\xd3\xb0\x40\x59\xb7\xd0\xb0\xd1\x8d\x49\xf2\x14\x79\x24\x5d\x16\xc6\x79\x4c\x14\xce\x81\x29\x60\xfe\x70\x9f\xc0\x1c\x91\x9f\x80\x0b\x27\x1c\xb4\x01\xd3\xc8\xfe\x42\x76\xe0\x87\xc0\xe6\xfe\x42\x6d\xc6\xd0\x5f\x30\x05\x77\x77\xd9\x12\x37\xdb\xed\x7d\x28\xaf\x67\x32\xde\x0a\x8d\x25\xce\xb1\x63\x20\x94\xf3\xdc\x5b\x3a\x50\x4d\x35\x23\x35\xe7\xb0\xb6\xcb\xe0\x81\x71\xac\xb9\x64\x65\xce\x6a\x91\x2f\xb4\x8d\x39\x37\x78\xee\xf5\xfb\x73\xf8\xf8\xe3\xc5\xd5\xf5\xc7\x44\x8e\xe3\xb2\x0f\x98\xfe\x72\x76\x79\x75\x7e\xf1\x2e\x89\x6f\xe3\x16\xf9\x12\x63\xd6\xa7\x65\x6d\xc4\x67\xff\x07\xf8\xf8\xd3\xd9\x6f\x29\x4c\x0b\x34\x2e\xf7\x6e\x79\x9c\x6b\xcd\xdc\x82\x4c\x4a\x86\xce\x88\x38\xc1\x87\x81\xb1\x56\x73\x11\x4b\x39\x61\xd1\xb3\x82\x6f\x38\xce\x59\x23\x1d\x08\x0b\x7f\xf9\xf1\xe2\xed\xd9\x2e\x31\x7c\x9b\x62\x15\x29\xf5\x3a\x6f\x79\xc4\x12\xa5\x27\x82\x9e\x68\x9a\xeb\x2e\x5a\x8e\xd9\xa5\x8f\xd0\x7d\x58\x4d\x60\x2d\x94\x43\x43\x37\x74\x15\xb3\x79\x90\x76\x40\x07\xb5\xd1\x55\x9d\x24\xf8\x12\x37\xc9\xee\x5c\xe2\x26\x55\xe8\x60\xe5\x8a\x29\x56\x62\x2c\xf8\x04\xb1\x6b\xa3\xff\xc0\xc2\xed\x52\xaf\xd3\x30\xa3\x10\x60\x96\xc8\xa1\xe3\x30\x8d\xd8\x87\xa7\x71\xfb\x1f\x10\x5a\x3c\xdb\x3e\xf4\x47\xf8\xee\xd6\xa7\x79\xb5\xaa\x4e\x48\x68\xd1\xac\xd0\x48\xb4\xb6\xb3\x4d\x02\x6b\xeb\x8c\x88\x72\x0e\x86\x6e\x2c\x1a\x3a\xd2\x42\x21\x07\xd3\x28\x27\xaa\x3e\x16\x26\x20\x38\x5d\x96\x12\x73\x4a\x57\x11\x98\x6b\x4f\x01\x3f\x52\x42\xab\xd0\x5a\x56\xa6\x9f\x94\x15\x9a\x99\xb6\x31\x23\xb7\xab\xa0\x1b\x57\x37\x63\xe6\xf0\x61\x22\xaf\x84\xa5\x84\xe9\x03\x60\x3c\xfe\x5d\x2f\x10\x88\x82\x0e\x5e\x11\x82\x20\x1d\x70\x61\x41\x69\x07\x81\x55\x63\x90\x67\xbf\x8f\x99\xe7\x1e\x62\x2d\x46\x72\x03\x21\x52\x10\x27\x92\x2f\xc3\x99\x3a\x95\x84\xd4\xd3\x1c\x07\xd5\xaa\x32\xd6\x91\xdc\xd7\xe7\xc3\xdd\x5d\x46\xdf\xdb\xed\xed\x09\xcc\x8d\xae\x28\xb1\x5b\xdd\x98\x02\xb7\xdb\x24\xcc\xe0\xb0\x29\x4c\x22\xeb\x7c\x65\xd1\x1d\x87\xd5\x9b\x67\x0a\x6d\xcf\x8e\xa4\x62\xff\x87\xc3\xf5\x6c\x54\xc5\x8c\x5d\x30\x29\x73\xa9\x0b\x26\x23\xb0\x37\x1d\x19\x5c\xd4\xa8\x7e\xf5\xd9\x9f\xa4\x0c\x60\x7e\x27\xac\x98\x6c\xd0\xa6\xa2\x29\x74\x6b\x6d\x96\x47\xe1\xf9\xc4\xa2\xd0\x8d\x62\xed\xf2\x5a\x5e\x30\x55\xa0\x94\xd1\xb8\x7f\xf1\x53\x06\xff\x0a\x34\x54\xd6\xee\x76\xa6\x02\xcc\x99\x88\x73\x7f\xb3\x4b\xb0\x5c\xf0\xf6\xe0\x57\xb5\x44\x87\x60\x1b\x6a\x7f\xe7\x8d\x94\x9b\x0c\x2e\x1b\x05\x1f\xfb\xca\xaf\x6f\x99\x3e\x52\x0c\x36\x58\x69\x4a\xa3\xcc\x38\xc1\xa4\xdc\xec\x7a\x03\x66\x2d\xba\x71\xb3\x0f\x24\x0d\x8d\x46\x6e\x1d\x73\x4d\xac\xd6\x78\xfe\xfc\xf9\xf3\xd3\xd3\xd3\xd3\x81\xed\x07\x3a\x5c\xf9\xad\x40\x04\x44\x98\x84\xea\x87\x00\xc8\x53\x4c\xd4\x99\x86\x43\x3b\x39\x08\xc6\x19\x3f\x55\xc7\xfb\x7a\xb8\x37\x1d\x64\xd4\xdf\x37\x03\xca\x71\x8f\x27\xe3\x4d\xd9\x6f\x0f\xf2\x08\x0b\x76\x35\x48\xee\xfb\xba\xe9\xda\xf1\xc6\xb7\x7f\x14\x7a\xa8\x46\xd8\x6e\x6f\x61\xae\x4d\xea\xbd\xb9\x07\x36\x54\xf4\x20\xb8\x64\xd7\x85\x96\x2f\xef\x6e\xcc\xc4\x48\xaa\x6f\xfd\xba\xc8\x4a\x78\x0b\xd6\xb6\xe4\x43\x93\xf6\x77\x30\x1d\x3d\x3e\xc3\x7a\xd3\xad\xc3\xa3\x02\x64\xd9\x48\x77\xdd\x42\x74\x06\xf9\x33\x55\xdc\xf1\x4c\x51\xb2\xa3\x8e\xab\x79\xb3\xa3\x38\x42\x51\x8e\x35\x2a\x8e\xaa\x38\xc4\x9e\xbb\x4d\x43\xa0\xc3\x70\x76\xb7\x30\x6a\xd4\x37\x8f\xc2\x7c\xc9\xc9\x79\x5c\x0a\x8a\x3d\x8d\x89\xd5\x59\x83\x48\xaa\xe7\x11\xd5\xff\x8f\x69\xa8\xd3\xe7\xb0\x83\xf2\x65\x1e\x7c\x18\x49\xff\x1c\x1f\x26\x5e\x8d\x98\x24\xe3\x7e\xdc\x8b\xe8\x47\x7a\x72\x22\x08\x53\x1b\x7b\x6c\x5a\xf3\x12\x85\x24\xd3\xb7\xc9\x63\xb2\x00\x6f\x0c\x79\xb2\x85\x1d\xa6\x8a\xaf\x77\xde\x3a\x1d\xe7\xba\x51\x3c\x6f\xe5\x1d\x1f\x00\xbe\x21\xa2\x68\x6c\x5a\x2f\x44\xb1\x80\xb5\x9f\xa8\x93\x5c\x3c\x94\xa3\x6e\x81\x50\x34\xc6\x90\x61\x3a\x05\xbb\x21\x82\x4f\x5a\xe1\x9b\x38\x30\xeb\x75\x21\xfb\x25\xa7\xaf\x30\x3a\x99\xe8\xe4\x7e\x57\xef\x25\x32\xeb\x07\x2d\x2b\xc1\xd1\x0b\x45\xf4\x24\xbb\x4f\x97\x7d\x31\xf7\x0a\xa6\xb1\x46\xfb\xd4\x07\x58\x4c\xdd\xef\x5b\x9d\x5e\xa2\x4a\x00\x6a\x87\x9c\x11\x67\x68\xd8\xe8\x06\x0c\x7a\xcf\xaf\x99\x72\xbb\x79\x15\xb8\x85\xb0\xff\x80\x6f\x36\x2f\xde\x7d\x9b\x80\x33\xd5\x9e\x3e\x54\x69\xd0\x65\x7d\xe8\xe6\x7b\xbe\xc3\xa1\xa6\xab\x6c\xd0\xba\xdb\x04\xdc\xce\xc9\x07\x69\xd8\xbf\x95\x24\xe8\x78\x76\x79\x79\x71\x79\x15\x61\x7f\x7a\xff\x3f\x08\xe4\xf0\x60\xe1\xf4\x74\x24\xb7\x1b\xb3\x1f\xc4\x96\x4a\xaf\x55\xee\x36\xf5\x48\x12\xea\x82\x15\x51\x91\xc5\xda\x5d\x19\xec\x46\xdb\xa0\x95\xdc\x80\x6d\xea\xf0\xea\xf5\xc2\xcf\x94\x33\xbb\xb1\x0e\x2b\x98\x09\xc5\x85\x2a\x2d\x68\x03\xa5\x70\x8b\x66\x96\x15\xba\xea\x1f\x20\xc6\x8b\x91\x20\x70\x17\xd5\xc8\x91\xb9\xd2\x2e\xc4\x81\x91\xbe\xfa\xd1\x3b\x2f\xd4\xfd\x09\xa9\x0f\x72\x9e\x17\x2d\xee\xbf\x80\x4c\x89\xd5\xd6\x49\x85\x41\xe6\x62\xd6\xf3\xef\xb2\xe0\x49\xf6\x22\xd1\x5a\xb8\x05\xf8\x07\xdd\x6e\x98\xf5\x8a\x16\xd1\x98\xed\xd6\xbf\x94\x85\xb5\x42\xf3\xb0\x40\x1f\x13\xdd\xff\x40\xa4\x10\x1e\x47\x45\xe2\x0f\x82\xe3\x57\x12\x69\x8e\xc8\x73\xa1\x56\x7a\x19\x13\xe8\xdf\x3e\x53\xd1\x65\x09\x64\x3e\xdc\xd1\x36\x58\x2f\xfc\xc3\x59\x2b\x69\xf7\x72\x14\x96\xbe\x8e\xb4\x4b\xdc\xf4\x63\xb0\x8a\x29\xce\x9c\x36\x63\x23\xbe\x9e\xc6\x4f\x8c\x3e\x74\xc6\xbc\xa5\x6b\xd2\xf2\x99\xc4\xec\x7b\xa8\xa9\x73\xfd\x76\x78\x3c\x07\x27\x97\x39\xf0\xe3\xdd\x41\x53\x35\x09\xea\x2f\x52\x25\x6c\xc5\x5c\x11\x7b\x41\xdd\xbb\x47\xb4\x81\x7b\x08\x3e\x72\x9d\xfc\x7a\xd7\xd8\x71\x8d\x61\x36\xe8\x41\xbc\x5b\x7d\x06\x23\xa2\x6a\xc0\x64\xef\xda\x85\xd5\x4e\x8d\x71\x25\xda\x39\x33\x1d\x2f\x26\x45\xcc\x6c\xe7\x61\x95\xa2\x4f\xeb\x92\x7e\x40\x4d\x58\xed\x37\xc9\xb2\x7b\x93\xdd\x93\x4a\x1b\x2f\x7b\x78\xc7\xf4\x7b\xc2\x67\x8a\x9d\x3b\x11\x27\x4c\x7d\x79\x88\x40\xf7\xec\xea\xaf\x42\x90\xe8\x99\x85\x30\x29\x0c\xa6\xc4\x4f\x0e\x95\xed\x84\xc6\x4f\xae\x6b\xb7\xbf\x44\x15\x9b\x97\x18\xab\x5c\x76\x57\xb9\xc4\xf0\x1c\xda\xa6\x84\xdd\xa3\x80\x0d\x75\xd6\x6e\x1c\x65\xd1\xac\x44\x31\xb8\xbe\x93\x82\x34\x46\x1e\xee\xf2\xbb\xbb\xac\x31\x92\x52\xd8\x76\x0b\x37\x97\x3f\x7b\xe5\x1b\x23\xdb\x33\x48\xff\x22\x9b\x05\x82\xdb\xb4\x0c\x40\x82\x54\x4c\xce\xb5\xa9\xa2\xa5\xf6\xdb\x6e\x7d\x4c\x82\x0c\xae\xcd\x06\x58\xc9\x84\xca\xb2\x49\xd8\x3f\xac\x56\x7d\x94\x2a\x2a\x3e\xf2\x0c\xfb\x9f\xab\x8b\x77\x20\x54\xdd\x38\xe0\xcc\x31\x78\xdb\x5a\xe3\x59\x51\xf1\x67\x14\xb3\x1e\x47\xfa\xf5\xf5\xe5\xbb\xf3\x77\x3f\xa4\xd7\x22\xdd\x86\xc3\xaa\x91\x35\x33\x2a\x2f\x74\x45\x51\x34\x37\xe8\xa2\xa1\xf6\x92\xd6\xba\xb9\x51\x51\x71\x5f\x7e\xcf\x1d\x9a\x10\xe6\x5f\x85\xf3\x4d\x87\xe7\x76\xcc\x78\x2d\x9e\x9f\xd0\x1f\x7c\x80\x86\xaf\xc4\xc3\xf1\x15\x47\x87\x85\x9b\x68\x1c\x3d\x32\x25\x17\x8e\xb5\xc1\x82\x51\xf3\x62\xb0\x96\xac\x88\x1e\x1c\x8a\xbe\x84\xa3\x25\x6f\x73\x8a\x7f\x94\x08\xbf\x1e\xd9\x3b\xad\x41\xa6\xb5\x90\x12\xac\xd6\x0a\x66\x08\x3b\x98\x13\xa8\x43\x35\xdc\xd8\x90\x59\x7d\x41\x84\xeb\x3d\x9e\xd6\x21\x4b\x54\xa0\x35\xc7\x31\x39\xd1\x2e\x74\x23\x39\x89\x67\xd1\x65\x10\x26\x81\xfb\xf5\x38\x51\xfb\xaf\x30\x13\x48\x92\xc8\xd3\x4f\xf8\x93\xe4\x0a\x08\x14\xfe\x1e\xe6\x6a\x8a\xa6\x7e\xff\x21\x90\x94\xaf\x2d\x5b\x8d\x7a\x70\x0a\xd4\xef\xef\xbc\xda\x35\x9e\xdd\x6f\x48\x86\x3f\x1e\x99\x16\x4c\x8a\x4a\xb8\x5c\x94\x4a\x9b\xa8\x48\xdd\xb9\x6e\x13\x80\xdf\xe2\xa5\xf2\x5f\xf7\xf3\xb1\xb0\xd0\xb2\x4b\x45\x2f\x16\x4c\x95\xc8\x66\xd1\x27\xff\x9f\x7b\xc4\xbe\x00\xb0\x9d\xde\x72\x13\x66\x0e\x3d\x8f\x0c\xce\x09\x9e\x8a\xa8\x84\xb3\xe0\x25\xb0\xb9\xd4\x65\x6e\xc5\xe7\x98\x00\x52\x97\x57\xe2\x33\x92\x6d\xc3\x86\x3d\x8d\x77\x47\x94\x29\xff\x34\x45\x05\xe7\x0c\xdd\x1a\x51\xc1\x4b\x5f\x58\x7e\xf7\x32\x59\x94\x0a\x2b\x6d\x36\x63\xd2\x04\x8a\x63\x05\xfa\xee\xfb\xbf\x7b\x91\xfe\xf6\xdd\xf7\xc9\x32\x51\x0e\xd6\x4d\x2c\x81\xb7\xab\x47\x09\xf3\x32\xd8\xe7\xaf\x2f\xe9\xbf\x69\x79\x7c\x8b\x48\xbd\x75\x8d\xc6\x09\x8c\x8d\xf1\xba\x30\x38\x88\x57\x61\x68\xe3\x8c\xc0\x7e\x6c\x13\xfa\xcd\x1d\xb3\x6e\xbc\xf3\x78\x4c\xec\x42\x22\xd7\xfe\xc0\x51\x64\x14\x0e\x74\xe3\xac\xe0\xde\x11\xd7\x86\xad\x84\x85\x59\x23\x24\x1f\xef\x4f\xbd\x2a\x21\x1c\x18\x3a\xb6\x49\xa1\xa0\x3f\xfd\x7b\x01\x41\xdd\x8b\xea\xad\xb5\x7d\xd7\x7d\x77\x97\xb5\x7f\xed\xcc\x4d\x55\xb2\x50\x6d\xb3\x43\xff\x60\xc5\x44\xe9\xe4\x45\xed\xea\xd1\x70\xc9\x62\x61\xa2\x2b\x47\x5b\x2a\x2a\xe8\xee\x55\xa6\x33\x66\x91\x83\x56\x83\xca\x38\x5a\x7c\x1e\x55\x71\x7a\x69\xdb\x7e\xd6\x37\x2b\xf8\x49\xd8\xe8\x4f\xaa\x1e\xb4\x2a\x7b\x21\x86\x49\x83\x8c\x6f\x20\xb0\xc8\xa0\x9d\x0f\x59\x94\x58\x38\x60\x4a\xbb\x05\x1a\xbf\x2d\x2a\xd2\x9b\xb3\x7f\xde\xfc\x90\x5c\x0e\x79\xea\xc3\x6a\x21\x3e\x0b\x3f\x97\x5a\xa1\x11\xf3\x58\x1d\xf4\x8b\x5f\x6c\xcb\xd9\x87\x47\xa8\xd5\x6f\x3c\x56\x12\x50\x3f\x8e\x0f\xef\x76\x93\xcf\x2e\x9e\xea\xd5\x14\xd7\xc1\x43\xc0\x28\xdf\xe1\x73\xc0\x1e\xe7\x27\xb7\x4f\xfe\x17\x00\x00\xff\xff\xf5\xaa\xbb\x30\x01\x2f\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 12033, mode: os.FileMode(420), modTime: time.Unix(1516744031, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

