/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x7b\x8f\x1b\xb7\x11\xff\xdf\x9f\x62\x60\x14\x70\x02\x9c\x65\x27\x45\x81\xc2\xc0\xa1\x70\x6b\x37\xb9\x26\xf6\x19\xf7\x48\x10\x38\x87\x35\xb5\x1c\xad\x18\x71\xc9\x05\xc9\x95\xac\x1c\xd4\xcf\x5e\x0c\xb9\x2f\xe9\x8e\xbb\x94\x9c\xa0\xf9\x27\xf2\x71\x38\xbf\x79\x90\xf3\xe2\x7e\x7c\x02\x70\xff\x04\x00\xe0\xa9\xe0\x4f\x5f\xc1\xd3\xd2\x16\x59\x65\x70\x21\x3e\x67\x68\x8c\x36\x4f\xcf\xc2\xaa\x33\x4c\x59\xc9\x9c\xd0\x8a\xc8\xde\xfa\xb5\x27\x00\xbb\xb3\x11\x0e\x42\x2d\x74\x84\xc1\x05\x2d\x4d\xed\xb7\x75\x9e\xa3\xb5\x11\x16\xd7\xcd\xea\x14\x97\x0d\x33\x4a\xa8\x22\xc2\xe5\xe7\x66\x35\xca\x25\x2f\x79\xc6\xd1\xe6\x99\xd4\xaa\xc8\xaa\x7a\x2e\x85\x5d\x46\x98\x7d\x08\xab\xc0\xa0\x62\xf9\x8a\x15\x08\x4e\x83\x5b\x22\x18\x2c\x84\x75\x66\x0b\x16\x1d\x08\x05\xff\x7d\x31\xdb\xd8\x55\x65\x74\x65\x67\xa9\xd0\x06\x2b\x6d\x5c\x04\xf9\xca\x2f\x5a\xd0\x0a\x38\x56\x52\x6f\x91\x03\x2a\x27\x9c\x40\x0b\x5f\x89\x19\xce\xce\xe0\x43\x90\xc9\x9e\xc1\xeb\x9c\xf6\xd9\x33\xb8\x31\xa2\x28\xd0\xd8\x33\xb8\xaa\x25\xad\xa0\xcb\x67\x5f\x03\xb3\xb0\x41\x29\xe9\xff\x06\x73\x54\xce\xef\x58\x7b\x34\x4b\xf2\x93\x4e\xb6\xc2\x5c\x2c\x04\x72\x50\xac\x44\x5b\xb1\x1c\xd3\x75\xd1\x3a\xa6\xc9\x6b\x70\x5a\x4b\x32\x5c\x50\xe4\x0c\x6a\x15\x7e\x01\x53\x1c\xec\x56\xe5\xa0\x2b\x54\x9b\xa5\xb0\xab\xd6\xce\x16\x6a\x2b\x54\x01\x0c\x4a\xa6\xc4\x02\xad\xf3\xc4\xba\x22\xae\x4c\x36\xac\x4a\xd2\x64\x21\x64\x47\xfe\xcb\xeb\x77\x3f\xa6\xc8\x6c\x97\xda\xb8\x53\x7c\xcf\x3a\xcf\xa7\xc3\x8c\xfa\xf9\x83\xd1\x6b\xc1\xd1\x02\x03\x5b\x97\x25\x33\x5b\x08\xf4\xa0\x17\xb0\x59\x32\xf7\xcc\xc2\x1c\x71\x70\x0a\xbe\xcc\x5b\x8d\x48\x93\xee\xa2\x73\xed\x34\x2c\x51\x56\x0d\x34\x6c\x75\x6d\x92\x3c\x45\x1e\x49\x97\x85\x71\x1e\x13\x85\x73\x60\x0a\x98\x3f\xdc\x67\xb0\x40\xe4\x67\xe0\xc2\x09\x07\x6d\xc0\xd4\xb2\xbb\x90\x2d\xf8\x31\xb0\x99\xbf\x50\xdb\x31\xf4\x17\x4c\xc1\xfd\xfd\x6c\x85\xdb\xdd\xee\x10\xca\xeb\x99\x8c\xb7\x46\x63\x89\x73\xec\x18\x08\xe5\x3c\xf7\x86\x0e\x54\x5d\xce\x49\xcd\x05\x6c\xec\x2a\x78\x60\x1c\x6b\x21\x59\x91\xb1\x4a\x64\x4b\x6d\x63\xce\x0d\x9e\x7b\xfd\xe1\x02\x3e\x7d\x7f\x79\x7d\xf3\x29\x91\xe3\xb8\xec\x03\xa6\x3f\xbd\xbd\xba\xbe\xb8\x7c\x9f\xc4\xb7\x76\xcb\x6c\x85\x31\xeb\xd3\xb2\x36\xe2\x77\xff\x07\xf8\xf4\xc3\xdb\x5f\x52\x98\xe6\x68\x5c\xe6\xdd\xf2\x38\xd7\x8a\xb9\x25\x99\x94\x0c\x3d\x23\xe2\x04\x1f\x06\xc6\x5a\x2d\x44\x2c\xe5\x84\x45\xcf\x0a\xbe\xe2\xb8\x60\xb5\x74\x20\x2c\xfc\xe5\xfb\xcb\x77\x6f\xfb\xc4\xf0\x75\x8a\x55\xa4\xd4\x9b\xac\xe1\x11\x4b\x94\x9e\x08\x3a\xa2\x69\xae\x7d\xb4\x1c\xb3\x4b\x17\xa1\xbb\xb0\x9a\xc0\x5a\x28\x87\x86\x6e\xe8\x3a\x66\xf3\x20\xed\x80\x0e\x2a\xa3\xcb\x2a\x49\xf0\x15\x6e\x93\xdd\xb9\xc2\x6d\xaa\xd0\xc1\xca\x25\x53\xac\xc0\x58\xf0\x09\x62\x57\x46\xff\x86\xb9\xeb\x53\xaf\xd3\x30\xa7\x10\x60\x56\xc8\xa1\xe5\x30\x8d\xd8\x85\xa7\x71\xfb\x1f\x11\x5a\x3c\xdb\x2e\xf4\x47\xf8\xf6\xeb\xd3\xbc\x1a\x55\x27\x24\xb4\x68\xd6\x68\x24\x5a\xdb\xda\x26\x81\xb5\x75\x46\x44\x39\x07\x43\xd7\x16\x0d\x1d\x69\xa1\x90\x83\xa9\x95\x13\x65\x17\x0b\x13\x10\x9c\x2e\x0a\x89\x19\xa5\xab\x08\xcc\x8d\xa7\x80\xef\x29\xa1\x95\x68\x2d\x2b\xd2\x4f\xca\x1a\xcd\x5c\xdb\x98\x91\x9b\x55\xd0\xb5\xab\xea\x31\x73\xf8\x30\x91\x95\xc2\x52\xc2\xf4\x01\x30\x1e\xff\x6e\x96\x08\x44\x41\x07\x2f\x0f\x41\x90\x0e\xb8\xb0\xa0\xb4\x83\xc0\xaa\x36\xc8\x67\xbf\x8e\x99\xe7\x00\xb1\x12\x23\xb9\x81\x10\x29\x88\x13\xc9\x97\xe1\x4c\x9d\x4a\x42\xea\x68\x4e\x83\x6a\x54\x19\xeb\x48\x0e\xf5\xf9\x78\x7f\x3f\xa3\xdf\xbb\xdd\xdd\x19\x2c\x8c\x2e\x29\xb1\x5b\x5d\x9b\x1c\x77\xbb\x24\xcc\xe0\xb0\x29\x4c\x22\x6b\x7d\x65\xd1\x9d\x86\xd5\x99\x67\x0a\x6d\xcf\x8e\xa4\x62\xf7\x87\xd3\xf5\xac\x44\xb1\xc9\x98\x6f\xc6\x32\xa7\x57\xa8\x26\x55\xa6\x1d\x10\x76\x80\xdf\x71\x9a\xf2\xb5\x2a\x99\xb1\x4b\x26\x65\x26\x75\xce\x64\x04\xf2\xb6\x25\x83\xcb\x0a\xd5\xcf\xbe\xfc\x20\x09\x03\x98\xdf\x09\x6b\x26\x6b\xb4\xa9\x68\x0a\xdd\x46\x9b\xd5\x49\x78\x3e\xb3\x29\x74\xa3\x58\x7d\x62\xcd\x72\xa6\x72\x94\x32\x9a\x78\x2e\x7f\x98\xc1\xbf\x02\x0d\xd5\xd5\xfd\xce\x54\x80\x05\x13\x71\xee\x6f\xfa\x0c\xcf\x05\x6f\x6e\x5e\x59\x49\x74\x08\xb6\x26\x07\x2e\x6a\x29\xb7\x33\xb8\xaa\x15\x7c\xea\x4a\xcf\xae\x67\xfb\x44\x49\xc0\x60\xa9\x29\x8f\x33\xe3\x04\x93\x72\xdb\x37\x27\xcc\x5a\x74\xe3\x66\x1f\x48\x1a\x3a\x9d\xcc\x3a\xe6\xea\x58\xb1\xf3\xfc\xf9\xf3\xe7\xe7\xe7\xe7\xe7\x03\xdb\x0f\x74\xb8\xf6\x5b\x81\x08\x88\x30\x09\xd5\x4f\x21\x90\xa7\x98\xa8\x35\x0d\x87\x66\x74\x11\x8c\x33\x7e\xaa\x4e\xf7\xf5\x70\x6f\x3a\xc8\xa8\xbf\x6f\x07\x94\xe3\x1e\x4f\xc6\x9b\xb2\xdf\x1e\xe4\x09\x16\x6c\x8b\xa0\xcc\x37\x96\xd3\xc5\xeb\xad\xef\x3f\x29\xf6\x51\x91\xb2\xdb\xdd\xc1\x42\x9b\xd4\x7b\x73\x00\x36\x54\xf4\x28\xb8\x64\xd7\x85\x9e\x33\x6b\x6f\xcc\xc4\x4c\xac\xeb\x3d\xdb\xd0\x4e\x78\x4b\xd6\xcc\x04\x86\x26\xed\xee\x60\x3a\x7a\x7c\x88\xf6\xa6\x5d\x87\x47\x05\x98\xcd\x46\xda\xfb\x06\xa2\x35\xc8\x1f\xa9\x62\xcf\x33\x45\xc9\x96\x3a\xae\xe6\x6d\x4f\x71\x82\xa2\x1c\x2b\x54\x1c\x55\x7e\x8c\x3d\xfb\x4d\x43\xa0\xe3\x70\xfa\x5b\x18\x35\xea\x9b\x47\x61\xbe\xe4\xe4\x3c\x2e\x05\xc5\x9e\xda\xc4\x0a\xbd\x41\x24\xd5\x8b\x88\xea\xff\xc7\x34\xd4\xea\x73\xdc\x41\xf9\x32\x0f\x3e\x8c\xa4\x7f\x8c\x0f\x13\xaf\x46\x4c\x92\x71\x3f\xee\x45\xf4\x13\x3d\x39\x11\x84\xa9\x8f\x3e\x35\xad\x79\x89\x42\x92\xe9\xfa\xf4\x31\x59\x80\xd7\x86\x3c\xd9\xc0\x0e\x53\xc5\x9f\x77\xde\x5a\x1d\x17\xba\x56\x3c\x6b\xe4\x1d\x9f\x40\xbe\x21\xa2\x68\x6c\xda\x2c\x45\xbe\x84\x8d\x1f\xe9\x93\x5c\x3c\x94\xa3\x6e\x89\x90\xd7\xc6\x90\x61\x5a\x05\xdb\x29\x86\x4f\x5a\xe1\x37\x71\x60\xd6\xeb\x42\xf6\x4b\x4e\x5f\x61\x76\x33\xd1\x4a\xfe\xaa\x3e\x48\x64\xd6\x4f\x7a\xd6\x82\xa3\x17\x8a\xe8\x49\x76\x9f\x2e\xbb\x62\xee\x15\x4c\x63\x8d\x36\xca\x0f\xb0\x98\x3a\x6c\x9c\x7d\x47\x92\x00\xd4\x4c\x59\x23\xce\xd0\xb0\xd5\x35\x18\xf4\x9e\xdf\x30\xe5\xfa\x81\x19\xb8\xa5\xb0\xff\x80\xaf\xb6\x2f\xde\x7f\x9d\x80\x33\xd5\x1f\x3f\x54\x69\xd0\xe6\x7d\x6c\x07\x8c\xbe\xc3\xa1\x3e\xab\xa8\xd1\xba\xbb\x04\xdc\xd6\xc9\x47\x69\xd8\x3d\xd6\x24\xe8\xf8\xf6\xea\xea\xf2\xea\x3a\xc2\xfe\xfc\xf0\x3f\x08\xe4\xf0\x60\xe1\xfc\x7c\x24\xb7\x1b\xb3\x1f\xc4\x56\x4a\x6f\x54\xe6\xb6\xd5\x48\x12\x6a\x83\x15\x51\x91\xc5\x9a\x5d\x33\xe8\x67\xeb\xa0\x95\xdc\x82\xad\xab\xf0\xec\xf6\xc2\x0f\xb5\x67\x76\x6b\x1d\x96\x30\x17\x8a\x0b\x55\x58\xd0\x06\x0a\xe1\x96\xf5\x7c\x96\xeb\xb2\x7b\x01\x19\x2f\x46\x82\xc0\x6d\x54\x23\x47\x66\x4a\xbb\x10\x07\x46\x7a\xea\x47\xef\xbc\x50\x87\x23\x5a\x1f\xe4\x3c\x2f\x5a\xdc\x7f\x82\x99\x12\xab\xa9\x93\x72\x83\xcc\xc5\xac\xe7\x1f\x86\xc1\x93\xec\x45\xa2\x8d\x70\x4b\xf0\x2f\xca\xed\x34\xed\x15\x2d\xa2\x31\xbb\x9d\x7f\xaa\x0b\x6b\xb9\xe6\x61\x81\x7e\x4c\x74\xff\x03\x91\x42\x78\x1c\x15\x89\x3f\x08\x8e\x7f\x92\x48\x0b\x44\x9e\x09\xb5\xd6\xab\x98\x40\xff\xf6\x99\x8a\x2e\x4b\x20\xf3\xe1\x8e\xb6\xc1\x66\xe9\x5f\xee\x1a\x49\xdb\xa7\xab\xb0\xf4\xe7\x48\xbb\xc2\x6d\x37\x87\x2b\x99\xe2\xcc\x69\x33\x36\x63\xec\x68\xfc\xc8\xea\x63\x6b\xcc\x3b\xba\x26\x0d\x9f\x49\xcc\xae\x87\x9a\x3a\xd7\xef\x86\xc7\x73\x70\x72\x99\x03\x3f\x5f\x1e\x34\x55\x93\xa0\xfe\x22\x95\xc2\x96\xcc\xe5\xb1\x27\xdc\xbd\x7b\x44\x1b\xb8\x87\xe0\x23\xd7\xc9\xaf\xb7\x8d\x1d\xd7\x18\x86\x93\x1e\xc4\xbb\xd5\x67\x30\x22\x2a\x07\x4c\xf6\xae\x5d\x58\x6d\xd5\x18\x57\xa2\x19\x74\xd3\xf1\x62\x52\xc4\xcc\x76\x11\x56\x29\xfa\x34\x2e\xe9\x26\xe4\x84\xd5\xfc\x26\x59\xfa\x47\xe1\x3d\xa9\xb4\xf1\xb2\x87\x87\x54\xbf\x27\xfc\x4c\xb1\x73\x2b\xe2\x84\xa9\xaf\x8e\x11\xe8\xc0\xae\xfe\x2a\x04\x89\x9e\x59\x08\x93\xc2\x60\x4a\xfc\xec\x50\xd9\x56\x68\xfc\xec\xda\x76\xfb\x4b\x54\xb1\x59\x81\xb1\xca\xa5\xbf\xca\x05\x86\xf7\xd8\x26\x25\xf4\xaf\x12\x36\xd4\x59\xfd\x38\xca\xa2\x59\x8b\x7c\x70\x7d\x27\x05\xa9\x8d\x3c\xde\xe5\xf7\xf7\xb3\xda\x48\x4a\x61\xbb\x1d\xdc\x5e\xfd\xe8\x95\xaf\x8d\x6c\xce\x20\xfd\x8b\x6c\x16\x08\xee\xd2\x32\x00\x09\x52\x32\xb9\xd0\xa6\x8c\x96\xda\xef\xda\xf5\x31\x09\x66\x70\x63\xb6\xc0\x0a\x26\xd4\x6c\x36\x09\xfb\x9b\xd5\xaa\x8b\x52\x79\xc9\x47\xde\x81\xff\x73\x7d\xf9\x1e\x84\xaa\x6a\x07\x9c\x39\x06\xef\x1a\x6b\x3c\xcb\x4b\xfe\x8c\x62\xd6\x38\x12\xab\x44\x07\xb4\xc1\x79\x16\x0e\x4b\xec\xc5\xff\x91\x43\xd5\x3e\x4f\x30\xd8\xe0\xbc\xfb\x14\xe1\xf5\x87\x8b\x40\x56\x09\xa2\xc9\x99\x0a\xf5\xc3\x1c\x43\xaa\x44\xde\x7c\x15\xd1\x6f\x9a\x41\x53\xd4\xd5\x15\x67\xee\xe0\x2b\x02\x3a\x70\xb9\x56\x6b\x34\xee\x00\xde\xe9\x21\x8f\x29\xc3\x0e\xd5\x3d\x49\xd5\xf6\xb0\xf9\x23\xbe\x27\x62\x92\xd2\x73\x66\x91\x83\x56\xc3\x70\xf3\x90\xd5\xa4\x29\x84\xca\x65\xcd\xf1\x40\x3c\x66\xf7\xbc\x10\x35\xc6\xcf\xaf\xaf\xde\x5f\xbc\xff\x2e\xbd\x0e\x6d\x37\x1c\x57\x89\x6e\x98\x51\x59\xae\x4b\xca\xa0\x99\x41\x17\x4d\xb3\x57\xb4\xd6\xce\x0c\xf3\x92\x7b\x5d\x16\x0e\x4d\x48\xf1\xaf\x42\x6c\xa3\xc0\x71\x37\xe6\xdf\x06\xcf\x3f\xd1\x1c\x1d\x3c\x86\x9f\x28\x0c\x47\x97\x1c\x1d\xe6\x6e\x62\x68\xe0\x91\xa9\xb0\xe0\x58\x19\xcc\xc9\xd3\x99\xc1\x4a\xb2\x3c\x1a\x34\x28\xf3\x12\x8e\x96\xbc\xa9\x27\xfc\x8b\x58\x38\x18\x7b\x91\x2a\xc8\xb4\x11\x52\x82\xd5\x5a\xd1\x69\xea\x61\xce\xa0\x6a\x4e\x8a\x0d\x55\x95\x2f\x86\x71\xb3\xc7\xd3\x3a\x64\x89\x0a\x34\xe6\x38\xa5\x1e\xb2\x4b\x5d\x4b\x4e\xe2\x59\x74\x33\x08\x53\xe0\xfd\x5e\x8c\xa8\xfd\xaf\x30\x0f\x4a\x92\xc8\xd3\x4f\xf8\x93\xe4\x0a\x08\x94\xfa\x1e\xd6\x69\x14\x9f\xfc\xfe\x63\x20\xa9\x56\xb3\x6c\x3d\xea\xc1\x29\x50\xbf\xbf\xf5\x6a\x3b\x74\x68\x3f\x60\x1a\x7e\xb9\x34\x2d\x98\x14\xa5\x70\x99\x28\x94\x36\x51\x91\xda\x73\xdd\x04\x16\xbf\xc5\x4b\xe5\x7f\x1d\xd6\x62\xc2\x42\xc3\x2e\x15\x3d\x5f\x32\x55\x20\x9b\x47\xbf\x37\xf9\xb1\x43\xec\x8a\x3f\xdb\xea\x2d\xb7\x61\xde\xd4\xf1\x98\xc1\x05\xc1\x53\x01\x9d\x70\x16\xbc\x04\x36\x93\xba\xc8\xac\xf8\x3d\x26\x80\xd4\xc5\xb5\xf8\x1d\xc9\xb6\x61\xc3\x9e\xc6\xfd\x11\x65\xca\x3f\x4b\x52\xb3\x31\x47\xb7\x41\x54\xf0\xd2\x37\x15\xdf\xbc\x4c\x16\xa5\xc4\x52\x9b\xed\x98\x34\x81\xe2\x54\x81\xbe\xf9\xf6\xef\x5e\xa4\xbf\x7d\xf3\x6d\xb2\x4c\x54\x7f\xe9\x3a\x56\xbc\x35\xab\x27\x09\xf3\x32\xd8\xe7\xaf\x2f\xe9\xbf\x69\x79\xfc\x78\x20\xab\x8c\xae\xd0\x38\x81\xb1\x11\x6e\x1b\x06\x07\xf1\x2a\x0c\xec\x9c\x11\xd8\x8d\xec\xc2\xac\xa1\x67\xd6\x8e\xf6\x1e\x8f\x89\x6d\x48\xe4\xda\x1f\x38\x8a\x8c\xc2\x81\xae\x9d\x15\xdc\x3b\xe2\xc6\xb0\xb5\xb0\x30\xaf\x85\xe4\xe3\xb3\x09\xaf\x4a\x08\x07\x86\x8e\x6d\x52\x28\xe8\x4e\xff\x5e\x40\x50\x07\x51\xbd\xb1\xb6\x9f\xb8\xdc\xdf\xcf\x9a\xbf\xb6\xe6\xa6\x0e\x49\xa8\xa6\xd1\xa5\x7f\xb0\x7c\xa2\x6c\xf6\xa2\xb6\xbd\x48\xb8\x64\xb1\x30\xd1\xb6\x22\x0d\x15\x15\x14\x07\x5d\xc9\x23\x65\x4a\xb4\xf1\x38\xa9\xdb\xf0\xd2\x36\xb3\x0c\xdf\xa8\xe2\x67\x61\xa3\xdf\xf3\x3d\x68\x53\xf7\x42\x0c\x93\x06\x19\xdf\x42\x60\xd1\xd5\x4e\x16\x25\xe6\x0e\x98\xd2\x6e\x89\xc6\x6f\x8b\x8a\xf4\xe6\xed\x3f\x6f\xbf\x4b\x2e\x87\x3c\xf5\x71\xb5\x10\x9f\x87\x6f\xf5\xd6\x68\xc4\x22\x56\x07\xfd\xe4\x17\x9b\x56\xe6\xe1\x11\x6a\xf4\x1b\x8f\x95\x04\xd4\x3d\xc5\x84\x37\xdb\xc9\x27\x37\x4f\xf5\x6a\x8a\xeb\xe0\x11\x68\x94\xef\xf0\x29\x28\x8d\xb3\x45\x66\xf2\x25\xf1\x6d\x66\xef\x19\x17\x06\xf3\x91\xc1\xcc\x75\xbb\xa3\x9b\xdc\x77\x3b\x1e\x3c\x3c\xf7\x16\xec\x4d\xf7\xe4\xee\xc9\xff\x02\x00\x00\xff\xff\x3d\xdc\x82\x73\x09\x32\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 12809, mode: os.FileMode(420), modTime: time.Unix(1518160471, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json":   wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json":   wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json":   wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json":   wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json":   wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json":   wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json":   wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json":   wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": {nil, map[string]*bintree{
		"resources": {nil, map[string]*bintree{
			"de_DE.all.json":   {wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json":   {wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json":   {wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json":   {wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json":   {wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json":   {wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json":   {wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json":   {wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": {wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": {wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
