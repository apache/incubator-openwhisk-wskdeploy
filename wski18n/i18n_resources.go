// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5b\x6d\x6f\xdc\x36\xf2\x7f\x9f\x4f\x31\x08\xfe\x40\x5a\x60\xa3\xa4\xfd\xe3\x80\x43\x00\xe3\x90\xbb\xa4\xad\xaf\x4d\x1c\xd8\xc9\x05\x45\x6a\x28\x5c\x71\x76\x97\xb5\x44\x0a\x24\xe5\xcd\xd6\xf0\x77\x3f\x0c\x1f\x24\xed\xda\x94\xe8\x4d\x8b\xeb\x9b\x6e\xc2\xe1\xcc\x6f\x86\xe4\x3c\x2a\x9f\x1e\x01\xdc\x3c\x02\x00\x78\x2c\xf8\xe3\x17\xf0\xb8\x31\xeb\xb2\xd5\xb8\x12\x5f\x4a\xd4\x5a\xe9\xc7\x0b\xbf\x6a\x35\x93\xa6\x66\x56\x28\x49\x64\xaf\xdd\xda\x23\x80\xdb\xc5\x04\x07\x21\x57\x2a\xc1\xe0\x94\x96\xe6\xf6\x9b\xae\xaa\xd0\x98\x04\x8b\x8b\xb0\x3a\xc7\x65\xcb\xb4\x14\x72\x9d\xe0\xf2\x31\xac\x26\xb9\x54\x0d\x2f\x39\x9a\xaa\xac\x95\x5c\x97\x1a\x5b\xa5\x6d\x82\xd7\xb9\x5b\x34\xa0\x24\x70\x6c\x6b\xb5\x43\x0e\x28\xad\xb0\x02\x0d\x7c\x23\x0a\x2c\x16\xf0\x8e\x55\x57\x6c\x8d\x66\x01\x2f\x2b\xda\x67\x16\xf0\x5e\x8b\xf5\x1a\xb5\x59\xc0\x79\x57\xd3\x0a\xda\xaa\xf8\x16\x98\x81\x2d\xd6\x35\xfd\x5f\x63\x85\xd2\xba\x1d\xd7\x4e\x9a\x01\x21\xc1\x6e\x10\x4c\x8b\x95\x58\x09\xe4\x20\x59\x83\xa6\x65\x15\x16\xd9\xba\x28\x95\xd2\xe4\x25\x58\xa5\x6a\xb0\x2a\x28\xb2\x80\x4e\xfa\x5f\xc0\x24\x07\xb3\x93\x15\xa8\x16\xe5\x76\x23\xcc\x15\xb4\x41\x27\xe8\x8c\x90\x6b\x60\xd0\x30\x29\x56\x68\xac\x23\x56\x2d\x71\x65\x75\x60\xd5\x90\x26\x2b\x51\xf7\xe4\xbf\xbe\x7c\xf3\x4b\x0e\x66\xb3\x51\xda\x4e\x1f\xc0\x3b\xad\xae\x05\x47\x03\x0c\x4c\xd7\x34\x4c\xef\xc0\xd3\x83\x5a\xc1\x76\xc3\xec\x13\x03\x4b\xc4\xd1\xf1\x7c\x9d\x19\x03\xa4\x59\x3b\x1a\xb4\x64\xcb\x0d\xd6\x6d\x10\x0d\x3b\xd5\xe9\x2c\x13\x92\xa9\xf2\xb1\x5c\xa3\x36\x24\x3b\x65\x1f\x21\xad\x53\x38\xd0\x81\xec\x9a\x25\x6a\x67\x1e\x73\xe5\xa1\x4d\xcb\x5a\xd5\x6c\x5d\xb2\x56\x94\x1b\x65\x52\x5a\x7b\x95\x5e\xbe\x3b\x85\xcf\x3f\x9d\x5d\xbc\xff\x9c\xc9\x71\x1a\xfb\x88\xe9\x7f\x5e\x9f\x5f\x9c\x9e\xbd\xcd\xe2\xdb\xd9\x4d\x79\x85\xbb\x04\x53\x5a\x56\x5a\xfc\xe1\xfe\x02\x3e\xff\xfc\xfa\xd7\x1c\xa6\x15\x6a\x5b\xd2\xb9\x24\xb8\xb6\xcc\x6e\xc8\xa4\x64\xe8\x82\x88\xdd\x21\xe6\x30\x56\x72\x25\x52\x9e\xca\x2f\x3a\x56\xf0\x0d\xc7\x15\xeb\x6a\x0b\xc2\xc0\xff\xfd\x74\xf6\xe6\xf5\xb3\x62\x6b\xae\x5a\xad\x5a\xf3\x6d\x8e\x55\xea\x5a\x6d\xcb\xc0\x23\xe5\x5f\x1d\x11\xf4\x44\xf3\x5c\x87\xf7\x3d\x65\x97\xde\xa7\xf4\x8e\x20\x83\xb5\x90\x16\x35\x23\xf7\x97\xb2\xb9\x47\x3b\xa2\x83\x56\xab\xa6\xcd\x02\x7e\x85\xbb\xec\xe3\xbc\xc2\x5d\x2e\x68\x6f\xe5\x86\x49\xb6\x46\x3e\x09\xbb\xd5\xea\x77\xac\xec\x10\x2c\xac\x82\x25\x42\xc3\xf4\x15\x72\x88\x1c\xe6\x25\x06\x3e\x25\x39\xb1\x94\x32\x41\x94\x23\x99\xe7\x18\xdd\xd0\xcc\x89\xee\x79\xab\x0c\xb6\xbd\x97\x4d\xf0\x1d\xd6\xb3\x95\x9e\x41\x68\x50\x5f\xa3\xae\xd1\x98\x68\xed\x0c\xd6\xc6\x6a\x91\xe4\xec\x8f\xae\x33\xa8\xe9\x91\x08\x89\x1c\x74\x27\xad\x68\x7a\xef\x9a\x21\xc1\xaa\xf5\xba\xc6\x92\x22\x43\x42\xcc\x7b\x47\x01\x3f\x51\xec\x68\xd0\x18\xb6\xce\xbf\x7b\xd7\xa8\x97\xca\xa4\x8c\x1c\x56\x41\x75\xb6\xed\xa6\xcc\xe1\x1c\x4f\xd9\x08\x43\xb1\xc9\xb9\xd4\xb4\x47\x7d\xbf\x41\x20\x0a\xba\xca\x95\x77\xab\xf4\x64\x84\x01\xa9\x2c\x78\x56\x9d\x46\x5e\xfc\x36\x65\x9e\x03\x89\xad\x98\x88\x36\x24\x91\xc2\x02\x91\x7c\x9d\x9c\xb9\x5b\x49\x92\x7a\x9a\xe3\x44\x05\x55\xa6\x52\xe3\x43\x7d\x3e\xdd\xdc\x14\xf4\xfb\xf6\xf6\x72\x01\x2b\xad\x1a\xb8\xb9\x29\x8c\xea\x74\x85\xb7\xb7\x59\x32\xfd\x81\xcd\xc9\x24\xb2\x78\x56\x06\xed\x71\xb2\x7a\xf3\xcc\x49\xdb\xb3\x23\xa9\xd8\xff\xc5\xf1\x7a\xb6\x62\xbd\x2d\x99\xab\x0a\x4a\xab\xae\x50\xce\xaa\x4c\x3b\xc0\xef\x00\xb7\xe3\x38\xe5\x3b\xd9\x30\x6d\x36\xac\x2e\x6b\x55\xb1\x3a\x21\xf1\x43\xa4\x82\xb3\x16\xe5\x47\x97\xcf\x04\x8f\x61\xbc\x3c\xb7\x1b\xae\x59\xdd\xa1\xc9\x14\x28\xd1\x6e\x95\xbe\x3a\x5a\xa4\x8b\x98\x12\x2d\x30\x4b\xea\x76\xba\x9e\xd1\x75\x08\xde\x65\xc5\x64\x85\x75\x9d\x0c\x6e\x67\x3f\x17\xf0\x2f\x4f\x43\x49\xed\xb0\x33\x57\xc0\x8a\x89\x34\xf7\x57\x43\x16\xc1\x05\x0f\x6f\xb1\x69\x6b\xb4\x08\xa6\xa3\x23\x5d\x75\x75\xbd\x2b\xe0\xbc\x93\xf0\xb9\x4f\x6f\xfb\x4a\xe6\x33\x85\x05\x8d\x8d\xa2\x5c\x81\x69\x2b\x58\x5d\xef\x86\xca\x80\x19\x83\x76\xfa\x14\x46\x48\x7d\x99\x51\x1a\xcb\x6c\x97\x4a\xa8\x9e\x3e\x7d\xfa\xf4\xe4\xe4\xe4\x64\x74\x16\x23\x1d\x2e\xdc\x56\x20\x02\x22\xcc\x92\xea\x0a\x64\xe4\x39\x26\x8a\xa6\xe1\x10\xaa\x6a\x6f\x9c\xe9\x4b\x76\xfc\x59\x8f\xf7\xe6\x0b\x99\x3c\xef\x0f\x23\xca\xe9\x13\xcf\x96\x37\x67\xbf\x3d\x91\x47\x58\x30\xa6\x45\xa5\xab\xea\xe6\x13\xe4\x0f\xae\xf8\x23\x6f\x48\x69\xcb\xed\xed\x25\xac\x94\xce\x7d\x37\x07\xc2\xc6\x8a\x3e\x48\x5c\xf6\xd1\xb9\x6c\x75\x57\xc6\x17\x33\xd3\xae\xb9\xb9\xa1\xdc\xf9\xf6\xb6\x77\xf6\x24\x6f\xc3\x42\x41\x3e\x36\x69\xff\x06\xf3\xa5\xa7\xfb\x3b\xaf\xe2\x3a\xdc\x0b\xa0\x28\x26\x6a\xeb\x20\x22\x1a\xe4\xcf\x54\x71\xe0\x99\xa3\x64\xa4\x4e\xab\xf9\x61\xa0\x38\x42\x51\x8e\x2d\x4a\x8e\xb2\x7a\x88\x3d\x87\x4d\x63\x41\x0f\x93\x33\xbc\xc2\xa4\x51\x5f\xdd\x2b\xe6\x6b\x6e\xce\xfd\x28\xc8\xf7\x74\x3a\x95\xfa\x8d\x3c\xa9\x5a\x25\x54\xff\x1f\x86\xa1\xa8\xcf\xc3\x2e\xca\xd7\x9d\xe0\x5d\x4f\xfa\xe7\x9c\x61\xe6\xd3\x48\x21\x99\x3e\xc7\x3d\x8f\x7e\xe4\x49\xce\x38\x61\xaa\xd5\x8f\x0d\x6b\x0e\x91\x0f\x32\x7d\x2f\x60\x0a\x0b\xf0\x4e\xd3\x49\x06\xb1\xe3\x50\xf1\xd7\xdd\xb7\xa8\xe3\x4a\x75\x92\x97\x01\x6f\x70\x55\xc9\x0b\x50\xa3\x4d\xfa\xa6\xed\x46\x54\x1b\xd8\xba\x46\x37\xe1\xe2\x3e\x35\xb5\x1b\x84\xaa\xd3\x9a\x0c\x13\x15\x8c\xed\x0b\x17\xb4\xfc\x6f\xe2\xc0\x8c\xd3\x85\xec\x97\x1d\xbe\x7c\x7f\x68\xa6\xb8\xfc\x4d\xbe\xab\x91\x19\xd7\x4d\xba\x16\x1c\x1d\x28\xa2\x27\xec\x2e\x5c\xf6\xc9\xdc\x0b\x98\x97\x35\x59\x3a\xdf\x91\xc5\xe4\x61\x29\xed\x6a\x94\x0c\x41\xa1\x93\x9b\x38\x0c\x05\x3b\xd5\x81\x46\x77\xf2\x5b\x26\xed\xd0\x94\x03\xbb\x11\xe6\x1f\xf0\xcd\xee\xd9\xdb\x6f\x33\xe4\xcc\x55\xcc\x77\x55\x1a\x15\x7e\x9f\x62\x13\xd3\x15\x3c\x54\x79\xad\x3b\x34\xf6\x32\x43\x6e\x3c\xe4\x07\x69\xd8\x8f\x30\x32\x75\x0c\xf0\xca\xd0\x9b\x4f\xf5\xd4\xfd\xaa\xd3\x0b\x46\x6d\x59\x8d\xae\xe5\xc4\x17\xc0\xea\x71\xf9\xd5\xbf\x6b\x82\xa3\xfb\x1d\x41\x08\x30\x8d\xfd\x63\x7c\x36\xb8\x42\xe0\x42\x63\x65\x83\x7b\xd4\x7e\x7c\x30\x37\xab\x78\x7d\x7e\x7e\x76\x7e\x91\xc0\x7d\x72\xf8\x1f\x78\x72\xb8\xb3\x70\x72\x32\x91\xa0\x68\xbd\xef\x89\xaf\xa4\xda\xca\xd2\xee\xda\x89\x48\x1a\x3d\x2e\x51\x91\xa9\xc2\xae\x02\x86\x21\x04\x28\x59\xef\xc0\x74\xad\x9f\xa8\x3d\x73\xdd\xff\xc2\xec\x8c\xc5\x06\x96\x42\x72\x21\xd7\x06\x94\x86\xb5\xb0\x9b\x6e\x59\x54\xaa\xe9\x67\x28\xd3\x19\x95\xd6\x31\xab\xaa\x34\x32\x9b\x82\xe9\x26\x9c\xe0\x48\xf6\xfc\xd6\x56\xd8\x0d\xb8\xd1\x68\xec\xc6\xbd\xa0\x45\xd4\xfa\xf6\xd6\x8d\xbb\xfc\x5a\xa5\xb8\x5f\xa0\x1f\x33\x15\xf5\x08\x92\x77\xa6\x93\x90\xf8\x1d\x57\xfa\x17\x41\x5a\x21\xf2\x52\xc8\x6b\x75\x95\x02\xf4\x83\x8b\x6b\xf4\xb4\x3c\x99\x73\x8e\xb4\x0d\xb6\x1b\x37\x64\x0b\x48\xad\x1f\x70\x86\xa5\xbf\x06\xed\x15\xee\xfa\x3e\x5e\xc3\x24\x67\x56\xe9\xa9\x1e\x65\x4f\xe3\x5a\x5e\x9f\xa2\x31\x2f\xe9\x3e\x06\x3e\xb3\x32\xfb\x8a\x4b\x2a\xeb\xa3\x61\x42\xe0\x9b\x71\x7b\xdc\x05\x73\x47\x0d\x8c\xde\xbd\xdd\x8c\x4b\xb0\x59\xa1\xf4\xe8\x49\xd3\x86\xd9\x6a\x33\xa1\x60\x7f\x3d\x68\x03\x77\x22\x78\x0c\xb8\x42\x1e\xce\x60\xfc\x7a\x2c\x03\xb9\x42\xdf\xdc\x74\x42\xdc\xb1\x3a\xf7\x46\x44\xcd\x88\xc9\x5e\xdb\xdf\xaf\x46\x35\xa6\x95\x08\x3d\x28\xba\x5e\xac\x16\x29\xb3\x9d\xfa\x55\x7a\xe6\xe1\x48\xfa\x0e\x3b\xc9\x0a\xbf\x09\xcb\x30\xbf\xdd\x43\xa5\xb4\xc3\xce\xdc\xa4\xdd\xed\xf1\x3f\x73\xec\x1c\x21\xce\x98\xfa\xfc\x21\x80\x0e\xec\xea\x9e\x82\x47\xf4\xc4\x80\xef\x34\x7a\x53\xe2\x17\x8b\xd2\x44\xd0\xf8\xc5\xc6\xe2\xfc\x6b\x54\x31\xe5\x1a\x53\x79\xce\xf0\x94\xd7\xe8\x27\xc4\xc1\xf7\x0e\x53\x8d\xd0\x30\x1c\x22\x19\xc5\x37\x51\x8d\x9e\x6f\xb6\x4d\x3d\xf4\xd2\x6b\xec\x5e\x4f\x2f\x2d\x81\x6f\x4f\x61\x57\x38\x90\x19\x07\x2b\x33\xb9\xeb\xef\x06\x39\x91\xd1\xb1\xcf\xda\x35\x34\xf2\x7b\x08\xb3\x6a\x74\xba\x7e\xf8\xcd\xf5\xcd\x55\x0a\x79\xb7\xb7\xf0\xe1\xfc\x17\x87\xc0\xb5\x5b\xdd\x53\xa2\x3f\x11\x44\x4f\x70\xe9\xc7\xfe\x39\x40\x1a\x56\xaf\x94\x6e\x92\x96\x7b\x13\xd7\xa7\x10\x14\xf0\x5e\xef\x80\xad\x99\x90\x45\x31\x2b\xf6\x77\xa3\x64\xef\x6c\xab\x86\x4f\x0c\xd8\xff\x7d\x71\xf6\x16\x84\x6c\x3b\x0b\x9c\x59\x06\x6f\x82\x35\x9e\x54\x0d\x7f\x42\xae\x77\x5a\x12\x6b\x45\x2f\x68\x8b\xcb\x70\x71\x52\x1f\x5b\xdc\xf3\x36\xe2\xe1\x32\xd8\xe2\x32\xdc\x88\x85\x1b\xaf\x38\xb2\x56\x10\x4d\xc5\xa4\xcf\x37\x96\xe8\x23\x3e\xf2\xf0\x1d\xc6\xb0\xa9\x80\x90\xc9\x76\x2d\x67\x16\x0f\x5c\x9f\x55\x50\x29\x79\x8d\xda\x1e\x88\xb7\x6a\xcc\x63\xce\xb0\x63\x75\x8f\x52\x35\x5e\x36\xf7\x52\xf7\x20\x66\x29\xbd\x64\x06\x39\x28\x39\x7e\x3e\x77\x59\xcd\x9a\x42\xc8\xaa\xee\x38\x1e\xc0\x63\x66\xef\x14\xe6\x8d\xe1\x9d\xc4\xf4\x43\x4b\x19\x22\xec\x2a\xe0\xd4\xfa\x36\x83\xb2\x1b\x97\x53\x38\xef\xb0\xea\x64\xf0\x0d\xd1\x81\x2c\xbc\x2d\x94\xc4\x30\xe9\x6f\x88\x0b\x7e\x69\xb1\xca\xf1\x08\x01\x6b\x3c\xbb\xe8\xe7\xc8\xc1\x97\x24\xf5\x2b\xd1\x3b\xe0\x83\xb3\x23\xb6\xaa\xb3\x63\xa7\x57\xc0\xc7\x21\x98\x44\x97\x47\xdb\x16\xbd\x5b\xa4\xeb\x11\x93\x9e\x99\xf0\x1c\xd4\x89\x66\x2a\xa9\x2c\xb7\x58\x72\xa1\xb3\x9c\xf5\xbd\x6a\x91\x1e\xbd\xdd\x5b\x25\xa4\x4f\x0d\x7d\x2f\xc2\x62\x28\x70\x28\x21\x1b\xdc\xd2\x02\x4c\x57\x45\xad\x8c\xab\x8d\xf6\x3d\xf5\xfd\x6a\x7c\x7c\x79\xfe\xf6\xf4\xed\x8f\xf9\x95\x4f\xdc\xf0\xb0\xda\x67\xcb\xb4\x2c\x2b\xd5\x90\x55\x4b\x8d\x36\x99\x6f\x9e\xd3\x5a\x6c\xb5\x57\x0d\x77\xaf\x61\x65\x51\xfb\x5c\xf7\x85\x0f\x46\x14\x41\x2f\xa7\x2e\x5a\x90\xe7\x66\x9d\x0f\x0e\x3f\xe3\xaf\x87\xc6\x1d\x7f\x8e\x76\xfe\x8a\x3b\xc9\x94\x61\x73\x6c\x35\x56\xe4\x2b\x4a\x8d\x6d\xcd\xaa\xe4\x1d\xa0\x14\x94\xe4\xa8\x9a\x87\xc4\xda\x8d\x96\xbd\x6b\xd9\x8b\x75\x1e\xd3\x56\xd4\x35\x18\xa5\x24\xf9\xa3\x41\xcc\x02\xda\xe0\x6b\x8c\x2f\x2f\x5c\xdf\x08\xb7\x7b\x3c\x8d\x45\x96\xa9\x40\x30\xc7\x31\x85\x81\xd9\xa8\xae\xe6\x04\xcf\xa0\x2d\xc0\x0f\x4f\xf6\x5b\x18\x44\xed\x7e\xf9\x36\x6a\x16\x22\x47\x3f\x73\x9e\x84\xcb\x4b\xa0\x1c\xf0\x6e\xc1\x42\x8f\xc2\x7b\x8c\x07\x88\x74\x2f\x99\x5d\x4f\x9e\xe0\x9c\x50\xb7\x3f\x9e\x6a\xec\xd5\xc5\x6f\x0b\xc7\x1f\x15\xce\x03\xab\x45\x23\x6c\x29\xd6\x52\xe9\x24\xa4\x78\xaf\x83\x9b\x73\x5b\x1c\x2a\xf7\xeb\xb0\x28\x21\x47\xea\xd9\xe5\x4a\xaf\x36\x4c\xae\x91\x2d\x93\x9f\x82\xfd\xd2\x4b\xec\xab\x20\x13\xf5\xae\x77\xbe\x4d\xdb\xf3\x28\xe0\x94\xc4\x53\x25\x99\x71\x17\x1c\x02\x53\xd6\x6a\x5d\x1a\xf1\x47\x0a\x40\xad\xd6\x17\xe2\x0f\x17\xa4\xfc\x86\x3d\x8d\x87\x2b\xca\xa4\x9b\xec\x53\xd5\xbd\x44\xbb\x45\x94\xf0\xdc\x85\xbe\xef\x9e\x67\x43\x69\xb0\x51\x7a\x37\x85\xc6\x53\x1c\x0b\xe8\xbb\xef\xff\xee\x20\xfd\xed\xbb\xef\xb3\x31\x51\x24\x53\x5d\xaa\x8a\x09\xab\x47\x81\x79\xee\xed\xf3\xff\xcf\xe9\xbf\x79\x3c\xae\x21\x55\xb6\x5a\xb5\xa8\xad\xc0\xd4\xe4\x23\xba\xc1\x91\xbf\xf2\x7d\x6e\xab\x05\xf6\x9d\x6e\xdf\xdd\x1a\x98\xc5\x8e\xf8\xfd\x3e\x31\xba\x44\xae\xdc\x85\x23\xcf\x28\x2c\xa8\xce\x1a\xc1\xdd\x41\xbc\xd7\xec\x5a\x18\x58\x76\xa2\xe6\xd3\xdd\x30\xa7\x8a\x77\x07\x9a\xae\x6d\x96\x2b\xe8\x6f\xff\x9e\x43\x90\x07\x5e\x3d\x58\xdb\xf5\xf8\x6e\x6e\x8a\xf0\xb7\xd1\xdc\x37\x37\x45\x23\x64\xe8\xf8\xd0\x1f\x58\x35\x53\x3f\x3a\xa8\x31\xb1\xf2\x8f\x2c\xe5\x26\x62\x4d\x1e\xa8\x28\xc9\x38\x28\xcf\xef\x49\x74\x93\x15\xf8\x51\x65\xb7\x43\x1b\x9a\x7a\xae\x63\x83\x5f\x84\x49\x7e\x6a\x7b\xa7\x5f\xb3\xe7\x62\x58\xad\x91\xf1\x1d\x78\x16\x7d\xf6\x6d\xb0\xc6\x8a\x92\x40\x65\x37\xe8\x9b\xc1\xf3\x90\x62\x8f\x74\xb6\x65\x15\x42\xe1\x41\x7b\x27\x66\x0d\x95\x92\x96\xb9\x4f\x1e\xa5\xca\xeb\xbb\x3a\xe9\xa3\x99\x98\x33\x4a\x0e\x88\x7b\x27\x46\x21\xe2\x1c\x36\xb1\xb6\xa1\x2f\xe0\xbb\x6b\x81\x68\xbf\x76\x99\xb7\xd0\xe8\x1b\xda\x52\x5d\xa3\xd6\x82\x73\x4c\x15\x62\x84\x70\xfc\x49\xed\x30\xd3\x1c\xb6\xc6\x5c\x61\x3c\xb2\x4a\xc1\x78\xf5\xfa\x9f\x1f\x7e\xcc\xce\x5b\x1d\xf5\xc3\x92\x56\xbe\x5c\x0f\x33\x7e\xff\xa9\xc8\xec\xa4\xdf\x51\xbd\x98\x1c\xc6\x2e\xd7\xe3\xd9\xf3\x24\xdf\xf1\x04\x3a\x8f\xb3\x41\xa6\xab\x0d\xf1\x8d\x87\xd3\x17\x0b\xa9\x7f\x1b\x14\x77\xf4\x87\xb3\x5f\x5e\x8c\xbf\x77\x19\x9c\xd8\x4c\x98\x1e\x4c\x37\xdc\xe0\x3f\xfb\xf6\x1e\x79\x73\x09\x5a\xff\xb4\xfd\x5c\x76\xe2\x5f\xa5\xbc\xba\xa7\xf7\x1b\x2c\xf2\x02\x7e\x70\x08\x86\x7f\x8f\xe2\xc6\x4d\xc4\xec\xa1\x00\xa6\xbf\xcb\x7e\x38\x86\xf1\xe8\x37\x7e\xaa\x10\x20\x3d\xba\x7c\xf4\xdf\x00\x00\x00\xff\xff\xa1\x35\x13\x17\xca\x36\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 14026, mode: os.FileMode(420), modTime: time.Unix(1520537404, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

