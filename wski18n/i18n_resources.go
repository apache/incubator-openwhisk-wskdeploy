// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5b\x6f\x8f\xdb\x36\xd2\x7f\x9f\x4f\x31\x08\x1e\x20\x2d\xe0\x38\x69\x1f\x3c\xc0\x83\x00\x79\x91\x6b\xd2\x36\xd7\x26\x1b\xec\x26\x17\x14\xb9\x85\x42\x4b\x63\x9b\x5d\x89\xd4\x91\x94\x1d\x77\xe1\xef\x7e\x98\x21\x29\xc9\x5e\x53\xd2\x3a\xed\x5d\xde\xc4\x5e\x92\xf3\x8f\xc3\xf9\xf3\x23\xfd\xe9\x01\xc0\xed\x03\x00\x80\x87\xb2\x78\xf8\x0c\x1e\x56\x76\x95\xd5\x06\x97\xf2\x4b\x86\xc6\x68\xf3\x70\xe6\x47\x9d\x11\xca\x96\xc2\x49\xad\x68\xda\x2b\x1e\x7b\x00\xb0\x9f\x0d\x50\x90\x6a\xa9\x13\x04\x5e\xd3\xd0\xd8\x7a\xdb\xe4\x39\x5a\x9b\x20\x71\x15\x46\xc7\xa8\x6c\x85\x51\x52\xad\x12\x54\x3e\x86\xd1\x24\x95\xbc\x2a\xb2\x02\x6d\x9e\x95\x5a\xad\x32\x83\xb5\x36\x2e\x41\xeb\x92\x07\x2d\x68\x05\x05\xd6\xa5\xde\x61\x01\xa8\x9c\x74\x12\x2d\x7c\x23\xe7\x38\x9f\xc1\x3b\x91\xdf\x88\x15\xda\x19\xbc\xc8\x69\x9d\x9d\xc1\x7b\x23\x57\x2b\x34\x76\x06\x97\x4d\x49\x23\xe8\xf2\xf9\xb7\x20\x2c\x6c\xb1\x2c\xe9\x7f\x83\x39\x2a\xc7\x2b\x36\xcc\xcd\x82\x54\xe0\xd6\x08\xb6\xc6\x5c\x2e\x25\x16\xa0\x44\x85\xb6\x16\x39\xce\x27\xeb\xa2\x75\x4a\x93\x17\xe0\xb4\x2e\xc1\xe9\xa0\xc8\x0c\x1a\xe5\x3f\x81\x50\x05\xd8\x9d\xca\x41\xd7\xa8\xb6\x6b\x69\x6f\xa0\x0e\x3a\x41\x63\xa5\x5a\x81\x80\x4a\x28\xb9\x44\xeb\x78\xb2\xae\x89\xaa\x28\x03\xa9\x8a\x34\x59\xca\xb2\x9d\xfe\xdb\x8b\x37\xbf\x4e\x91\xd9\xae\xb5\x71\xc3\x1b\xf0\xce\xe8\x8d\x2c\xd0\x82\x00\xdb\x54\x95\x30\x3b\xf0\xf3\x41\x2f\x61\xbb\x16\xee\x91\x85\x05\x62\x6f\x7b\xbe\xce\x8c\x41\xa4\x51\x3b\x5a\x74\x64\xcb\x35\x96\x75\x60\x0d\x3b\xdd\x98\x49\x26\x24\x53\x4d\x97\x65\x83\xc6\x12\xef\x94\x7d\xa4\x72\xac\x70\x98\x07\xaa\xa9\x16\x68\xd8\x3c\xf6\xc6\x8b\x36\x99\x17\x79\xc1\xa8\xff\xb0\xab\xb0\xb2\x17\x35\xaa\x8f\x87\xca\x2e\xd0\x6d\x69\x3b\xf2\x52\x92\x57\xb0\x6b\xa1\xd9\xa0\x99\xec\xc3\xd3\x65\xe8\x79\x1f\xf1\x89\xfe\xcc\x7f\xd0\xcb\xff\xa4\x37\x2f\x4b\xb1\xca\x44\x2d\xb3\xb5\xb6\x29\xc7\xf1\xa2\xbc\x78\xf7\x1a\x3e\xff\x7c\x71\xf5\xfe\xf3\x44\x8a\xc3\xdb\xdf\x23\xfa\x8f\x57\x97\x57\xaf\x2f\xde\x4e\xa2\xdb\xb8\x75\x76\x83\xbb\x04\x51\x1a\xd6\x46\xfe\xc1\x7f\x80\xcf\xbf\xbc\xfa\x6d\x0a\xd1\x1c\x8d\xcb\xc8\x6e\x09\xaa\xb5\x70\x6b\xda\x16\xf2\xd5\x39\x4d\x66\x23\x4f\x21\xac\xd5\x52\xa6\x82\xbd\x1f\x64\x52\xf0\x4d\x81\x4b\xd1\x94\x0e\xa4\x85\xff\xf9\xf9\xe2\xcd\xab\x27\xf3\xad\xbd\xa9\x8d\xae\xed\xb7\x53\xac\x52\x96\x7a\x9b\x05\x1a\xa9\x14\xc5\x93\xa0\x9d\x34\x4e\xb5\x73\xaa\x21\xbb\xb4\x61\xb9\xf5\xbe\x09\xa4\x6b\x83\x1b\x89\xdb\x04\x5d\xbb\x66\x41\x23\xd1\x27\x07\xc7\xa3\x2e\x85\x9a\xc0\xe1\x06\x77\x93\xb7\xf4\x06\x77\x53\x05\xf7\x96\xae\x84\x12\x2b\x2c\x06\x0d\x5d\x1b\xfd\x3b\xe6\xae\xcb\xb9\x4e\xc3\x02\xa1\x12\xe6\x06\x0b\x88\x14\xa6\x98\x8a\xe9\x64\x94\x0b\x52\xca\x04\x56\x3c\x65\x9c\x62\x0c\x21\x23\xbb\x7a\x10\xf4\x27\x90\x6d\x93\x55\x82\x6e\x37\x3e\x59\xe9\x11\x09\x7d\x78\x2e\xd1\xda\x68\xed\x09\xa4\xad\x33\x32\x49\xd9\x6f\x5d\x63\xd1\xd0\x41\x91\x0a\x0b\x30\x8d\x72\xb2\x6a\x93\xd4\x04\x0e\xce\xa4\x8d\xc0\x63\xa0\x1b\x57\x37\x53\x84\xf5\xee\xb6\x41\xb3\xd0\x36\x45\x32\x8c\x8e\x13\xe5\x78\x93\x55\xd2\x52\x6e\xe0\x48\x9a\x0e\xa4\xef\xd7\x08\x34\x83\xbc\x37\xf7\xd1\x94\x4e\x89\xb4\xa0\xb4\x03\x4f\xaa\x31\x58\xcc\xff\x39\x64\x91\x23\x8e\xb5\x1c\x48\x32\xc4\x91\xb2\x01\x4d\xf9\x3a\x3e\x63\x8e\x48\x9c\xda\x39\xe7\xb1\x0a\xaa\x0c\x35\x15\xc7\xfa\x7c\xba\xbd\x9d\xd3\xe7\xfd\xfe\x7a\x06\x4b\xa3\x2b\xb8\xbd\x9d\x5b\xdd\x98\x1c\xf7\xfb\x49\x3c\xfd\x86\x8d\xf1\xa4\x69\x71\xaf\x2c\xba\xf3\x78\xb5\xe6\x19\xe3\x76\x60\x47\x52\xb1\xfd\xc3\xf9\x7a\xd6\x72\xb5\xcd\x04\xf7\x53\x99\xd3\x37\xa8\x46\x55\xa6\x15\xe0\x57\x00\xaf\x38\x4f\xf9\x46\x55\xc2\xd8\xb5\x28\xb3\x52\xe7\xa2\x4c\x70\xfc\x10\x67\xf5\x8a\xc8\x10\x24\xac\xe7\xc7\xab\x61\x23\xca\x06\xed\x44\x86\x0a\xdd\x56\x9b\x9b\xb3\x59\x4a\xe5\xd0\x28\x74\x20\x1c\xa9\xdb\x98\x72\x44\xd7\x2e\xa3\x66\xb9\x50\x39\x96\x65\x32\x9f\x5d\xfc\x32\x87\x1f\xfc\x1c\x2a\x2a\xbb\x95\x53\x19\x2c\x85\x4c\x53\x7f\xd9\xa5\xf6\x42\x16\xe1\x2c\x56\x75\x89\x0e\xc1\x36\xb4\xa5\xcb\xa6\x2c\x77\x73\xb8\x6c\x14\x7c\x6e\x1b\x83\xb6\x66\xfe\x4c\x99\xc0\x60\xa5\x37\x08\xb5\x30\x4e\x8a\xb2\xdc\x75\x3d\x95\xb0\x16\xdd\xf0\x2e\xf4\x24\xf5\x0d\x5a\x66\x9d\x70\x4d\xaa\x8e\x7a\xfc\xf8\xf1\xe3\xe7\xcf\x9f\x3f\xef\xed\x45\x4f\x87\x2b\x5e\x0a\x34\x81\x26\x4e\xe2\xca\xd0\x02\x16\x53\x4c\x14\x4d\x53\x40\xc0\x23\xbc\x71\x86\x9d\xec\xfc\xbd\xee\xaf\x9d\xce\x64\x70\xbf\x3f\xf4\x8b\xb9\xc1\x1d\x9f\xcc\x6f\xcc\x7e\x07\x2c\xcf\xb0\x60\xae\xab\x4a\xa8\x22\xe3\xa6\x8a\xab\x4a\x8a\x72\x99\x70\x19\x55\x22\x09\xa6\xb7\xb7\xf3\xbc\x2a\xf6\xfb\xd0\x8a\xdd\xde\xce\x69\xa1\xdb\xd5\xb8\xdf\x73\xa4\xa4\xb5\xfb\xfd\xf5\x7c\x3e\xc8\x9b\xcb\xc7\x5d\x16\xfd\x79\x04\x86\xba\xbd\xa5\x62\x36\x30\x20\x21\xf7\xfb\x6b\x58\x8b\x00\x34\xf4\x15\x6e\x4f\xc8\x74\xee\x69\xdc\xea\x65\x1c\x87\x93\x02\xcc\xe7\x03\x4d\x68\x60\x11\x37\xf4\xcf\x54\xb1\xa3\x39\x45\xc9\x38\x3b\xad\xe6\x87\x6e\xc6\x49\x45\x07\xf5\x2c\xb0\x46\x55\xa0\xca\xef\x63\xce\x6e\xd1\xf9\x7c\xba\x23\x92\xb4\xe9\xcb\x93\x6c\xbe\xc6\x71\x4e\x4b\x41\x81\xa1\x31\xa9\xba\xec\xe5\x01\x06\x72\x5a\xf5\xff\x62\x8e\x88\xfa\xdc\xcf\x4f\xbe\x6e\x07\xef\x86\xb9\x3f\x67\x0f\x27\x9e\x8c\x94\x24\xc3\xfb\xf8\xe1\x08\xcd\x3a\x67\x27\x87\xa4\x0a\xbd\xf3\xb9\x39\x87\x25\xf2\x19\xa0\xed\xcd\x87\x64\x81\xa2\x31\xb4\x93\x81\x6d\xbf\xfe\xf9\xeb\xfc\x2d\xea\xb8\xd4\x8d\x2a\xb2\x20\x6f\x88\x54\x49\x07\x28\xd1\x25\x63\xf0\x76\x2d\xf3\x35\x6c\x19\xbf\x27\xb9\x0a\x5f\x37\xba\x35\x42\xde\x18\x43\x86\x89\x0a\x46\x38\x81\x93\x94\xff\x4c\x14\x84\x65\x5d\xc8\x7e\x93\xcb\x82\x80\x36\x65\x01\xc6\x4c\x21\xc1\x7e\x94\x9b\x09\xe8\x21\x61\x06\xb9\xc3\x2f\x66\x20\xca\x7e\xe9\xdb\x6e\x1b\xc9\x61\xda\x15\x81\x09\x08\x83\xad\xad\x9f\x74\x9e\x0e\x85\x34\x98\xbb\xe0\xfd\xc6\xe3\xc0\x63\x08\xfb\xab\xcb\xcb\x8b\xcb\xab\x84\xdc\xcf\x8f\xff\x81\x9f\x0e\x77\x06\x9e\x3f\x1f\x48\x3f\xc6\x1c\x1e\xb4\x1b\xa5\xb7\x2a\xa3\x4a\x61\xfc\xa8\xd3\x2c\x32\x55\x58\x35\x87\x0e\x3a\x07\xad\xca\x1d\xd8\xa6\xf6\xf7\x40\x4f\x18\x70\x9d\xdb\x9d\x75\x58\xc1\x42\xaa\x42\xaa\x95\x05\x6d\x60\x25\xdd\xba\x59\xcc\x73\x5d\xb5\x70\xf3\x70\xbe\x34\x26\xe6\xcc\xdc\xa0\x70\x29\x31\xf9\x5e\x0e\x78\xca\x81\x5b\x6e\xa5\x5b\x03\x5f\xe8\x41\x85\xd6\x8a\x15\x3e\xa3\x41\x34\x66\xbf\x67\x58\xdb\x8f\xe5\xba\xf0\x03\xf4\x61\xa4\x9b\xe9\x89\xe4\xcf\xca\xa0\x48\xc5\x9d\x93\xf2\x17\x89\xb4\x44\x2c\x32\xa9\x36\xfa\x26\x25\xd0\x8f\x1c\xb6\x28\x5c\xf8\x69\x7c\x20\x69\x19\x6c\xd7\x7c\x35\x14\x24\x75\xfe\x5a\x2e\x0c\xfd\x35\xd2\xde\xe0\xae\xc5\x50\xa8\xde\x15\x4e\x9b\x21\x7c\xa8\x9d\xc3\x70\xc3\xa7\x68\xcc\x6b\xf2\xc7\x40\x67\x94\x67\x04\x19\x33\xa5\x9d\x0f\x76\x09\x86\x6f\xfa\x68\x24\xc7\x6a\x9e\x4d\xfd\x2e\xc3\x81\xfd\x8a\x7a\x8c\x29\x57\xef\x95\xb4\x95\x70\x79\xaa\x7c\x27\x05\x5b\xf7\xa0\x05\x05\xb3\x28\x62\x3c\x95\xea\x18\xf6\xf6\xe3\x41\x06\x28\x34\x7a\x60\x89\x99\xf0\xb6\x72\x78\xa3\x49\x55\x8f\xc8\x01\xca\xea\x47\xa3\x1a\xc3\x4a\x84\xfe\x9f\xdc\x4b\x94\x32\x65\xb6\xd7\x7e\x94\x8e\x79\xd8\x92\x16\xd0\x24\x5e\xe1\x33\xc9\xd2\xdd\x3a\x1e\x48\xa5\x0d\xcb\x2e\xf8\x7e\x98\xd7\xf8\x8f\x53\xec\x1c\x45\x1c\x31\xf5\xe5\x7d\x04\x3a\xb2\x2b\x1f\x05\x2f\xd1\x23\x0b\x1e\xe5\xf1\xa6\xc4\x2f\x0e\x95\x8d\x42\xe3\x17\xce\x61\xa4\xce\xd7\xa8\x62\xb3\x15\xa6\x00\xcc\xee\x28\xaf\xd0\xdf\x6b\x86\xd8\xdb\x81\xc8\x01\xac\xe9\x32\x19\xe5\x37\x99\xf7\x8e\xef\x64\x9b\x7a\xd1\x33\xaf\x31\x9f\x9e\x96\x5b\x42\xbe\x03\x85\xb9\x2e\x24\x33\x76\x56\x16\x6a\xd7\xfa\x06\x05\x91\xde\xb6\x8f\xda\x35\x80\xa8\xad\x08\xa3\x6a\x34\xa6\xbc\xbf\xe7\x7a\x60\x2b\xb4\xd0\x1f\x2e\x7f\x65\x09\x18\xea\xe2\xa3\xf4\xe9\xa0\xc7\xbe\xf6\x97\xd5\x53\x04\xa9\x44\xb9\xd4\xa6\x4a\x5a\xee\x4d\x1c\x1f\x92\x60\x0e\xef\xcd\x0e\xc4\x4a\x48\x35\xd6\xd2\x1b\x93\xfd\x6e\xb5\x6a\x83\x6d\x5e\x15\x03\x77\x9a\x7f\xbf\xba\x78\x0b\x52\xd5\x8d\x83\x42\x38\x01\x6f\x82\x35\x1e\xe5\x55\xf1\x88\x42\xef\x30\x27\x51\xcb\x0e\x81\xf7\x4e\xa3\x4d\x66\xf1\x5f\x0d\xaa\x24\x44\xee\x9f\x83\x3c\xb9\x0a\xb3\x0e\x0f\x4b\x2f\xbe\x7b\x7f\x3e\x88\x61\x33\x46\xbd\x79\x41\x2d\x69\x76\x2e\x94\x2f\x45\x16\xe8\x8b\x01\x2c\x60\x21\x2c\x16\xa0\x55\xcf\xc9\x9e\x44\x91\x4e\xd0\x9c\xc3\xbb\x12\x85\x45\x68\xea\x42\x38\x3c\x0a\x9a\x9c\x3c\xf3\xb2\x29\x8e\xe5\x14\x16\x04\x6c\x71\x71\xcc\x61\x74\x77\x82\x9d\x86\x1d\xf4\xc5\x89\x38\x42\xa6\x09\xab\xe6\xf0\xda\xf9\xee\x4b\xbb\x35\xe7\x62\x3e\x55\xcb\x46\x85\x33\x15\x0f\xde\xcc\x5b\x47\x2b\x0c\x17\x92\x15\x51\xc1\x2f\x35\xe6\x53\x4e\x52\x90\x35\x6e\x71\x8c\x0f\x14\x18\x33\xe2\xfa\x95\xd2\xb3\xe0\x5d\x90\x20\xb2\xba\x71\xfd\x60\x31\x87\x8f\x5d\x10\x8e\xa1\x82\x96\xcd\xda\x70\x42\x0e\x13\x8b\x85\x91\xb4\x16\xd4\x89\x66\xca\xa8\x5b\x71\x98\x15\xd2\x4c\x0a\x72\x27\xd5\x22\x3d\x5a\xbb\xd7\x5a\x2a\x5f\x52\xf9\x16\xcd\x61\x68\x0c\xa8\x90\xe9\x8e\xf3\x8c\x5a\xc0\xa8\x95\xe5\x9e\xe2\x30\xc2\x0d\xab\x91\x0b\x6a\xd8\xc5\x06\xb3\x42\xe7\x37\x98\x7a\xba\xf6\x83\x50\x4c\x55\x6c\x10\x5e\xf2\x44\x90\x15\x17\xe0\x23\x85\xa5\x2c\x31\x13\xa5\x41\x51\xec\x32\xfc\x22\x6d\xf2\xd6\xff\x47\x3a\x21\x61\x26\xf8\x99\x23\xb4\x0b\xb9\x5c\x22\x35\x84\x5d\x57\x22\xd1\x7a\x87\xb2\x54\x39\x95\x62\x81\xa9\xcb\x91\x0b\x85\x40\x7e\x58\xe2\x71\xdb\xdf\x7d\x8d\x5b\xe2\xb6\x1a\x5a\x66\x7c\x69\xe2\x6d\x4d\xb3\xe3\x37\x1f\x58\xd7\xd2\xc2\x8d\x54\x05\x1d\x90\xe0\x8b\xe1\x52\xf2\x4e\xe2\x39\x8a\x14\x14\x5f\x7a\x82\xb0\xe8\x27\xc4\x09\x2f\xaf\xee\xc4\x15\x76\x16\xbe\x6a\xa6\xda\x2d\x0a\x05\xb1\xad\x41\xd6\xc1\x62\x2d\x0c\x7d\x61\xea\xd6\xd7\x4c\xa7\x75\x9b\xe6\xfc\xe1\x90\x65\xa4\xf2\x7d\xfd\x5c\x69\x6f\x29\x8b\xee\x7e\xcc\xee\x1b\x2b\x02\xb3\xde\x79\x1f\xe1\x17\xa3\x6f\xb6\x16\x1b\x8a\x54\xec\x4b\x1e\x48\xb7\x41\x98\xd4\xe3\xca\x7e\x1a\x8a\x64\x42\xbc\x8a\xae\x1d\xaf\xeb\x29\xe6\xab\x18\x8c\x7c\xa3\xcf\xa5\x18\xed\x5f\xe8\x6e\xe7\xf1\xb5\x63\x78\xe3\xe5\xe9\x59\x4e\x54\xe4\x4c\x6b\x3a\x8d\xbc\x80\x2b\x76\xa9\x40\x44\x9f\x8e\x14\x4e\x6b\xfa\xf1\xc5\xe5\xdb\xd7\x6f\x7f\x9a\x0e\x17\xc4\x05\xf7\x03\x0c\xb6\xc2\xa8\xf6\x4e\xc2\xa0\x4b\x36\x69\x97\x34\x46\xa1\xee\x53\xbc\x8c\xb8\x06\xb1\x74\x68\x7c\x83\xf8\xcc\x57\x70\x54\x76\x5e\x0f\x65\x99\xc0\x8f\x2f\x67\xef\x5d\xb3\xf5\x5f\x39\xf5\x7a\x34\x28\xd0\x8d\xe7\x37\xe6\x4c\x6d\x69\x81\xb5\xc1\x9c\x4a\x87\xcc\x60\x5d\x8a\x3c\x99\x00\xa8\x6f\x23\x3e\xba\x2c\x42\x37\xca\x77\xe1\xfe\x7c\x1f\x5e\xc2\x6c\x65\x59\x82\xd5\x5a\x51\x65\xd2\x71\x98\x41\x1d\x42\x88\xf5\xf1\x83\x61\x34\xdc\x1e\x90\xb3\x0e\xc5\x44\xd9\x83\x25\xce\x69\xa4\xed\x5a\x37\x65\x41\xe2\xd1\x71\x86\x0f\xd6\x23\xca\x1e\xee\xe2\xfb\x65\x9e\xcd\x9f\xc6\xaf\x92\x5a\x89\x78\xfe\xc8\x56\x92\x5c\x9e\x03\x85\xb3\xbb\x0d\x3e\x1d\x14\x5f\x29\xdc\x83\x25\x67\x70\xb1\x19\xdc\xbc\x31\xa6\xbc\x3e\x6e\x68\x84\x2e\xe3\x0b\xd2\xfe\xd3\xd1\x71\xc1\x4a\x59\x49\x97\xc9\x95\xd2\x26\x29\x52\x74\xe9\x10\x51\x78\x89\xcf\x50\xf4\xe9\xb8\x89\xa7\x02\xca\x93\x9b\xca\x3d\x5f\x0b\xb5\x42\xb1\x48\xbe\x54\xfb\xb5\xe5\xd8\xa2\x06\x36\xea\x5d\xee\x3c\x6a\xdd\xd2\x98\xc3\x6b\x62\x2f\xd5\x6a\x8a\x2f\xb0\x04\x36\x2b\xf5\x2a\xb3\xf2\x8f\x94\x00\xa5\x5e\x5d\xc9\x3f\xb8\x38\xf5\x0b\x0e\x34\xee\x5c\x54\x28\x7e\x85\xb0\x42\xd3\x3e\xa5\x7d\xca\x11\xf6\xbb\xa7\x93\x45\xa9\xb0\xd2\x66\x37\x24\x8d\x9f\x71\xae\x40\xdf\x7d\xff\xff\x2c\xd2\xff\x7d\xf7\xfd\x64\x99\xa8\x82\xd5\x4d\xaa\xeb\x0f\xa3\x67\x09\xf3\xd4\xdb\xe7\x7f\x9f\xd2\xbf\x71\x79\x18\xc0\xcd\x6a\xa3\x6b\x34\x4e\x62\xaa\xe2\x8b\x11\xb0\x17\xaf\x3c\xec\xef\x8c\xc4\x16\xf8\xf7\x68\x70\x47\x2c\x5e\x10\x9c\x8e\x89\x31\x24\x16\x9a\x1d\x8e\x22\xa3\x74\xa0\x1b\x67\x65\xc1\x1b\xf1\xde\x88\x8d\xb4\xb0\x68\x64\x59\x0c\xa3\xc7\xac\x8a\x0f\x07\x86\xdc\x76\x52\x28\x68\xbd\xff\x20\x20\xa8\xa3\x80\x1e\xac\xcd\x98\xf8\xed\xed\x3c\xfc\x35\x9a\xfb\xf6\x76\x5e\x49\x15\x10\x52\xfa\x22\xf2\x11\xbc\x85\x45\x8d\x0d\x95\x3f\x64\xa9\x30\x11\x31\xac\x30\x8b\x4a\xc6\x23\x38\xeb\x44\xcb\x9b\x44\xac\xce\x82\xa9\x58\xda\x00\x82\x73\x59\x35\xd8\x17\xdc\xc1\x37\x0f\x42\xcc\x51\xc3\x10\x8b\x6a\x8b\x25\xe6\xd4\xfc\x69\xb7\x46\x7f\x79\x32\x2e\x52\xbc\x53\x18\x85\x78\xdf\xdf\xa9\xc0\xfb\x05\x43\xae\x95\x13\x5c\xe2\x29\x3d\xed\x9e\x82\xb9\xf7\xae\x08\xd9\x28\x53\x84\x38\x79\x81\x16\x32\xce\x31\xe8\xbb\x0d\x38\x9a\x47\xa3\x4f\xf5\x11\x13\x2c\xd4\x7b\xe2\x9b\xe9\x0d\x1a\x23\x8b\x02\x53\xd5\x30\x49\xd8\x7f\xf1\xdb\x5d\xf1\x76\x4b\x63\xad\xd0\xbf\xc1\x9b\xba\x51\x99\xb4\x59\xdd\x2c\x4a\x99\xfa\x2d\x83\xdf\x15\x9e\x1b\xd1\x20\xff\xa8\x59\x58\xf0\x0b\xef\x00\xdb\x33\x0a\x17\x1c\x5b\x16\x08\x1b\x69\xe5\xa2\xf4\x70\x08\xd5\xdc\x14\x1d\xf9\x6e\x1a\x0b\x58\xec\x40\xa8\x9d\x56\x03\x8f\x84\x59\xd6\xd8\xbc\xe0\x22\xc3\x2f\xfc\x66\x6b\x38\x8d\xdf\xed\x5d\x18\x96\x61\x70\x48\x15\xf4\xff\x63\x4f\xe7\x0e\x2e\x43\x07\x81\x4c\xb9\xc5\xc5\xcc\x27\xf7\xf0\x2d\x2c\x18\xe8\x7a\xbc\xa4\x3d\xfc\x8d\xc4\x1d\xec\x74\x52\xa8\x0c\x79\x58\x1f\xca\x9a\x04\xb2\xf9\x87\x47\xdd\xa2\x39\xfc\xa0\xd5\x86\xc2\x7d\x68\x09\x3a\x16\x4e\x1f\x90\x1f\x77\xd9\x63\xad\x46\xf0\xc4\xa1\x0e\xae\xd3\x2d\x0e\xdc\x53\xbb\x16\xd6\x3b\xd6\xaf\xcf\xa8\xd5\x70\x14\x04\x7c\xf9\xea\x6f\x1f\x7e\x9a\xdc\xc2\xf1\xec\xfb\xf5\x6f\xc5\x62\x95\x59\x14\x26\x5f\x93\xf5\xe2\xe1\x6f\x41\xa8\xa4\x09\xc3\x8a\xf6\xf0\x1f\xc2\x56\x31\x4e\x52\xee\xe8\x92\xe4\x48\x19\x48\xa2\x1c\x47\xc8\x3f\x3b\x3a\x9e\x19\x19\x49\xb4\x36\x75\xf8\x67\x10\x03\xbf\x6d\x7b\x79\xe2\x2e\x2e\x58\xe4\x19\xfc\xc8\x12\x74\x3f\xa5\x62\x54\x80\x88\xdd\x57\x80\xe1\x9f\x25\xdc\x5f\x86\xfe\x4b\x8b\xf8\x32\x28\x88\xf4\xe0\xfa\xc1\xbf\x03\x00\x00\xff\xff\x30\x68\xd6\x3f\x10\x3b\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 15120, mode: os.FileMode(420), modTime: time.Unix(1523305085, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json":   wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json":   wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json":   wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json":   wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json":   wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json":   wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json":   wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json":   wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json":   &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json":   &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json":   &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json":   &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json":   &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json":   &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json":   &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json":   &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
