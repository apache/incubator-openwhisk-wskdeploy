// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1537087727, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x7c\x7b\x6f\x1b\xb7\x96\xf8\xff\xf9\x14\x07\xc5\x05\xd2\x02\xb6\xdc\xde\x1f\x7e\xc0\x22\xd8\x2c\xe0\x4d\xdc\x5e\xdf\x26\x71\xe0\x38\x2d\x8a\x24\x98\x50\x33\x47\x12\xaf\x67\xc8\xb9\x24\x47\x8a\x6a\xe8\xbb\x2f\xce\x21\x39\x0f\x59\xf3\x90\x92\x62\x37\xff\x44\x12\xc9\xf3\xe2\xe1\x79\x92\xfe\xf0\x04\xe0\xe1\x09\x00\xc0\x77\x32\xfb\xee\x19\x7c\x57\xd8\x65\x52\x1a\x5c\xc8\x2f\x09\x1a\xa3\xcd\x77\x67\x7e\xd4\x19\xa1\x6c\x2e\x9c\xd4\x8a\xa6\x5d\xf1\xd8\x13\x80\xdd\xd9\x00\x04\xa9\x16\xba\x07\xc0\x35\x0d\x8d\xad\xb7\x55\x9a\xa2\xb5\x3d\x20\xde\x85\xd1\x31\x28\x1b\x61\x94\x54\xcb\x1e\x28\xbf\x87\xd1\x5e\x28\x69\x91\x25\x19\xda\x34\xc9\xb5\x5a\x26\x06\x4b\x6d\x5c\x0f\xac\x5b\x1e\xb4\xa0\x15\x64\x58\xe6\x7a\x8b\x19\xa0\x72\xd2\x49\xb4\xf0\xbd\x9c\xe1\xec\x0c\xde\x8a\xf4\x5e\x2c\xd1\x9e\xc1\x65\x4a\xeb\xec\x19\xdc\x19\xb9\x5c\xa2\xb1\x67\x70\x5b\xe5\x34\x82\x2e\x9d\xfd\x00\xc2\xc2\x06\xf3\x9c\xfe\x37\x98\xa2\x72\xbc\x62\xcd\xd8\x2c\x48\x05\x6e\x85\x60\x4b\x4c\xe5\x42\x62\x06\x4a\x14\x68\x4b\x91\xe2\x6c\x32\x2f\x5a\xf7\x71\x72\xb7\x42\xb8\x29\x51\xfd\xbe\x92\xf6\x1e\x5e\x32\x33\x05\x91\x70\xa7\x75\xfe\x51\x7d\x54\x77\x1a\xe6\xb8\x94\x0a\x36\xda\xdc\x4b\xb5\x84\x8d\x74\x2b\xd8\xd8\x7b\xcf\xf8\x19\x98\xca\x13\xf8\xb4\xfe\xed\x29\xa4\xba\x28\x84\xca\x9e\x11\x80\x8f\xee\x6f\xcd\x74\x86\xb8\x92\x16\x36\x32\xcf\x83\xec\x5a\xf8\x85\xb5\xe8\x6c\x8b\x57\xa9\xa0\x10\x4a\x2e\xd0\xba\xd9\x56\x14\x39\x68\xd3\xfa\xa1\xc8\x3f\xaa\xeb\x05\xa4\x95\x31\x44\x72\x26\x0d\xa6\x4e\x9b\x2d\x64\x1a\xad\x72\xb0\x12\x6b\x04\xa1\xb6\xf5\x12\x58\xc8\x1c\xcf\x1a\x72\xa0\x34\x52\x39\x0b\x8e\x48\x5a\x61\x5e\x42\x81\xd6\x8a\x25\xce\x3c\xa1\x08\x85\xb6\x8e\xd9\xd1\x0a\x36\x62\x6b\x41\x2f\xa0\xb2\x2c\x87\x1a\x88\xd3\x91\x13\xa1\xb2\x0b\x6d\xa0\x52\x7d\x9c\x09\x83\x2c\x94\x8e\x48\x5a\x5f\xe0\xbc\x80\x52\xb8\xd5\x85\xd3\x17\x1d\xc6\xa7\xcd\x82\xf3\xac\x1e\xc8\xea\xbd\x3c\x00\x20\x52\x78\xf8\xd7\x89\x54\x8c\x4e\x1f\x24\xe7\xa3\xba\xac\x94\x5b\xd1\xb1\x49\x59\x1d\x9f\x7d\x54\x0d\x6c\x83\x22\xb3\x90\x1a\xcc\x68\x82\xc8\x2d\x2c\x8c\x2e\xe0\x6f\xff\xb8\x79\x7d\x75\x31\xdb\xd8\xfb\xd2\xe8\xd2\xc2\x7c\x0b\x19\x2e\x44\x95\xbb\x8f\xea\x66\x8d\x66\x63\xa4\xc3\xf8\x13\xa4\x5a\x2d\xe4\x92\x37\x9d\x8e\xea\x8b\x57\xd7\xcf\x3e\x2a\x80\x8e\x24\xcf\xc3\xa4\xff\x6c\x4d\xfe\xaf\x01\x01\xdc\x98\xa0\x9e\x5b\x10\x79\x0e\x6e\x65\x70\x00\xb8\x28\xe5\x8a\x34\xe8\x1f\x37\xef\xee\xe8\x6b\xe5\x56\xf0\xeb\xd5\x1f\x70\x7e\x5e\x9f\x62\x78\x73\xf9\xfa\xea\xdd\xdb\xcb\x17\x57\xbd\x58\x27\x9c\x73\xbb\xd2\xc6\x0d\x1b\xad\xb7\x46\xaf\x65\x86\x16\x04\xd8\xaa\x28\x84\x21\x29\xd3\x7c\xd2\xe9\x47\x9a\x3a\x47\x52\xf2\x68\xdd\x2e\xe2\x5e\x63\x06\x73\x61\x31\x23\x96\x23\x8d\xad\xbd\x85\x3f\x2e\x5f\xbf\x9a\x62\x97\x02\xbd\xfd\x86\xe9\x12\x9c\xd6\x39\x58\x74\x74\xbe\xf8\x6c\x06\xa9\x6e\x75\x65\x40\x97\xa8\x36\x4c\x6f\x19\xec\x6c\x38\x96\xa2\x7b\xd8\xa7\xd3\xb2\x46\x63\x09\x77\x9f\xf0\xa4\x72\x6c\xe7\xc2\x3c\x50\x55\x31\x47\x43\xb2\xab\x37\x7c\x32\x2e\xbb\x55\xe9\x30\xdf\x4e\x03\x4d\xf2\xcc\x36\x9b\x53\x33\x3b\x47\xb7\x41\x54\x90\xe6\x92\xc4\x2e\x54\x06\x16\xcd\x1a\xcd\x64\xa7\x30\x9d\x86\xd6\xf6\x12\x9e\xa8\x0a\xfc\x43\x47\x75\xfa\xb7\x82\xd6\xe9\x92\xe0\x8b\xbc\x0d\x8f\xb6\x28\x4e\x67\xd5\x21\xbb\xf0\x52\x2e\x16\xc8\x16\x3d\x5a\x5c\x53\x29\xf2\xdd\x4c\xce\xb3\xae\x11\xa2\x9f\x1e\xff\x32\xd1\x82\x0d\x4e\x6d\x5b\xaf\xd3\x61\x9c\x97\x46\xff\x0b\x53\x47\xe7\x1d\xde\xde\xde\xfc\xf3\xea\xc5\xdd\x64\x3d\x89\xa2\xee\xd9\xa7\xf7\xbd\x7e\x86\x8d\xa5\x57\x88\xa9\xfa\x30\x15\x97\xc1\x42\xaf\xd1\x3e\xc6\xb9\x59\xc9\x74\x05\x1b\x34\xd8\x04\x45\x4c\x07\x9d\x9a\x8e\x26\xec\xdb\x8b\x4e\x9c\x91\x61\x8e\x8e\x36\xfb\x30\x53\x1d\x60\xde\x9d\x9b\x4a\x3d\xfb\x3f\xe7\xde\x0e\x43\x3a\xa4\x0d\xf0\xbd\x56\xf9\x96\xe3\x2b\x0b\x0b\x6d\x5a\xe2\xe1\xe8\x8f\x15\xac\xd0\x19\xfe\x30\x59\x6f\xf0\xcb\x80\x1f\xb8\xe2\x41\x08\x94\x74\x84\x5b\x8b\x7c\xaa\xd2\x4c\x40\x64\x69\xbb\xc4\x12\xb3\x61\x8c\x64\x6d\x3a\x4a\xb2\xa8\x14\xc7\xcd\xde\x46\xf4\xc4\x63\xb4\x8a\x02\x50\x4f\xc7\x9e\x16\xf8\x1f\x7b\x84\xde\xda\x54\x3f\x0f\xb3\xf3\x23\x9c\xee\x22\x17\xcb\x44\x94\x32\x21\xf7\xde\xc3\xbf\xf7\x4f\x97\x6f\xaf\xe1\x33\xf9\xff\xcf\x13\x21\x0e\x3b\xa2\x16\xd0\xdf\xae\x6e\xdf\x5d\xdf\xbc\x99\x04\xb7\x72\xab\xe4\x1e\xfb\x0e\x37\x0d\x6b\x23\xff\xe4\x1f\xe0\xf3\xaf\x57\x7f\x4c\x01\x9a\xa2\x71\x09\xed\x4e\x0f\x54\x92\x2f\x59\x6f\x3a\xb2\x33\x9a\xcc\x5b\x39\x05\x30\x87\x62\x3d\x50\xdb\x41\xdd\xf7\x31\xd2\x93\x76\x3f\x34\x1c\x39\x2c\x5e\x2a\x79\xae\x37\x49\x80\xd1\x97\x7d\xf2\x24\xa8\x27\x8d\x43\x6d\x8e\xef\x90\x5c\xea\xa4\xa1\xf6\x83\x13\x40\x97\x06\xd7\x12\x37\x3d\x70\xed\x8a\x09\x8d\x40\x2f\x3a\x8e\xba\xcc\x85\x9a\x80\xe1\x1e\xb7\x93\xb7\xf4\x1e\xb7\x53\x09\xf7\x92\x0e\x86\x60\x50\xd0\xd1\x48\xd4\xe9\xb4\x23\xc7\x00\x85\x30\xf7\x98\x45\x53\x32\x49\x54\x0c\x27\xa1\x43\xdf\xc7\x4c\x40\xc5\x53\xc6\x21\x46\xeb\x30\xb2\xab\x1d\xe7\x34\x01\x6c\x9d\x08\xf4\xc0\x6d\xc6\x27\x33\x3d\x42\xa1\x8f\x0b\x72\xb4\x36\x4a\x7b\x02\x68\xeb\x8c\xec\x85\xec\xb7\xae\xb2\x48\xce\x6b\x21\x15\x66\x64\x95\x9d\x2c\xea\x70\x79\x02\x06\x67\xfa\x85\xc0\x63\xa0\x2b\x57\x56\x53\x88\xf5\xea\xb6\x46\x33\xd7\xb6\x0f\x64\x18\x3d\x16\x68\x29\x8c\x28\x7a\x05\x6c\x44\x81\x0e\x0d\xac\x45\x5e\x21\x7b\x6f\x32\xa6\xf0\xdb\xe5\xab\xf7\x57\x9f\xc9\xb9\x17\xe2\x48\x54\x43\xa7\xf1\xf3\xcf\xd7\xaf\xae\x3e\x53\x9a\xeb\x84\xe4\x00\xf9\x10\x05\xff\x7c\x77\xf3\x66\x1c\x35\x5b\xd5\xa4\x90\x96\x62\x71\xf6\x17\xfd\xee\x82\x1c\x31\xcd\x68\x72\x77\x20\x5b\x20\x2d\x28\x1d\xb3\xee\xca\x60\x36\xfb\x38\xb4\xef\x7b\x18\x7d\xa6\x3c\x80\x91\x7c\x1e\x27\xd3\x5f\x85\x67\xec\xb8\x11\xa6\x26\x37\x3f\x09\x55\x60\x65\xa8\x2a\xba\xcf\xcf\x87\x87\x87\x19\x7d\xde\xed\x3e\x9d\xf9\xc0\xe8\xe1\x61\x66\x75\x65\x52\xdc\xed\x26\xe1\xf4\x1b\x36\x86\x93\x0b\x10\x61\xaf\x2c\xba\xd3\x70\xd5\xe2\x19\xc3\xd6\x91\x23\xb1\x58\xff\x70\x3a\x9f\xa5\x5c\x6e\x12\xc1\x05\xe1\xc4\xe9\x7b\x54\xa3\x2c\xd3\x0a\xf0\x2b\x80\x57\x9c\xc6\x7c\xa5\x0a\x61\xec\x4a\xe4\x49\xae\x53\x91\xf7\xa6\x49\x61\x56\x2b\xb2\x0d\xa6\x30\x44\xbc\xbc\x3a\x1c\xcf\x89\x08\x15\x3a\xca\x0e\x4e\x46\x29\x95\x43\xa3\xd0\x81\x70\xc4\x6e\x65\xf2\x11\x5e\x9b\xb8\x21\x49\x85\x4a\x31\xcf\x7b\xbd\xf6\xcd\xaf\x33\x78\xe1\xe7\x34\x05\x23\xce\x83\x26\x22\x58\x08\xd9\x0f\xbd\x55\x90\xce\x64\x16\xce\x62\x51\xe6\xe8\x10\x6c\x45\x5b\xba\xa8\xf2\x7c\x3b\x83\xdb\x4a\xc1\xe7\xc7\x19\xd7\x67\x4e\x10\x38\x63\x25\xdb\xe8\xa4\xc8\xf3\x6d\x93\x9e\xfa\x4c\x64\x2a\xa5\xbe\x5a\x96\x58\x27\x5c\xd5\x17\x2d\x9e\x9f\x9f\x9f\x3f\x7f\xfe\xfc\xf9\xe1\xa2\xfa\x3b\x5e\x0a\x34\x81\x26\x4e\xc2\xca\xbd\x11\xcc\xa6\x88\x28\x8a\x26\x83\xd0\x50\xf1\xc2\x19\x56\xb2\xd3\xf7\xba\xbd\x76\x3a\x92\xc1\xfd\x7e\xdf\x0e\x59\x07\x77\x7c\x32\xbe\x31\xf9\x75\x50\x9e\x20\xc1\xd0\xeb\x48\xb8\x88\xc5\xde\x9a\xac\x5c\x22\x5c\x42\xf1\x56\x0f\xd2\x87\x87\x59\x5a\x64\xbb\x5d\x28\x7d\x3d\x3c\xcc\x68\xa1\xdb\x96\xb8\xdb\xb1\xa5\xa4\xb5\xbb\xdd\xa7\xd9\x6c\x10\x37\x07\xc9\xdb\x24\xea\xf3\x48\x1f\xed\xe1\x81\x42\xf6\x80\x80\x88\xdc\xed\x3e\xc1\x4a\x58\x98\x23\xaa\x0e\xc3\xf5\x09\x99\x8e\xbd\xbf\xf1\xf6\x32\x8e\xc3\x41\x02\x66\xb3\x81\x92\x65\x40\xd1\x54\x9f\xbf\x1d\x8b\x0d\xcc\x29\x4c\xc6\xd9\xfd\x6c\xbe\x6f\x66\x1c\x64\x74\x90\xcf\x0c\x4b\x54\x19\xaa\xf4\x18\x71\x36\x8b\x4e\xc7\xd3\x1c\x91\x5e\x99\xbe\x3c\x88\xe6\x6b\x14\xe7\x30\x15\x64\x18\x2a\xd3\x17\x97\xbd\xec\xd4\x9c\x0f\xb3\xfe\xbf\xe8\x23\x22\x3f\xc7\xe9\xc9\xd7\xed\xe0\x63\x33\xf7\x6d\xf6\x70\xe2\xc9\xe8\xa3\x64\x78\x1f\xdf\xef\x75\x0f\x4e\xd9\xc9\x21\xaa\x42\x85\xe0\x54\x9f\xc3\x14\x79\x0f\x50\x57\x20\x86\x68\x81\xac\x32\xb4\x93\xb1\xc6\xd9\xf2\x88\x7f\x9d\xbe\x45\x1e\x17\xba\x52\x59\x12\xe8\x0d\x96\xaa\x57\x01\x42\x55\xfd\xa0\x85\x0c\xa5\x7b\xbe\x80\x40\x74\xb5\x0a\xf7\xb1\xb9\xbe\x5f\xc4\x65\x27\xe5\x3f\x13\x04\x61\x99\x17\x6e\x8f\x4f\x0d\x0b\x42\x4d\x2d\x09\x6d\xa3\xbe\xce\x9b\x1f\xe5\x64\x02\x5a\xf5\x3e\x83\x5c\xc7\xc8\xce\xb8\x0f\xdb\x84\x5b\xf5\xb6\x11\x1d\xa6\x5e\x11\x90\x80\x68\xb5\x27\xda\x5d\x4d\x7f\x79\x20\x68\xbf\xf1\x7d\xb7\xb1\x9b\x16\x57\xb7\xb7\x37\xb7\xef\x7a\xe8\x7e\xbe\xff\x0f\xfc\x74\x78\x34\xf0\xfc\xf9\x80\xfb\x31\xa6\x7b\xd0\xee\x95\xde\xa8\x84\x22\x85\xf1\xa3\x4e\xb3\x48\x54\x61\xd5\x0c\x5a\xc5\x71\xee\x39\xd8\xaa\xf4\x25\xfa\x0b\x2e\x2b\xcf\xec\xd6\x3a\x2c\x60\x2e\x55\x26\xd5\xd2\x82\x36\xb0\x94\x6e\x55\xcd\x67\xa9\x2e\xea\xf6\xde\xb0\xbf\x34\x26\xfa\xcc\xd4\xa0\x70\x7d\x64\xf2\xc5\x22\xe0\x29\x1d\xb5\xe4\xeb\x25\x7c\x23\x29\xde\xc5\x78\x46\x83\x68\xcc\x6e\xc7\x7d\x01\x3f\x96\xea\xcc\x0f\xd0\x87\x91\x6c\xa6\x45\x92\x3f\x2b\x83\x24\x65\x8f\x4e\xca\x5f\x44\xd2\x02\x31\x4b\xa4\x5a\xeb\xfb\x3e\x82\x7e\x66\xb3\x45\xe6\xc2\x4f\xe3\x03\x49\xcb\x60\xb3\xc2\x56\xa7\xcc\xf9\x7b\x45\x61\xe8\xaf\xa1\xf6\x1e\xb7\x75\x0d\x85\xe2\x5d\xe1\xb4\x19\xaa\x0f\xd5\x73\xb8\xdc\xf0\x21\x0a\xf3\x13\xe9\x63\x80\x33\x8a\x33\x96\x52\x13\xa5\x9d\x37\x76\x3d\x08\x5f\xb7\x6b\xae\x6c\xab\x79\x36\xe5\xbb\x5c\xf4\x6c\x47\xd4\x63\x48\x39\x7a\x2f\xa4\x2d\x84\x4b\xfb\xc2\x77\x62\xb0\x56\x0f\x5a\x90\x31\x8a\x2c\xda\x53\xa9\xf6\x8b\xfb\x7e\x3c\xd0\xc0\xf7\x93\x98\x4c\x46\xc2\xdb\xca\xe6\x8d\x26\x15\x2d\x20\x9d\x5a\xb2\x1f\x8d\x6c\x0c\x33\x11\xf2\x7f\x52\x2f\x91\xcb\x3e\xb1\x5d\xfb\x51\xbe\x54\xe5\xb7\xa4\x2e\xdb\x12\xae\xf0\x99\x68\x39\x78\x23\x8b\x9b\x95\x44\xbb\xf0\x8d\x3a\x5a\xe3\x3f\x4e\x91\x73\x24\x71\x44\xd4\xb7\xc7\x10\xb4\x27\x57\x3e\x0a\x9e\xa2\xa7\x16\x7c\x95\xc7\x8b\x12\xbf\x38\x54\x36\x12\x8d\x5f\xd8\x87\x11\x3b\x5f\xc3\x8a\x4d\x96\xd8\x57\xc0\x6c\x8e\xf2\x12\xfd\x3d\x92\x60\x7b\x9b\x52\xf9\xa3\x8e\x28\xf9\x37\x99\xb6\x8e\xef\x64\x99\x7a\xd2\x13\xcf\x31\x9f\x9e\x1a\x5b\x0f\x7d\x1d\x86\x39\x2e\x24\x31\x36\x52\x16\x6a\x5b\xeb\x06\x19\x91\xd6\xb6\x8f\xca\x35\x14\x51\x6b\x12\x46\xd9\xa8\x4c\x7e\xbc\xe6\xfa\xc2\x56\x48\xa1\xdf\xdf\xbe\x62\x0a\xb8\xd4\xc5\x47\xe9\x43\x27\xc7\xfe\xe4\x2f\x07\x4d\x21\xa4\x10\xf9\x42\x9b\xa2\x57\x72\xaf\xe3\xf8\x10\x05\x33\xb8\x33\x5b\x10\x4b\x21\xd5\x58\x4a\x6f\x4c\xf2\x2f\xab\x55\x6d\x6c\xd3\x22\x1b\xe8\xdc\x72\x71\x5f\xaa\xb2\x72\x90\x09\x27\xe0\x75\x90\xc6\xd3\xb4\xc8\x9e\x92\xe9\x1d\xc6\x24\x4a\xd9\x54\xe0\xbd\xd2\x68\x93\x58\xfc\x77\x85\xaa\xb7\x44\xee\xef\xb3\x5e\xbc\x0b\xb3\xba\x87\xa5\x65\xdf\xbd\x3e\xef\x5d\xd6\xb8\x7c\x7b\xed\x17\x94\x92\x66\xa7\x42\xf9\x50\x64\x8e\x3e\x18\x68\x5f\x30\x6b\x94\xec\x22\x92\x74\x00\xe6\x0c\xde\xe6\x28\x2c\x42\x55\x66\xc2\xed\xdd\x0e\xf1\xce\x33\xcd\xab\x6c\x9f\x4e\x61\x41\xc0\x06\xe7\xfb\x18\x46\x77\x27\xc8\x69\x58\x41\x2f\x0f\xd8\x11\x12\x4d\x58\x35\x83\x6b\xe7\xb3\x2f\xed\x56\xec\x8b\xbb\x77\x1e\xea\x83\x77\xe6\xa5\xa3\x15\x86\xb6\x6b\x41\x50\xf0\x4b\x89\xe9\x94\x93\x14\x68\x8d\x5b\x1c\xed\x03\x19\xc6\x84\xb0\x7e\x25\xf5\x4c\x78\x63\x24\x08\xac\xae\x5c\xdb\x58\xcc\xe0\xf7\xc6\x08\x47\x53\x41\xcb\xce\x6a\x73\x22\x6d\x13\x2c\x8c\xb8\xb5\xc0\x4e\x14\x53\x42\xd9\x8a\xc3\x24\x93\x66\x92\x91\x3b\xc8\x16\xf1\x51\xcb\xbd\xd4\x52\xf9\x90\xca\xa7\x68\x0e\x5b\xb7\x8a\x9b\xe3\x7c\x46\x29\x60\xe4\x8a\x6f\xf5\xee\x59\xb8\x61\x36\x52\x41\x09\xbb\x58\x63\x92\xe9\xf4\x1e\xfb\xee\xde\xbf\x10\x8a\xa1\x8a\x35\xc2\x4b\x9e\x08\xb2\xe0\x00\x7c\x24\xb0\x94\x39\x26\x22\x37\x28\xb2\x6d\x82\x5f\xa4\xed\xbd\xdb\xf0\x33\x9d\x90\x30\x13\xfc\xcc\x11\xd8\x59\xbc\x9b\xd7\x64\x25\x12\xad\x57\x28\x4b\x91\x53\x2e\xe6\xd8\xd7\x1c\xb9\x51\x08\xa4\x87\x39\xee\xa7\xfd\xcd\xd7\xb8\x25\x6e\xa3\xa1\x46\xc6\x4d\x13\x2f\x6b\x9a\x1d\xbf\x79\xc3\xba\x92\x16\xee\xa5\xca\xe8\x80\x04\x5d\x0c\x4d\xc9\x47\x8e\x67\xcf\x52\x90\x7d\x69\x11\xc2\xa4\x1f\x20\x27\xdc\xc0\x7f\x64\x57\x58\x59\xb8\xa1\x4e\xb1\x5b\x24\x0a\x62\x5a\x83\xcc\x83\xc5\x52\x18\xfa\xc2\xd0\xfd\x05\xaf\x1e\xde\xa6\x29\x7f\x38\x64\x09\xb1\x7c\xac\x9e\x2b\xed\x25\x65\xd1\x1d\x87\xec\x58\x5b\x11\x90\xb5\xce\xfb\x08\xbe\x68\x7d\x93\x95\x58\x93\xa5\x62\x5d\xf2\x85\x74\x1b\x88\xe9\x7b\x1d\xd2\x76\x43\x11\x4c\xb0\x57\x51\xb5\xe3\xa5\x04\xb2\xf9\x2a\x1a\x23\x9f\xe8\x73\x28\x46\xfb\x17\xb2\xdb\x59\x7c\xae\x11\xee\xd4\x7a\x78\x96\x1d\x15\x29\x13\xbf\x29\xe0\x05\x1c\xb1\x4b\x05\x22\xea\x74\x84\x30\x72\xf8\xb5\x5a\xe4\x32\x25\x2b\x93\x84\xc4\x8d\x38\x34\xda\xda\x58\x09\xe9\x3b\xae\xad\xf3\x13\x53\x3e\x62\x3a\x7c\x0e\x3c\x47\x5e\x39\xf8\x2d\xaa\xdc\xc9\x32\xf7\x59\xa3\x3f\x3c\xf4\x29\x44\x24\x1e\x39\x9b\xaf\xe8\x7b\xf7\xca\x20\xae\xdd\xc5\x3d\x03\xe9\xfc\x89\x2a\xb5\xb5\x72\xee\x4f\x01\x0b\x24\x32\xe2\xb1\x36\xe2\x99\x53\x5c\x52\x6b\x3a\x13\xf1\xe8\x10\x06\x4e\x18\xcd\xa3\xa4\xe7\x08\x61\x9a\x2a\xc7\x13\x24\x49\xcb\x42\x76\x91\xe3\x21\x19\x36\xf4\x47\x7b\xbf\x17\x48\xf8\x47\x1f\xb5\x08\xba\x5b\x32\xf3\x6f\x7d\xbe\x85\x90\x99\xc1\x43\x12\x16\xd6\xea\x54\x32\xe8\xc3\x14\x5f\x44\xe2\xf6\x85\xcf\xcc\x9f\x24\x79\x61\x9a\x3b\x15\xdc\xcc\xee\xbd\x4b\x1e\x1a\x64\x90\x4b\x85\x20\xcc\xb2\xe2\xa4\x98\x44\x68\x96\xbb\x5d\x3b\x5e\x64\x38\x67\x50\x7a\x12\xe3\x33\x0b\x92\x07\x8f\x1c\x41\xd1\x3d\x6e\xbf\x19\x55\xf7\xb8\xbd\x60\x58\x50\x0a\x69\x1e\x91\xd7\x1d\x66\xfb\x8e\x5f\x44\x51\x52\xb0\x5b\x83\xbb\xc7\xed\x24\x1e\x42\x80\x35\x7e\xf5\xa7\x8f\x81\xef\x23\xca\x1f\xd8\x06\x07\x78\xfe\x5e\x90\x77\x5c\x75\x29\xe4\xcc\x17\x24\x5b\xe9\x65\x54\x8e\xfa\x81\x0b\xf8\xd5\x9c\x64\x34\x20\xc6\x6a\x0f\xf8\xef\x4a\x1a\xae\x6d\x95\x95\xb3\x93\xb4\xe4\x36\xac\xf1\xa9\x8c\x3f\x2d\x1d\xad\xb0\x80\x6b\x54\x20\x16\x0e\x0d\x88\xb2\xcc\xb9\x7f\xc2\x17\x1b\x4a\xed\xe1\x84\x5e\x2a\xaa\xf5\x0c\xd6\xc2\x48\x31\xcf\xb1\x51\x78\x8b\xae\x86\xd8\x9d\x12\x0f\xb0\xcf\xa2\x9a\x7b\x53\x87\x9e\xb7\xf8\xa7\x44\x26\x3c\xf8\xe1\xcd\x5e\xe8\x3c\xd7\x1b\x4f\x0d\xd1\xce\xf2\xf4\x1f\x77\xbb\xf1\xec\x6b\x29\x1c\x6e\xc4\x36\xa1\xa4\x87\x3b\xc6\x63\x89\xc5\xdb\x6b\xf8\xc5\xaf\xe1\x44\xa9\x29\x70\x89\x52\xd2\x0f\xb1\xc6\x74\x20\x5c\xe7\xa9\xf5\x15\xb1\x78\x63\x7f\x3f\x4a\x0a\x29\x87\x41\x42\xba\x0e\x08\xea\x4a\xf1\x1e\x8c\x89\x75\xa8\x52\x18\x8b\x66\xf0\xa5\x69\x53\x21\x31\xe8\x8c\x44\x36\x78\xa1\x30\x52\x6b\xe8\x61\x6c\xbf\x5f\xde\xbe\xb9\x7e\xf3\xcb\xf4\x4a\x7c\x5c\x70\x5c\x2d\x7e\x23\x8c\xaa\xdb\xfd\x44\x64\x5f\x52\x7e\x4b\x63\xa4\x11\x1f\x62\x9f\xff\x53\xd0\x5c\x16\xc0\x33\x5f\x1c\x21\x86\x3e\x0d\x25\x70\x01\x1f\xdf\x7b\x3a\xba\x1c\xd2\xbe\x26\xdd\x2a\x7f\x42\x86\x6e\x3c\x75\x64\xcc\x64\x43\x33\x2c\x0d\xa6\xe4\x59\x12\x83\x65\x2e\xd2\xde\xdc\xea\x6e\xe5\xf1\xe8\x3c\x0b\x85\x5e\xbe\x66\xe6\x43\xe7\xee\xfd\x06\x7e\xfb\x69\xb5\x56\x94\xf4\x37\x18\x6a\xcb\x5a\x59\x1f\x9a\x73\x87\x0a\x37\x1d\x70\xd6\xa1\x98\x48\x7b\x90\xc4\x29\x35\x6a\xbb\xd2\x55\x9e\x11\x79\x14\x29\xc3\x7b\xeb\x9b\xb5\xbe\x93\xe4\x8d\x3d\xcd\xe6\x4f\xe3\xb7\x34\x6a\x8a\x78\xfe\xc8\x56\x12\x5d\x1e\x03\x19\x97\xc7\xb5\x73\x3a\xaa\xfe\x54\x1f\x81\x92\x93\x63\xb1\x1e\xdc\xbc\x31\xa4\xbc\x3e\x6e\x68\xec\x0a\xc6\xc7\x70\xed\x57\x70\xe3\x84\xe5\xb2\x90\x2e\x91\x4b\xa5\x4d\x2f\x49\x51\xa5\x43\xb0\xce\x4b\x7c\xf2\x47\x9f\xf6\xeb\xe3\x64\xec\x3c\xb8\xa9\xd8\xd3\x95\x50\x4b\x24\x07\xd0\x43\xc0\xab\x1a\x63\x5d\x90\xb7\x91\xef\x7c\xeb\x1b\xc2\x35\x8c\x19\x5c\x13\x7a\xa9\x96\x53\x74\x81\x29\xb0\x49\xae\x97\x89\x95\x7f\xf6\x11\x90\xeb\xe5\x3b\xf9\x27\xd7\x7d\xfc\x82\x0e\xc7\x8d\x8a\x0a\xc5\x7e\x90\x62\xe8\xf8\x2a\xf0\x47\x4e\x5e\x7e\xfa\x71\x32\x29\x05\x16\xda\x6c\x87\xa8\xf1\x33\x4e\x25\xe8\xa7\xbf\xff\x07\x93\xf4\xff\x7f\xfa\xfb\x64\x9a\xc8\xf4\xeb\xaa\xaf\xa0\x1e\x46\x4f\x22\xe6\x47\x2f\x9f\xff\xf7\x23\xfd\x1b\xa7\x87\x7b\xa3\x49\x69\x74\x89\xc6\xc9\xde\x9c\x22\x5a\xc0\x96\xbd\xf2\x1d\x75\xef\xcd\x42\x4f\xdd\x37\x5a\x1b\x60\xb1\xf7\x7e\xd8\x26\x46\x93\x98\x69\x56\x38\xb2\x8c\xd2\x81\xae\x9c\x95\x19\x6f\xc4\x9d\x11\x6b\x69\x61\x5e\xc9\x3c\x1b\x6e\xcc\x32\x2b\xde\x1c\x18\x52\xdb\x49\xa6\xa0\xd6\xfe\x8e\x41\x50\x7b\x06\x3d\x48\x9b\xdb\xcd\x94\xfc\xf8\x5f\xa3\xb8\x1f\x1e\x66\x85\x54\xa1\xf9\x48\x5f\x44\x3a\xd2\xca\x60\x52\x63\xe8\xe0\x0f\x59\x9f\x99\x88\xed\xa1\x30\x8b\xc2\x87\xbd\x4e\xd1\x81\x6a\x72\x6f\x33\xe8\xa4\x0e\x10\x53\x1b\xfa\xcb\x5c\xb1\x18\x2c\xb9\x3d\x6a\x1d\x76\x4c\xcc\x5e\x2d\xae\x09\x5e\x73\x7e\x38\xa7\xb4\x5b\x85\x54\x79\x9c\xa4\x98\x02\x8f\x76\x4f\xef\x1e\x15\xb7\xda\x01\x43\x78\x5d\x80\x19\x28\x3d\xed\x0a\x00\x63\x6f\xdd\xbe\x61\xa1\x4c\x21\xe2\xe0\xdd\x94\xe0\x71\xf6\x83\xf0\x4d\x68\x51\xf9\x46\xef\xa1\x12\xdd\x04\x09\xb5\xde\x08\x25\x7a\x8d\xc6\xc8\x2c\xc3\xbe\x42\x13\x51\xd8\x7e\x32\xd4\xdc\x9e\x6a\x96\xc6\x58\xa1\x7d\x39\x66\xea\x46\x25\xd2\x26\x65\x35\xcf\x65\xdf\xb3\x6c\xbf\x2b\x3c\x37\x36\x5a\xfc\xab\x28\x0a\xed\x79\xe1\xa3\x24\xfe\x8c\xcc\x05\xdb\x96\x39\xc2\x5a\xfa\x7a\x02\x9d\xc3\x54\xb0\xa5\xf1\xd7\xe2\x31\x83\xf9\x16\x84\xda\x6a\x35\xf0\xca\x88\x69\x8d\x75\x41\x9c\x87\xb7\x9f\x23\x6e\xfc\x71\x59\x90\x3b\x1e\xdc\x77\x51\x19\xfd\x7f\x1e\x9e\x69\xee\xb7\x3c\xe8\x20\xf0\xdf\xd9\xc0\xf9\x99\x77\xee\xe1\x5b\x58\x30\x90\x79\x78\x4a\x5b\xad\x2d\x22\x77\xb0\x88\xd8\xd7\xf0\x20\x0d\x6b\x77\x89\x26\xf5\xaf\xc2\xdf\x07\xa9\x17\xcd\xe0\x85\x56\x6b\x32\xf7\x21\x25\x68\x50\x38\xdd\x01\x3f\xae\xb2\xfb\x5c\x8d\xb4\xea\x86\x8a\xa3\x0d\x6f\x71\xe0\x48\xee\xea\x8e\xd9\x3e\x7f\x6d\x44\x35\x87\x93\xfa\x6b\x35\x8f\xb1\x10\x62\xd0\x96\x5a\x59\x1c\xba\xf1\xb4\x47\x34\x97\xc0\xf6\x53\xdd\x30\x1e\x93\xda\x56\x92\x1c\xcb\x15\x75\x99\x6d\xe5\x5c\xe9\xff\x16\x8f\x47\xcd\x7e\x6d\x06\x2f\xc8\xc3\xf0\x15\x89\xf6\xef\xde\xa9\xb3\xcb\x09\x3f\x07\xa6\x19\x0a\xf9\x93\x86\xb2\x31\x8d\x8d\xfb\x8a\x6a\x2d\x8d\x56\x6c\x3b\x63\x95\xa2\xaf\xf9\x1c\xb2\xbd\xab\x66\x09\xfc\x16\x96\x74\x53\x94\xc3\xb8\x5f\x5e\xfd\xf7\xfb\x5f\x26\xa7\xcd\x3c\xfb\xb8\x9c\x39\x9b\x2f\x13\x8b\xc2\xa4\x2b\xe2\x2c\x1a\xdc\xba\xa7\xd6\xab\xb6\x61\x45\x6d\x70\xbb\x5d\xb8\xb8\x7d\x51\xbe\x3e\x30\x19\x09\xbd\x89\x94\x7d\xaf\xf4\xad\x3d\xd2\x89\xde\x88\x48\xab\xdd\xb5\xbf\xd5\x39\xf0\xa7\x51\x5e\x1e\xb8\x5a\x14\x24\xf2\x0c\x7e\x66\x0a\x9a\xbf\xc4\xc1\x15\x66\x02\x76\x2c\x01\xc3\x6f\x49\x8f\xa7\xa1\x7d\x71\x34\x5e\x74\x3e\xee\x7d\xe0\xde\xc3\xaf\xa3\xdf\x7c\x1d\x7e\xc9\xf7\xe4\xd3\x93\xff\x09\x00\x00\xff\xff\xf1\xc2\x73\x19\x1d\x4d\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 19741, mode: os.FileMode(420), modTime: time.Unix(1537092250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1537087727, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1537087727, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1537087727, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1537087727, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1537087727, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1537087727, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1537087727, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1537087727, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json":   wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json":   wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json":   wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json":   wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json":   wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json":   wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json":   wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json":   wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json":   &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json":   &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json":   &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json":   &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json":   &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json":   &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json":   &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json":   &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
