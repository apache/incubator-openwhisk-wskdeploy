/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
    "io/ioutil"
    "os"
    "path/filepath"
    "strings"
    "time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
    gz, err := gzip.NewReader(bytes.NewBuffer(data))
    if err != nil {
        return nil, fmt.Errorf("Read %q: %v", name, err)
    }

    var buf bytes.Buffer
    _, err = io.Copy(&buf, gz)
    clErr := gz.Close()

    if err != nil {
        return nil, fmt.Errorf("Read %q: %v", name, err)
    }
    if clErr != nil {
        return nil, err
    }

    return buf.Bytes(), nil
}

type asset struct {
    bytes []byte
    info  os.FileInfo
}

type bindataFileInfo struct {
    name    string
    size    int64
    mode    os.FileMode
    modTime time.Time
}

func (fi bindataFileInfo) Name() string {
    return fi.name
}
func (fi bindataFileInfo) Size() int64 {
    return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
    return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
    return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
    return false
}
func (fi bindataFileInfo) Sys() interface{} {
    return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesDe_deAllJson,
        "wski18n/resources/de_DE.all.json",
    )
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
    bytes, err := wski18nResourcesDe_deAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x41\x6f\xdb\x3c\x12\xbd\xe7\x57\x0c\x72\xf1\x25\xd0\xb6\xdf\x62\x81\x45\x6f\x41\xdb\x6d\x83\xb6\x69\x90\x64\x5b\x14\xdd\x02\x61\xa4\x91\xc5\x9a\x22\x05\x92\x72\xe0\x0a\xfe\xef\x0b\x8a\x92\xed\x24\x14\x45\xc9\xb2\xdb\x05\x36\x27\xc7\xe6\xbc\xf7\x66\x48\x0e\x67\x24\x7e\x3f\x01\xa8\x4e\x00\x00\x4e\x69\x72\xfa\x0a\x4e\xdf\x23\x63\xe2\xf4\xcc\x7e\xa5\x25\xe1\x8a\x11\x4d\x05\x37\xbf\x9d\x73\x38\xbf\xba\x80\x4c\x28\x0d\x79\xa9\x34\xdc\x23\x14\x52\x2c\x69\x82\x49\x74\x7a\x02\xb0\x3e\x7b\x0a\xf7\x89\x2a\x45\xf9\x1c\xe2\x3c\x81\x05\xae\x3a\x80\xdb\x51\xb3\x38\x4f\x66\x40\x79\x51\xea\x7a\xb4\x13\x32\x6f\x06\xe7\x84\xd3\x14\x95\x8e\x56\x24\x67\x90\x52\x86\x3d\xe8\x0e\x03\x27\x01\x29\x75\x26\x24\xfd\x55\x03\xc0\xdd\x87\xb7\xdf\xee\x3a\x90\x5d\x23\x9d\x90\x0f\x19\x55\x8b\x3a\x78\x77\xef\x3f\xdf\xdc\x76\xe1\x3d\x1b\xe6\x04\xe3\x24\x47\x55\x90\xb8\xcb\xdf\xed\xef\x7d\x5a\xbe\xbc\xbd\xbe\xb9\xf8\x7c\x19\x20\x67\x33\xd2\x3d\xcb\x4d\x64\xeb\xa0\x02\x17\x1a\x52\x51\xf2\x04\x88\x86\x82\xe8\x0c\xaa\x2a\x2a\xa4\xf8\x89\xb1\xbe\x22\x3a\x5b\xaf\xa3\xff\xf0\xae\xb9\x1a\x81\xe4\x5d\x78\x55\x55\x4f\xf7\x7a\xfd\x37\xf3\xc9\x7c\xa8\xa1\x23\xe8\x1f\x30\x9d\x53\xbf\x45\x4b\xc0\x4c\x51\xf5\x18\x4b\x67\x68\xf1\xbe\x57\x55\x64\x46\x58\xb4\x1f\xa1\xf3\x35\x04\xcf\x29\xef\xdf\x6d\x18\xda\xbd\x6a\x0d\x20\x15\x12\x12\x2c\x98\x58\xe5\xc8\x75\xb7\x9c\x70\xfb\xc1\xf4\x25\xdf\x57\xc0\x53\x04\xa7\x04\x13\x32\x59\x72\x4d\xf3\x4d\x38\x55\x59\x14\x42\x6a\x4c\xe0\x7e\x05\x9f\x0b\xe4\x76\x5f\x16\x8c\xe8\x54\xc8\xbc\x5b\xcc\x38\x2c\x77\xd2\x50\x0b\x2b\x1e\x32\xa2\x20\xce\x84\x42\x0e\x04\x0a\x22\x35\x8d\x4b\x46\xe4\x86\xc8\x78\x6a\x88\x49\x6c\x64\x74\x8b\xdb\x07\xd1\x3d\x79\x7c\xeb\x5c\x6b\xaa\x57\x05\x9e\x81\x42\x0d\x5a\x00\x17\x09\xfe\x54\x5d\x13\x17\x68\xed\xa4\xbe\x35\xea\x4a\x9d\x21\xd7\x34\xb6\x87\xc1\x02\x57\x6d\xcc\x63\xc1\x53\x3a\x2f\x25\x26\xdd\xd1\x18\x82\xd0\x29\x61\x73\x38\x0f\x24\xf6\xdb\x75\xd2\x6d\xce\x99\xa1\x7c\x3d\x86\x41\xfe\x55\x55\x44\x0a\x6a\xfe\x5b\xaf\xcf\x20\x95\x22\x6f\xbe\x52\xa2\x94\x31\xfa\xd2\xf1\x28\x28\xef\xbc\xb7\x73\xa5\x50\xef\x00\x94\x3a\x0b\x13\x13\x0c\x11\x36\x15\x55\x15\x6d\xfe\xdf\xf5\x68\xf3\x65\x98\xaa\xf1\x98\x4e\x99\xff\x22\x94\x61\x62\x76\xd2\x1c\xed\xc9\xf0\x6c\xc3\x29\x0b\x6b\xd2\xd2\xd7\x3a\x2d\x29\x94\x4b\x1a\xe3\x2b\xc3\x84\x52\xfa\x14\x4f\x06\xef\x14\x7f\xa3\x89\xac\xb3\x40\xc9\x73\x22\x55\x46\xd8\x4e\xf2\xa4\x3c\x15\x16\x9a\x89\x98\x30\x58\x12\x56\xa2\xea\x96\x3a\x12\xac\x23\xe9\xf9\x20\x28\xd7\x28\x39\xfa\xce\xab\x60\x7b\x27\xfd\x9b\xcd\x81\x06\xb1\xc8\x0b\x86\x26\xdc\xaa\x8c\x63\x54\x2a\x2d\x19\x5b\x75\x33\x07\x99\x3a\x49\xdf\x09\x0d\x28\xa5\x90\x10\x4b\x24\xda\x1c\xb8\x05\x89\x17\x64\x8e\xf0\x40\x75\xd6\xfc\x96\xa3\x52\x64\xbe\x33\xb9\x40\x78\xd2\xda\x89\xc4\xfe\x60\x3e\xf8\x56\xd5\x41\xa8\x42\x9d\xb2\xe7\xdd\xff\xb0\x4f\xdb\x9d\xf6\x9a\x51\x33\xd1\x6f\x8d\x79\x87\xac\x8e\xc1\x4e\xe0\x0b\xbe\x24\x8c\x26\x4d\xa7\x28\x52\xf8\xd6\xd3\x02\x7a\x0c\x82\x67\xa3\xa0\xc7\x98\x8a\xfd\x68\x42\x9d\x91\x25\x3b\xca\x66\xd9\x93\xa7\xc7\x1d\x85\xba\x66\xa9\xb3\xbd\x26\xba\x54\x66\x6a\x0f\xec\xdb\x41\x48\x43\xe7\x4d\x4b\x3a\x9f\xa3\x3c\xc6\xd4\xed\x4f\x35\xd4\xa9\x14\x31\x39\xa6\x67\x7b\xf2\x0d\x3d\x9b\xee\x29\x4f\xcc\xff\x47\xcc\xe7\xfb\x53\xf6\x9d\xfa\x22\x35\x7d\x35\xf2\x04\x79\xbc\x32\xa6\x09\x16\x97\x24\xc7\xf5\x1a\x12\x9a\x34\xc5\xbd\x3d\xdd\xcd\xe1\xbe\x39\xdb\xe1\xba\xe4\x70\xb7\xed\x01\xdb\xde\xf8\xce\xd4\x45\x12\x73\xb1\x44\xdb\x0a\x12\xc6\x56\x4d\xeb\x8e\x09\x10\xa5\x50\x7b\x4a\xab\x3f\x41\x99\x27\x64\x3b\xa7\x7a\x55\x45\xa2\xd4\x45\xa9\xd7\x6b\x88\xa2\xc8\xeb\x8f\xc7\xac\x87\xac\x4e\x4b\x43\xa9\x9c\x46\x3d\x44\x8f\xf6\xd4\x50\x42\xaf\x71\x0f\x71\xbb\xd4\x87\x72\x76\xd9\x05\xd2\xb5\x3b\x6b\x2c\x6d\x97\x7d\x0f\xfd\xe3\x15\x3d\x88\xd9\x63\xea\x2e\xde\x3e\x44\xf0\x9a\xf0\x18\x19\x6b\xcc\x7b\x1f\x7e\x79\x4d\x7a\x48\x8c\x41\xd8\x23\x36\xbf\x4d\x47\x97\xb4\x1d\xe4\xdf\xfd\x9e\x46\x69\x00\x44\x5f\xd6\xb4\x69\x64\x44\xa7\xd4\x65\xf8\xe7\x7a\xdd\x22\x3c\x5f\x82\xdb\x7c\xdc\xbd\x7c\x43\xad\xfb\xfd\x1f\x7b\x1c\x84\x85\x66\x0f\xf4\x9e\x32\x22\x41\x86\xc7\xe9\x06\xa7\x63\x0a\x75\xe9\xc0\x95\xfa\x54\x3c\xff\xef\x42\x9e\xc4\xf3\xf0\x5d\xc8\x84\x54\x43\x9d\x3a\x70\x17\x32\x35\x5f\xa8\x7b\x87\x7f\x42\x36\x21\x95\xd3\xa9\xaf\xe7\xd7\x97\x17\x97\xef\x5e\xc1\x6d\x86\x30\xb3\xcf\x9b\x67\xf0\xed\xfc\xd3\x47\xfb\xec\x9c\x6f\x42\x8a\x5c\x53\x5d\x3f\x4d\x4f\xb0\x90\x18\x13\x8d\x49\x04\x57\x0c\x89\x42\x28\x15\xc2\xcc\x04\x7d\x06\x94\x2b\x8d\xc4\xd4\xee\x90\xa0\x8a\x25\xbd\xc7\xc4\xe0\xa8\x02\x63\x9a\x36\xef\x61\x3c\xdd\xc6\xef\x54\x14\x3a\xef\x6d\xa1\x79\xc4\xf9\x9f\x8e\xb2\xab\x8e\x72\x15\xb2\x19\x51\x70\x8f\xc8\x1f\xd5\x46\x9b\xfe\xcc\x5b\x5d\x8d\x83\x73\x8a\xbb\xf2\xd4\xf7\x63\x15\xee\x87\xe9\x95\x39\xa5\xbc\x09\x64\xdd\x36\xdb\x65\x0a\x59\xe3\xb0\xbc\xb2\x9e\xf5\xa7\xfb\x6a\x1b\x01\xe8\x14\x78\xfd\xb4\x63\x1f\x2b\x6c\x04\x90\x53\xd0\xf9\xf3\xa7\x15\x63\x25\x8d\x82\x0a\x48\x1c\xdb\x0a\xdd\x0d\xd7\x36\x96\xe1\xb9\x63\x18\x62\xdf\x06\x68\x8e\x8e\x5d\xb4\xa6\xfb\x0b\x5a\xf3\x7e\x73\xef\x2a\x32\x55\xe4\x20\xda\x00\xc3\x9e\x55\x62\x5b\x8e\x41\xa4\x81\xc6\x3d\xef\xa2\x29\x5f\x8a\x05\xd6\x65\xb4\x2d\xc4\x32\xe4\x47\xaa\x09\x8f\x2c\xc2\x5f\x53\x7d\x22\x3c\x21\x5a\xc8\x15\xa4\x14\x59\x02\x6d\x52\xff\x82\x52\x99\x30\xb7\xd7\x3d\x95\xef\x65\xf2\x58\x34\xbf\xb4\xa7\xc6\xed\x4d\x26\xb2\xb4\xb5\x91\x09\x5b\x5c\x4a\x69\xfa\xf0\xed\x63\xdb\xa5\x1d\x1d\x20\x76\x6f\xfc\x71\x91\xfd\x48\x63\xe4\x0a\x27\x8a\x6c\x07\x5a\x58\x64\x5b\xe3\x43\x45\x76\x34\xbe\x5f\x7e\x0b\x5b\x55\x11\xb3\x1f\x2f\xde\xac\xd7\x2d\x0b\x01\xfb\xca\x57\x70\x0c\x90\x3a\x08\xcb\x7d\x2d\x19\x73\x21\x57\x37\xf4\x17\x9a\x4e\x9c\xd1\x9c\x6a\x65\x9c\x6c\x2f\x02\x82\xca\x44\xc9\x12\x33\x39\x84\xd7\x37\x2b\xcc\xa6\xbe\x47\xfd\x60\x32\xd6\xcb\xbf\xfe\x59\x6f\xdf\x7f\xbc\xfc\xab\x5b\xed\xa4\x14\xee\xdb\x87\x34\x47\x61\xdf\x90\x0f\x86\x7f\xf1\xa2\x86\xff\xfb\x0b\xf3\xe7\xb9\x94\x38\x25\x85\xd3\x09\x26\xe6\x63\x63\x64\xf1\x5f\x7a\xe4\x4f\x04\xee\x5f\xd9\xed\x75\x85\x9a\xc1\xde\x06\x9c\x35\x71\x9b\x19\xe6\xe6\x09\xdd\x2e\x33\x55\x40\xe7\x5c\xc8\x9d\xbe\x32\xce\x30\x5e\xd8\x03\x21\xa4\x89\x3d\x0c\xe9\x70\x47\xb7\xab\xfc\xb8\xbe\x4e\xc2\x3b\xdc\xdd\x66\x41\x1d\xd7\xd7\xfd\x49\xfb\x52\x73\xbd\x35\x6c\x3a\xcd\xa9\xe6\xb6\x2e\xde\xdc\xf7\xcc\x08\x9f\x93\x7b\x86\x40\x94\xbd\x5b\xfb\x70\x06\x0f\x19\x8d\x33\x78\xa0\x8c\x99\xfd\xd3\xf2\x87\xa4\xee\x09\xb9\x9c\x6e\xd5\x57\xd8\x45\x5a\x9f\x57\xd1\x02\x57\xbe\x9b\x46\xee\xb1\xfd\xb0\x31\x4a\x1d\x8c\xbb\x1d\x6c\x80\x4f\x7e\x9c\xfc\x37\x00\x00\xff\xff\x8b\x28\x4e\x06\xc7\x33\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesEn_usAllJson,
        "wski18n/resources/en_US.all.json",
    )
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
    bytes, err := wski18nResourcesEn_usAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 13255, mode: os.FileMode(420), modTime: time.Unix(1506693936, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesEs_esAllJson,
        "wski18n/resources/es_ES.all.json",
    )
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
    bytes, err := wski18nResourcesEs_esAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesFr_frAllJson,
        "wski18n/resources/fr_FR.all.json",
    )
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
    bytes, err := wski18nResourcesFr_frAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesIt_itAllJson,
        "wski18n/resources/it_IT.all.json",
    )
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
    bytes, err := wski18nResourcesIt_itAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesJa_jaAllJson,
        "wski18n/resources/ja_JA.all.json",
    )
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
    bytes, err := wski18nResourcesJa_jaAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesKo_krAllJson,
        "wski18n/resources/ko_KR.all.json",
    )
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
    bytes, err := wski18nResourcesKo_krAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesPt_brAllJson,
        "wski18n/resources/pt_BR.all.json",
    )
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
    bytes, err := wski18nResourcesPt_brAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesZh_hansAllJson,
        "wski18n/resources/zh_Hans.all.json",
    )
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
    bytes, err := wski18nResourcesZh_hansAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesZh_hantAllJson,
        "wski18n/resources/zh_Hant.all.json",
    )
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
    bytes, err := wski18nResourcesZh_hantAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
    cannonicalName := strings.Replace(name, "\\", "/", -1)
    if f, ok := _bindata[cannonicalName]; ok {
        a, err := f()
        if err != nil {
            return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
        }
        return a.bytes, nil
    }
    return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
    a, err := Asset(name)
    if err != nil {
        panic("asset: Asset(" + name + "): " + err.Error())
    }

    return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
    cannonicalName := strings.Replace(name, "\\", "/", -1)
    if f, ok := _bindata[cannonicalName]; ok {
        a, err := f()
        if err != nil {
            return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
        }
        return a.info, nil
    }
    return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
    names := make([]string, 0, len(_bindata))
    for name := range _bindata {
        names = append(names, name)
    }
    return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
    "wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
    "wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
    "wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
    "wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
    "wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
    "wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
    "wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
    "wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
    "wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
    "wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
    node := _bintree
    if len(name) != 0 {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        pathList := strings.Split(cannonicalName, "/")
        for _, p := range pathList {
            node = node.Children[p]
            if node == nil {
                return nil, fmt.Errorf("Asset %s not found", name)
            }
        }
    }
    if node.Func != nil {
        return nil, fmt.Errorf("Asset %s not found", name)
    }
    rv := make([]string, 0, len(node.Children))
    for childName := range node.Children {
        rv = append(rv, childName)
    }
    return rv, nil
}

type bintree struct {
    Func     func() (*asset, error)
    Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
    "wski18n": &bintree{nil, map[string]*bintree{
        "resources": &bintree{nil, map[string]*bintree{
            "de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
            "en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
            "es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
            "fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
            "it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
            "ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
            "ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
            "pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
            "zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
            "zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
        }},
    }},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
    data, err := Asset(name)
    if err != nil {
        return err
    }
    info, err := AssetInfo(name)
    if err != nil {
        return err
    }
    err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
    if err != nil {
        return err
    }
    err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
    if err != nil {
        return err
    }
    err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
    if err != nil {
        return err
    }
    return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
    children, err := AssetDir(name)
    // File
    if err != nil {
        return RestoreAsset(dir, name)
    }
    // Dir
    for _, child := range children {
        err = RestoreAssets(dir, filepath.Join(name, child))
        if err != nil {
            return err
        }
    }
    return nil
}

func _filePath(dir, name string) string {
    cannonicalName := strings.Replace(name, "\\", "/", -1)
    return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

