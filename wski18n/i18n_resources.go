// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x6f\x1b\x37\xf2\x7f\x9f\x4f\x31\x08\xfe\x40\x5a\xc0\x51\xd2\xfe\x71\xc0\x21\x80\x71\xc8\x5d\xd2\x36\xd7\x26\x0e\xec\xf8\x8a\x22\x35\x36\xd4\x72\xb4\xcb\x6a\x97\x5c\x90\x5c\x2b\xaa\xa1\xef\x7e\x18\x92\xfb\x20\xd9\xdc\xa5\x94\x06\xd7\x37\x55\xcc\xe1\xcc\x6f\x86\xe4\x3c\xee\xc7\x47\x00\x77\x8f\x00\x00\x1e\x0b\xfe\xf8\x05\x3c\xae\x4d\x91\x35\x1a\x57\xe2\x73\x86\x5a\x2b\xfd\xf8\xcc\xaf\x5a\xcd\xa4\xa9\x98\x15\x4a\x12\xd9\x6b\xb7\xf6\x08\x60\x77\x36\xc1\x41\xc8\x95\x8a\x30\x78\x43\x4b\x73\xfb\x4d\x9b\xe7\x68\x4c\x84\xc5\x55\x58\x9d\xe3\xb2\x61\x5a\x0a\x59\x44\xb8\xfc\x1a\x56\xa3\x5c\xf2\x9a\x67\x1c\x4d\x9e\x55\x4a\x16\x99\xc6\x46\x69\x1b\xe1\x75\xe9\x16\x0d\x28\x09\x1c\x9b\x4a\x6d\x91\x03\x4a\x2b\xac\x40\x03\xdf\x88\x05\x2e\xce\xe0\x3d\xcb\xd7\xac\x40\x73\x06\x2f\x73\xda\x67\xce\xe0\x83\x16\x45\x81\xda\x9c\xc1\x65\x5b\xd1\x0a\xda\x7c\xf1\x2d\x30\x03\x1b\xac\x2a\xfa\xbf\xc6\x1c\xa5\x75\x3b\x6e\x9d\x34\x03\x42\x82\x2d\x11\x4c\x83\xb9\x58\x09\xe4\x20\x59\x8d\xa6\x61\x39\x2e\x92\x75\x51\x2a\xa6\xc9\x4b\xb0\x4a\x55\x60\x55\x50\xe4\x0c\x5a\xe9\x7f\x01\x93\x1c\xcc\x56\xe6\xa0\x1a\x94\x9b\x52\x98\x35\x34\x41\x27\x68\x8d\x90\x05\x30\xa8\x99\x14\x2b\x34\xd6\x11\xab\x86\xb8\xb2\x2a\xb0\xaa\x49\x93\x95\xa8\x7a\xf2\xdf\x5e\xbe\xfd\x25\x05\xb3\x29\x95\xb6\xd3\x07\xf0\x5e\xab\x5b\xc1\xd1\x00\x03\xd3\xd6\x35\xd3\x5b\xf0\xf4\xa0\x56\xb0\x29\x99\x7d\x62\x60\x89\x38\x3a\x9e\x2f\x33\x63\x80\x34\x6b\x47\x83\x96\x6c\x59\x62\xd5\x04\xd1\xb0\x55\xad\x4e\x32\x21\x99\x2a\x1d\xcb\x2d\x6a\x43\xb2\x63\xf6\x11\xd2\x3a\x85\x03\x1d\xc8\xb6\x5e\xa2\x76\xe6\x31\x6b\x0f\x6d\x5a\xd6\xaa\x62\x45\xc6\x1a\x91\x95\xca\xc4\xb4\xf6\x2a\xbd\x7c\xff\x06\x3e\xfd\x74\x71\xf5\xe1\x53\x22\xc7\x69\xec\x23\xa6\xff\x79\x7d\x79\xf5\xe6\xe2\x5d\x12\xdf\xd6\x96\xd9\x1a\xb7\x11\xa6\xb4\xac\xb4\xf8\xd3\xfd\x01\x3e\xfd\xfc\xfa\xb7\x14\xa6\x39\x6a\x9b\xd1\xb9\x44\xb8\x36\xcc\x96\x64\x52\x32\xf4\x82\x88\xdd\x21\xa6\x30\x56\x72\x25\x62\x9e\xca\x2f\x3a\x56\xf0\x0d\xc7\x15\x6b\x2b\x0b\xc2\xc0\xff\xfd\x74\xf1\xf6\xf5\xb3\xc5\xc6\xac\x1b\xad\x1a\xf3\x6d\x8a\x55\xaa\x4a\x6d\xb2\xc0\x23\xe6\x5f\x1d\x11\xf4\x44\xf3\x5c\x87\xf7\x3d\x65\x97\xde\xa7\xf4\x8e\x20\x81\xb5\x90\x16\x35\x23\xf7\x17\xb3\xb9\x47\x3b\xa2\x83\x46\xab\xba\x49\x02\xbe\xc6\x6d\xf2\x71\xae\x71\x9b\x0a\xda\x5b\xb9\x66\x92\x15\xc8\x27\x61\x37\x5a\xfd\x81\xb9\x1d\x82\x85\x55\xb0\x44\xa8\x99\x5e\x23\x87\x8e\xc3\xbc\xc4\xce\x69\xcc\xd8\x7f\xcf\xb7\x24\xb0\xed\x7d\x62\x84\xef\xb0\x3e\xcf\x2b\xa8\x3a\x83\xd0\xa0\xbe\x45\x5d\xa1\x31\x9d\x6d\x12\x58\x1b\xab\x45\x94\xb3\x37\x74\x6b\x50\xd3\x95\x16\x12\x39\xe8\x56\x5a\x51\xf7\xbe\x30\x41\x82\x55\x45\x51\x61\x46\x7e\x3c\x22\xe6\x83\xa3\x80\x9f\xc8\xd3\xd7\x68\x0c\x2b\xd2\x6f\xca\x2d\xea\xa5\x32\x31\x23\x87\x55\x50\xad\x6d\xda\x29\x73\x38\x37\x91\xd5\xc2\x50\x24\x71\x0e\x30\xee\xff\x3e\x94\x08\x44\x41\x17\x2f\xf7\x4e\x90\x2e\xb8\x30\x20\x95\x05\xcf\xaa\xd5\xc8\x17\xbf\x4f\x99\xe7\x40\x62\x23\x26\x62\x03\x49\x24\x27\x4e\x24\x5f\x26\x67\xee\x56\x92\xa4\x9e\xe6\x34\x51\x41\x95\xa9\x44\xf6\x50\x9f\x8f\x77\x77\x0b\xfa\xbd\xdb\xdd\x9c\xc1\x4a\xab\x1a\xee\xee\x16\x46\xb5\x3a\xc7\xdd\x2e\x49\xa6\x3f\xb0\x39\x99\x44\xd6\x9d\x95\x41\x7b\x9a\xac\xde\x3c\x73\xd2\xf6\xec\x48\x2a\xf6\x7f\x38\x5d\xcf\x46\x14\x9b\x8c\xb9\x1c\x3e\xb3\x6a\x8d\x72\x56\x65\xda\x01\x7e\x07\xb8\x1d\xa7\x29\xdf\xca\x9a\x69\x53\xb2\x2a\xab\x54\xce\xaa\x88\xc4\xeb\x8e\x0a\x2e\x1a\x94\xbf\xba\xec\x23\x78\x0c\xe3\xe5\xb9\xdd\x70\xcb\xaa\x16\x4d\xa2\x40\x89\x76\xa3\xf4\xfa\x64\x91\x2e\xbe\x49\xb4\xc0\x2c\xa9\xdb\xea\x6a\x46\xd7\x21\xd4\x66\x39\x93\x39\x56\x55\x34\x14\x5d\xfc\xbc\x80\x7f\x79\x1a\x4a\x41\x87\x9d\xa9\x02\x56\x4c\xc4\xb9\xbf\x1a\x62\x3e\x17\x3c\xbc\xc5\xba\xa9\xd0\x22\x98\x96\x8e\x74\xd5\x56\xd5\x76\x01\x97\xad\x84\x4f\x7d\x32\xda\xd7\x1d\x9f\x28\x2c\x68\xac\x15\x45\x76\xa6\xad\x60\x55\xb5\x1d\xf2\x78\x66\x0c\xda\xe9\x53\x18\x21\xf5\x45\x41\x66\x2c\xb3\x6d\x2c\xfd\x79\xfa\xf4\xe9\xd3\xf3\xf3\xf3\xf3\xd1\x59\x8c\x74\xb8\x72\x5b\x81\x08\x88\x30\x49\xaa\x2b\x67\x91\xa7\x98\xa8\x33\x0d\x87\x50\x03\x7b\xe3\x4c\x5f\xb2\xd3\xcf\x7a\xbc\x37\x5d\xc8\xe4\x79\x5f\x8f\x28\xa7\x4f\x3c\x59\xde\x9c\xfd\xf6\x44\x9e\x60\xc1\x2e\x2d\xca\x5c\x0d\x36\x9f\xce\x5e\xbb\x52\x8d\xbc\x21\xa5\x2d\xbb\xdd\x0d\xac\x94\x4e\x7d\x37\x07\xc2\xc6\x8a\x1e\x25\x2e\xf9\xe8\x5c\x6e\xb9\xcd\xba\x17\x33\xd3\x5c\xb9\xbb\xa3\x4c\x77\xb7\xeb\x9d\x3d\xc9\x2b\x59\x28\x9f\xc7\x26\xed\xdf\x60\xba\xf4\x78\x37\xe6\x55\xb7\x0e\x0f\x02\x58\x2c\x26\x2a\xe1\x20\xa2\x33\xc8\x5f\xa9\xe2\xc0\x33\x45\xc9\x8e\x3a\xae\xe6\xf5\x40\x71\x82\xa2\x1c\x1b\x94\x1c\x65\x7e\x8c\x3d\x87\x4d\x63\x41\xc7\xc9\x19\x5e\x61\xd4\xa8\xaf\x1e\x14\xf3\x25\x37\xe7\x61\x14\xe4\x7b\x5a\x1d\x4b\xfd\x46\x9e\x54\xad\x22\xaa\xff\x0f\xc3\x50\xa7\xcf\x71\x17\xe5\xcb\x4e\xf0\xbe\x27\xfd\x6b\xce\x30\xf1\x69\xc4\x90\x4c\x9f\xe3\x9e\x47\x3f\xf1\x24\x67\x9c\x30\x55\xd6\xa7\x86\x35\x87\xc8\x07\x99\xbe\x72\x9f\xc2\x02\xbc\xd5\x74\x92\x41\xec\x38\x54\x7c\xbd\xfb\xd6\xe9\xb8\x52\xad\xe4\x59\xc0\x1b\x5c\x55\xf4\x02\x54\x68\xa3\xbe\x69\x53\x8a\xbc\x84\x8d\x6b\x4b\x13\x2e\xee\x53\x53\x5b\x22\xe4\xad\xd6\x64\x98\x4e\xc1\xae\xaf\xe1\x82\x96\xff\x4d\x1c\x98\x71\xba\x90\xfd\x92\xc3\x97\xef\xe6\xcc\x14\x97\xbf\xcb\xf7\x15\x32\xe3\x7a\x3f\xb7\x82\xa3\x03\x45\xf4\x84\xdd\x85\xcb\x3e\x99\x7b\x01\xf3\xb2\x26\x4b\xe7\x7b\xb2\x98\x3c\x2c\xa5\x5d\x8d\x92\x20\x28\xf4\x5d\x23\x87\xa1\x60\xab\x5a\xd0\xe8\x4e\x7e\xc3\xa4\x1d\x5a\x68\x60\x4b\x61\xfe\x01\xdf\x6c\x9f\xbd\xfb\x36\x41\xce\x5c\xc5\x7c\x5f\xa5\x51\xe1\xf7\xb1\x6b\x39\xba\x82\x87\x2a\xaf\xa2\x45\x63\x6f\x12\xe4\x76\x87\x7c\x94\x86\xfd\xc0\x21\x51\xc7\x00\x2f\x0b\x9d\xf4\x58\x07\xdc\xaf\x3a\xbd\x60\xd4\x44\xd5\xe8\x5a\x4e\xfc\x0c\x58\x35\x2e\xbf\xfa\x77\x4d\x70\x74\xbf\x23\x08\x01\xa6\xb1\x7f\x8c\xcf\x06\x57\x08\x5c\x68\xcc\x6d\x70\x8f\xda\x37\xfb\xe7\x26\x0b\xaf\x2f\x2f\x2f\x2e\xaf\x22\xb8\xcf\x0f\xff\x03\x4f\x0e\xf7\x16\xce\xcf\x27\x12\x14\xad\xf7\x3d\xf1\x5a\xaa\x8d\xcc\xec\xb6\x99\x88\xa4\x9d\xc7\x25\x2a\x32\x55\xd8\xb5\x80\x61\x64\x00\x4a\x56\x5b\x30\x6d\xe3\xe7\x5f\xcf\x5c\xaf\x7e\x61\xb6\xc6\x62\x0d\x4b\x21\xb9\x90\x85\x01\xa5\xa1\x10\xb6\x6c\x97\x8b\x5c\xd5\xfd\xc4\x63\x3a\xa3\xd2\xba\xcb\xaa\x72\x8d\xcc\xc6\x60\xba\x79\x24\x38\x92\x3d\xbf\xb5\x11\xb6\x04\x37\xc8\xec\xba\x71\x2f\x68\x11\xb5\xde\xed\xdc\x70\xca\xaf\xe5\x8a\xfb\x05\xfa\x31\x53\x51\x8f\x20\x79\x67\x3a\x09\x89\xdf\x73\xa5\x5f\x09\xd2\x0a\x91\x67\x42\xde\xaa\x75\x0c\xd0\x0f\x2e\xae\xd1\xd3\xf2\x64\xce\x39\xd2\x36\xd8\x94\x6e\x24\x16\x90\x5a\x3f\x8e\x0c\x4b\x5f\x07\xed\x1a\xb7\x7d\x1f\xaf\x66\x92\x33\xab\xf4\x54\x8f\xb2\xa7\x71\x2d\xaf\x8f\x9d\x31\x6f\xe8\x3e\x06\x3e\xb3\x32\xfb\x8a\x4b\x2a\xeb\xa3\x61\x44\xe0\xdb\x71\x7b\xdc\x05\x73\x47\x0d\x8c\xde\xbd\x2d\xc7\x25\xd8\xac\x50\x7a\xf4\xa4\x69\xcd\x6c\x5e\x4e\x28\xd8\x5f\x0f\xda\xc0\x9d\x08\xde\x05\x5c\x21\x0f\x27\x26\x7e\xbd\x2b\x03\xb9\x42\xdf\xdc\x74\x42\xdc\xb1\x3a\xf7\x46\x44\xf5\x88\xc9\x5e\xdb\xdf\xaf\x76\x6a\x4c\x2b\x11\x7a\x50\x74\xbd\x58\x25\x62\x66\x7b\xe3\x57\xe9\x99\x87\x23\xe9\x3b\xec\x24\x2b\xfc\x26\x2c\xc3\xb4\x75\x0f\x95\xd2\x0e\x3b\x73\x73\x71\xb7\xc7\xff\x4c\xb1\x73\x07\x71\xc6\xd4\x97\xc7\x00\x3a\xb0\xab\x7b\x0a\x1e\xd1\x13\x03\xbe\xd3\xe8\x4d\x89\x9f\x2d\x4a\xd3\x81\xc6\xcf\xb6\x2b\xce\xbf\x44\x15\x93\x15\x18\xcb\x73\x86\xa7\x5c\xa0\x9f\xe7\x06\xdf\x3b\x4c\x35\x42\xc3\x70\x88\x64\x14\xdf\x44\x3e\x7a\xbe\xb3\x40\x5a\x5d\x1d\x7f\xe4\xbe\x2b\x49\xb1\x62\xb7\x83\xeb\xcb\x5f\x9c\xf2\xae\x4f\xe9\xee\x20\xfd\x8b\x6c\xe6\x09\x6e\xfc\x74\x3b\x05\x48\xcd\xaa\x95\xd2\x75\x34\x31\x7f\xdb\xad\x4f\x21\x58\xc0\x07\xbd\x05\x56\x30\x21\x17\x8b\x59\xb1\x7f\x18\x25\x7b\x2f\x95\xd7\x7c\x62\x8e\xfc\xef\xab\x8b\x77\x20\x64\xd3\x5a\xe0\xcc\x32\x78\x1b\xac\xf1\x24\xaf\xf9\x13\xf2\x59\xd3\x92\x58\x23\x7a\x41\x1b\x5c\x66\xfe\xb2\xc4\xbe\x29\x78\xe0\x52\x75\xe3\x0d\x06\x1b\x5c\x86\x6b\x77\xe6\xe6\x12\x8e\xac\x11\x44\x93\x33\xe9\x03\xf5\x12\x7d\xa8\x44\x1e\x3e\x37\x18\x36\x2d\x20\xa4\x80\x6d\xc3\x99\xc5\x03\x9f\x61\x15\xe4\x4a\xde\xa2\xb6\x07\xe2\xad\x1a\xf3\x98\x33\xec\x58\xdd\x93\x54\xed\x2e\x9b\xbb\xe2\x7b\x10\x93\x94\x5e\x32\x83\x1c\x94\x1c\xbb\x9b\xfb\xac\x66\x4d\x21\x64\x5e\xb5\x1c\x0f\xe0\x31\xb3\x77\x0a\x51\x63\xfc\xfa\xf2\xf2\xdd\x9b\x77\x3f\xa6\x27\x7c\xdd\x86\xe3\x52\xbe\x0d\xd3\x32\xcb\x55\x4d\x11\x34\xd3\x68\xa3\x61\xf6\x92\xd6\xba\x0e\x63\x5e\x73\xa7\xcb\xca\xa2\xf6\x21\xfe\x85\xf7\x6d\xe4\x38\x6e\xa6\xce\x37\xc8\x73\x23\x9e\xa3\x9d\xc7\xf8\x13\x87\x71\xa3\x93\xa3\xc5\xdc\xce\xb4\x18\x9c\x64\x4a\x2c\x38\x36\x1a\x73\x3a\xe9\x4c\x63\x53\xb1\x3c\xea\x34\x28\xf2\x92\x1c\x55\xf1\x90\x4f\xb8\x89\x9a\xbf\x18\x7b\x9e\xca\x63\xda\x88\xaa\x02\xa3\x94\xa4\xdb\x34\x88\x39\x83\x26\xdc\x14\xe3\xb3\x2a\x57\x2e\xe3\x66\x8f\xa7\xb1\xc8\x12\x15\x08\xe6\x38\x25\x1f\x32\xa5\x6a\x2b\x4e\xf0\x0c\xda\x05\xf8\x9e\xf1\x7e\xe5\x46\xd4\xee\x97\xef\x1e\x25\x21\x72\xf4\x33\xe7\x49\xb8\xbc\x04\x0a\x7d\xf7\xf3\x34\xf2\x4f\x6e\xff\x31\x22\x29\x57\x33\xec\x76\xf2\x04\xe7\x84\xba\xfd\xdd\xa9\x76\x2d\x8a\xee\x03\xa8\xf1\x97\x4f\xf3\xc0\x2a\x51\x0b\x9b\x89\x42\x2a\x1d\x85\xd4\xdd\xeb\xe0\x58\xdc\x16\x87\xca\xfd\x3a\xcc\xc5\x84\x81\xc0\x2e\x55\x7a\x5e\x32\x59\x20\x5b\x46\xbf\x57\xf9\xa5\x97\xd8\x27\x7f\xa6\xd3\xbb\xda\xfa\xee\x54\xcf\x63\x01\x6f\x48\x3c\x25\xd0\x09\x77\xc1\x21\x30\x59\xa5\x8a\xcc\x88\x3f\x63\x00\x2a\x55\x5c\x89\x3f\x91\x6c\xeb\x37\xec\x69\x3c\x5c\x51\x26\xdd\x40\x93\x8a\x8d\x25\xda\x0d\xa2\x84\xe7\xae\xa8\xf8\xee\x79\x32\x94\x1a\x6b\xa5\xb7\x53\x68\x3c\xc5\xa9\x80\xbe\xfb\xfe\xef\x0e\xd2\xdf\xbe\xfb\x3e\x19\x13\xe5\x5f\xaa\x8d\x25\x6f\x61\xf5\x24\x30\xcf\xbd\x7d\xfe\xff\x39\xfd\x37\x8f\xc7\xd5\xe1\x59\xa3\x55\x83\xda\x0a\x8c\x35\x7c\x3b\x37\x38\xf2\x57\xbe\xbd\x67\xb5\xc0\xbe\xc1\xe7\x8b\xfa\x81\x59\xd7\x08\x7c\xd8\x27\x76\x2e\x91\x2b\x77\xe1\xc8\x33\x0a\x0b\xaa\xb5\x46\x70\x77\x10\x1f\x34\xbb\x15\x06\x96\xad\xa8\xf8\x74\x13\xc0\xa9\xe2\xdd\x81\xa6\x6b\x9b\xe4\x0a\xfa\xdb\xbf\xe7\x10\xe4\x81\x57\x0f\xd6\x76\xad\x8d\xbb\xbb\x45\xf8\x6b\x67\x6e\xaa\x90\x84\x0c\x85\x2e\xfd\x83\xe5\x33\x69\xb3\x83\xda\xd5\x22\xfe\x91\xc5\xdc\x44\x57\x8a\x04\x2a\x4a\x28\x0e\xaa\x92\x07\xd2\x94\x68\xe1\x71\x52\xb5\xe1\xd0\x86\x5e\x86\x2b\x54\xf1\xb3\x30\xd1\xef\x01\xef\x95\xa9\x7b\x2e\x86\x55\x1a\x19\xdf\x82\x67\xd1\xe7\x4e\x06\x2b\xcc\x2d\x30\xa9\x6c\x89\xbe\x07\x36\x0f\xa9\x6b\x0d\xcd\x56\xea\x21\x14\x1e\x54\xb5\x5d\xd6\x90\x2b\x69\x99\xfb\xd2\x4b\xaa\xb4\x76\x93\x93\x3e\x1a\x05\x38\xa3\xa4\x80\x78\xb0\x51\x1e\x22\xce\x61\xed\x4e\x4f\x6b\x68\x2a\x04\xa2\xfd\xcc\x33\x86\xf1\xd5\xeb\x7f\x5e\xff\x98\x9c\x30\x3a\xea\xe3\xb2\x45\xbe\x2c\x86\x99\xa2\x1f\x4d\xcf\x4e\x16\x1d\xd5\x8b\xc9\xe1\xcf\xb2\x18\xcf\xba\x26\xf9\x8e\x27\x5e\x69\x9c\x0d\x32\x9d\x97\xc4\x37\x8c\x18\x32\xdf\x7d\x8d\x77\x94\xae\xba\x1d\xfd\x80\xa2\xdf\x71\x6f\xbe\x3e\x78\x8f\x99\xf8\x38\x98\x6e\xb8\x3a\x7f\xf5\xb5\x39\xe1\xca\x74\xd0\xfa\x37\xe5\xe7\x40\x13\xdf\xac\xbf\x7a\xa0\xd7\x14\x2c\xf2\x02\x7e\x70\x08\x86\xaf\xd5\x5d\x7b\x9b\x98\x1d\x0b\x60\xfa\x3b\xd0\xe3\x31\x8c\x47\x4d\xdd\x68\x34\x40\x7a\x74\xf3\xe8\xbf\x01\x00\x00\xff\xff\x0d\x20\x90\xa6\xe8\x32\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 13032, mode: os.FileMode(420), modTime: time.Unix(1520362388, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

