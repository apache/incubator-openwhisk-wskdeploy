// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5b\x5f\x8f\x1b\x37\x92\x7f\xf7\xa7\x28\x04\x07\x24\x01\x64\x4d\xb2\x87\x03\x0e\x01\xfc\xe0\x8b\x9d\x5d\xdf\xda\x71\x30\xb6\xd7\x58\xf8\x06\x3d\x54\x77\x49\x62\xd4\x4d\xf6\x91\x6c\xc9\xca\x40\xdf\xfd\x50\x45\xb2\xbb\xa5\x11\xbb\x5b\xb2\x73\xeb\x17\x4b\x43\xb2\xea\x57\xc5\x62\xb1\xfe\x50\x9f\x9e\x00\x3c\x3c\x01\x00\xf8\x46\x16\xdf\xfc\x04\xdf\x54\x76\x95\xd5\x06\x97\xf2\x73\x86\xc6\x68\xf3\xcd\xcc\x8f\x3a\x23\x94\x2d\x85\x93\x5a\xd1\xb4\x97\x3c\xf6\x04\xe0\x30\x1b\xa0\x20\xd5\x52\x27\x08\xbc\xa2\xa1\xb1\xf5\xb6\xc9\x73\xb4\x36\x41\xe2\x5d\x18\x1d\xa3\xb2\x13\x46\x49\xb5\x4a\x50\xf9\x18\x46\x93\x54\xf2\xaa\xc8\x0a\xb4\x79\x56\x6a\xb5\xca\x0c\xd6\xda\xb8\x04\xad\x5b\x1e\xb4\xa0\x15\x14\x58\x97\x7a\x8f\x05\xa0\x72\xd2\x49\xb4\xf0\x9d\x9c\xe3\x7c\x06\xbf\x89\x7c\x23\x56\x68\x67\xf0\x3c\xa7\x75\x76\x06\xef\x8d\x5c\xad\xd0\xd8\x19\xdc\x36\x25\x8d\xa0\xcb\xe7\xdf\x83\xb0\xb0\xc3\xb2\xa4\xff\x0d\xe6\xa8\x1c\xaf\xd8\x32\x37\x0b\x52\x81\x5b\x23\xd8\x1a\x73\xb9\x94\x58\x80\x12\x15\xda\x5a\xe4\x38\x9f\x2c\x8b\xd6\x29\x49\x9e\x83\xd3\xba\x04\xa7\x83\x20\x33\x68\x94\xff\x04\x42\x15\x60\xf7\x2a\x07\x5d\xa3\xda\xad\xa5\xdd\x40\x1d\x64\x82\xc6\x4a\xb5\x02\x01\x95\x50\x72\x89\xd6\xf1\x64\x5d\x13\x55\x51\x06\x52\x15\x49\xb2\x94\x65\x3b\xfd\x9f\xcf\xdf\xbc\x9e\x82\xd9\xae\xb5\x71\xc3\x1b\xf0\x9b\xd1\x5b\x59\xa0\x05\x01\xb6\xa9\x2a\x61\xf6\xe0\xe7\x83\x5e\xc2\x6e\x2d\xdc\xb7\x16\x16\x88\xbd\xed\xf9\x32\x35\x06\x48\xa3\x7a\xb4\xe8\x48\x97\x6b\x2c\xeb\xc0\x1a\xf6\xba\x31\x93\x54\x48\xaa\x9a\x8e\x65\x8b\xc6\x12\xef\x94\x7e\xa4\x72\x2c\x70\x98\x07\xaa\xa9\x16\x68\x58\x3d\x76\xe3\xa1\x4d\xe6\x45\x56\x30\x6a\x3f\x6c\x2a\x2c\xec\xdb\x1a\xd5\xc7\x63\x61\x17\xe8\x76\xb4\x1d\x79\x29\xc9\x2a\xd8\xb4\xd0\x6c\xd1\x4c\xb6\xe1\xe9\x18\x7a\xd6\x47\x7c\xa2\x3d\xf3\x1f\xf4\xf2\xff\xd3\x9a\x97\xa5\x58\x65\xa2\x96\xd9\x5a\xdb\x94\xe1\x78\x28\xcf\x7f\x7b\x05\xf7\x7f\x7b\xfb\xee\xfd\xfd\x44\x8a\xc3\xdb\xdf\x23\xfa\x8f\x97\xb7\xef\x5e\xbd\xfd\x75\x12\xdd\xc6\xad\xb3\x0d\xee\x13\x44\x69\x58\x1b\xf9\x07\xff\x01\xee\xff\xfe\xf2\x9f\x53\x88\xe6\x68\x5c\x46\x7a\x4b\x50\xad\x85\x5b\xd3\xb6\x90\xad\xce\x69\x32\x2b\x79\x0a\x61\xad\x96\x32\xe5\xec\xfd\x20\x93\x82\xef\x0a\x5c\x8a\xa6\x74\x20\x2d\xfc\xdb\xdf\xde\xbe\x79\x79\x33\xdf\xd9\x4d\x6d\x74\x6d\xbf\x9f\xa2\x95\xb2\xd4\xbb\x2c\xd0\x48\x5d\x51\x3c\x09\xda\x49\xe3\x54\x3b\xa3\x1a\xd2\x4b\xeb\x96\x5b\xeb\x9b\x40\xba\x36\xb8\x95\xb8\x4b\xd0\xb5\x6b\x06\x1a\x89\xde\x1c\x1d\x8f\xba\x14\x6a\x02\x87\x0d\xee\x27\x6f\xe9\x06\xf7\x53\x81\x7b\x4d\x57\x42\x89\x15\x16\x83\x8a\xae\x8d\xfe\x1d\x73\xd7\xdd\xb9\x4e\xc3\x02\xa1\x12\x66\x83\x05\x44\x0a\x53\x54\xc5\x74\x32\xba\x0b\x52\xc2\x04\x56\x3c\x65\x9c\x62\x74\x21\x23\xbb\x7a\xe4\xf4\x27\x90\x6d\x2f\xab\x04\xdd\x6e\x7c\xb2\xd0\x23\x08\xbd\x7b\x2e\xd1\xda\xa8\xed\x09\xa4\xad\x33\x32\x49\xd9\x6f\x5d\x63\xd1\xd0\x41\x91\x0a\x0b\x30\x8d\x72\xb2\x6a\x2f\xa9\x09\x1c\x9c\x49\x2b\x81\xc7\x40\x37\xae\x6e\xa6\x80\xf5\xe6\xb6\x45\xb3\xd0\x36\x45\x32\x8c\x5e\x4a\xb4\x16\x46\x54\x49\x05\x1b\x51\xa1\x43\x03\x5b\x51\x36\xc8\x01\x1e\x39\x53\xf8\xc7\xf3\xd7\x1f\x5e\xde\xc3\x52\x9b\x4a\x5c\xc8\x6a\xe8\x34\xde\xff\xf2\xea\xf5\xcb\x7b\xc8\xb5\x72\x42\x52\x04\x0c\xe7\x10\xfc\xf7\xbb\xb7\xbf\x8e\xb3\x66\xaf\x9a\x55\xd2\xd2\x0d\xc8\xf7\x45\xfa\xba\x78\xbf\x46\xa0\x19\x74\x46\x73\x7f\x67\x90\x2f\x90\x16\x94\x76\xe0\x49\x35\x06\x8b\xf9\xff\x0c\xed\xfb\x09\xc7\x5a\x0e\x5c\xa5\xc4\x91\xee\x3c\x9a\xf2\x65\x7c\xc6\x8e\x1b\x71\x6a\xe7\x5c\xc7\x2a\x88\x32\x94\x3a\x9d\xca\xf3\xe9\xe1\x61\x4e\x9f\x0f\x87\xbb\x19\x2c\x8d\xae\xe0\xe1\x61\x6e\x75\x63\x72\x3c\x1c\x26\xf1\xf4\x1b\x36\xc6\x93\xa6\xc5\xbd\xb2\xe8\xae\xe3\xd5\xaa\x67\x8c\xdb\x91\x1e\x49\xc4\xf6\x0f\xd7\xcb\x59\xcb\xd5\x2e\x13\x9c\x35\x66\x4e\x6f\x50\x8d\x8a\x4c\x2b\xc0\xaf\x00\x5e\x71\x9d\xf0\x8d\xaa\x84\xb1\x6b\x51\x66\xa5\xce\x45\x99\xe0\xf8\x21\xce\xea\x85\xca\xc1\x15\x5a\xcf\x8f\x57\x87\xe3\x39\x91\xa1\x42\xb7\xd3\x66\x73\x35\x4b\xa9\x1c\x1a\x85\x0e\x84\x23\x71\x1b\x53\x8e\xc8\xda\xc5\x0d\x59\x2e\x54\x8e\x65\x99\xbc\xb5\xdf\xfe\x7d\x0e\x3f\xfb\x39\xe4\x80\xba\x95\x53\x19\x2c\x85\x4c\x53\x7f\xd1\x05\x30\x85\x2c\xc2\x59\xac\xea\x12\x1d\x82\x6d\x68\x4b\x97\x4d\x59\xee\xe7\x70\xdb\x28\xb8\x6f\xd3\x9f\x36\x33\xb8\xa7\xfb\xce\x60\xa5\xb7\x48\xbe\xd1\x49\x51\x96\xfb\x2e\x73\x14\xd6\xa2\x1b\xde\x85\x1e\x52\x9f\x86\x66\xd6\x09\xd7\xa4\xa2\xc5\xa7\x4f\x9f\x3e\x7d\xf6\xec\xd9\xb3\xde\x5e\xf4\x64\x78\xc7\x4b\x81\x26\xd0\xc4\x49\x5c\xb9\x80\x82\xc5\x14\x15\x45\xd5\x14\x10\xaa\x2e\x5e\x39\xc3\x46\x76\xfd\x5e\xf7\xd7\x4e\x67\x32\xb8\xdf\x1f\xfa\x21\xeb\xe0\x8e\x4f\xe6\x37\xa6\xbf\x23\x96\x57\x68\x30\xd7\x55\x25\x54\x91\x71\xea\xc8\xb7\x35\x79\xb9\x4c\xb8\x8c\xe2\xad\x04\xd3\x87\x87\x79\x5e\x15\x87\x43\x48\x38\x1f\x1e\xe6\xb4\xd0\xed\x6b\x3c\x1c\xd8\x53\xd2\xda\xc3\xe1\x6e\x3e\x1f\xe4\xcd\x41\xf2\x3e\x8b\xf6\x3c\x52\x6c\x7b\x78\xa0\x90\x3d\x30\x20\x90\x87\xc3\x1d\xac\x45\x28\xa7\xf4\x05\x6e\x4f\xc8\x74\xee\xe9\xea\xdc\x8b\x38\x0e\x67\x01\xcc\xe7\x03\xa9\x76\x60\x11\x37\xf4\x6b\x8a\xd8\xd1\x9c\x22\x64\x9c\x9d\x16\xf3\x43\x37\xe3\xac\xa0\x83\x72\x16\x58\xa3\x2a\x50\xe5\x97\xa8\xb3\x5b\x74\x3d\x9f\xee\x88\x24\x75\xfa\xe2\x2c\x9b\x2f\x31\x9c\xf3\x28\xc8\x31\x34\x26\x15\x97\xbd\x38\xaa\xf4\x9c\x17\xfd\x5f\x78\x47\x44\x79\x2e\xb3\x93\x2f\xdb\xc1\xc7\x6e\xee\xeb\xec\xe1\xc4\x93\x91\x42\x32\xbc\x8f\x1f\x4e\x6a\x76\xd7\xec\xe4\x10\xaa\x50\x21\xb8\xf6\xce\x61\x44\xfe\x06\x68\x2b\x10\x43\x58\xa0\x68\x0c\xed\x64\x60\xdb\x8f\x7f\xfe\x3c\x7b\x8b\x32\x2e\x75\xa3\x8a\x2c\xe0\x0d\x9e\x2a\x69\x00\x25\xba\xa4\x0f\xde\xad\x65\xbe\x86\x1d\x77\x29\x08\x57\xe1\xe3\x46\xb7\x46\xc8\x1b\x63\x48\x31\x51\xc0\x58\x34\xe1\x4b\xca\x7f\x26\x0a\xc2\xb2\x2c\xa4\xbf\xc9\x61\x41\xa8\xa9\x65\xa1\x58\x9b\xaa\x77\xfb\x51\x4e\x26\xa0\x57\xef\x33\xc8\x75\x8c\x62\x06\xa2\xec\x87\xbe\xed\xb6\x11\x0e\xd3\xae\x08\x4c\x40\x18\x6c\x75\x7d\xd3\x59\x3a\x14\xd2\x60\xee\x82\xf5\x1b\x5f\xed\x1e\xeb\x23\xbc\xbc\xbd\x7d\x7b\xfb\x2e\x81\xfb\xd9\xe9\x3f\xf0\xd3\xe1\xd1\xc0\xb3\x67\x03\xd7\x8f\x31\xc7\x07\x6d\xa3\xf4\x4e\x65\x14\x29\x8c\x1f\x75\x9a\x45\xaa\x0a\xab\xe6\xd0\x35\x08\x40\xab\x72\x0f\xb6\xa9\x7d\xb7\xeb\x86\xcb\xca\x73\xbb\xb7\x0e\x2b\x58\x48\x55\x48\xb5\xb2\xa0\x0d\xac\xa4\x5b\x37\x8b\x79\xae\xab\xb6\xa8\x3e\x7c\x5f\x1a\x13\xef\xcc\xdc\xa0\x70\x29\x98\xdc\x7d\x04\x9e\x72\x64\x96\x3b\xe9\xd6\xc0\x6d\x4b\xa8\xd0\x5a\xb1\xc2\x9f\x68\x10\x8d\x39\x1c\xb8\x78\xef\xc7\x72\x5d\xf8\x01\xfa\x30\x92\xcd\xf4\x20\xf9\xb3\x32\x08\xa9\x78\x74\x52\xfe\x24\x48\x4b\xc4\x22\x93\x6a\xab\x37\x29\x40\xbf\xb0\xdb\x22\x77\xe1\xa7\xf1\x81\xa4\x65\xb0\x5b\x73\x03\x2c\x20\x75\xbe\xf9\x18\x86\xfe\x1c\xb4\x1b\xdc\xb7\x35\x14\x8a\x77\x85\xd3\x66\xa8\x3e\xd4\xce\xe1\x72\xc3\xa7\xa8\xcc\x3b\xb2\xc7\x40\x67\x94\x67\x2c\xa5\x66\x4a\x3b\xef\xec\x12\x0c\xdf\xf4\x6b\xae\xec\xab\x79\x36\xe5\xbb\x5c\xf4\xec\x47\xd4\x63\x4c\x39\x7a\xaf\xa4\xad\x84\xcb\x53\xe1\x3b\x09\xd8\x9a\x07\x2d\x28\x98\x45\x11\xfd\xa9\x54\xa7\xc5\x7d\x3f\x1e\x30\x40\xa1\xd1\x17\x96\x98\x09\x6f\x2b\xbb\x37\x9a\x54\xf5\x88\x1c\xd5\x92\xfd\x68\x14\x63\x58\x88\x90\xff\x93\x79\x89\x52\xa6\xd4\xf6\xca\x8f\xd2\x31\x0f\x5b\xd2\x96\x6d\x89\x57\xf8\x4c\x58\xba\xde\xea\x11\x2a\x6d\x18\xbb\xe0\x2e\x38\xaf\xf1\x1f\xa7\xe8\x39\x42\x1c\x51\xf5\xed\x25\x80\x4e\xf4\xca\x47\xc1\x23\xfa\xd6\x82\xaf\xf2\x78\x55\xe2\x67\x87\xca\x46\xd0\xf8\x99\xef\x30\x12\xe7\x4b\x44\xb1\xd9\x0a\x53\x05\xcc\xee\x28\xaf\xd0\x77\x6f\x83\xef\xed\x4a\xe5\xa1\x58\xd3\xdd\x64\x74\xbf\xc9\xbc\x77\x7c\x27\xeb\xd4\x43\xcf\xbc\xc4\x7c\x7a\x5a\x6e\x09\x7c\x47\x02\x73\x5c\x48\x6a\xec\xb4\x2c\xd4\xbe\xb5\x0d\x72\x22\xbd\x6d\x1f\xd5\x6b\x28\xa2\xb6\x10\x46\xc5\x68\x4c\x79\xb9\xe5\xfa\xc2\x56\x48\xa1\x3f\xdc\xbe\x66\x04\x5c\xea\xe2\xa3\xf4\xe9\x28\xc7\xbe\xf3\x2d\xf9\x29\x40\x2a\x51\x2e\xb5\xa9\x92\x9a\x7b\x13\xc7\x87\x10\xcc\xe1\xbd\xd9\x83\x58\x09\xa9\xc6\x52\x7a\x63\xb2\xdf\xad\x56\xad\xb3\xcd\xab\x62\xa0\x73\xcb\xc5\x7d\xa9\xea\xc6\x41\x21\x9c\x80\x37\x41\x1b\xdf\xe6\x55\xf1\x2d\xb9\xde\x61\x4e\xa2\x96\x5d\x05\xde\x1b\x8d\x36\x99\xc5\xff\x6d\x50\x25\x4b\xe4\xfe\xd1\xcb\xcd\xbb\x30\xeb\xf8\xb0\xf4\xfc\xbb\xb7\xe7\x23\x1f\x36\xe3\xaa\x37\x2f\xa8\x25\xcd\xce\x85\xf2\xa1\xc8\x02\x7d\x30\x80\x05\x2c\x84\xc5\x02\xb4\xea\x19\xd9\x4d\x84\x74\x86\xe6\x1c\x7e\x2b\x51\x58\x84\xa6\x2e\x84\xc3\x13\xa7\xc9\x97\x67\x5e\x36\xc5\x29\x4e\x61\x41\xc0\x0e\x17\xa7\x1c\x46\x77\x27\xe8\x69\xd8\x40\x9f\x9f\xf1\x23\xa4\x9a\xb0\x6a\x0e\xaf\x9c\xcf\xbe\xb4\x5b\xf3\x5d\xcc\xa7\x6a\xd9\xa8\x70\xa6\xe2\xc1\x9b\x79\xed\x68\x85\xa1\xed\x5a\x11\x15\xfc\x5c\x63\x3e\xe5\x24\x05\xac\x71\x8b\xa3\x7f\x20\xc7\x98\x11\xd7\x2f\x44\xcf\xc0\x3b\x27\x41\x64\x75\xe3\xfa\xce\x62\x0e\x1f\x3b\x27\x1c\x5d\x05\x2d\x9b\xb5\xee\x84\x0c\x26\x06\x0b\x23\xd7\x5a\x10\x27\xaa\x29\xa3\x6c\xc5\x61\x56\x48\x33\xc9\xc9\x9d\x15\x8b\xe4\x68\xf5\x5e\x6b\xa9\x7c\x48\xe5\x53\x34\x87\x21\x31\xa0\x40\xa6\x3b\xce\x33\x4a\x01\xa3\x54\x96\x73\x8a\x63\x0f\x37\x2c\x46\x2e\x28\x61\x17\x5b\xcc\x0a\x9d\x6f\x30\xf5\x40\xef\x67\xa1\x98\xaa\xd8\x22\xbc\xe0\x89\x20\x2b\x0e\xc0\x47\x02\x4b\x59\x62\x26\x4a\x83\xa2\xd8\x67\xf8\x59\xda\xe4\xdb\x86\x5f\xe8\x84\x84\x99\xe0\x67\x8e\xd0\x2e\xe4\x72\x89\x94\x10\x76\x59\x89\x44\xeb\x0d\xca\x52\xe4\x54\x8a\x05\xa6\x9a\x23\x6f\x15\x02\xd9\x61\x89\xa7\x69\x7f\xf7\x35\x6e\x89\xdb\x69\x68\x99\x71\xd3\xc4\xeb\x9a\x66\xc7\x6f\xde\xb1\xae\xa5\x85\x8d\x54\x05\x1d\x90\x60\x8b\xa1\x29\xf9\xe8\xe2\x39\xf1\x14\xe4\x5f\x7a\x40\x18\xfa\x19\x38\xe1\x7d\xd9\x23\xbf\xc2\xc6\xc2\x0d\x75\x8a\xdd\x22\x28\x88\x69\x0d\xb2\x0c\x16\x6b\x61\xe8\x0b\x53\xb7\x3e\x66\x3a\x2f\xdb\x34\xe3\x0f\x87\x2c\x23\x91\x2f\xb5\x73\xa5\xbd\xa6\x2c\xba\xcb\x98\x5d\xea\x2b\x02\xb3\xde\x79\x1f\xe1\x17\xbd\x6f\xb6\x16\x5b\xf2\x54\x6c\x4b\xbe\x90\x6e\x03\x98\xd4\x13\xd2\xfe\x35\x14\xc9\x04\x7f\x15\x4d\x3b\x3e\x4a\x20\x9f\xaf\xa2\x33\xf2\x89\x3e\x87\x62\xb4\x7f\x21\xbb\x9d\xc7\x37\x9d\xe1\x25\x9b\xa7\x67\xf9\xa2\x22\x63\x5a\xd3\x69\xe4\x05\x1c\xb1\x4b\x05\x22\xda\x74\xa4\x30\x72\xf8\xb5\x5a\x96\x32\x27\x2f\x93\x85\xc4\x8d\x24\x34\xda\xda\x58\x09\x49\x1d\xd7\xde\xf9\x89\x29\x1f\x09\x1d\x3e\x07\x99\xa3\xac\x1c\xfc\x56\x4d\xe9\x64\x5d\xfa\xac\xd1\x1f\x1e\xfa\x14\x22\x12\xcf\x9c\xdd\x57\xbc\x7b\x4f\xca\x20\xae\xdf\xc5\x9d\x81\x74\xfe\x44\xd5\xda\x5a\xb9\xf0\xa7\x80\x15\x12\x05\xf1\x5c\x3b\xf5\x2c\x28\x2e\x69\x2d\x9d\x41\x3c\x3a\x84\x41\x12\x66\xf3\x28\xe9\xb9\x40\x99\xa6\x29\xf1\x0a\x4d\xd2\xb2\x90\x5d\x94\x78\x4e\x87\x1d\xfe\xe8\xef\x4f\x02\x09\x55\xdc\xd0\xa1\x8e\x2a\x38\xde\x92\xb9\x7f\x10\xfc\x35\x94\xcc\x02\x9e\xd3\xb0\xb0\x56\xe7\x92\x49\x9f\x47\x7c\x13\xc1\x9d\x2a\x9f\x85\xbf\x4a\xf3\xc2\x74\x6f\x2a\xb8\x99\x9d\x7c\xc1\x19\x1a\x64\x50\x4a\x85\x20\xcc\xaa\xe1\xa4\x98\x54\x68\x56\x87\x43\x3f\x5e\x64\x3a\x33\xa8\x3d\x44\xef\xcb\xf7\xac\x0f\x1e\xb9\x00\xd1\x06\xf7\x5f\x0d\xd5\x06\xf7\x37\x4c\x0b\x6a\x21\xcd\x23\x78\xc7\xc3\xec\xdf\xf1\xb3\xa8\x6a\x0a\x76\x5b\x72\x1b\xdc\x4f\x92\x21\x04\x58\xe3\x4f\x7f\x52\x02\x7c\x17\x59\x7e\xcf\x3e\x38\xd0\xf3\xef\x82\xfc\xc5\xd5\x96\x42\x66\xbe\x20\xd9\x4b\x2f\xa3\x71\x44\xd1\x04\xf8\xd5\x9c\x64\x74\x24\x12\x32\x7c\x7c\x7e\xfb\xeb\xab\x5f\xff\x3a\xbd\x1e\x1a\x17\x5c\x56\x11\xdd\x09\xa3\xda\xa6\xab\x41\x97\xac\x42\xdd\xd2\x18\x6d\xe0\xa7\xd8\x6d\xbd\x03\xb1\x74\x68\x7c\x05\xec\x27\x9f\xa2\x92\xe0\x77\x43\x61\x74\xe0\xc7\xaf\x4f\x2e\x4e\x4a\xfb\x8f\x55\x7b\x45\x28\x28\xd0\x8d\x07\xf0\xcc\x99\x2c\xb9\xc0\xda\x60\x4e\xe7\x3b\x33\x58\x97\x22\x4f\x46\xb8\xef\xd7\x9e\x8f\x2e\x8b\x50\x6e\xe3\xc7\x3e\x3e\x80\x39\xee\x32\xef\x64\x59\x82\xd5\x5a\x51\xea\xd5\x71\x68\xed\xbb\xb1\x3e\x40\xe2\x3e\x01\xee\x8e\xc8\x59\x87\x62\x22\xf6\xa0\x89\x6b\x2a\x85\x76\xad\x9b\xb2\x20\x78\x14\xaf\xc0\x07\xeb\x5b\x66\xbe\x9e\xef\x8f\x1c\xcd\xe6\x4f\xe3\xbd\xf2\x16\x11\xcf\x1f\xd9\x4a\xc2\xe5\x39\xd0\x79\x7e\x5c\xc1\x24\xff\xec\x53\xa1\x0b\x58\x72\x8a\x22\xb6\x83\x9b\x37\xc6\x94\xd7\xc7\x0d\x8d\xbd\x99\xf8\x43\x80\xfe\x2f\x00\xc6\x81\x95\xb2\x92\x2e\x93\x2b\xa5\x4d\x12\x52\x34\xe9\x10\x32\xf1\x12\x1f\x82\xd3\xa7\xd3\x2a\x25\x65\x88\x9e\xdc\x54\xee\xf9\x5a\xa8\x15\x8a\x45\xd2\xcf\xbd\x6e\x39\xb6\x65\x51\x1b\xe5\x2e\xf7\xbe\x2d\xd7\xd2\x98\xc3\x2b\x62\x2f\xd5\x6a\x8a\x2d\x30\x02\x9b\x95\x7a\x95\x59\xf9\x47\x0a\x40\xa9\x57\xef\xe4\x1f\x9c\x7d\xfb\x05\x47\x12\x77\x26\x2a\x14\x3f\xb3\xa2\x48\x26\xfe\x22\xe2\x07\x0e\x21\x7f\xfc\x61\x32\x94\x0a\x2b\x6d\xf6\x43\x68\xfc\x8c\x6b\x01\xfd\xf8\x97\xff\x64\x48\xff\xf1\xe3\x5f\x26\x63\xa2\x14\x5d\x37\xa9\xb2\x66\x18\xbd\x0a\xcc\x0f\x5e\x3f\xff\xfe\x03\xfd\x1b\xc7\xc3\x1d\xaa\xac\x36\xba\x46\xe3\x64\x32\xb2\x8b\x1e\xb0\xe7\xaf\x7c\x5f\xd3\x19\x89\x6d\x67\xd3\xb7\xbb\x3a\x62\xb1\x03\x7a\xde\x27\x46\x97\x58\x68\x36\x38\xf2\x8c\xd2\x81\x6e\x9c\x95\x05\x6f\xc4\x7b\x23\xb6\xd2\xc2\xa2\x91\x65\x31\xdc\x1e\x63\x51\xbc\x3b\x30\x64\xb6\x93\x5c\x41\x6b\xfd\x47\x0e\x41\x9d\x38\xf4\xa0\x6d\x6e\xfa\x51\x08\xea\xff\x1a\xd5\xfd\xf0\x30\xaf\xa4\x0a\x2d\x20\xfa\x22\xf2\x91\x82\x32\x43\x8d\x15\x23\x7f\xc8\x52\x6e\x22\x16\xe9\xc3\x2c\x8a\x58\x4f\xea\xf5\x67\x6a\x7a\xc9\x92\xfc\x55\x75\x78\x46\x1b\xba\x7c\x9c\x37\x0e\x16\x3e\x1e\x35\x70\x8e\x5c\xcc\x49\x45\xa4\x0d\x8b\xb0\xc4\xdc\x81\x50\xda\xad\x43\xc2\x32\x0e\x29\x26\x22\xa3\x3d\xac\xf7\x8f\x4a\x0c\xfd\x80\x21\xbc\xf1\xc6\x82\xd2\xea\x49\x8d\x58\xe6\xde\x7b\x03\xc1\x4a\x99\x02\xe2\xec\x0b\x81\x70\xe3\x9c\x76\xb5\x76\xa1\x51\xe0\xdb\x6d\xe7\x0a\x25\x13\x34\xd4\xfb\xa5\x46\xa6\xb7\x68\x8c\x2c\x0a\x4c\xa5\xfb\x84\xb0\xff\xc3\x8d\xee\x0d\x4b\xb7\x34\xc6\x0a\xfd\x27\x0a\x53\x37\x2a\x93\x36\xab\x9b\x45\x29\x53\x3f\x49\xf3\xbb\xc2\x73\x63\xb9\xdb\xff\x36\x45\x58\xf0\x0b\x1f\xa5\x52\x94\xd3\x79\xdf\xb2\x40\xd8\x4a\x9f\xd5\xd1\x39\xcc\x05\x7b\x1a\xff\x38\x19\x0b\x58\xec\x41\xa8\xbd\x56\x03\xbf\xf5\x60\xac\xb1\x3a\x83\x8b\x0c\x3f\xf3\xa3\xd4\xe1\x6b\xfc\x71\x71\x86\xeb\xce\x5c\xfd\x56\x05\xfd\xff\xd4\xd3\x79\x54\x78\xa6\x83\x40\xaa\xdc\xe1\x62\xe6\x2f\xf7\xf0\x2d\x2c\x18\xc8\x67\x3c\xd2\x5e\x83\x81\xe0\x0e\x96\x72\x52\x65\x67\xb2\xb0\x7e\xad\x7e\x52\x17\xc1\xbf\xac\xec\x16\xcd\xe1\x67\xad\xb6\xe4\xee\x43\x4a\xd0\xb1\x70\xfa\x88\xfc\xb8\xc9\x9e\x4a\x35\xd2\x30\x19\x2a\x51\x75\xb2\xc5\x81\x0b\xa5\x6b\xfb\x16\xa7\xf2\xf5\x19\xb5\x12\x8e\x76\x39\x5e\xbc\xfc\xaf\x0f\x7f\x9d\x9c\xc2\xf1\xec\xcb\xf2\xb7\x62\xb1\xca\x2c\x0a\x93\xaf\x49\x7b\xf1\xf0\xb7\x55\xf6\xa4\x0a\xc3\x8a\xf6\xf0\x1f\xd7\xe5\xa3\x9f\xa4\xbb\xa3\xbb\x24\x47\xc2\x40\x82\x72\xea\x21\xbf\xb6\x77\xbc\xd2\x33\x12\xb4\xf6\xea\xf0\xef\xbc\x06\x7e\xa2\xfc\xe2\xcc\x63\x83\xa0\x91\x9f\xe0\x17\x46\xd0\xfd\x22\x96\x6b\x4e\x44\xec\x52\x00\xc3\xbf\x2e\xbb\x1c\x43\xff\x29\x59\x7c\xfa\x18\x20\x3d\xb9\x7b\xf2\x7f\x01\x00\x00\xff\xff\xa0\x9a\xc0\xac\xd7\x40\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 16599, mode: os.FileMode(420), modTime: time.Unix(1525135258, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json":   wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json":   wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json":   wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json":   wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json":   wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json":   wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json":   wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json":   wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json":   &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json":   &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json":   &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json":   &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json":   &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json":   &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json":   &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json":   &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
