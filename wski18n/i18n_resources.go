// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdf\x6f\xe3\xb8\x11\x7e\xcf\x5f\x31\xd8\x97\xb4\x40\xe0\xee\x5e\x51\xa0\x58\xa0\x28\x82\x26\xbd\xa6\x77\x9b\x2c\x92\xec\x2d\x0e\xd7\x85\x43\x4b\x63\x8b\x67\x89\x14\x48\x2a\x5e\xaf\xe1\xff\xbd\x18\x52\xb4\x65\x47\x94\x64\xf9\x47\x16\x45\xf3\x24\x47\x9c\xef\xfb\x66\x48\x0e\x87\x22\x7f\x3b\x03\x58\x9c\x01\x00\xbc\xe1\xf1\x9b\xf7\xf0\x26\xd3\x93\x61\xae\x70\xcc\xbf\x0e\x51\x29\xa9\xde\x5c\xb8\xb7\x46\x31\xa1\x53\x66\xb8\x14\xd4\xec\xda\xbe\x3b\x03\x58\x5e\x34\x20\xcc\x98\x12\x5c\x4c\x02\x18\x9f\xcb\xb7\x6d\x28\xba\x88\x22\xd4\x3a\x80\xf2\x50\xbe\x6d\x43\xe1\x62\x2c\x03\x10\x37\xf4\x2a\x68\xff\xbb\x96\x62\x98\x71\xad\xb9\x98\x0c\xa3\x2c\x1e\x4e\x71\x1e\x00\xfa\xf7\xc3\xdd\x2d\x70\x91\x17\x06\x62\x66\x18\x7c\x70\x56\x70\x1e\x65\xf1\x39\x90\x5d\x90\x85\x80\xc7\x29\x9b\x0c\x05\xcb\x50\xe7\x2c\xc2\x00\xc7\xfa\x7d\x3b\x16\x2b\x4c\xd2\x20\x97\x5e\x4b\xc5\xbf\xd9\x7f\xc0\xd3\x4f\xd7\xbf\x3e\x75\x01\xcd\xf9\x30\x91\xda\x04\x40\x67\x09\xd7\x53\xb8\xfc\x78\x03\x4f\xff\xba\x7b\x78\xec\x8a\xf8\x8c\x4a\x13\x42\x2b\xe8\x2f\xd7\xf7\x0f\x37\x77\xb7\x5d\x70\xa7\x38\x1f\x8e\x79\x1a\x8a\x64\xce\x4c\x02\x72\x0c\x26\x41\x18\x4c\x71\x0e\xb6\x6d\x3b\x6c\x84\xca\x74\xc6\xa5\xc6\x2d\xc0\x19\x13\x7c\x8c\xda\x0c\x85\x34\xc3\xb1\x2c\x44\x1c\x00\xfe\x50\x36\xb4\x78\x20\xa4\x01\xdb\x1a\x98\x01\xcb\xf9\xdb\x62\x31\xa0\x87\xe5\xf2\xcb\xe0\x3f\x22\x4c\x58\xd8\xa1\xbc\xa2\x8d\x31\x4f\x65\x68\x8c\x7c\xb2\x03\xb8\x82\x0c\x63\xa9\xc0\x99\x64\x28\xcc\x2e\x44\x85\xe8\x41\xe5\x8d\x5a\xc9\x54\x21\x0c\xcf\x90\xa6\x6a\xc6\x4c\x94\x04\x58\xee\x5d\x33\xcb\x53\x9a\x10\x95\xce\x31\xe2\x63\x8e\x31\x70\x01\x5e\x31\xc4\x12\xb5\x0d\xb4\x45\x84\x19\x37\x09\xb0\xc8\x4e\x17\x2d\x0b\x15\xa1\xeb\x0a\xfc\x6a\x50\xd0\xf0\xb5\xa8\xf8\xd5\x78\xf1\x65\x5b\xfa\xaf\x7b\x6c\xeb\x1a\xef\x44\x94\x30\x31\xc1\xd0\x40\xf0\x3e\x94\xad\xc0\xc8\x6d\x77\x46\x4c\x63\x0c\x52\xd8\x41\xd8\xa8\x78\x2f\x99\x85\xd0\x45\x9e\x4b\x65\x5a\xa5\x76\x0a\x37\x77\xc1\x5e\x61\x5a\x71\x15\x0f\xba\x0b\x74\xad\x86\x29\xcf\xb8\x19\xf2\x89\x90\x2a\xa8\xf0\x46\x3c\xb3\x94\xc7\x9e\xc3\x9a\x58\x26\xfb\x44\x62\xb7\x24\x96\x70\x8d\xfc\x91\x14\x63\x3e\x59\x2d\x1b\x94\x69\xc3\x79\xf8\x91\x3c\x2c\x4c\x82\xc2\xf0\xc8\x25\x63\x4a\x47\x65\x34\x1c\x54\xb1\x2b\x63\xce\x1b\x92\x34\x31\x52\x36\xa5\x26\xfb\xf1\xb4\x2d\x57\xc4\xb4\x6a\xd3\x8f\xaa\x74\xa5\x69\x05\xdf\xf6\x67\xb1\x18\xd0\xe3\x72\x79\x01\x63\x25\x33\xfa\xed\x46\xff\x72\xd9\x89\xd1\x75\x57\x1b\x23\x35\xf3\x3d\xa5\xd1\xf4\xe3\x5a\x05\xa7\x8d\x6d\x23\x8a\x8b\xc5\x60\xf5\x7b\x67\x2f\x51\xa9\xe1\x04\x8d\x9f\xc5\xa1\xca\xea\x9f\x8c\xa7\x2e\xb9\x4c\xd0\xd8\x69\xb8\x9e\x98\xde\xd4\x11\xdf\xe5\x28\x3e\xdb\x25\x5a\xa3\x7a\xe6\x11\xbe\x27\x2d\xa8\x54\x55\x48\xed\x02\x21\x32\xa6\x74\xc2\xd2\x74\x98\xca\x88\xa5\xa1\x95\xc1\x37\xab\x30\x51\xb4\x1c\xbb\xb5\x84\x67\x96\x16\xa8\x9b\x97\xa3\x35\x9b\x40\x33\x93\x6a\xda\x8b\x8f\x0b\x83\x4a\x60\xf3\x6a\xb4\x5e\xb4\x86\xb9\x92\x59\x1e\x9a\x89\x57\x12\xe6\xb2\x00\x85\x2c\x4d\xe7\x30\x63\xc2\x50\xc0\x9d\x35\x98\x84\xeb\xbf\xc3\x1f\xe6\x7f\xba\xfd\xe3\x7b\xe8\xc4\x65\x6b\x65\x8c\x83\xc9\xee\x6a\xd5\x14\x22\x99\xe5\x29\x52\x67\x96\x05\xf6\xb8\x48\xd3\x79\x57\xa7\xc6\x76\x70\xb4\xb3\xc4\x3c\x2e\xa7\xbc\x63\x23\xb2\x15\x17\xdc\x17\x02\x9e\x66\x7a\x5a\xfa\xeb\xd7\xfa\x27\x8a\x81\xc2\x4c\x3e\x23\xe4\x4c\x19\x6e\x83\xe3\xde\x61\x0c\x4c\x6b\x34\xcd\x5d\x5d\x51\x1a\x31\x11\x61\x1a\x16\x7b\xf7\xd3\x00\xfe\xe1\xda\x50\xfd\xd1\xb5\xb4\xa9\x94\x25\x54\xe1\xb0\x09\xc6\xcd\x41\xf9\x54\xb1\xa0\xf2\x30\x46\x17\x7d\xca\xfa\x86\xa3\x6e\x0c\x15\xc4\x85\x22\x75\x25\x53\x55\xe5\xf1\x82\x48\xdb\x37\x5b\x44\xc7\x98\x2b\x8c\x98\xc1\x78\xa8\x30\x4f\x59\x14\x74\x92\x12\x15\xad\x9d\x32\x8d\xa7\x38\xa7\xc5\xd3\xe6\x47\x57\x87\x2c\x16\x03\x2a\x3e\xcc\x3c\xc7\xe5\xd2\xd5\x21\x33\x9e\xa6\xa0\xa5\x14\x30\x42\x58\xd3\x5c\x40\x9e\x22\xd3\x08\x85\x46\x6b\x4a\x98\x02\x67\x1b\x98\xda\x20\xdb\x5c\x40\xb6\x93\x9c\x5f\xa4\x32\x26\x62\x66\xa4\x9a\x37\x6c\x86\x48\xf9\xaa\x9d\x65\x20\xce\x92\x90\x6b\x28\xb1\x06\xcd\x69\xd5\x17\x9f\x36\xad\xd3\xcc\xff\x1d\xa3\xa6\x45\xd8\x53\xd8\xec\x1e\xd3\xcf\x98\x9e\x96\x4b\x8a\x59\x65\xbc\xd8\x60\x91\xa0\xd8\xd7\xc6\x5b\xa5\xa9\x29\x57\x08\x82\xc8\x1c\xc4\x72\xa3\x70\x59\x21\x64\x7e\x8b\xd0\x36\x7b\x28\x72\x31\xe6\x28\x62\x14\x51\x28\x6c\x57\xbe\x29\xac\x9b\xba\xde\xb2\x1a\xbe\x0c\x06\x0d\x3c\x7e\xa8\x76\x62\xfa\xb4\x6e\xdc\x87\x6b\x6d\xf2\x22\x5f\x06\xbf\x2d\x5c\xad\x69\x56\x2c\x90\x30\x0d\x23\x44\xb1\x91\x36\x57\xf3\xaa\x2d\x2b\xd5\x68\xa0\xac\x51\xa8\x50\x01\x75\xb5\x95\x34\x6a\x14\xbd\x5e\x8e\xf5\xde\x6c\x64\xc3\x83\xc5\xd4\xa3\x76\x8f\xea\x86\x8e\xe6\xb8\xbe\x4c\xc7\xbb\x46\x36\xa4\xe9\xe1\xfa\xe3\xe5\xfd\xe5\xe3\xdd\x7d\x80\xf9\x6f\xb5\x7f\x70\x2d\x8c\xa2\x65\x60\x84\xa9\x9c\xd9\xa5\x1f\x52\x2e\x10\x18\x2a\xab\xe1\x19\x95\xdb\x31\xd5\xdb\x6f\xfc\xd5\x0b\xfb\x51\x1a\xb0\x1f\xf5\x20\x52\xc8\x0c\x4d\xa4\x9c\x45\x53\x36\x41\xb7\xb3\x75\xef\x32\xd4\x9a\x4d\x2a\x25\x1c\x30\x11\x7b\x3b\x19\xbb\x17\xf4\xe0\x8a\xbb\x7a\x1f\x8f\x42\xd5\xd5\xa9\x72\x27\xf7\xbf\xe5\x53\xce\x4f\xe1\xd0\x7e\x34\x5d\x9d\x51\x45\x7a\x92\x21\xb7\x27\x4f\x8b\x3b\x1a\x8d\x65\xb1\x3b\x23\xc3\x4c\xa1\x29\x8f\x1c\xd9\xb7\xa3\x90\x76\xed\x37\xa3\xf8\x64\x82\xea\x14\x5d\xb7\x3f\xd5\xae\x4e\x8d\x11\xe3\x53\x7a\xb6\x27\xdf\xae\x19\x7e\xc4\x45\x4c\xbf\x4f\x98\x15\xf7\xa7\xac\x75\x72\x5d\x72\x96\x89\x9e\xf6\x1b\x85\xc9\x0b\xb3\x5c\x02\xd5\x80\x6d\x95\x6a\xc0\xac\x85\xcc\xce\xb1\x5d\xa9\x6a\x8d\x5a\x88\x36\x06\xc8\xae\x84\x8d\xc6\x2d\xc4\xbe\xdf\x76\xe5\x0c\xd9\x75\xa4\xf3\xc3\xa4\x2f\x6d\xc8\xbe\x96\x7e\xbd\xdb\x27\x93\xed\xc3\x85\xb6\x2f\x04\x75\x36\xb5\x34\x1b\xd5\x65\x5b\x15\xd9\xa1\x40\xed\x55\x88\x56\xb6\x0e\xae\xd0\x7f\xf9\xa9\xa7\x75\xcf\x11\x32\xfc\x7e\xbd\x5e\x27\x24\xfb\x85\xe5\x24\x05\xe1\xe1\x98\xba\xba\x74\xe4\x32\xe3\x50\x3c\xff\x2f\xa1\xb6\xe2\x79\xfc\x12\xea\x80\x54\xbb\x3a\x75\xe4\x12\xea\xd0\x7c\x5d\xdd\x3b\xfe\x26\xf9\x80\x54\xb5\x4e\x7d\xbe\xbc\xbf\xbd\xb9\xfd\xf1\x3d\x3c\x26\x08\xe7\xee\x90\xe8\x1c\x7e\xbd\xfc\xf0\xf3\xea\xfb\x6c\x19\x52\xfb\x35\xda\x9e\x68\xad\xbf\xc6\x0e\xe0\xe3\xfa\x6b\xec\x39\x05\xfd\xdc\x7f\x7e\x05\x46\x0d\x75\xa4\xf8\xc8\x9d\xe5\x96\x07\xbb\xee\x18\x53\x87\x7d\x7f\x4d\x45\x5d\xfb\xdd\x17\x16\x27\xec\xff\xc3\x51\xd6\x3a\xf9\xb1\xa1\x64\x6a\xff\xae\x59\xef\xc5\x7e\x98\x8d\x32\x0f\x29\xef\x00\xb2\x1e\xcb\x11\x79\x08\x59\xfd\xb0\x1a\x65\xbd\x28\xf9\xf7\xd5\xd6\x03\xb0\x56\xe0\xfd\xf6\x26\xa8\xaf\xb0\x1e\x40\xb5\x82\x2e\x5f\x6e\x00\xfb\x4a\xea\x05\xd5\x36\xba\xca\xd4\x57\xc5\x2a\xeb\xf0\x4e\x03\xaa\xd9\xbc\xb1\x8b\xa8\x0a\xda\x89\xb6\x83\x61\x4b\x17\xf8\x0b\x3d\x3b\x90\x76\x34\xae\x25\x5e\xdf\x6a\xe0\xe2\x59\x4e\xdd\xf1\xa2\x2b\x24\x12\x14\x27\xaa\x69\x4e\x2c\xa2\xb9\x26\xf8\xb0\x3a\xf5\x1c\x73\x4c\x63\xf0\x19\xf3\x17\x77\x25\x13\xb2\x42\x1b\x18\x21\xd5\xcd\x1d\xd6\xf3\x1d\xd1\x9a\xa5\x6d\x1b\xfb\x0b\x62\xec\xd9\xad\xed\x14\xb6\xa8\x50\x8a\x36\x8b\xeb\x23\xae\xf2\x2e\x69\x07\xb1\x7b\xe3\xf7\x8b\xec\xcf\x3c\x42\xa1\xf1\x40\x91\x0d\xa0\x75\x8b\xac\x37\x3e\x56\x64\x7b\xe3\x37\xcb\xf7\xb0\xf6\x9a\x9e\x7d\xbc\xb9\x5a\x2e\x3d\x0b\x03\x77\xa5\x4f\x0a\xec\x20\x75\x27\xac\xfa\x53\x48\xcc\xa4\x9a\x3f\xf0\x6f\x48\x3b\x49\x7b\x6f\x50\x6f\x1c\xbe\xeb\x44\x16\x69\x4c\x9d\xc3\x84\xbd\x3f\x44\x93\x7a\x84\x66\x46\x19\xeb\xdd\x0f\x7f\xb5\xd3\xf7\x2f\xef\x7e\x08\xab\x3d\x28\x45\xad\x13\x86\x67\x28\x0b\xd3\x0b\xfe\xed\x5b\x0b\xff\xe7\xb7\xf4\x17\x76\xe2\xa0\x14\xb5\x4e\xa4\x72\xd2\x37\x46\x0e\xff\x5d\x83\xfc\x03\x81\xb7\x8d\x6c\x8b\x0c\xfe\x02\x6a\x79\x12\xbd\xba\x3a\x99\x30\x31\x61\xa3\x14\x69\x9f\x63\x24\x08\x39\xbb\x80\x59\xc2\xed\xed\xe4\x34\x25\xfa\xca\xfd\xd4\xd6\x91\x7f\x40\xae\x66\xb7\x58\x9e\xa7\xfe\x72\x6b\xcd\xd5\x96\x2e\xf7\x80\xca\xdb\x34\xd5\x9b\x3f\x2d\xfe\x1d\x87\xb4\xbe\xac\xb0\x37\xf1\x2b\x77\x95\xab\xc5\x89\x8b\x99\xdd\xc1\xba\x3b\x5f\xf6\x1e\x61\x35\x05\x7a\x9a\xc5\x62\x50\x3e\xd6\x5d\xdf\x59\xe1\x8c\xb0\xfa\x25\xba\xa9\xaf\x5f\x5f\x57\x4b\xb8\x4c\x5d\xdd\xfa\x5d\x04\xec\xf5\x94\xb5\x84\xac\x72\xde\x52\x3e\x7e\x2f\x21\x7b\x3d\x65\x14\xb2\xb3\x2f\x67\xff\x0d\x00\x00\xff\xff\x83\x06\x58\xec\xd0\x36\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 14032, mode: os.FileMode(420), modTime: time.Unix(1515517619, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

