// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x6d\x6f\xdb\x38\xf2\x7f\x9f\x4f\x31\xe8\x9b\xfc\xff\x40\xe0\xb6\x7b\x38\xe0\x50\xe0\x70\x08\x2e\xb9\xbd\xdc\x6e\x93\x20\x49\xb7\x58\x74\x0b\x85\x16\x47\x36\xd7\x12\x29\x90\x94\x5d\xaf\xe1\xef\x7e\x18\x52\x94\x9f\xf4\x64\xc5\xe9\x02\x97\x17\x81\x12\x71\x7e\xbf\x99\xe1\x70\x66\x48\xea\xcb\x19\xc0\xea\x0c\x00\xe0\x8d\xe0\x6f\x3e\xc0\x9b\xcc\x4c\xa2\x5c\x63\x22\xbe\x45\xa8\xb5\xd2\x6f\x2e\xfc\x5b\xab\x99\x34\x29\xb3\x42\x49\x1a\x76\xed\xde\x9d\x01\xac\x2f\x5a\x10\x16\x4c\x4b\x21\x27\x0d\x18\x9f\xcb\xb7\x5d\x28\xa6\x88\x63\x34\xa6\x01\xe5\xb1\x7c\xdb\x85\x22\x64\xa2\x1a\x20\x6e\xe8\x55\xa3\xfc\xef\x46\xc9\x28\x13\xc6\x08\x39\x89\xe2\x8c\x47\x33\x5c\x36\x00\xfd\xe7\xf1\xee\x16\x84\xcc\x0b\x0b\x9c\x59\x06\x1f\xbd\x14\x9c\xc7\x19\x3f\x07\x92\x6b\x64\x21\xe0\x24\x65\x93\x48\xb2\x0c\x4d\xce\x62\x6c\xe0\xd8\xbc\xef\xc6\x62\x85\x9d\xb6\xa8\x4b\xaf\x95\x16\x7f\xb8\x7f\xc0\xf3\x4f\xd7\xbf\x3e\xf7\x01\xcd\x45\x34\x55\xc6\x36\x80\x2e\xa6\xc2\xcc\xe0\xf2\xfe\x06\x9e\xff\x7d\xf7\xf8\xd4\x17\x71\x8e\xda\x10\x42\x27\xe8\x2f\xd7\x0f\x8f\x37\x77\xb7\x7d\x70\x67\xb8\x8c\x12\x91\x36\x79\x32\x67\x76\x0a\x2a\x01\x3b\x45\x18\xcd\x70\x09\x6e\x6c\x37\x6c\x8c\xda\xf6\xc6\xa5\xc1\x1d\xc0\xb9\x56\x59\x6e\x23\x8e\x79\xaa\x9a\xa6\xea\x4a\xc1\x52\x15\xa0\x91\xa5\xe9\x12\x16\x4c\x5a\xb0\x0a\xbc\x08\xd8\xa9\x30\xff\x80\xff\x5b\xbe\xbd\xfd\xff\x0f\xd0\xc9\x53\xc8\x01\x4c\x41\xe8\x48\x2e\x8a\xb0\xe6\xf8\xfb\x4d\xde\xa7\xc8\x0c\x42\xae\xd5\x5c\x70\x04\x26\x81\x24\x50\x5a\x11\xfb\xa0\xb4\x6a\x86\xb2\x0f\x51\x2e\x5a\x62\xf2\x80\x88\xa6\x86\xc6\xd3\x62\x82\x44\x69\xb8\xcb\x51\x7e\xa6\x20\xeb\xc1\xd5\xb5\x42\x0f\xcd\x82\x4a\x04\xbe\x70\x4c\x58\x91\x5a\x98\xb3\xb4\x40\x10\x06\x26\x05\x1a\xfb\xb5\x8d\x37\x63\x52\x24\x68\x6c\x24\x95\x8d\x12\x55\x48\xde\xc0\xfc\xb1\x1c\xe8\x02\x0e\xa4\xb2\xe0\x46\x03\xb3\xe0\x82\xf2\xcb\x6a\x35\xa2\x87\xf5\xfa\xeb\xe8\x37\xd9\x4c\x58\xb8\x5c\x57\xd1\xb6\xc6\xcb\x27\x97\xe1\xb6\x90\x9d\x3f\xbd\x48\x86\xd2\x1e\x43\xd4\x11\x9a\xf5\x54\x41\xa8\x93\x4c\x17\xd2\x8a\x0c\x29\x97\x67\xcc\xc6\xd3\x06\x96\x07\x3f\xcc\xf1\x94\x22\x44\x65\x72\x8c\x45\x22\x90\x83\x90\x10\x34\x06\xae\xd0\x38\x47\x3b\x44\x58\x08\x3b\x05\x16\xbb\xd0\x35\xaa\xd0\x31\xfa\xa9\xc0\x6f\x16\x25\xe5\x37\x87\x8a\xdf\x6c\x50\xbe\x1c\x4b\xff\xf5\x8f\x5d\x53\x13\x8c\x88\xa7\x4c\x4e\xb0\x29\x10\x82\x0d\xe5\x28\x5a\xc1\x7b\xe6\x8c\x99\x41\x0e\xb4\xc2\xa6\xd8\xae\xf1\x8b\xd4\x2c\xa4\x29\xf2\x5c\x69\xdb\xa9\x6a\x2f\x77\x0b\xef\xec\x0a\xd3\x29\xb7\x65\x41\x7f\x05\xfd\xa8\x28\x15\x99\xb0\x91\x98\x48\xa5\x1b\x35\xbc\x91\x73\x96\x0a\x1e\x38\x9c\x88\x63\x72\x4f\xa4\xec\x9e\x8a\x25\x5c\x2b\x7f\xac\x64\x22\x26\x55\x5f\xd1\x9e\x28\x9f\xc8\xc2\xdd\xc4\x48\xf5\xaa\xf4\x86\x87\x2a\x8e\x65\x6c\xcd\x98\xc4\x48\xe5\x96\x86\xbc\x8c\xa7\x2b\x5b\x12\xd3\x26\x3d\x0e\xa2\x2a\x4d\x69\x6b\xf1\xf6\xed\x59\xad\x46\xf4\xb8\x5e\x5f\x40\xa2\x55\x46\x7f\xfb\xe8\x5f\xaf\x7b\x31\xfa\xe9\xea\x62\xa4\x61\x61\xa6\x0c\xda\x61\x5c\x95\x73\xba\xd8\x76\xbc\xb8\x5a\x8d\xaa\xbf\x8f\xb6\x12\xb5\x8e\x26\x68\xc3\x2a\x6e\x6a\xbd\xff\xc5\x44\xea\x93\xcb\x04\xad\x5b\x86\x9b\x85\x19\x44\x3d\x71\x55\x5e\xc1\xa0\x9e\x8b\x18\x3f\x90\x2e\xa8\x75\x87\x22\x85\xcc\x98\x36\x53\x96\xa6\x51\xaa\x62\x96\x36\x15\x86\x30\x6c\x8b\x88\x9c\xe5\xc9\x9d\xa4\xaf\xb7\xa6\x2f\x9b\x44\xbb\x50\x7a\x36\x88\x4f\x48\x8b\x5a\x62\x7b\x31\xda\xd4\x2c\xbf\xbf\x41\xde\x98\x7f\xae\xaa\xa1\x10\xab\x2c\x4f\x91\xfc\x5b\x6e\x8a\x92\x22\x4d\x97\x7d\x89\x12\x37\x5f\xdd\x2c\x5c\xf0\x72\x15\x7a\x36\x22\xab\xb8\xe0\xa1\x90\xf0\xbc\x30\xb3\xb2\x21\x0c\xe5\xf7\x99\xe2\x40\x63\xa6\xe6\x08\x39\xd3\x56\xb8\xfe\xd1\xbf\x43\x0e\xcc\x18\xb4\xed\xee\xdf\xd2\x34\x66\x32\xc6\xb4\x59\xd9\xbb\x9f\x46\xf0\x4f\x3f\x86\x5a\x82\xbe\xdd\x86\x3c\xc2\xeb\x9f\xb6\x06\x0f\xf1\xfb\x0e\x59\xab\xe7\x77\x98\x5a\x7d\xdf\x9b\xef\x48\xff\xf5\x6e\xa1\x76\x48\x32\x26\xd9\x04\xf9\x11\xc6\xa9\x04\x38\x7a\x3f\x52\x29\xb3\x02\x4d\xab\xc1\xc0\x0b\x4d\xfa\x95\x4c\xdb\xf3\xfc\x7a\x61\xb8\x60\x5a\x46\x6e\xc3\x49\x0d\x7f\x8e\x9a\xd4\x6c\x49\xbb\xd4\x09\xcc\x70\x49\x7d\x00\xa5\xfa\x05\x33\xa0\xd1\x6a\x81\x73\xea\x4f\x28\x21\x38\xb0\xd1\x06\x8c\xfe\xe1\x9a\xc5\x34\x05\xa3\x94\x84\x31\x92\x86\x1a\x63\x46\xae\xc9\xfd\xee\x81\x2b\xe7\x97\xc2\x20\x08\x0b\xaa\xb0\x86\xf6\x12\x2a\x81\x27\xcd\xe6\xc2\xc0\xb8\x10\x29\xef\x61\x0a\xd5\xa9\x0d\x7a\xa4\x31\x4f\x59\xdc\x38\x5f\xc1\x22\x95\xf2\x2d\xa3\x84\xef\x13\x57\xab\x11\x35\x87\x76\x99\xe3\x7a\xed\xfb\xc4\x06\x23\x2e\x82\x15\xa4\xbe\x2d\x31\x25\x2e\x76\x30\x8d\x45\xb6\x5b\xe0\xf7\x8b\x50\x68\x22\x32\x26\x39\xb3\x4a\x2f\x5b\x4e\x33\x48\xf3\x6a\x9c\x63\xd8\x9a\x19\x61\xa0\xc4\x1a\xb5\x97\xbd\xb0\x39\x70\x65\x97\x02\xe0\x77\x8c\xdb\x9a\xa4\x40\xe1\xaa\x2f\xa7\x3f\x39\x3d\xad\xd7\xe4\xb3\xad\xd0\x77\xce\x22\x85\x78\xd8\xbb\xec\x6d\x1d\x6c\x59\xc1\x09\x22\xf3\x10\xeb\x9d\xc6\xb2\x42\xc8\xc2\x16\xae\x2b\x95\x92\xe7\x38\xe6\x28\x39\xca\xb8\x71\xbf\x1f\x86\xc2\x66\xa8\x9f\x2d\xa7\xc3\xd7\xd1\xa8\x85\x27\xac\xba\x5e\x4c\x9f\x36\x83\x87\x70\x6d\x44\x0e\x8a\x67\xe3\xe1\xe0\xd5\x86\xa6\x62\x81\x29\x33\x30\x46\x94\x3b\xb9\xbc\x4a\x11\x5d\x25\xaa\x46\x07\x4a\x80\x85\x6e\x6a\x70\xaf\xf6\xf2\x5f\x8d\x46\x7f\x5e\xc1\x0d\xd6\x1c\x96\xc6\x53\xf8\x34\xa0\xf6\xf7\xea\x41\xd5\x6c\xf6\xeb\x61\x65\x39\xd6\xb3\x6d\x3a\x55\xc5\x4d\x15\x92\x47\x65\xd5\x8a\x5c\xd5\x6a\x5e\x49\x29\x5a\x0a\xee\x2a\x27\x6c\x85\x76\xc8\xf9\xae\x3a\xd0\x9c\x95\xb5\x81\x96\x7d\x5c\x68\x4d\x46\x84\x32\x57\x66\x1d\x7f\xd2\xe1\x9f\x09\x81\x19\x37\xcf\x64\x6b\xef\x82\x4d\x29\x2d\xd6\xc8\x2c\xb6\xeb\xee\xce\xf3\xc1\x8d\xdc\xb1\xc0\x1d\x68\xb8\x8b\x00\xc8\xd0\x18\x36\xd9\xea\xdc\x81\x49\x5e\xbe\x8b\x15\xf7\x2f\xe8\xa1\xc7\xe6\xc2\xfb\xb3\x8f\x4a\xfc\xc0\xa9\x2f\x55\xe9\xec\xed\x5b\xd2\x8a\x7e\x57\x7a\xfd\xa8\x6c\x29\x66\xd0\x3a\x3a\xb7\x9b\xb1\xcc\x16\x86\xfc\xad\x0b\x57\xea\x86\x12\x5f\x04\xb6\x3d\x13\x5f\x99\xd6\xb1\x76\x5a\x5c\x79\xb8\x3c\xdf\x78\x4d\x33\x4f\xc7\x15\x6c\xeb\x67\xda\xab\xcf\xdf\xa9\x98\x7a\x99\xf5\xbf\x18\xa3\xfd\xe6\xd1\x6a\x31\x99\xa0\x86\x04\x91\x7f\x9f\xf9\x3c\x11\xe3\x71\x66\xe6\x2c\x9e\xb1\xc9\x77\x8a\xd8\x97\x93\x55\x79\x66\x2f\xdb\x3f\x5e\xdf\x5f\x3e\x5c\x3e\xdd\x3d\x34\x64\xf8\xbf\xd7\xfe\xc0\xb5\xa4\xdd\x13\xf5\x13\xa9\x5a\xb8\x0b\x27\x48\x85\x44\x60\xa8\x5d\x2d\x9f\xa3\xf6\x27\xc3\xf5\xf2\x3b\x3f\xf5\x65\x68\xd3\xf3\x96\x79\x88\x36\x3c\x85\xcd\x0b\xbb\x5e\x03\x35\xa1\x5d\xad\x72\x83\x58\x07\x99\x5b\x2a\xc7\x52\xd5\x0a\x75\x10\xed\x04\xed\xb1\x84\xad\xc2\x1d\xc4\x21\x96\x8e\xe5\x6c\x92\xeb\x49\x37\x16\x92\x97\x3d\xc2\x20\xda\x26\xf9\x5a\xfa\xcd\xd9\x49\xdd\xd1\x49\xd7\x79\x4b\xef\xe3\x96\xcf\x97\x0f\xb7\x37\xb7\x3f\x7e\x00\xda\x65\x9e\xfb\x63\xdb\x73\xf8\xf5\xf2\xe3\xcf\xd5\x8e\xbc\x9c\x28\xdf\x45\xd1\x16\x77\xb3\xff\x1e\xc1\xfd\x66\xff\x7d\x4e\x53\x79\x1e\x36\xdc\xd4\x47\x72\x34\xb1\x16\x63\x7f\xbb\x52\x5e\xb5\xf8\x8b\x05\xd3\x6c\xc4\x9f\xa9\x51\xad\x8b\x6a\x92\x59\x98\xc9\x53\x64\xd0\x9e\xf9\xf3\x74\x94\xb5\x46\xde\xb7\xc4\x68\xf7\x4e\xb6\xde\x8a\x97\x61\xb6\xaa\x79\x4a\xf5\x4e\xa0\xd6\x53\x19\x91\xa7\x50\x6b\x18\x56\xab\x5a\x07\x39\xf6\xa5\xba\x0d\x00\xac\x55\xf0\x61\xbf\xea\x0c\x55\x6c\x00\x50\xad\x42\x97\x87\x15\x77\xa8\x4a\x83\xa0\xba\xa2\xab\x4c\x7d\xdb\x58\xe5\x3e\xbf\x57\x40\xb5\x8b\xb7\x4e\x11\x35\x08\x47\xd1\xf6\x10\xec\x98\x82\x70\xc5\x7e\x04\x69\x4f\xe1\x5a\xe2\xcd\x3d\xa3\x90\x73\x35\xf3\x07\xca\xbe\x21\x9f\xa2\x7c\x85\xdd\x41\xfb\x65\xe7\x77\x51\xa2\xbd\x27\xf8\x58\x9d\x73\x27\x02\x53\x0e\x21\x63\xfe\xe2\xbf\xa2\x83\xac\x30\x16\xc6\x48\x5b\xb6\x1e\xf5\xfc\x48\xb4\x76\xd5\xf6\x85\xc3\x27\x1b\x6c\xee\x6b\xfb\xf6\x81\xd7\xe6\x50\xb3\xfc\xfc\xaf\x87\xb2\x2f\xc6\x1f\xe6\xd9\x9f\x45\x8c\xd2\xe0\x89\x3c\xdb\x80\xd6\xcf\xb3\x41\xf8\xb5\x3c\x3b\x18\xbf\x5d\xfd\x00\xeb\x3e\x9c\x71\x8f\x37\x57\xeb\x75\x60\x61\xe0\x3f\xb2\x51\x12\x7b\xa8\x7a\x14\x56\xfd\x49\x24\x66\x4a\x2f\x1f\xc5\x1f\xee\x4a\xcd\x7d\xc9\x63\x76\xae\x5b\xcc\x54\x15\x29\xa7\xc9\x61\xd2\x5d\xe9\xd3\xa2\x1e\xa3\x5d\x50\xc6\x7a\xff\xc3\xdf\xdc\xf2\xfd\xeb\xfb\x1f\x9a\xb5\x3d\x29\x45\xad\x11\x56\x64\xa8\x0a\x3b\x08\xfe\xdd\x3b\x07\xff\x97\x77\xf4\xd3\x6c\xc4\x49\x29\x6a\x8d\x48\xd5\x64\xa8\x8f\x3c\xfe\xfb\x16\xf5\x4f\x04\xde\x15\xd9\x0e\x19\xc2\x27\x61\xe5\xdd\x43\xf5\x31\xd3\x94\xc9\x09\x1b\xa7\x48\xfb\x1c\xab\x40\xaa\xc5\xc5\xf6\x15\xf0\x18\xb7\xbf\x18\xeb\x8c\xfc\x13\x72\xb5\x9b\xc5\xf2\x3c\x0d\x9f\x9b\xd5\x5c\x66\xf6\xb9\xf9\x0d\x37\x19\x5b\x77\xbd\x1d\xf6\xbd\x0e\x29\x19\x7a\xf6\xf5\xec\xbf\x01\x00\x00\xff\xff\xe1\x21\x1d\x20\xee\x30\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 12526, mode: os.FileMode(420), modTime: time.Unix(1515537971, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

