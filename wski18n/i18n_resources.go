// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1489187925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x6f\x1b\x37\xf2\x7f\x9f\x4f\x31\x08\xfe\x40\x5a\xc0\x51\xd2\xfe\x71\xc0\x21\x80\x71\xc8\x5d\xd2\x36\xd7\x26\x0e\xec\xf8\x8a\x22\x35\x36\xd4\x72\x24\xb1\xda\x25\x17\x24\xd7\x8a\x6a\xe8\xbb\x1f\x86\x0f\xbb\x2b\xd9\xdc\xa5\x94\x06\xd7\x37\x55\xcc\xe1\xcc\x6f\x66\xc8\xe1\x3c\xec\xc7\x47\x00\x77\x8f\x00\x00\x1e\x0b\xfe\xf8\x05\x3c\xae\xcd\xb2\x68\x34\x2e\xc4\xe7\x02\xb5\x56\xfa\xf1\x99\x5f\xb5\x9a\x49\x53\x31\x2b\x94\x24\xb2\xd7\x6e\xed\x11\xc0\xee\x6c\x84\x83\x90\x0b\x95\x60\xf0\x86\x96\xa6\xf6\x9b\xb6\x2c\xd1\x98\x04\x8b\xab\xb0\x3a\xc5\x65\xc3\xb4\x14\x72\x99\xe0\xf2\x6b\x58\x4d\x72\x29\x6b\x5e\x70\x34\x65\x51\x29\xb9\x2c\x34\x36\x4a\xdb\x04\xaf\x4b\xb7\x68\x40\x49\xe0\xd8\x54\x6a\x8b\x1c\x50\x5a\x61\x05\x1a\xf8\x46\xcc\x70\x76\x06\xef\x59\xb9\x66\x4b\x34\x67\xf0\xb2\xa4\x7d\xe6\x0c\x3e\x68\xb1\x5c\xa2\x36\x67\x70\xd9\x56\xb4\x82\xb6\x9c\x7d\x0b\xcc\xc0\x06\xab\x8a\xfe\xaf\xb1\x44\x69\xdd\x8e\x5b\x27\xcd\x80\x90\x60\x57\x08\xa6\xc1\x52\x2c\x04\x72\x90\xac\x46\xd3\xb0\x12\x67\xd9\xba\x28\x95\xd2\xe4\x25\x58\xa5\x2a\xb0\x2a\x28\x72\x06\xad\xf4\xbf\x80\x49\x0e\x66\x2b\x4b\x50\x0d\xca\xcd\x4a\x98\x35\x34\x41\x27\x68\x8d\x90\x4b\x60\x50\x33\x29\x16\x68\xac\x23\x56\x0d\x71\x65\x55\x60\x55\x93\x26\x0b\x51\x75\xe4\xbf\xbd\x7c\xfb\x4b\x0e\x66\xb3\x52\xda\x8e\x3b\xe0\xbd\x56\xb7\x82\xa3\x01\x06\xa6\xad\x6b\xa6\xb7\xe0\xe9\x41\x2d\x60\xb3\x62\xf6\x89\x81\x39\xe2\xc0\x3d\x5f\x66\xc6\x00\x69\xd2\x8e\x06\x2d\xd9\x72\x85\x55\x13\x44\xc3\x56\xb5\x3a\xcb\x84\x64\xaa\x7c\x2c\xb7\xa8\x0d\xc9\x4e\xd9\x47\x48\xeb\x14\x0e\x74\x20\xdb\x7a\x8e\xda\x99\xc7\xac\x3d\xb4\x71\x59\x8b\x8a\x2d\x0b\xd6\x88\x62\xa5\x4c\x4a\x6b\xaf\xd2\xcb\xf7\x6f\xe0\xd3\x4f\x17\x57\x1f\x3e\x65\x72\x1c\xc7\x3e\x60\xfa\x9f\xd7\x97\x57\x6f\x2e\xde\x65\xf1\x6d\xed\xaa\x58\xe3\x36\xc1\x94\x96\x95\x16\x7f\xba\x3f\xc0\xa7\x9f\x5f\xff\x96\xc3\xb4\x44\x6d\x0b\xf2\x4b\x82\x6b\xc3\xec\x8a\x4c\x4a\x86\x9e\x11\xb1\x73\x62\x0e\x63\x25\x17\x22\x15\xa9\xfc\xa2\x63\x05\xdf\x70\x5c\xb0\xb6\xb2\x20\x0c\xfc\xdf\x4f\x17\x6f\x5f\x3f\x9b\x6d\xcc\xba\xd1\xaa\x31\xdf\xe6\x58\xa5\xaa\xd4\xa6\x08\x3c\x52\xf1\xd5\x11\x41\x47\x34\xcd\xb5\xbf\xdf\x63\x76\xe9\x62\x4a\x17\x08\x32\x58\x0b\x69\x51\x33\x0a\x7f\x29\x9b\x7b\xb4\x03\x3a\x68\xb4\xaa\x9b\x2c\xe0\x6b\xdc\x66\xbb\x73\x8d\xdb\x5c\xd0\xde\xca\x35\x93\x6c\x89\x7c\x14\x76\xa3\xd5\x1f\x58\xda\xfe\xb1\xb0\x0a\xe6\x08\x35\xd3\x6b\xe4\x10\x39\x4c\x4b\x0c\x7c\x0a\x0a\x62\x29\x65\x82\x28\x47\x32\xcd\x31\x86\xa1\x09\x8f\xee\x45\xab\x0c\xb6\x5d\x94\x4d\xf0\xed\xd7\xb3\x95\x9e\x40\x68\x50\xdf\xa2\xae\xd0\x98\x68\xed\x0c\xd6\xc6\x6a\x91\xe4\xec\x5d\xd7\x1a\xd4\x74\x49\x84\x44\x0e\xba\x95\x56\xd4\x5d\x74\xcd\x90\x60\xd5\x72\x59\x61\x41\x2f\x43\x42\xcc\x07\x47\x01\x3f\xd1\xdb\x51\xa3\x31\x6c\x99\x7f\xf6\x6e\x51\xcf\x95\x49\x19\x39\xac\x82\x6a\x6d\xd3\x8e\x99\xc3\x05\x9e\xa2\x16\x86\xde\x26\x17\x52\xd3\x11\xf5\xc3\x0a\x81\x28\xe8\x28\x97\x3e\xac\xd2\x95\x11\x06\xa4\xb2\xe0\x59\xb5\x1a\xf9\xec\xf7\x31\xf3\x1c\x48\x6c\xc4\xc8\x6b\x43\x12\xe9\x59\x20\x92\x2f\x93\x33\x75\x2a\x49\x52\x47\x73\x9a\xa8\xa0\xca\x58\x6a\x7c\xa8\xcf\xc7\xbb\xbb\x19\xfd\xde\xed\x6e\xce\x60\xa1\x55\x0d\x77\x77\x33\xa3\x5a\x5d\xe2\x6e\x97\x25\xd3\x3b\x6c\x4a\x26\x91\x45\x5f\x19\xb4\xa7\xc9\xea\xcc\x33\x25\x6d\xcf\x8e\xa4\x62\xf7\x87\xd3\xf5\x6c\xc4\x72\x53\x30\x57\x15\x14\x56\xad\x51\x4e\xaa\x4c\x3b\xc0\xef\x00\xb7\xe3\x34\xe5\x5b\x59\x33\x6d\x56\xac\x2a\x2a\x55\xb2\x2a\x21\xf1\x3a\x52\xc1\x45\x83\xf2\x57\x97\xcf\x84\x88\x61\xbc\x3c\xb7\x1b\x6e\x59\xd5\xa2\xc9\x14\x28\xd1\x6e\x94\x5e\x9f\x2c\xd2\xbd\x98\x12\x2d\x30\x4b\xea\xb6\xba\x9a\xd0\xb5\x7f\xbc\x8b\x92\xc9\x12\xab\x2a\xf9\xb8\x5d\xfc\x3c\x83\x7f\x79\x1a\x4a\x6a\xfb\x9d\xb9\x02\x16\x4c\xa4\xb9\xbf\xea\xb3\x08\x2e\x78\xb8\x8b\x75\x53\xa1\x45\x30\x2d\xb9\x74\xd1\x56\xd5\x76\x06\x97\xad\x84\x4f\x5d\x7a\xdb\x55\x32\x9f\xe8\x59\xd0\x58\x2b\xca\x15\x98\xb6\x82\x55\xd5\xb6\xaf\x0c\x98\x31\x68\xc7\xbd\x30\x40\xea\xcb\x8c\xc2\x58\x66\xdb\x54\x42\xf5\xf4\xe9\xd3\xa7\xe7\xe7\xe7\xe7\x03\x5f\x0c\x74\xb8\x72\x5b\x81\x08\x88\x30\x4b\xaa\x2b\x90\x91\xe7\x98\x28\x9a\x86\x43\xa8\xaa\xbd\x71\xc6\x0f\xd9\xe9\xbe\x1e\xee\xcd\x17\x32\xea\xef\xeb\x01\xe5\xb8\xc7\xb3\xe5\x4d\xd9\x6f\x4f\xe4\x09\x16\x8c\x69\x51\xe1\xaa\xba\xe9\x04\xf9\xda\x15\x7f\x14\x0d\x29\x6d\xd9\xed\x6e\x60\xa1\x74\xee\xbd\x39\x10\x36\x54\xf4\x28\x71\xd9\xae\x73\xd9\xea\xb6\x88\x37\x66\xa2\x5d\x73\x77\x47\xb9\xf3\x6e\xd7\x05\x7b\x92\xb7\x62\xa1\x20\x1f\x9a\xb4\xbb\x83\xf9\xd2\xd3\xfd\x9d\x57\x71\x1d\x1e\x04\x30\x9b\x8d\xd4\xd6\x41\x44\x34\xc8\x5f\xa9\x62\xcf\x33\x47\xc9\x48\x9d\x56\xf3\xba\xa7\x38\x41\x51\x8e\x0d\x4a\x8e\xb2\x3c\xc6\x9e\xfd\xa6\xa1\xa0\xe3\xe4\xf4\xb7\x30\x69\xd4\x57\x0f\x8a\xf9\x92\x93\xf3\x30\x0a\x8a\x3d\xad\x4e\xa5\x7e\x83\x48\xaa\x16\x09\xd5\xff\x87\xcf\x50\xd4\xe7\xb8\x83\xf2\x65\x1e\xbc\x1f\x49\xff\x1a\x1f\x66\x5e\x8d\x14\x92\x71\x3f\xee\x45\xf4\x13\x3d\x39\x11\x84\xa9\x56\x3f\xf5\x59\x73\x88\xfc\x23\xd3\xf5\x02\xc6\xb0\x00\x6f\x35\x79\x32\x88\x1d\x3e\x15\x5f\xef\xbc\x45\x1d\x17\xaa\x95\xbc\x08\x78\x43\xa8\x4a\x1e\x80\x0a\x6d\x32\x36\x6d\x56\xa2\x5c\xc1\xc6\x35\xba\x09\x17\xf7\xa9\xa9\x5d\x21\x94\xad\xd6\x64\x98\xa8\x60\x6c\x5f\xb8\x47\xcb\xff\x26\x0e\xcc\x38\x5d\xc8\x7e\xd9\xcf\x97\xef\x0f\x4d\x14\x97\xbf\xcb\xf7\x15\x32\xe3\xba\x49\xb7\x82\xa3\x03\x45\xf4\x84\xdd\x3d\x97\x5d\x32\xf7\x02\xa6\x65\x8d\x96\xce\xf7\x64\x31\x79\x58\x4a\xbb\x1a\x25\x43\x50\xe8\xe4\x26\x9c\xa1\x60\xab\x5a\xd0\xe8\x3c\xbf\x61\xd2\xf6\x4d\x39\xb0\x2b\x61\xfe\x01\xdf\x6c\x9f\xbd\xfb\x36\x43\xce\x54\xc5\x7c\x5f\xa5\x41\xe1\xf7\x31\x36\x31\x5d\xc1\x43\x95\xd7\xb2\x45\x63\x6f\x32\xe4\x46\x27\x1f\xa5\x61\x37\xc2\xc8\xd4\x31\xc0\x2b\x42\x6f\x3e\xd5\x53\xf7\xab\x4e\x2f\x18\xb4\x65\x35\xba\x96\x13\x3f\x03\x56\x0d\xcb\xaf\xee\x5e\x13\x1c\xdd\xed\x08\x42\x80\x69\xec\x2e\xe3\xb3\x3e\x14\x02\x17\x1a\x4b\x1b\xc2\xa3\xf6\xe3\x83\xa9\x59\xc5\xeb\xcb\xcb\x8b\xcb\xab\x04\xee\xf3\xc3\xff\xc0\x93\xc3\xbd\x85\xf3\xf3\x91\x04\x45\xeb\xfd\x48\xbc\x96\x6a\x23\x0b\xbb\x6d\x46\x5e\xd2\x18\x71\x89\x8a\x4c\x15\x76\xcd\xa0\x1f\x42\x80\x92\xd5\x16\x4c\xdb\xf8\x89\xda\x33\xd7\xfd\x9f\x99\xad\xb1\x58\xc3\x5c\x48\x2e\xe4\xd2\x80\xd2\xb0\x14\x76\xd5\xce\x67\xa5\xaa\xbb\x19\xca\x78\x46\xa5\x75\xcc\xaa\x4a\x8d\xcc\xa6\x60\xba\x09\x27\x38\x92\xbd\xb8\xb5\x11\x76\x05\x6e\x34\x1a\xbb\x71\x2f\x68\x11\xb5\xde\xed\xdc\xb8\xcb\xaf\x95\x8a\xfb\x05\xfa\x31\x51\x51\x0f\x20\xf9\x60\x3a\x0a\x89\xdf\x0b\xa5\x5f\x09\xd2\x02\x91\x17\x42\xde\xaa\x75\x0a\xd0\x0f\xee\x5d\xa3\xab\xe5\xc9\x5c\x70\xa4\x6d\xb0\x59\xb9\x21\x5b\x40\x6a\xfd\x80\x33\x2c\x7d\x1d\xb4\x6b\xdc\x76\x7d\xbc\x9a\x49\xce\xac\xd2\x63\x3d\xca\x8e\xc6\xb5\xbc\x3e\x46\x63\xde\xd0\x79\x0c\x7c\x26\x65\x76\x15\x97\x54\xd6\xbf\x86\x09\x81\x6f\x87\xed\x71\xf7\x98\x3b\x6a\x60\x74\xef\xed\x6a\x58\x82\x4d\x0a\xa5\x4b\x4f\x9a\xd6\xcc\x96\xab\x11\x05\xbb\xe3\x41\x1b\xb8\x13\xc1\xe3\x83\x2b\xe4\xe1\x0c\xc6\xaf\xc7\x32\x90\x2b\xf4\xcd\x4d\x27\xc4\xb9\xd5\x85\x37\x22\xaa\x07\x4c\xf6\xda\xfe\x7e\x35\xaa\x31\xae\x44\xe8\x41\xd1\xf1\x62\x95\x48\x99\xed\x8d\x5f\xa5\x6b\x1e\x5c\xd2\x75\xd8\x49\x56\xf8\x4d\x58\xfa\xf9\xed\x1e\x2a\xa5\x1d\x76\xe6\x26\xed\x6e\x8f\xff\x99\x63\xe7\x08\x71\xc2\xd4\x97\xc7\x00\x3a\xb0\xab\xbb\x0a\x1e\xd1\x13\x03\xbe\xd3\xe8\x4d\x89\x9f\x2d\x4a\x13\x41\xe3\x67\x1b\x8b\xf3\x2f\x51\xc5\x14\x4b\x4c\xe5\x39\xfd\x55\x5e\xa2\x9f\x10\x87\xd8\xdb\x4f\x35\x42\xc3\xb0\x7f\xc9\xe8\x7d\x13\xe5\xe0\xfa\x4e\x02\x69\x75\x75\xbc\xcb\x7d\x57\x92\xde\x8a\xdd\x0e\xae\x2f\x7f\x71\xca\xbb\x3e\xa5\x3b\x83\xf4\x2f\xb2\x99\x27\xb8\xf1\xf3\xf2\x1c\x20\x35\xab\x16\x4a\xd7\xc9\xc4\xfc\x6d\x5c\x1f\x43\x30\x83\x0f\x7a\x0b\x6c\xc9\x84\x9c\xcd\x26\xc5\xfe\x61\x94\xec\xa2\x54\x59\xf3\x91\xc9\xf4\xbf\xaf\x2e\xde\x81\x90\x4d\x6b\x81\x33\xcb\xe0\x6d\xb0\xc6\x93\xb2\xe6\x4f\x28\x66\x8d\x4b\x62\x8d\xe8\x04\x6d\x70\x5e\xf8\xc3\x92\xfa\x4a\xe1\x81\x43\x15\xc7\x1b\x0c\x36\x38\x0f\xc7\xee\xcc\xcd\x25\x1c\x59\x23\x88\xa6\x64\xd2\x3f\xd4\x73\xf4\x4f\x25\xf2\xf0\x01\x43\xbf\x69\x06\x21\x05\x6c\x1b\xce\x2c\x1e\xc4\x0c\xab\xa0\x54\xf2\x16\xb5\x3d\x10\x6f\xd5\x90\xc7\x94\x61\x87\xea\x9e\xa4\x6a\x3c\x6c\xee\x88\xef\x41\xcc\x52\x7a\xce\x0c\x72\x50\x72\x18\x6e\xee\xb3\x9a\x34\x85\x90\x65\xd5\x72\x3c\x80\xc7\xcc\x9e\x17\x92\xc6\xf8\xf5\xe5\xe5\xbb\x37\xef\x7e\xcc\x4f\xf8\xe2\x86\xe3\x52\xbe\x0d\xd3\xb2\x28\x55\x4d\x2f\x68\xa1\xd1\x26\x9f\xd9\x4b\x5a\x8b\x1d\xc6\xb2\xe6\x4e\x97\x85\x45\xed\x9f\xf8\x17\x3e\xb6\x51\xe0\xb8\x19\xf3\x6f\x90\xe7\x46\x3c\x47\x07\x8f\xe1\x47\x13\xc3\x46\x27\x47\x8b\xa5\x9d\x68\x31\x38\xc9\x94\x58\x70\x6c\x34\x96\xe4\xe9\x42\x63\x53\xb1\x32\x19\x34\xe8\xe5\x25\x39\xaa\xe2\x21\x9f\x70\x13\x35\x7f\x30\xf6\x22\x95\xc7\xb4\x11\x55\x05\x46\x29\x49\xa7\xa9\x17\x73\x06\x4d\x38\x29\xc6\x67\x55\xae\x5c\xc6\xcd\x1e\x4f\x63\x91\x65\x2a\x10\xcc\x71\x4a\x3e\x64\x56\xaa\xad\x38\xc1\x33\x68\x67\xe0\x7b\xc6\xfb\x95\x1b\x51\xbb\x5f\xbe\x7b\x94\x85\xc8\xd1\x4f\xf8\x93\x70\x79\x09\xf4\xf4\xdd\xcf\xd3\x28\x3e\xb9\xfd\xc7\x88\xa4\x5c\xcd\xb0\xdb\x51\x0f\x4e\x09\x75\xfb\xa3\x57\x63\x8b\x22\x7e\x52\x35\xfc\x96\x6a\x1a\x58\x25\x6a\x61\x0b\xb1\x94\x4a\x27\x21\xc5\x73\x1d\x02\x8b\xdb\xe2\x50\xb9\x5f\x87\xb9\x98\x30\x10\xd8\xe5\x4a\x2f\x57\x4c\x2e\x91\xcd\x93\x5f\xc0\xfc\xd2\x49\xec\x92\x3f\x13\xf5\xae\xb6\xbe\x3b\xd5\xf1\x98\xc1\x1b\x12\x4f\x09\x74\xc6\x59\x70\x08\x4c\x51\xa9\x65\x61\xc4\x9f\x29\x00\x95\x5a\x5e\x89\x3f\x91\x6c\xeb\x37\xec\x69\xdc\x1f\x51\x26\xdd\x40\x93\x8a\x8d\x39\xda\x0d\xa2\x84\xe7\xae\xa8\xf8\xee\x79\x36\x94\x1a\x6b\xa5\xb7\x63\x68\x3c\xc5\xa9\x80\xbe\xfb\xfe\xef\x0e\xd2\xdf\xbe\xfb\x3e\x1b\x13\xe5\x5f\xaa\x4d\x25\x6f\x61\xf5\x24\x30\xcf\xbd\x7d\xfe\xff\x39\xfd\x37\x8d\xc7\xd5\xe1\x45\xa3\x55\x83\xda\x0a\x4c\x35\x7c\x63\x18\x1c\xc4\x2b\xdf\xde\xb3\x5a\x60\xd7\xe0\xf3\x45\x7d\xcf\x2c\x36\x02\x1f\x8e\x89\x31\x24\x72\xe5\x0e\x1c\x45\x46\x61\x41\xb5\xd6\x08\xee\x1c\xf1\x41\xb3\x5b\x61\x60\xde\x8a\x8a\x8f\x37\x01\x9c\x2a\x3e\x1c\x68\x3a\xb6\x59\xa1\xa0\x3b\xfd\x7b\x01\x41\x1e\x44\xf5\x60\x6d\xd7\xda\xb8\xbb\x9b\x85\xbf\x46\x73\x53\x85\x24\x64\x28\x74\xe9\x1f\xac\x9c\x48\x9b\x1d\xd4\x58\x8b\xf8\x4b\x96\x0a\x13\xb1\x14\x09\x54\x94\x50\x1c\x54\x25\x0f\xa4\x29\xc9\xc2\xe3\xa4\x6a\xc3\xa1\x0d\xbd\x0c\x57\xa8\xe2\x67\x61\x92\x5f\x18\xde\x2b\x53\xf7\x42\x0c\xab\x34\x32\xbe\x05\xcf\xa2\xcb\x9d\x0c\x56\x58\x5a\x60\x52\xd9\x15\xfa\x1e\xd8\x34\xa4\xd8\x1a\x9a\xac\xd4\xc3\x53\x78\x50\xd5\xc6\xac\xa1\x54\xd2\x32\xf7\xa5\x97\x54\x79\xed\x26\x27\x7d\x30\x0a\x70\x46\xc9\x01\xf1\x60\xa3\x3c\xbc\x38\x87\xb5\x3b\x5d\xad\xbe\xa9\x10\x88\xf6\x33\xcf\x69\x0b\x0d\x3e\x1d\x2c\xd4\x2d\x6a\x2d\x38\xc7\x54\x1a\x4d\x08\x87\x5f\x12\xf6\xa3\x9c\x7e\x6b\xcc\x15\x86\x9d\xfa\x14\x8c\x57\xaf\xff\x79\xfd\x63\x76\xde\xea\xa8\x8f\x4b\x5a\xf9\x7c\xd9\x8f\x36\xfd\x84\x7c\x72\xc0\xe9\xa8\x5e\x8c\xce\xa0\xe6\xcb\xe1\xc8\x6d\x94\xef\x70\xf0\x96\xc7\xd9\x20\xd3\xe5\x8a\xf8\x46\xe7\xf8\x26\x70\xba\xb1\x75\x15\x77\x74\xce\xe9\x76\xdc\x1b\xf3\xf7\x41\x6c\xe2\x99\xee\x4d\xd7\x9f\xe0\xbf\xfa\xf4\x9e\x78\x72\x09\x5a\x77\xb5\xfd\x38\x6a\xe4\x63\xfc\x57\x0f\xb4\xbc\x82\x45\x5e\xc0\x0f\x0e\x41\xff\x19\xbe\xeb\xb2\x13\xb3\x63\x01\x8c\x7f\x8e\x7a\x3c\x86\xe1\xc4\x2b\x4e\x68\x03\xa4\x47\x37\x8f\xfe\x1b\x00\x00\xff\xff\x84\xe1\x97\x7c\xc1\x33\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 13249, mode: os.FileMode(420), modTime: time.Unix(1520531312, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1489187925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1489187925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1489187925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1489187925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1489187925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1489187925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1489187925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1489187925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

