// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x8f\xd4\x38\x12\xfe\xce\xaf\x28\xa1\x93\xd8\x95\xa0\x81\x3d\x9d\x74\x42\x42\x27\x74\x70\x82\x5b\x60\x10\x33\xec\x6a\xc5\xa2\xe0\x4e\x2a\x69\x6f\x3b\x76\x64\x3b\xdd\x34\xad\xb9\xdf\x7e\x2a\xbf\x24\xe9\x9e\x71\x92\x6e\x58\x2d\x9f\x32\xed\x72\x3d\xe5\x72\xb9\xea\x29\x9b\x8f\x77\x00\xf6\x77\x00\x00\xee\xf2\xe2\xee\x13\xb8\x5b\x9b\x2a\x6b\x34\x96\xfc\x4b\x86\x5a\x2b\x7d\xf7\xbe\x1f\xb5\x9a\x49\x23\x98\xe5\x4a\x92\xd8\x0b\x37\x76\x07\xe0\xfa\xfe\x88\x86\x2d\xd3\x92\xcb\x2a\xa1\xe3\xd7\x30\x3a\xa5\xc5\xb4\x79\x8e\xc6\x24\xb4\x5c\x86\xd1\x29\x2d\x5c\x96\x2a\xa1\xe2\x15\x0d\x25\xe7\xa3\xd6\xd9\x1f\x46\xc9\xac\xe6\xc6\x70\x59\x65\x79\x5d\x64\x6b\xdc\x25\x94\xfd\xf7\xf2\xe2\x2d\x70\xd9\xb4\x16\x0a\x66\x19\xbc\xf1\xb3\xe0\x5e\x5e\x17\xf7\x80\xe6\x25\x91\x48\x71\x29\x58\x95\x19\xab\x79\x6e\x13\x00\x4c\x08\xb5\x85\xd6\xa0\x86\x02\x4b\x2e\xb1\x00\xdd\x4a\xcb\x6b\x84\x0d\x6a\x43\x52\xd3\x08\x4e\x49\xb6\x41\xbd\x54\x06\x13\x40\x61\x14\x54\x6b\x9b\xd6\xce\x56\x5a\x33\xc9\x2a\x2c\x46\xad\x6f\xb4\xfa\x03\x73\x0b\x28\x2d\xb7\x1c\x0d\x58\x05\x4b\x84\x9a\xe9\x35\x16\x10\x35\x4c\x23\x5a\x55\x55\x02\xb3\x15\x8a\x26\x81\x77\xe5\x24\xe0\x25\x8a\x06\x6a\x34\x86\x55\x38\x43\x6f\xae\x64\xc9\x53\x71\xeb\x07\xa1\xe4\x02\xe1\x87\x02\x4b\xd6\x0a\x0b\xdc\xc0\xdf\x5e\x5e\xbc\x79\xf1\x70\xb1\x35\xeb\x46\xab\xc6\xfc\x38\x03\x87\x4b\x8b\x9a\xe5\x96\x6f\x52\x9b\xe0\xfd\x35\x90\x23\xdf\xd5\x8d\x1d\x09\xf8\xa3\xfd\x08\x16\xa6\xce\x8f\x07\xe8\x84\xa6\xb5\x4a\x56\xa3\x69\x58\x9e\xb2\xb8\x1f\x9f\xd6\x15\xe2\x20\xa1\xa9\x61\x76\x45\x91\x61\x50\x6f\x50\x0b\x34\x26\x06\xce\x0c\xd5\x35\x93\xbc\x44\x33\xa5\x3b\x8a\xb9\xed\x9c\xa1\xb6\xc0\x46\xa8\x5d\x8d\x72\x4a\x71\x2f\x38\x57\x35\x6b\xed\x6a\x24\xb1\xd0\xb0\xd2\xfc\xab\xfb\x01\x3e\xff\xfc\xe2\xb7\xcf\x73\x94\x36\x3c\x5b\xa9\xa4\x1b\xb6\x2b\x6e\xd6\xf0\xec\xdd\x2b\xf8\xfc\xf2\xe2\xf2\x6a\xae\xc6\x98\x68\x26\x95\xfe\xf2\xe2\xfd\xe5\xab\x8b\xb7\x73\xf4\xae\x71\x97\x39\x4f\x8d\xf8\x55\x95\x60\x57\x08\x8b\x35\xee\xe6\x7a\x35\x47\x6d\x67\xeb\x25\xe1\x19\x8a\x0b\x34\x79\x66\x56\x4a\xdb\x4c\x2b\x95\xf2\xed\x33\xb0\x4a\x09\x30\x68\x29\x1e\x28\x47\x85\xa0\x80\x9d\x6a\x35\xa8\x06\xa5\xf7\x54\xc3\xf2\x35\xab\xd0\x40\xeb\x2a\x05\x3b\x0c\xca\xc5\x0c\x5b\x84\x92\xd5\x0c\x53\xba\xb0\xbc\x0f\xad\x0c\xb6\x30\x59\x80\xd9\xc9\x7c\x96\x3d\x24\xac\x1a\xd2\xca\xc4\x71\x84\x47\xf1\xdf\x9e\xbd\x79\x3d\xc7\x66\xef\xbf\xa6\x5d\x0a\x6e\x56\x09\xbb\xdf\xf9\x51\x60\xd1\x26\x5a\x02\x03\x8d\x15\x37\x56\x4f\x94\xd2\xde\x33\x67\x80\x50\x38\x44\x18\xb7\x85\x5c\xc2\xff\xfa\xe4\x3e\x46\x37\x28\x3d\x87\x3c\x91\x40\x7c\xae\x28\x04\x40\x23\x13\x62\x07\x5b\x26\x6d\xbf\x35\x60\x57\xdc\xfc\x0b\x7e\xd8\x3d\x7c\xfb\xe3\x13\x98\xc4\x89\xfb\x78\x12\x52\xb7\xf9\xa7\x61\x51\x06\x4a\xe7\xa7\xdf\xe5\x3b\x81\xcc\xb8\x02\xb5\xe1\x05\x02\x93\x40\x33\xa8\xc6\xe7\x3e\x69\x59\xb5\x46\x39\x07\xa8\xe1\x23\x39\xeb\x06\x10\xed\x15\xc9\x53\xe5\x81\x52\x69\xb8\x68\x50\xfe\x4a\xa1\x3c\x03\x6b\xaa\x9c\xdd\x5c\x16\x74\x53\xe0\x63\x2c\xff\x1b\x26\x5a\x24\x12\x50\xb5\x68\xec\xa7\x31\xdc\x78\x98\x32\xa9\x6c\x56\xaa\x56\xa6\xa8\xd2\x9b\x61\x16\x00\xa9\x2c\x38\x69\x60\x16\x5c\xd2\xfa\xb8\xdf\x2f\xe8\xe3\xfa\xfa\xd3\xe2\xf7\x11\xd2\xe7\x8e\x65\x0f\x3b\x1a\x2f\x1f\xdc\x11\x1e\x68\x76\xfe\xec\x4f\xfa\x29\x40\x13\xa1\x79\x3b\x54\x9c\x34\x09\x46\xb4\x3c\xf0\x5e\x62\xe6\x35\xb3\x79\xea\x80\xbf\x0f\xf4\x98\xb0\xc2\x14\x82\x33\x0d\xe6\xbc\xe4\x58\xd0\xd9\xee\x52\x5c\xa1\xd0\x38\x67\x3b\x8d\xb0\xe5\x76\x05\xc4\xbc\x94\xbc\x67\xc0\xa8\x56\xe7\xe8\x37\x04\xbf\x58\x94\x54\x05\x9d\x5e\xfc\x62\xe3\x12\xbc\xb4\xfb\xd5\x7f\x4e\x6d\x10\xb5\x49\xdd\x5a\xf2\x15\x93\x69\xfa\x1c\x97\x12\xa4\xe8\x30\x1f\xad\x6a\xc9\x0c\x16\x40\x87\x6d\x85\x53\x86\x9f\x65\xed\xd0\xf1\x5c\x6e\x98\xe0\x29\x63\x5f\xf9\x51\x50\x1a\x42\xef\xd4\x75\x2a\xb3\xb6\x82\xcc\xeb\x57\x71\x82\x89\x5e\x2a\x13\xbc\xe6\x36\xe3\x95\x54\x3a\xe9\xd0\x68\x63\xc0\x70\x53\x1c\x92\xfb\x22\xdb\x86\x16\x71\x03\x41\xdd\x28\xbe\xef\x10\xba\x86\x71\x3c\x6f\x5e\xd1\x0a\x0f\xf3\x24\xd1\x1b\xee\xa3\xd0\xab\x6a\x4f\x45\x1c\x4d\xa0\x84\x48\xec\x8c\x44\xbe\x0d\x67\x2a\x79\x12\x52\x9f\x2d\xcf\x82\x0a\x4b\x19\xeb\xdf\x8f\xd7\xb3\xdf\x2f\xe8\xf3\xfa\xfa\x3e\x94\x5a\xd5\xf4\xb7\x8f\xff\xeb\xeb\x59\x88\x7e\xbb\xa6\x10\x49\x2c\xee\x94\x41\x7b\x1e\x56\xe7\x9c\x29\xb4\x03\x2f\xee\xf7\x8b\xee\xef\x93\x57\x49\xe7\xb7\x42\x1b\xcf\x70\xaa\x2f\xfc\x0f\xe3\xc2\x27\x98\x8a\x08\xec\x0a\xc1\xb4\x4d\xa3\xb4\xed\xef\x1b\x8c\x07\xee\xaa\xad\x6b\xd4\x78\x8e\x4f\xc8\x16\xd4\x7a\xc2\x90\x56\xd6\x4c\x9b\x15\x13\x22\x13\x2a\x67\x22\x55\x27\xa2\xd8\x00\x88\x9c\xe5\xc1\xdd\x4c\x5f\x7e\xcd\x5c\x34\x89\x76\xab\xf4\xfa\x2c\x3c\xd7\x89\x4b\x1c\xaf\x4d\x7d\x09\xf3\x97\x57\x58\x24\xf3\xcf\xf3\x9e\x44\xe7\xaa\x6e\x04\x92\x7f\xc3\x8d\x57\xd9\x0a\xb1\x9b\x0b\x54\xba\xfd\x9a\x46\x29\x78\x11\x4e\xa1\x47\x23\xb0\x0e\x0b\xde\xb7\x12\x3e\x6f\xcd\x3a\xf0\xc3\x58\x8d\x3f\x53\x1c\x68\xac\xd5\x06\xa1\x61\xda\x72\x47\x27\xfd\x18\x16\xc0\x8c\x41\x3b\xee\xfe\x81\xa5\x39\x93\x39\x8a\xb4\xb1\x17\x3f\x2f\xe0\xdf\x5e\x86\x4a\xc6\x4c\x3e\x30\x00\xd0\x48\x71\x9a\x19\xcb\x6c\x9b\x0a\xef\x07\x0f\x1e\x3c\x78\xfa\xf4\xe9\xd3\xc1\x26\x0f\x9c\x74\xe9\xa6\x02\x09\x90\xe0\x58\x54\x9d\xb0\xd7\x1f\x06\xc2\xe7\xec\xf6\x01\xd8\xe8\x7e\x1f\x20\x8d\xee\xf8\x6c\xbc\x13\x77\x6d\x36\x8f\x3b\x00\x09\x37\x7f\x27\x2c\x4e\x95\x50\xa0\xf7\x63\x77\x99\x38\xb6\x60\x28\x5a\x4d\xf6\x05\xa4\x61\x74\xfd\x79\xc1\xef\x08\x9e\xeb\xad\xa9\xeb\x68\x50\x93\x99\x23\xc9\x9e\xf8\xc7\x1a\x77\xc4\x3e\xa8\xc0\x6c\x99\x01\x8d\x56\x73\xdc\x60\xe1\xd3\x90\x53\xb6\xe8\x95\xd1\x0f\x8e\xad\x0a\x01\x46\x29\x09\x4b\x24\x0b\x35\xe6\x8c\x5c\xd3\xf8\x16\xa6\x50\xce\x2f\xad\x41\xe0\x16\x54\x6b\x0d\x35\x34\xaa\x84\x2b\xcd\x36\xdc\xc0\xb2\xe5\xa2\x98\xb1\x14\xaa\x8e\xbd\x76\x3a\x6f\x82\xe5\xc9\xfd\x8a\x2b\x52\xa2\x18\x2c\x8a\x7b\x86\xba\xdf\x2f\x88\x94\xda\x5d\x83\xd7\xd7\x9e\x9f\x26\x16\x71\x3f\xae\x82\xcc\xb7\x41\xa7\xc4\xed\x81\x4e\x63\x91\x8d\xd3\x0a\x2a\x7f\x91\xbe\xd4\x4c\x16\xcc\x2a\xbd\x1b\xb9\x76\x23\xeb\x3b\x39\x87\x32\xd8\x1d\x6e\x22\xb3\x9d\x76\xda\x77\x03\x35\x2b\xd5\x8a\x82\x9c\x63\xd0\x2e\xc0\xf7\x51\x87\x8d\x28\x49\xbb\x2f\x62\xca\x8b\x39\xfe\x70\xdd\x8e\xa3\x23\x13\x97\xb2\x57\x7e\xd3\x9c\x2d\x8e\x95\x14\x0e\xad\xa0\xcf\x40\x97\x8f\x2e\x86\xfc\x78\x6c\xf2\x8e\xfa\x2b\x1b\xb8\x8d\x13\xaa\x07\x4a\x0e\xee\xc0\xfc\x68\x6c\x76\xa7\x8a\x00\x79\xb9\xc0\x06\x65\x81\x32\x4f\xde\x8c\x44\x51\xe8\x45\x7d\x48\x79\x1b\x16\x8b\x11\x9c\x98\x1a\x66\x21\x7d\xe8\x85\xcf\xc1\xea\xa7\xdc\xe0\x15\xc9\x47\xb1\xe7\xb7\xc2\xc0\x8a\x19\x58\x22\xca\x83\x92\xd3\x65\xb2\xa9\xf2\x7a\x8b\x15\x94\xa7\x5b\x9d\x62\xff\xcf\x8f\xd2\xf4\xad\x36\xfd\x75\x7c\x24\xae\xe7\x66\x0d\xff\x3e\x7e\x8d\x7a\xe7\x7b\xf6\x46\x81\x4f\xfb\xf6\x66\x11\x3c\xdd\xbb\x63\x56\x75\x95\x58\xb5\xb2\xc8\x42\x89\xcd\x5c\x89\x4d\x9f\x28\x81\x96\x82\xbc\x4b\x0f\x43\x4b\x42\x81\x72\xa5\x8c\xf6\x2d\x14\x32\x3a\xff\x79\xab\x35\x2d\x23\xd6\xe4\xf8\x3a\xe8\xee\x86\xfc\x37\x69\x60\xc6\xed\x35\xad\xf6\xa4\x5b\x22\x6f\x74\x96\x6b\x64\x36\xe5\x4e\xf7\x9e\x0d\x4e\xe4\x60\x05\xee\xfa\xc7\x3d\x84\xc7\xd7\xc3\xbe\xb9\x71\xb7\xe1\x7e\x2c\x57\x85\x1f\xa0\x8f\x19\xfd\x57\x30\xc9\xbb\x75\xd4\xa4\xe2\x86\x53\xff\x0c\x93\xa2\x39\x21\x4d\x4d\xa6\xcc\x5b\x77\x78\x34\x8b\x05\x88\x41\xe2\x9c\x91\x2d\xcf\x86\x89\x07\x6f\xe2\x38\xdf\xaa\xff\x1b\x92\xe4\xd1\x22\xbf\x27\xfe\xcc\x64\x42\xc1\x55\x22\x16\x19\x97\x1b\xb5\x4e\x85\x56\xdf\xdb\x7b\x31\x77\x0a\x69\x1a\x6c\x57\x28\xfb\x98\xb3\x9a\x57\x15\xea\x30\xf4\xfd\xe3\xae\x23\x93\x8e\xab\xb8\x0b\x71\xc3\x36\xa3\x44\xd2\xf3\x9b\x52\xe9\x5b\xa8\x18\x25\x3a\x37\x3f\x92\xcb\x98\x58\xc2\x73\x25\x65\x8e\xae\x96\x4c\x1b\x16\x2e\x37\x7b\x03\xbf\xc1\x2c\xa7\x69\x1a\xd2\x5d\x3a\x9a\xac\xc6\x9a\xf8\xa1\xe1\x5f\x53\x98\x5e\xe2\x92\x7f\x75\xf4\xdd\x4f\x3b\x60\x4d\x3d\x49\x64\xd2\x5d\x5a\xd0\x3e\x2e\xd1\x6e\x29\xb2\x1e\xff\xf4\x4f\xb7\x63\xff\x78\xfc\xd3\x6c\x9b\x2c\xaf\x51\xb5\x29\x56\x18\x46\xcf\x32\xe6\xd1\x23\x67\xcc\xdf\x1f\xd1\xbf\x53\x7d\x24\x54\x35\xe6\x27\xa1\xaa\x73\x9d\xe4\xad\x7a\x3c\xd7\xa2\x70\x71\xcf\x96\xc9\x97\xe6\xd7\xdd\xdd\x72\x47\x73\x4d\x0c\x51\xb1\xf3\x65\xba\xd3\xb1\x80\x57\x95\x54\xd4\xaa\x4e\xf0\x77\xff\x78\x80\x56\xef\xb2\x5c\xd5\xd4\x34\xa4\x9e\x0e\x48\x26\x3e\xb9\xe4\x75\xe1\x4a\x6a\x69\x51\xfb\x83\xfb\xc4\x3f\x63\xd0\x69\xfe\x34\x95\x61\x5a\x2d\x4e\xbf\xfa\xdf\xef\x17\xad\x16\xa1\xd1\xfb\xf0\xfe\xb5\xc3\x6b\xb5\x08\x7c\xff\xe3\x41\x27\xf8\xc9\x3f\x7d\xcf\x31\xa4\x66\xa2\x54\xba\x4e\x66\x8d\x37\x71\x7c\xcc\x82\x05\x5c\xe9\x1d\xb0\x8a\x71\x39\xc7\xdf\xe1\xf6\xf6\x64\x1f\x0c\xff\xeb\xd0\xf0\xe5\xab\x40\x8b\xb9\x9d\x91\xdb\x07\xfc\xd0\xf5\x6a\x53\x6f\x88\x07\xdd\xda\x41\xe8\xdd\x6c\xd3\xfa\x17\xc6\xe3\xf6\x6b\x9c\xbf\x2e\xfd\xff\xdd\xd8\xa0\xe6\x65\x8a\x1b\xfe\xe2\x06\x43\x18\x78\x1b\x86\x59\x12\xbf\x70\x63\xcd\x1c\xcf\xfb\x4a\xa1\xe9\x98\xcc\x4a\xc7\xb7\xc2\x71\x79\x74\xef\x10\x12\x01\xfd\x45\x23\xe1\xd7\x98\x09\xa8\xf7\xe4\x32\x54\x39\xfa\x83\xe5\x33\x38\xde\x01\xaf\x5f\x4b\xb5\x95\x19\xe9\x9d\xee\x2c\x9c\x15\xdc\x40\x98\xb5\x80\xbe\x68\x81\x92\x62\x17\x2f\xe2\x0d\x3c\xf4\xd7\x40\x66\x67\x2c\xd6\xb0\xe4\xb2\xe0\xb2\x32\x14\x70\x15\xb7\xab\x76\xb9\xc8\x55\xdd\xfd\x6f\x8e\x68\xf0\x9d\x4f\x77\xfe\x1f\x00\x00\xff\xff\x34\x31\x09\xbe\xf6\x29\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 10742, mode: os.FileMode(420), modTime: time.Unix(1516315002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

