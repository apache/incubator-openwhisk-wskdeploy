// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x5f\x8f\xdb\xb8\x11\x7f\xdf\x4f\x31\xc8\xcb\xb5\x40\xe2\x4b\xae\x28\x50\x04\x08\x8a\xa2\x49\x71\xdb\xeb\x65\x83\xec\xa6\x87\x22\x17\x68\x69\x71\x24\xf1\x4c\x91\x02\x49\xd9\x71\x0c\xf7\xb3\x17\x43\x8a\x92\xbd\x6b\x4a\xb2\x93\x43\xf3\xe4\x2c\x87\xf3\x9b\xff\x7f\xa8\x8f\x57\x00\xbb\x2b\x00\x80\x27\x82\x3f\x79\x09\x4f\x6a\x5b\x66\x8d\xc1\x42\x7c\xce\xd0\x18\x6d\x9e\x3c\x0d\xa7\xce\x30\x65\x25\x73\x42\x2b\x22\x7b\xe3\xcf\xae\x00\xf6\x4f\x47\x38\x6c\x98\x51\x42\x95\x09\x1e\xbf\x74\xa7\x53\x5c\x6c\x9b\xe7\x68\x6d\x82\xcb\x6d\x77\x3a\xc5\x45\xa8\x42\x27\x58\x5c\xd3\x51\xf2\xfe\x6f\x56\xab\xac\x16\xd6\x0a\x55\x66\x79\xcd\xb3\x15\x6e\x13\x8c\xfe\x79\x7b\xf3\x16\x84\x6a\x5a\x07\x9c\x39\x06\x3f\x87\x5b\xf0\x5d\x5e\xf3\xef\x80\xee\x25\x51\x88\x71\x21\x59\x99\x59\x67\x44\xee\x12\x00\x4c\x4a\xbd\x81\xd6\xa2\x01\x8e\x85\x50\xc8\xc1\xb4\xca\x89\x1a\x61\x8d\xc6\x12\xd5\x34\xc2\x1a\xcd\x52\x5b\x4c\x40\x74\xa7\xa0\x5b\xd7\xb4\x6e\x06\x3b\x2f\x53\x56\x33\xc5\x4a\xe4\xa3\x72\x37\x46\xff\x86\xb9\x03\x54\x4e\x38\x81\x16\x9c\x86\x25\x42\xcd\xcc\x0a\x39\x44\x0e\xa3\x88\x4e\x97\xa5\xc4\xac\x42\xd9\x24\xa0\xee\x3c\x05\xfc\x88\xb2\x81\x1a\xad\x65\x25\xce\x50\x42\x28\x87\x86\xe5\x4e\xac\x53\x76\x09\x2a\x1c\xd0\x91\x3a\x75\xe3\x46\x22\xef\x81\x89\x38\x16\xac\x95\x2e\x15\xc8\x01\xa0\x27\x9a\xe6\xaa\x58\x8d\xb6\x61\x79\x4a\xe2\xe1\x7c\x9a\x57\xe7\x9a\x04\xa7\x86\xb9\x8a\x9c\x65\xd1\xac\xd1\x48\xb4\x36\xfa\x72\x06\xeb\x9a\x29\x51\xa0\x9d\xe2\x1d\xc9\xa0\x10\x72\x8e\xc4\x1c\x1b\xa9\xb7\x35\xaa\x29\xc6\x03\xe1\x5c\xd6\xac\x75\xd5\x48\x96\xd3\xb1\x36\xe2\x8b\xff\x03\xdc\xff\xf4\xe6\x3f\xf7\x73\x98\x36\x22\xab\x74\xd2\x0c\x9b\x4a\xd8\x15\xfc\xed\xdd\x35\xdc\xff\x78\x73\x7b\x37\x97\x63\xcc\xfa\x49\xa6\xff\x7e\xf3\xfe\xf6\xfa\xe6\xed\x1c\xbe\x2b\xdc\x66\xde\x52\x23\x76\xd5\x05\xb8\x0a\x61\xb1\xc2\xed\x5c\xab\xe6\x68\xdc\x6c\xbe\x44\x3c\x83\x71\xd3\x2e\xa5\xb0\x55\x26\x75\xb2\xcb\xbc\x0b\x24\xc0\xa0\x61\xf9\x8a\x95\x48\x31\x41\x18\x06\x4b\x61\x9d\xd9\x82\x45\x07\x42\xc1\x7f\xbf\x5f\x6c\xec\xaa\x31\xba\x99\x48\xbe\x08\x6a\x2b\x6d\x52\xee\x3c\x89\xca\x7a\xcc\xb1\x6e\x45\x45\xa5\x8b\xee\x04\xf3\xd7\x1a\xb6\xba\x05\x83\x4c\xca\x2d\x6c\x98\x72\x43\x9c\x83\xab\x84\xfd\x2b\xfc\x61\xfb\xfd\xdb\x3f\xbe\x84\x49\x9c\x56\x5d\x80\x14\x2f\x9d\x89\x45\x79\x93\xce\xaa\x5f\xd5\x3b\x89\xcc\xfa\xb2\xba\x16\x1c\x81\x29\xa0\x1b\xd4\x2c\xf2\x90\x6a\x4e\xaf\x50\xcd\x01\x6a\xc4\x48\xa6\x3d\x02\xa2\x60\x20\x7a\xaa\x97\x50\x68\x03\x37\x0d\xaa\x5f\x28\x75\x66\x60\x4d\x15\xe1\xc7\x6a\x41\x7f\x05\x3e\x76\xd5\x1e\xd6\x4c\xb6\x08\xc2\x42\xd9\xa2\x75\x9f\xc6\x70\x63\x9d\xcc\x94\x76\x59\xa1\x5b\x95\xea\xb9\x3f\x1f\x16\x54\x50\xda\x81\xa7\x06\xe6\xc0\xa7\xda\xc7\xdd\x6e\x41\x3f\xf6\xfb\x4f\x8b\x5f\x47\xe6\x86\xd6\x0f\x3e\x3d\xec\x68\xbc\x7c\xf0\xe3\xce\x01\x67\x6f\xcf\xa1\x02\x9f\x03\x34\x11\x9a\xa7\xa1\xe2\xa5\x49\xb0\x6e\x6c\xa2\xc1\xae\x66\x2e\xaf\x12\x28\xef\xbb\xe9\x8a\x70\xba\x2b\x04\x65\x1b\xcc\x45\x21\x90\x53\xe1\xe8\x3b\x17\xd7\x68\xbd\xa1\x3d\x47\xd8\x08\x57\x01\xcd\x0a\x5a\x81\xd5\xad\xc9\x31\xb8\x02\x3f\x3b\x54\x54\xb5\x3d\x57\xfc\xec\xa2\xf0\x1d\x2d\xfd\x35\xfc\x9c\x72\x4d\x54\x22\xaf\x98\x4a\x0f\x5f\x51\x87\x8e\x8a\x32\xf8\x81\x3a\x4b\x66\x91\x03\x65\x58\x85\xe3\x12\x7f\x95\x98\xad\xb2\x6d\xd3\x68\xe3\x26\x45\x9d\x65\x6e\x11\x8c\xdd\xf3\xf4\xc2\x1d\x68\x30\x5f\xc0\x40\x95\x49\x51\x0b\x97\x89\x52\x69\x93\x94\xf0\x5a\xad\x99\x14\x3c\x62\xf8\x2b\x1e\xc9\xff\x22\x61\x1f\x88\xd8\xb1\x1b\xc5\xcf\xb5\x2a\x44\xd9\x2f\x19\xe3\x85\xf2\x8e\x34\x3c\x2e\x8c\xd4\x85\x3b\x6b\x04\x56\xed\xb9\x88\xa3\x15\x93\x10\x69\x88\x20\x92\xaf\xc3\x99\xaa\x96\x84\x34\x94\xc7\x8b\xa0\x3a\x55\xc6\xf6\xbd\x87\xfa\xec\x76\x0b\xfa\xb9\xdf\x3f\x85\xc2\xe8\x9a\xfe\x1f\xa2\x7f\xbf\x9f\x85\x18\xdc\x35\x85\x48\x64\xd1\x53\x16\xdd\x65\x58\xbd\x71\xa6\xd0\x8e\xac\xb8\xdb\x2d\xfa\xff\x9f\xad\x25\x1a\x93\x95\xe8\x62\x16\xa7\xd6\x97\x7f\x30\x21\x43\x71\x29\xd1\xf9\x34\x1c\x12\x33\x5e\x0d\xc0\x7d\x7b\xf5\xfb\x84\xc8\xf1\x25\xc9\x82\xc6\x4c\x08\xd2\xaa\x9a\x19\x5b\x31\x29\x33\xa9\x73\x26\x53\x8d\x21\x92\x1d\x00\x91\xb1\x02\xb8\xbf\x19\xfa\xad\x9d\x8b\xa6\xd0\x6d\xb4\x59\x5d\x84\xe7\x17\x46\x85\xe3\xcd\x68\xe8\x59\xe1\xb1\x03\x79\xb2\xfe\xbc\x1e\xb6\x99\x5c\xd7\x8d\x44\xb2\x6f\xf7\x42\x52\xb4\x52\x6e\xe7\x02\x15\xde\x5f\xd3\x28\x5c\xf0\x2e\x0b\x03\x1a\x81\xf5\x58\xf0\xbe\x55\x70\xbf\xb1\xab\x6e\x20\x8c\xed\xf7\x9e\xe2\xc0\x60\xad\x69\x4d\x66\xc6\x09\x3f\x3f\x86\x33\xe4\xc0\xac\x45\x37\x6e\xfe\x03\x49\x73\xa6\x72\x94\x69\x61\x6f\x7e\x5a\xc0\xdf\x03\x0d\x8d\x04\x33\x07\x80\x03\x00\x83\x14\xa7\x99\x75\xcc\xb5\xa9\xf0\x7e\xf6\xec\xd9\xb3\x57\xaf\x5e\xbd\x3a\x70\xf2\x81\x91\x6e\xfd\x55\x20\x02\x22\x1c\x8b\xaa\x33\x7c\xfd\xe1\x80\xf8\x12\x6f\x1f\x81\x8d\xfa\xfb\x08\x69\xd4\xe3\xb3\xf1\xce\xf4\xda\xec\xc1\xed\x08\xa4\x7b\x33\x3a\x43\x39\x5d\x00\xc7\x60\xc7\xfe\x19\x6a\x4c\x61\xe0\xad\x21\xf9\x3a\xa4\xc3\xe8\xfa\xfd\x82\x7f\xc3\x8c\xca\xfc\xf2\x4e\x6b\x46\x83\x86\xc4\x1c\x29\xf6\x34\x7f\xac\x70\x4b\xd3\x07\x35\x98\x0d\xb3\x60\xd0\x19\x81\x6b\x9a\x8a\xa8\x0c\x79\x66\x8b\x81\x19\xfd\xc1\x8f\xa8\x52\x82\xd5\x5a\xc1\x12\x49\x42\x83\x39\x23\xd3\x34\x61\x67\xe1\xda\xdb\xa5\xb5\x08\xc2\x81\x6e\x9d\xa5\x0d\x46\x17\x70\x67\xd8\x5a\x58\x58\xb6\x42\xf2\x19\xaa\x50\x77\x1c\xb8\x53\xbe\x49\x96\x27\xfd\x15\x35\xd2\x92\x1f\x28\x25\xc2\x74\xba\xdb\x2d\x68\x24\x75\xdb\x06\xf7\xfb\x30\x9d\x26\x94\x78\x1a\xb5\x20\xf1\x5d\xc7\x53\xe1\xe6\x88\xa7\x75\xc8\xc6\xc7\x0a\x6a\x7f\x71\x7c\xa9\x99\xe2\xcc\x69\xb3\x1d\x79\x1d\x22\xe9\x7b\x3a\x8f\x72\xe0\x1d\x61\xa1\xe3\x35\x6d\xb4\x6f\x06\x6a\x2b\xdd\x4a\x4e\xc6\xb1\xe8\x16\x10\x16\xa7\xe3\xcd\x93\xa8\xfd\x2f\x9a\x94\x17\x73\xec\xe1\x57\x1c\x3f\x8e\x4c\xbc\x1d\xde\x05\xa7\x79\x59\xfc\x54\xc2\x3d\x1a\xa7\x9f\xdd\xb8\xfc\xe0\x85\x2e\x9c\xc7\xad\xee\xc1\x52\xe5\xba\xd9\xc6\x13\xd5\x07\x4c\x8e\xde\x0f\xc3\x69\xdc\x6e\xa7\x9a\x00\x59\x99\x63\x83\x8a\xa3\xca\x93\x4f\x21\x91\x14\x06\xd2\x10\x52\x41\x86\xc5\x62\x04\x27\x96\x86\x59\x48\x1f\x06\xe2\x4b\xb0\x86\x2b\x8f\xe6\x8a\xe4\x47\x94\xd7\x27\x61\xa0\x62\x16\x96\x88\xea\xa8\xe5\xf4\x95\x6c\xaa\xbd\x9e\x90\x82\xea\x74\x6b\x52\xd3\xff\xeb\x07\x65\xfa\xa4\x4c\xff\xbf\x79\x24\xea\xf3\xb8\x87\x7f\x1b\xbb\x46\xbe\xf3\x2d\xfb\xa8\xc1\xa7\x6d\xfb\xb8\x09\x9e\x6f\xdd\x31\xa9\xfa\x4e\xac\x5b\xc5\xb3\xae\xc5\x66\xbe\xc5\xa6\x33\x4a\xa2\xa3\x20\xef\xcb\xc3\xa1\x24\x5d\x83\xf2\xad\x8c\xfc\xd6\x35\x32\xca\xff\xbc\x35\x86\xd4\x88\x3d\x39\x7e\x57\xf2\x8f\x41\xe1\x37\x71\x60\xd6\xfb\x9a\xb4\x9d\x3d\x5d\x50\x75\xcb\x0d\x32\x87\xe3\xb2\xfb\xef\x9f\xe0\x29\x8f\x34\xf0\x6f\x3e\xfe\xc3\x69\xfc\xf8\x34\x2c\x37\xc0\x14\xef\xce\x72\xcd\xc3\x01\xfd\x98\xb1\x7f\x05\x7b\xce\x11\x89\x3f\x32\xea\xef\x21\x92\x97\x63\xa8\x9e\x93\x25\xf3\xa4\x87\x47\xab\x58\x07\x71\x50\x38\x67\x54\xcb\x8b\x61\x62\xe2\x4d\xa4\xf3\x49\xfe\x5f\x51\x24\x1f\x28\xf9\x2d\xf1\x67\x16\x13\x0a\xae\x02\x91\x67\x42\xad\xf5\x2a\x55\x3c\x86\xdd\x3e\x90\xf9\x2c\xa4\x6b\xb0\xa9\x50\x0d\x31\xe7\x8c\x28\x4b\x34\xdd\xd1\xb7\x8f\xbb\x7e\x98\xf4\xb3\x8a\x7f\x01\xb7\x6c\x3d\x3a\x48\x86\xf9\xa6\xd0\xe6\xc4\x28\xe6\x5f\x0f\xe9\x7e\x1c\x2e\x63\x61\xe9\xbe\xaa\x51\xe5\xe8\x7b\xc9\xb4\x60\x22\x3c\x0d\x0e\x02\x7e\x85\x58\x9e\xd3\x34\xa4\x7f\x74\xb4\x59\x8d\x35\xcd\x87\x56\x7c\x49\x61\x06\x8a\x5b\xf1\xc5\x8f\xef\xe1\xda\xd1\xd4\x34\x0c\x89\x4c\xf9\x47\x0b\xf2\xe3\x12\xdd\x86\x22\xeb\xc5\x0f\x7f\xf1\x1e\xfb\xf3\x8b\x1f\x66\xcb\xe4\x44\x8d\xba\x4d\x4d\x85\xdd\xe9\x45\xc2\x3c\x7f\xee\x85\xf9\xd3\x73\xfa\x77\xae\x8d\xa4\x2e\xc7\xec\x24\x75\x79\xa9\x91\x82\x54\x2f\xe6\x4a\xd4\x3d\xda\xb3\x65\xf2\x83\xe8\xbf\xfa\xb7\xe5\x7e\xcc\xb5\x31\x44\xe5\x36\xb4\xe9\x9e\xc7\x02\xae\x4b\xa5\xfd\xaa\x4a\x51\xa5\xf4\x66\x31\x31\xc8\x7b\x51\x68\x4d\xdc\x66\xb9\xae\x69\x7b\x48\x3d\xca\x13\x4d\xfc\xd8\x92\xd7\xdc\xf7\xd6\xc2\xa1\x09\x19\xfc\x32\x7c\xc6\xa0\xb4\xfe\xd4\xe1\x5d\x7d\xba\xfa\x5f\x00\x00\x00\xff\xff\xd9\xaf\x0f\x31\x59\x24\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 9305, mode: os.FileMode(420), modTime: time.Unix(1516060843, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

