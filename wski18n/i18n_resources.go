// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x51\x6f\xe3\xb8\x11\x7e\xcf\xaf\x18\xec\x4b\x5a\x20\x70\x77\xaf\x28\x50\x2c\x50\x14\x41\x93\xb6\xe9\xdd\x26\x41\x92\xbd\xc5\x61\x6f\xa1\xd0\xe2\xc8\xe6\x59\x22\x05\x92\xb2\xd7\x67\xf8\xbf\x17\x43\x8a\xb2\x1d\x9b\x92\xac\x78\x6f\xf3\xa4\x44\xe4\xf7\x7d\x33\x1c\xce\x0c\xa9\x7c\x3e\x03\x58\x9d\x01\x00\xbc\x11\xfc\xcd\x7b\x78\x53\x98\x49\x52\x6a\xcc\xc4\xd7\x04\xb5\x56\xfa\xcd\x85\x7f\x6b\x35\x93\x26\x67\x56\x28\x49\xc3\xae\xdd\xbb\x33\x80\xf5\x45\x0b\xc2\x82\x69\x29\xe4\x24\x82\xf1\xa9\x7e\xdb\x85\x62\xaa\x34\x45\x63\x22\x28\x8f\xf5\xdb\x2e\x14\x21\x33\x15\x81\xb8\xa1\x57\xd1\xf9\xbf\x19\x25\x93\x42\x18\x23\xe4\x24\x49\x0b\x9e\xcc\x70\x19\x01\xfa\xdf\xe3\xdd\x2d\x08\x59\x56\x16\x38\xb3\x0c\x3e\xf8\x59\x70\x9e\x16\xfc\x1c\x68\x5e\x94\x85\x80\xb3\x9c\x4d\x12\xc9\x0a\x34\x25\x4b\x31\xc2\xb1\x79\xdf\x8d\xc5\x2a\x3b\x6d\x91\x4b\xaf\x95\x16\xbf\xbb\x3f\xc0\xf3\x8f\xd7\xbf\x3c\xf7\x01\x2d\x45\x32\x55\xc6\x46\x40\x17\x53\x61\x66\x70\x79\x7f\x03\xcf\xff\xbd\x7b\x7c\xea\x8b\x38\x47\x6d\x08\xa1\x13\xf4\xe7\xeb\x87\xc7\x9b\xbb\xdb\x3e\xb8\x33\x5c\x26\x99\xc8\x63\x9e\x2c\x99\x9d\x82\xca\xc0\x4e\x11\x46\x33\x5c\x82\x1b\xdb\x0d\x9b\xa2\xb6\xbd\x71\x69\x70\x07\x70\xa9\x55\x51\xda\x84\x63\x99\xab\xd8\x52\x5d\x29\x58\xaa\x0a\x34\xb2\x3c\x5f\xc2\x82\x49\x0b\x56\x81\x9f\x02\x76\x2a\xcc\x3f\xe1\x4f\xcb\xbf\xdc\xfe\xf9\x3d\x74\xf2\x54\x72\x00\x53\x98\x74\x24\x17\x45\x58\x3c\xfe\x7e\x95\xf7\x39\x32\x83\x50\x6a\x35\x17\x1c\x81\x49\xa0\x19\x28\xad\x48\x7d\x50\x5a\x35\x43\xd9\x87\xa8\x14\x2d\x31\xb9\x47\x44\x4b\x43\xe3\x69\x33\x41\xa6\x34\xdc\x95\x28\x3f\x51\x90\xf5\xe0\xea\xda\xa1\xfb\x66\x41\x33\x05\x3e\x73\xcc\x58\x95\x5b\x98\xb3\xbc\x42\x10\x06\x26\x15\x1a\xfb\xa5\x8d\xb7\x60\x52\x64\x68\x6c\x22\x95\x4d\x32\x55\x49\x1e\x61\xfe\x50\x0f\x74\x01\x07\x52\x59\x70\xa3\x81\x59\x70\x41\xf9\x79\xb5\x1a\xd1\xc3\x7a\xfd\x65\xf4\xab\x8c\x13\x56\x2e\xd7\x35\xb4\xad\xf1\xf2\xd1\x65\xb8\x2d\x64\xe7\x4f\x3f\xa5\x40\x69\x8f\x21\xea\x08\xcd\xc3\x54\x61\x52\x27\x99\xae\xa4\x15\x05\x52\x2e\x2f\x98\x4d\xa7\x11\x96\x07\x3f\xcc\xf1\xd4\x53\x88\xca\x94\x98\x8a\x4c\x20\x07\x21\x21\x28\x06\xae\xd0\x38\x47\x3b\x44\x58\x08\x3b\x05\x96\xba\xd0\x35\xaa\xd2\x29\xfa\xa5\xc0\xaf\x16\x25\xe5\x37\x87\x8a\x5f\x6d\x10\x5f\x8f\xa5\xbf\xfa\xc7\xae\xa5\x09\x46\xa4\x53\x26\x27\x18\x0b\x84\x60\x43\x3d\x8a\x76\xf0\x0b\x73\xc6\xcc\x20\x07\xda\x61\x53\x6c\x57\xfc\x2a\x99\x95\x34\x55\x59\x2a\x6d\x3b\xa5\xf6\x72\xb7\xf0\xce\x6e\x30\x9d\xb8\x2d\x0b\xfa\x0b\xf4\xa3\x92\x5c\x14\xc2\x26\x62\x22\x95\x8e\x2a\xbc\x91\x73\x96\x0b\x1e\x38\xdc\x14\xc7\xe4\x9e\x48\xec\x0b\x89\x35\x5c\x2b\x7f\xaa\x64\x26\x26\x4d\x5f\xd1\x9e\x28\x9f\xc8\xc2\xdd\xc4\x48\xf5\xaa\xf6\x86\x87\xaa\x8e\x65\x6c\xcd\x98\xc4\x48\xe5\x96\x86\xbc\x8e\xa7\x2b\x5b\x12\xd3\x26\x3d\x0e\xa2\xaa\x4d\x69\x6b\xf1\x5e\xda\xb3\x5a\x8d\xe8\x71\xbd\xbe\x80\x4c\xab\x82\x7e\xf7\xd1\xbf\x5e\xf7\x62\xf4\xcb\xd5\xc5\x48\xc3\xc2\x4a\x19\xb4\xc3\xb8\x1a\xe7\x74\xb1\xed\x78\x71\xb5\x1a\x35\xbf\x1f\x6d\x25\x6a\x9d\x4c\xd0\x86\x5d\x1c\x6b\xbd\xff\xcd\x44\xee\x93\xcb\x04\xad\xdb\x86\x9b\x8d\x19\xa6\x7a\xe2\xa6\xbc\x82\x41\x3d\x17\x29\xbe\x27\x2d\xa8\x75\x87\x90\x4a\x16\x4c\x9b\x29\xcb\xf3\x24\x57\x29\xcb\x63\x85\x21\x0c\xdb\x22\x22\x67\x79\x72\x37\xd3\xd7\x5b\xd3\x97\x4d\xa2\x5d\x28\x3d\x1b\xc4\x27\xa4\x45\x2d\xb1\xbd\x18\x6d\x6a\x96\x3f\xdf\x20\x8f\xe6\x9f\xab\x66\x28\xa4\xaa\x28\x73\x24\xff\xd6\x87\xa2\xac\xca\xf3\x65\x5f\xa2\xcc\xad\x57\x37\x0b\x17\xbc\xde\x85\x9e\x8d\xc8\x1a\x2e\x78\xa8\x24\x3c\x2f\xcc\xac\x6e\x08\x43\xf9\x7d\xa6\x38\xd0\x58\xa8\x39\x42\xc9\xb4\x15\xae\x7f\xf4\xef\x90\x03\x33\x06\x6d\xbb\xfb\xb7\x94\xa6\x4c\xa6\x98\xc7\xc5\xde\xfd\x38\x82\x7f\xf9\x31\xd4\x12\xf4\xed\x36\xe4\x11\x5e\xff\xb8\x35\x78\x88\xdf\x77\xc8\x5a\x3d\xbf\xc3\xd4\xea\xfb\xde\x7c\x47\xfa\xaf\x77\x0b\xb5\x43\x52\x30\xc9\x26\xc8\x8f\x30\x4e\x65\xc0\xd1\xfb\x91\x4a\x99\x15\x68\x5a\x0d\x06\x5e\x69\xd2\x57\x33\x6d\xaf\xf3\xb7\x0b\xc3\x05\xd3\x32\x71\x07\x4e\x6a\xf8\x4b\xd4\x24\xb3\x25\xed\x52\x27\x30\xc3\x25\xf5\x01\x94\xea\x17\xcc\x80\x46\xab\x05\xce\xa9\x3f\xa1\x84\xe0\xc0\x46\x1b\x30\xfa\x83\x6b\x16\xf3\x1c\x8c\x52\x12\xc6\x48\x0a\x35\xa6\x8c\x5c\x53\xfa\xd3\x03\x57\xce\x2f\x95\x41\x10\x16\x54\x65\x0d\x9d\x25\x54\x06\x4f\x9a\xcd\x85\x81\x71\x25\x72\xde\xc3\x14\xaa\x53\x1b\xf4\x44\x63\x99\xb3\x34\xba\x5e\xc1\x22\x95\xf3\x2d\xa3\x84\xef\x13\x57\xab\x11\x35\x87\x76\x59\xe2\x7a\xed\xfb\xc4\x88\x11\x17\xc1\x0a\x92\x6f\x6b\x4c\x89\x8b\x1d\x4c\x63\x91\xed\x16\xf8\x97\x45\x28\x34\x11\x05\x93\x9c\x59\xa5\x97\x2d\xb7\x19\xa4\xbc\x19\xe7\x18\xb6\x56\x46\x18\xa8\xb1\x46\xed\x65\x2f\x1c\x0e\x5c\xd9\xa5\x00\xf8\x0d\xd3\xb6\x26\x29\x50\xb8\xea\xcb\xe9\x57\x4e\x4f\xeb\x35\xf9\x6c\x2b\xf4\x9d\xb3\x48\x10\x0f\x67\x97\x17\x47\x07\x5b\x57\x70\x82\x28\x3c\xc4\x7a\xa7\xb1\x6c\x10\x8a\x70\x84\xeb\x4a\xa5\xe4\x39\x8e\x25\x4a\x8e\x32\x8d\x9e\xf7\xc3\x50\xd8\x0c\xf5\xab\xe5\x34\x7c\x19\x8d\x5a\x78\xc2\xae\xeb\xc5\xf4\x71\x33\x78\x08\xd7\x66\xca\x5e\xf1\x8c\x5e\x0e\x5e\x6d\x68\x1a\x16\x98\x32\x03\x63\x44\xb9\x93\xcb\x9b\x14\xd1\x55\xa2\x0e\x68\xa0\x04\x58\xe9\x58\x83\x7b\xf5\x22\xff\x1d\x50\xf4\xfd\x0a\x6e\xb0\x66\xbf\x34\x9e\xc2\xa7\x01\xb5\xbf\x57\xf7\xaa\x66\xdc\xaf\xfb\x95\xe5\x58\xcf\xb6\x69\x6a\x8a\x9b\xaa\x24\x4f\xea\xaa\x95\xb8\xaa\x15\xdf\x49\x39\x5a\x0a\xee\x26\x27\x6c\x85\x76\xc8\xf9\xae\x3a\xd0\x9a\xd5\xb5\x81\xb6\x7d\x5a\x69\x4d\x46\x84\x32\x57\x67\x1d\x7f\xd3\xe1\x9f\x09\x81\x19\xb7\xce\x64\x6b\xef\x82\x4d\x29\x2d\xd5\xc8\x2c\xb6\x6b\x77\xf7\xf9\xe0\x46\xee\x58\xe0\x2e\x34\xdc\x87\x00\x28\xd0\x18\x36\xd9\xea\xdc\x81\x49\x5e\xbf\x4b\x15\xf7\x2f\xe8\xa1\xc7\xe1\xc2\xfb\xb3\x8f\x24\xbe\xe7\xd4\x13\x4b\x7a\xbc\xbe\xbf\x7c\xb8\x7c\xba\x7b\x88\xc8\xf8\xc7\xc1\x1f\xb8\x96\x54\xe2\x29\xe8\x73\xb5\x70\xb7\xa2\x90\x0b\x89\xc0\x50\xbb\x80\x9b\xa3\xf6\xd7\x17\x87\xe7\xef\xfc\x1c\x16\xb6\x49\xcc\xf5\xc5\x03\x55\xe5\xca\x96\x95\x5d\xaf\x81\x32\x65\x57\x3e\x8f\x4c\xeb\x20\xd3\x55\x8e\x47\x53\x1d\x9c\xd4\x41\x64\xb5\x98\x4c\x50\x43\x86\xbe\x6e\x1e\x45\xd8\x3a\xb9\x83\xb8\x64\xe9\x8c\x4d\x8e\x37\x32\x36\xaf\x27\xdd\x58\x48\x5e\x07\xf2\x20\xda\xd8\xfc\x83\xf4\x9f\x2e\x1f\x6e\x6f\x6e\xff\xf3\x1e\xa8\x47\x39\xf7\x87\xfe\x73\xf8\xe5\xf2\xc3\x4f\x4d\x3f\x57\x7b\xd0\xef\x41\x6a\x90\x36\xdd\xdb\x08\xee\x37\xdd\xdb\x39\xf9\xf8\x3c\xb4\x6b\x94\x85\x38\x9a\x54\x8b\xb1\xbf\x9b\xab\x2f\xea\xfc\xb5\x94\xab\x37\x91\xaf\x7d\xdf\x51\xd1\x41\x17\xdd\xb7\xf8\xb5\xbb\x45\x38\x6c\xe4\xeb\x30\x5b\x65\x9e\x52\xde\x09\x64\x3d\xd5\x8b\x75\x0a\x59\xc3\xb0\x5a\x65\xed\xe5\x85\xd7\x6a\x1b\x00\x78\x50\xe0\xc3\xcb\x4c\x39\x54\xd8\x00\xa0\x83\x82\x2e\xf7\xab\xc4\x50\x49\x83\xa0\xba\xa2\xab\xce\x0a\xdb\x58\x75\x03\xd5\x2b\xa0\xda\xa7\xb7\x2e\x11\x15\xb5\xa3\x68\x7b\x4c\xec\x58\x82\xf0\xed\xe2\x08\xd2\x9e\x93\x0f\x12\x6f\x2e\x70\x85\x9c\xab\x99\x3f\xa9\xbb\x48\x5f\x4c\x51\x6e\x7a\xaf\x9d\x6a\x3b\xbc\xff\xea\xba\x45\xfe\x43\x44\xb4\x97\xcb\x0f\xcd\x05\x42\x26\x30\xe7\x10\x32\xe6\xcf\xfe\xdf\x13\xa0\xa8\x8c\x85\x31\x82\xf1\xd7\xbb\x1d\xa5\xee\x48\xb4\x76\x69\x2f\x27\x87\x6f\x61\x6c\xee\xcb\xde\xf6\x49\x62\x73\x5a\xac\xff\xaf\xa2\x87\xd8\x57\xe3\x0f\xf3\xec\x4f\x22\x45\x69\xf0\x44\x9e\x8d\xa0\xf5\xf3\x6c\x98\xfc\xad\x3c\x3b\x18\xbf\x5d\x7e\x80\x75\x5f\x24\xdd\xe3\xcd\xd5\x7a\x1d\x58\x18\xf8\xaf\x97\x4a\x62\x0f\xa9\x47\x61\x1d\x3e\xe2\x61\xa1\xf4\xf2\x51\xfc\xee\xee\x2a\xdd\x27\x52\xb3\x73\x8f\x65\xa6\xaa\xca\x39\x2d\x0e\x93\xee\x5b\x09\x6d\xea\x31\xda\x05\x65\xac\x77\x3f\xfc\xdd\x6d\xdf\xbf\xbd\xfb\x21\xae\xf6\xa4\x14\x07\x8d\xb0\xa2\x40\x55\xd9\x41\xf0\x6f\xdf\x3a\xf8\xbf\xbe\xa5\x9f\xb8\x11\x27\xa5\x38\x68\x44\xae\x26\x43\x7d\xe4\xf1\xdf\xb5\xc8\x3f\x11\x78\x57\x64\x3b\x64\x08\xdf\xda\xeb\x4b\x9d\xe6\x2b\xf1\x94\xc9\x09\x1b\xe7\x48\x47\x00\xab\x40\xaa\xc5\xc5\xf6\xdd\xfa\x18\xb7\x3f\xc5\x77\x46\xfe\x09\xb9\xda\xcd\x62\x65\x99\x87\xef\xf8\x07\x6e\x89\xfb\x5c\xa9\x87\x2b\xa2\xad\x4b\xf4\x0e\xfb\xbe\x0d\x29\x19\x7a\xf6\xe5\xec\xff\x01\x00\x00\xff\xff\xbd\x39\x22\x09\x47\x2a\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 10823, mode: os.FileMode(420), modTime: time.Unix(1515539085, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

