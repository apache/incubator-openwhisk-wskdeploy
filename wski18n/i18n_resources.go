// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5b\x6f\x8f\xdb\x36\xd2\x7f\x9f\x4f\x31\x08\x1e\x20\x2d\xe0\x38\x69\x1f\x3c\xc0\x83\x00\x79\x91\x6b\xd2\x36\xd7\x26\x1b\xec\x26\x17\x14\xb9\x85\x42\x4b\x63\x9b\x5d\x89\xd4\x91\x94\x1d\x77\xe1\xef\x7e\x98\x21\x29\xc9\x5e\x53\xd2\x3a\xed\x5d\xde\xc4\x5e\x0e\xe7\x1f\x87\xc3\x99\x1f\xe9\x4f\x0f\x00\x6e\x1f\x00\x00\x3c\x94\xc5\xc3\x67\xf0\xb0\xb2\xab\xac\x36\xb8\x94\x5f\x32\x34\x46\x9b\x87\x33\x3f\xea\x8c\x50\xb6\x14\x4e\x6a\x45\x64\xaf\x78\xec\x01\xc0\x7e\x36\xc0\x41\xaa\xa5\x4e\x30\x78\x4d\x43\x63\xf3\x6d\x93\xe7\x68\x6d\x82\xc5\x55\x18\x1d\xe3\xb2\x15\x46\x49\xb5\x4a\x70\xf9\x18\x46\x93\x5c\xf2\xaa\xc8\x0a\xb4\x79\x56\x6a\xb5\xca\x0c\xd6\xda\xb8\x04\xaf\x4b\x1e\xb4\xa0\x15\x14\x58\x97\x7a\x87\x05\xa0\x72\xd2\x49\xb4\xf0\x8d\x9c\xe3\x7c\x06\xef\x44\x7e\x23\x56\x68\x67\xf0\x22\xa7\x79\x76\x06\xef\x8d\x5c\xad\xd0\xd8\x19\x5c\x36\x25\x8d\xa0\xcb\xe7\xdf\x82\xb0\xb0\xc5\xb2\xa4\xff\x0d\xe6\xa8\x1c\xcf\xd8\xb0\x34\x0b\x52\x81\x5b\x23\xd8\x1a\x73\xb9\x94\x58\x80\x12\x15\xda\x5a\xe4\x38\x9f\x6c\x8b\xd6\x29\x4b\x5e\x80\xd3\xba\x04\xa7\x83\x21\x33\x68\x94\xff\x04\x42\x15\x60\x77\x2a\x07\x5d\xa3\xda\xae\xa5\xbd\x81\x3a\xd8\x04\x8d\x95\x6a\x05\x02\x2a\xa1\xe4\x12\xad\x63\x62\x5d\x13\x57\x51\x06\x56\x15\x59\xb2\x94\x65\x4b\xfe\xdb\x8b\x37\xbf\x4e\xd1\xd9\xae\xb5\x71\xc3\x0b\xf0\xce\xe8\x8d\x2c\xd0\x82\x00\xdb\x54\x95\x30\x3b\xf0\xf4\xa0\x97\xb0\x5d\x0b\xf7\xc8\xc2\x02\xb1\xb7\x3c\x5f\xe7\xc6\xa0\xd2\xa8\x1f\x2d\x3a\xf2\xe5\x1a\xcb\x3a\x88\x86\x9d\x6e\xcc\x24\x17\x92\xab\xa6\xeb\xb2\x41\x63\x49\x76\xca\x3f\x52\x39\x36\x38\xd0\x81\x6a\xaa\x05\x1a\x76\x8f\xbd\xf1\xaa\x4d\x96\x45\x51\x30\x1a\x3f\x1c\x2a\x6c\xec\x45\x8d\xea\xe3\xa1\xb1\x0b\x74\x5b\x5a\x8e\xbc\x94\x14\x15\x1c\x5a\x68\x36\x68\x26\xc7\xf0\x74\x1d\x7a\xd1\x47\x72\x62\x3c\xf3\x1f\xf4\xf2\x3f\x19\xcd\xcb\x52\xac\x32\x51\xcb\x6c\xad\x6d\x2a\x70\xbc\x2a\x2f\xde\xbd\x86\xcf\x3f\x5f\x5c\xbd\xff\x3c\x91\xe3\xf0\xf2\xf7\x98\xfe\xe3\xd5\xe5\xd5\xeb\x8b\xb7\x93\xf8\x36\x6e\x9d\xdd\xe0\x2e\xc1\x94\x86\xb5\x91\x7f\xf0\x1f\xe0\xf3\x2f\xaf\x7e\x9b\xc2\x34\x47\xe3\x32\xf2\x5b\x82\x6b\x2d\xdc\x9a\x96\x85\x62\x75\x4e\xc4\xec\xe4\x29\x8c\xb5\x5a\xca\x54\xb2\xf7\x83\xcc\x0a\xbe\x29\x70\x29\x9a\xd2\x81\xb4\xf0\x3f\x3f\x5f\xbc\x79\xf5\x64\xbe\xb5\x37\xb5\xd1\xb5\xfd\x76\x8a\x57\xca\x52\x6f\xb3\xc0\x23\x75\x44\x31\x11\xb4\x44\xe3\x5c\xbb\xa0\x1a\xf2\x4b\x9b\x96\xdb\xe8\x9b\xc0\xba\x36\xb8\x91\xb8\x4d\xf0\xb5\x6b\x56\x34\x32\x7d\x72\xb0\x3d\xea\x52\xa8\x09\x12\x6e\x70\x37\x79\x49\x6f\x70\x37\x55\x71\xef\xe9\x4a\x28\xb1\xc2\x62\xd0\xd1\xb5\xd1\xbf\x63\xee\xba\x33\xd7\x69\x58\x20\x54\xc2\xdc\x60\x01\x91\xc3\x14\x57\x31\x9f\x8c\xce\x82\x94\x31\x41\x14\x93\x8c\x73\x8c\x29\x64\x64\x55\x0f\x92\xfe\x04\xb6\xed\x61\x95\xe0\xdb\x8d\x4f\x36\x7a\x44\x43\x9f\x9e\x4b\xb4\x36\x7a\x7b\x02\x6b\xeb\x8c\x4c\x72\xf6\x4b\xd7\x58\x34\xb4\x51\xa4\xc2\x02\x4c\xa3\x9c\xac\xda\x43\x6a\x82\x04\x67\xd2\x4e\xe0\x31\xd0\x8d\xab\x9b\x29\xca\xfa\x70\xdb\xa0\x59\x68\x9b\x62\x19\x46\xc7\x99\x72\xbe\xc9\x2a\x69\xe9\x6c\xe0\x4c\x9a\x4e\xa4\xef\xd7\x08\x44\x41\xd1\x9b\xfb\x6c\x4a\xbb\x44\x5a\x50\xda\x81\x67\xd5\x18\x2c\xe6\xff\x1c\xf2\xc8\x91\xc4\x5a\x0e\x1c\x32\x24\x91\x4e\x03\x22\xf9\x3a\x39\x63\x81\x48\x92\x5a\x9a\xf3\x44\x05\x53\x86\x9a\x8a\x63\x7b\x3e\xdd\xde\xce\xe9\xf3\x7e\x7f\x3d\x83\xa5\xd1\x15\xdc\xde\xce\xad\x6e\x4c\x8e\xfb\xfd\x24\x99\x7e\xc1\xc6\x64\x12\x59\x5c\x2b\x8b\xee\x3c\x59\xad\x7b\xc6\xa4\x1d\xf8\x91\x4c\x6c\xff\x70\xbe\x9d\xb5\x5c\x6d\x33\xc1\xfd\x54\xe6\xf4\x0d\xaa\x51\x93\x69\x06\xf8\x19\xc0\x33\xce\x33\xbe\x51\x95\x30\x76\x2d\xca\xac\xd4\xb9\x28\x13\x12\x3f\x44\xaa\x5e\x11\x19\x92\x84\xf5\xf2\x78\x36\x6c\x44\xd9\xa0\x9d\x28\x50\xa1\xdb\x6a\x73\x73\xb6\x48\xa9\x1c\x1a\x85\x0e\x84\x23\x73\x1b\x53\x8e\xd8\xda\x9d\xa8\x59\x2e\x54\x8e\x65\x99\x3c\xcf\x2e\x7e\x99\xc3\x0f\x9e\x86\x8a\xca\x6e\xe6\x54\x01\x4b\x21\xd3\xdc\x5f\x76\x47\x7b\x21\x8b\xb0\x17\xab\xba\x44\x87\x60\x1b\x5a\xd2\x65\x53\x96\xbb\x39\x5c\x36\x0a\x3e\xb7\x8d\x41\x5b\x33\x7f\xa6\x93\xc0\x60\xa5\x37\x08\xb5\x30\x4e\x8a\xb2\xdc\x75\x3d\x95\xb0\x16\xdd\xf0\x2a\xf4\x34\xf5\x0d\x5a\x66\x9d\x70\x4d\xaa\x8e\x7a\xfc\xf8\xf1\xe3\xe7\xcf\x9f\x3f\xef\xad\x45\xcf\x86\x2b\x9e\x0a\x44\x40\x84\x93\xa4\x32\xb4\x80\xc5\x14\x17\x45\xd7\x14\x10\xf0\x08\xef\x9c\xe1\x20\x3b\x7f\xad\xfb\x73\xa7\x0b\x19\x5c\xef\x0f\xfd\x62\x6e\x70\xc5\x27\xcb\x1b\xf3\xdf\x81\xc8\x33\x3c\x98\xeb\xaa\x12\xaa\xc8\xb8\xa9\xe2\xaa\x92\xb2\x5c\x26\x5c\x46\x95\x48\x42\xe8\xed\xed\x3c\xaf\x8a\xfd\x3e\xb4\x62\xb7\xb7\x73\x9a\xe8\x76\x35\xee\xf7\x9c\x29\x69\xee\x7e\x7f\x3d\x9f\x0f\xca\xe6\xf2\x71\x97\xc5\x78\x1e\x81\xa1\x6e\x6f\xa9\x98\x0d\x02\x48\xc9\xfd\xfe\x1a\xd6\x22\x00\x0d\x7d\x83\xdb\x1d\x32\x5d\x7a\x1a\xb7\x7a\x19\xc7\xe1\xa4\x02\xf3\xf9\x40\x13\x1a\x44\xc4\x05\xfd\x33\x4d\xec\x78\x4e\x31\x32\x52\xa7\xcd\xfc\xd0\x51\x9c\x34\x74\xd0\xce\x02\x6b\x54\x05\xaa\xfc\x3e\xee\xec\x26\x9d\x2f\xa7\xdb\x22\x49\x9f\xbe\x3c\x29\xe6\x6b\x02\xe7\xb4\x16\x94\x18\x1a\x93\xaa\xcb\x5e\x1e\x60\x20\xa7\x4d\xff\x2f\x9e\x11\xd1\x9e\xfb\xc5\xc9\xd7\xad\xe0\xdd\x34\xf7\xe7\xac\xe1\xc4\x9d\x91\xd2\x64\x78\x1d\x3f\x1c\xa1\x59\xe7\xac\xe4\x90\x56\xa1\x77\x3e\xf7\xcc\x61\x8d\xfc\x09\xd0\xf6\xe6\x43\xba\x40\xd1\x18\x5a\xc9\x20\xb6\x5f\xff\xfc\x75\xf1\x16\x6d\x5c\xea\x46\x15\x59\xd0\x37\x64\xaa\x64\x00\x94\xe8\x92\x39\x78\xbb\x96\xf9\x1a\xb6\x8c\xdf\x93\x5e\x85\xaf\x1b\xdd\x1a\x21\x6f\x8c\x21\xc7\x44\x03\x23\x9c\xc0\x87\x94\xff\x4c\x1c\x84\x65\x5b\xc8\x7f\x93\xcb\x82\x80\x36\x65\x01\xc6\x4c\x21\xc1\x7e\x94\x9b\x09\xe8\x21\x61\x06\xb9\xc3\x2f\x66\x20\xca\x7e\xe9\xdb\x2e\x1b\xe9\x61\xda\x19\x41\x08\x08\x83\xad\xaf\x9f\x74\x91\x0e\x85\x34\x98\xbb\x10\xfd\xc6\xe3\xc0\x63\x08\xfb\xab\xcb\xcb\x8b\xcb\xab\x84\xde\xcf\x8f\xff\x81\x27\x87\x3b\x03\xcf\x9f\x0f\x1c\x3f\xc6\x1c\x6e\xb4\x1b\xa5\xb7\x2a\xa3\x4a\x61\x7c\xab\x13\x15\xb9\x2a\xcc\x9a\x43\x07\x9d\x83\x56\xe5\x0e\x6c\x53\xfb\x7b\xa0\x27\x0c\xb8\xce\xed\xce\x3a\xac\x60\x21\x55\x21\xd5\xca\x82\x36\xb0\x92\x6e\xdd\x2c\xe6\xb9\xae\x5a\xb8\x79\xf8\xbc\x34\x26\x9e\x99\xb9\x41\xe1\x52\x6a\xf2\xbd\x1c\x30\xc9\x41\x58\x6e\xa5\x5b\x03\x5f\xe8\x41\x85\xd6\x8a\x15\x3e\xa3\x41\x34\x66\xbf\x67\x58\xdb\x8f\xe5\xba\xf0\x03\xf4\x61\xa4\x9b\xe9\xa9\xe4\xf7\xca\xa0\x4a\xc5\x9d\x9d\xf2\x17\xa9\xb4\x44\x2c\x32\xa9\x36\xfa\x26\xa5\xd0\x8f\x9c\xb6\x28\x5d\x78\x32\xde\x90\x34\x0d\xb6\x6b\xbe\x1a\x0a\x9a\x3a\x7f\x2d\x17\x86\xfe\x1a\x6d\x6f\x70\xd7\x62\x28\x54\xef\x0a\xa7\xcd\x10\x3e\xd4\xd2\x30\xdc\xf0\x29\x3a\xf3\x9a\xe2\x31\xf0\x19\x95\x19\x41\xc6\x4c\x69\xe7\x93\x5d\x42\xe0\x9b\x3e\x1a\xc9\xb9\x9a\xa9\xa9\xdf\x65\x38\xb0\x5f\x51\x8f\x09\xe5\xea\xbd\x92\xb6\x12\x2e\x4f\x95\xef\x64\x60\x1b\x1e\x34\xa1\x60\x11\x45\xcc\xa7\x52\x1d\xc3\xde\x7e\x3c\xe8\x00\x85\x46\x0f\x2c\xb1\x10\x5e\x56\x4e\x6f\x44\x54\xf5\x98\x1c\xa0\xac\x7e\x34\x9a\x31\x6c\x44\xe8\xff\x29\xbc\x44\x29\x53\x6e\x7b\xed\x47\x69\x9b\x87\x25\x69\x01\x4d\x92\x15\x3e\x93\x2e\xdd\xad\xe3\x81\x56\xda\xb0\xee\x82\xef\x87\x79\x8e\xff\x38\xc5\xcf\x51\xc5\x11\x57\x5f\xde\x47\xa1\x23\xbf\xf2\x56\xf0\x1a\x3d\xb2\xe0\x51\x1e\xef\x4a\xfc\xe2\x50\xd9\xa8\x34\x7e\xe1\x33\x8c\xcc\xf9\x1a\x53\x6c\xb6\xc2\x14\x80\xd9\x6d\xe5\x15\xfa\x7b\xcd\x90\x7b\x3b\x10\x39\x80\x35\xdd\x49\x46\xe7\x9b\xcc\x7b\xdb\x77\xb2\x4f\xbd\xea\x99\xb7\x98\x77\x4f\x2b\x2d\xa1\xdf\x81\xc1\x5c\x17\x92\x1b\x3b\x2f\x0b\xb5\x6b\x63\x83\x92\x48\x6f\xd9\x47\xfd\x1a\x40\xd4\x56\x85\x51\x33\x1a\x53\xde\x3f\x72\x3d\xb0\x15\x5a\xe8\x0f\x97\xbf\xb2\x06\x0c\x75\xf1\x56\xfa\x74\xd0\x63\x5f\xfb\xcb\xea\x29\x8a\x54\xa2\x5c\x6a\x53\x25\x3d\xf7\x26\x8e\x0f\x69\x30\x87\xf7\x66\x07\x62\x25\xa4\x1a\x6b\xe9\x8d\xc9\x7e\xb7\x5a\xb5\xc9\x36\xaf\x8a\x81\x3b\xcd\xbf\x5f\x5d\xbc\x05\xa9\xea\xc6\x41\x21\x9c\x80\x37\xc1\x1b\x8f\xf2\xaa\x78\x44\xa9\x77\x58\x92\xa8\x65\x87\xc0\xfb\xa0\xd1\x26\xb3\xf8\xaf\x06\x55\x12\x22\xf7\xcf\x41\x9e\x5c\x05\xaa\xc3\xcd\xd2\xcb\xef\x3e\x9e\x0f\x72\xd8\x8c\x51\x6f\x9e\x50\x4b\xa2\xce\x85\xf2\xa5\xc8\x02\x7d\x31\x80\x05\x2c\x84\xc5\x02\xb4\xea\x05\xd9\x93\xa8\xd2\x09\x9e\x73\x78\x57\xa2\xb0\x08\x4d\x5d\x08\x87\x47\x49\x93\x0f\xcf\xbc\x6c\x8a\x63\x3d\x85\x05\x01\x5b\x5c\x1c\x4b\x18\x5d\x9d\xe0\xa7\xe1\x00\x7d\x71\x22\x8f\x90\x6b\xc2\xac\x39\xbc\x76\xbe\xfb\xd2\x6e\xcd\x67\x31\xef\xaa\x65\xa3\xc2\x9e\x8a\x1b\x6f\xe6\xbd\xa3\x15\x86\x0b\xc9\x8a\xb8\xe0\x97\x1a\xf3\x29\x3b\x29\xe8\x1a\x97\x38\xe6\x07\x4a\x8c\x19\x49\xfd\x4a\xed\x59\xf1\x2e\x49\x10\x5b\xdd\xb8\x7e\xb2\x98\xc3\xc7\x2e\x09\xc7\x54\x41\xd3\x66\x6d\x3a\xa1\x80\x89\xc5\xc2\xc8\xb1\x16\xcc\x89\x6e\xca\xa8\x5b\x71\x98\x15\xd2\x4c\x4a\x72\x27\xcd\x22\x3b\x5a\xbf\xd7\x5a\x2a\x5f\x52\xf9\x16\xcd\x61\x68\x0c\xa8\x90\xe9\xb6\xf3\x8c\x5a\xc0\x68\x95\xe5\x9e\xe2\x30\xc3\x0d\x9b\x91\x0b\x6a\xd8\xc5\x06\xb3\x42\xe7\x37\x98\x7a\xba\xf6\x83\x50\xcc\x55\x6c\x10\x5e\x32\x21\xc8\x8a\x0b\xf0\x91\xc2\x52\x96\x98\x89\xd2\xa0\x28\x76\x19\x7e\x91\x36\x79\xeb\xff\x23\xed\x90\x40\x09\x9e\x72\x84\x77\x21\x97\x4b\xa4\x86\xb0\xeb\x4a\x24\x5a\x1f\x50\x96\x2a\xa7\x52\x2c\x30\x75\x39\x72\xa1\x10\x28\x0e\x4b\x3c\x6e\xfb\xbb\xaf\x71\x49\xdc\x56\x43\x2b\x8c\x2f\x4d\xbc\xaf\x89\x3a\x7e\xf3\x89\x75\x2d\x2d\xdc\x48\x55\xd0\x06\x09\xb1\x18\x2e\x25\xef\x1c\x3c\x47\x99\x82\xf2\x4b\x4f\x11\x56\xfd\x84\x3a\xe1\xe5\xd5\x9d\xbc\xc2\xc1\xc2\x57\xcd\x54\xbb\x45\xa5\x20\xb6\x35\xc8\x36\x58\xac\x85\xa1\x2f\xcc\xdd\xfa\x9a\xe9\xb4\x6d\xd3\x82\x3f\x6c\xb2\x8c\x4c\xbe\x6f\x9c\x2b\xed\x3d\x65\xd1\xdd\x4f\xd8\x7d\x73\x45\x10\xd6\xdb\xef\x23\xf2\x62\xf6\xcd\xd6\x62\x43\x99\x8a\x63\xc9\x03\xe9\x36\x28\x93\x7a\x5c\x99\x3c\x86\x62\x60\xc7\xcb\x7a\xca\xf8\x2a\xa6\x22\xdf\xe6\x73\x21\x46\xab\x17\x7a\xdb\x79\x7c\xeb\x18\x5e\x78\x79\xd6\x96\x8f\x29\x0a\xa5\x35\xed\x45\x9e\xc0\xf5\xba\x54\x20\x62\x44\x47\x0e\xa7\xed\xfc\xf8\xe2\xf2\xed\xeb\xb7\x3f\x4d\x07\x0b\xe2\x84\xfb\xc1\x05\x5b\x61\x54\x7b\x23\x61\xd0\x25\x5b\xb4\x4b\x1a\xa3\x44\xf7\x29\x5e\x45\x5c\x83\x58\x3a\x34\xbe\x3d\x7c\xe6\xeb\x37\x2a\x3a\xaf\x87\xce\x98\x20\x8f\xaf\x66\xef\x5d\xb1\xf5\xdf\x38\xf5\x3a\x34\x28\xd0\x8d\x9f\x6e\x2c\x99\x9a\xd2\x02\x6b\x83\x39\x15\x0e\x99\xc1\xba\x14\x79\x32\xfd\x53\xd7\x46\x72\x74\x59\x84\x5e\x94\x6f\xc2\xfd\xee\x3e\xbc\x82\xd9\xca\xb2\x04\xab\xb5\xa2\xba\xa4\x93\x30\x83\x3a\x24\x10\xeb\xb3\x07\x83\x68\xb8\x3d\x60\x67\x1d\x8a\x89\xba\x07\x4f\x9c\xd3\x46\xdb\xb5\x6e\xca\x82\xd4\xa3\xcd\x0c\x1f\xac\xc7\x93\x3d\xd8\xc5\xb7\xcb\x4c\xcd\x9f\xc6\x2f\x92\x5a\x8d\x98\x7e\x64\x29\x49\x2f\x2f\x81\x92\xd9\xdd\xf6\x9e\x36\x8a\xaf\x13\xee\x21\x92\xcf\x6f\xb1\x19\x5c\xbc\x31\xa1\x3c\x3f\x2e\x68\x04\x2e\xe3\xfb\xd1\xfe\xc3\xd1\x71\xc5\x4a\x59\x49\x97\xc9\x95\xd2\x26\xa9\x52\x0c\xe9\x90\x51\x78\x8a\x3f\x9f\xe8\xd3\x71\x0b\x4f\xe5\x93\x67\x37\x55\x7a\xbe\x16\x6a\x85\x62\x91\x7c\xa7\xf6\x6b\x2b\xb1\xc5\x0c\x6c\xb4\xbb\xdc\x79\xcc\xba\xe5\x31\x87\xd7\x24\x5e\xaa\xd5\x94\x58\x60\x0d\x6c\x56\xea\x55\x66\xe5\x1f\x29\x05\x4a\xbd\xba\x92\x7f\x70\x69\xea\x27\x1c\x58\xdc\x85\xa8\x50\xfc\x06\x61\x85\xa6\x7d\x48\xfb\x94\x33\xec\x77\x4f\x27\xab\x52\x61\xa5\xcd\x6e\x48\x1b\x4f\x71\xae\x42\xdf\x7d\xff\xff\xac\xd2\xff\x7d\xf7\xfd\x64\x9d\xa8\x7e\xd5\x4d\xaa\xe7\x0f\xa3\x67\x29\xf3\xd4\xfb\xe7\x7f\x9f\xd2\xbf\x71\x7d\x18\xbe\xcd\x6a\xa3\x6b\x34\x4e\x62\xaa\xde\x8b\x19\xb0\x97\xaf\x3c\xe8\xef\x8c\xc4\x16\xf6\xf7\x58\x70\xc7\x2c\x5e\x0f\x9c\xce\x89\x31\x25\x16\x9a\x03\x8e\x32\xa3\x74\xa0\x1b\x67\x65\xc1\x0b\xf1\xde\x88\x8d\xb4\xb0\x68\x64\x59\x0c\x63\xc7\x6c\x8a\x4f\x07\x86\xc2\x76\x52\x2a\x68\xa3\xff\x20\x21\xa8\xa3\x84\x1e\xbc\xcd\x88\xf8\xed\xed\x3c\xfc\x35\xba\xfb\xf6\x76\x5e\x49\x15\xf0\x51\xfa\x22\xf2\x11\xb4\x85\x55\x8d\xed\x94\xdf\x64\xa9\x34\x11\x11\xac\x40\x45\x05\xe3\x11\x98\x75\xa2\xe1\x4d\xe2\x55\x67\x81\x54\xac\x6d\x80\xc0\xb9\xa8\x1a\xec\x0a\xee\xa0\x9b\x07\x29\xe6\xa8\x5d\x88\x25\xb5\xc5\x12\x73\x6a\xfd\xb4\x5b\xa3\xbf\x3a\x19\x57\x29\xde\x28\x8c\x02\xbc\xef\xef\xd4\xdf\xfd\x82\x21\xd7\xca\x09\x2e\xf1\x94\x9e\x76\x4b\xc1\xd2\x7b\x17\x84\xec\x94\x29\x4a\x9c\xbc\x3e\x0b\x27\xce\x31\xe4\xbb\x0d\x28\x9a\xc7\xa2\x4f\x75\x11\x13\x3c\xd4\x7b\xe0\x9b\xe9\x0d\x1a\x23\x8b\x02\x53\xb5\x30\x69\xd8\x7f\xef\xdb\x5d\xf0\x76\x53\x63\xad\xd0\xbf\xbf\x9b\xba\x50\x99\xb4\x59\xdd\x2c\x4a\x99\xfa\x25\x83\x5f\x15\xa6\x8d\x58\x90\x7f\xd2\x2c\x2c\xf8\x89\x77\x60\xed\x19\xa5\x0b\xce\x2d\x0b\x84\x8d\xb4\x72\x51\x7a\x30\x84\x6a\x6e\xca\x8e\x7c\x33\x8d\x05\x2c\x76\x20\xd4\x4e\xab\x81\x27\xc2\xac\x6b\x6c\x5d\x70\x91\xe1\x17\x7e\xb1\x35\x7c\x8c\xdf\xed\x5c\x18\x94\x61\x68\x48\x15\xf4\xff\x63\xcf\xe7\x0e\x2a\x43\x1b\x81\x5c\xb9\xc5\xc5\xcc\x1f\xee\xe1\x5b\x98\x30\xd0\xf3\x78\x4d\x7b\xe8\x1b\xa9\x3b\xd8\xe7\xa4\x30\x19\x8a\xb0\x3e\x90\x35\x09\x62\xf3\xcf\x8e\xba\x49\x73\xf8\x41\xab\x0d\xa5\xfb\xd0\x12\x74\x22\x9c\x3e\x60\x3f\x1e\xb2\xc7\x56\x8d\xa0\x89\x07\xfd\x5b\xa4\xbd\x63\x5b\x1c\xb8\xa7\x75\x2d\xa8\x77\x6c\x5f\x5f\x50\x6b\xe1\x28\x04\xf8\xf2\xd5\xdf\x3e\xfc\x34\xb9\x85\x63\xea\xfb\xf5\x6f\xc5\x62\x95\x59\x14\x26\x5f\x93\xf7\xe2\xe6\x6f\x21\xa8\xa4\x0b\xc3\x8c\x76\xf3\x1f\x82\x56\x31\x4f\xd2\xd9\xd1\x1d\x92\x23\x65\x20\xa9\x72\x9c\x21\xff\xec\xec\x78\x66\x66\x24\xd5\xda\xa3\xc3\x3f\x82\x18\xf8\x65\xdb\xcb\x13\x37\x71\xc1\x23\xcf\xe0\x47\xd6\xa0\xfb\x21\x15\xa3\x02\xc4\xec\xbe\x0a\x0c\xff\x28\xe1\xfe\x3a\xf4\xdf\x59\xc4\x77\x41\x41\xa5\x07\xd7\x0f\xfe\x1d\x00\x00\xff\xff\x7b\x67\x52\x8e\x0e\x3b\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 15118, mode: os.FileMode(420), modTime: time.Unix(1523061320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

