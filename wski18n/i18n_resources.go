/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
    "io/ioutil"
    "os"
    "path/filepath"
    "strings"
    "time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
    gz, err := gzip.NewReader(bytes.NewBuffer(data))
    if err != nil {
        return nil, fmt.Errorf("Read %q: %v", name, err)
    }

    var buf bytes.Buffer
    _, err = io.Copy(&buf, gz)
    clErr := gz.Close()

    if err != nil {
        return nil, fmt.Errorf("Read %q: %v", name, err)
    }
    if clErr != nil {
        return nil, err
    }

    return buf.Bytes(), nil
}

type asset struct {
    bytes []byte
    info  os.FileInfo
}

type bindataFileInfo struct {
    name    string
    size    int64
    mode    os.FileMode
    modTime time.Time
}

func (fi bindataFileInfo) Name() string {
    return fi.name
}
func (fi bindataFileInfo) Size() int64 {
    return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
    return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
    return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
    return false
}
func (fi bindataFileInfo) Sys() interface{} {
    return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesDe_deAllJson,
        "wski18n/resources/de_DE.all.json",
    )
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
    bytes, err := wski18nResourcesDe_deAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4d\x6f\xdb\x38\x13\xbe\xfb\x57\x0c\x72\xf1\x25\xd0\xdb\xf7\xda\x5b\xd0\xed\xb6\x41\x5b\x27\x48\xd3\x16\x45\xb7\x40\x18\x71\x64\xb1\xa1\x48\x81\xa4\x5c\x78\x05\xff\xf7\x05\xf5\x61\x3b\x09\x45\x51\xb2\xec\x76\x81\xbd\xd9\x16\xe7\x79\x9e\xe1\x90\xf3\xa1\xe4\xdb\x0c\xa0\x9c\x01\x00\x9c\x31\x7a\xf6\x12\xce\xde\x22\xe7\xf2\xec\xbc\xfe\xc9\x28\x22\x34\x27\x86\x49\x61\x9f\x5d\x08\xb8\xb8\xbe\x84\x54\x6a\x03\x59\xa1\x0d\xdc\x23\xe4\x4a\xae\x18\x45\x1a\x9d\xcd\x00\x36\xe7\x4f\xe1\x3e\x30\xad\x99\x58\x42\x9c\x51\x78\xc0\x75\x07\x70\xbb\x6a\x1e\x67\x74\x0e\x4c\xe4\x85\xa9\x56\x3b\x21\xb3\x66\x71\x46\x04\x4b\x50\x9b\x68\x4d\x32\x0e\x09\xe3\xd8\x83\xee\x30\x70\x12\x90\xc2\xa4\x52\xb1\xbf\x2b\x00\xb8\x7b\xf7\xfa\xeb\x5d\x07\xb2\x6b\xa5\x13\xf2\x67\xca\xf4\x43\xb5\x79\x77\x6f\xaf\x3e\xde\x76\xe1\x3d\x5b\xe6\x04\x13\x24\x43\x9d\x93\xb8\xcb\xdf\xdd\xf3\x3e\x2d\x9f\x5f\xdf\x7c\xbc\xbc\x5a\x04\xc8\xd9\xae\x74\x47\xb9\xd9\xd9\x6a\x53\x41\x48\x03\x89\x2c\x04\x05\x62\x20\x27\x26\x85\xb2\x8c\x72\x25\x7f\x60\x6c\xae\x89\x49\x37\x9b\xe8\x2f\xd1\x15\xab\x11\x48\xde\x83\x57\x96\x55\xb8\x37\x9b\xff\xd9\x4f\xf6\x43\x05\x1d\x41\xff\x82\xe9\x9c\xfa\x25\x5a\x02\x22\xc5\xf4\x63\x2c\x93\x62\x8d\xf7\xad\x2c\x23\xbb\xa2\x46\xfb\x1e\x1a\xaf\x21\x78\x4e\x79\x9f\xda\x6d\x68\xef\x6a\x6d\x00\x89\x54\x40\x31\xe7\x72\x9d\xa1\x30\xdd\x72\xc2\xed\x07\xd3\x17\xe2\x50\x01\x4f\x11\x9c\x12\xec\x96\xa9\x42\x18\x96\x6d\xb7\x53\x17\x79\x2e\x95\x41\x0a\xf7\x6b\xb8\xca\x51\xd4\xf7\x32\xe7\xc4\x24\x52\x65\xdd\x62\xc6\x61\xb9\x93\x86\x7e\xa8\xc5\x43\x4a\x34\xc4\xa9\xd4\x28\x80\x40\x4e\x94\x61\x71\xc1\x89\xda\x12\x59\x4f\x2d\x31\x89\xad\x8c\x6e\x71\x87\x20\xba\x83\x27\x76\xce\xb5\xa6\x66\x9d\xe3\x39\x68\x34\x60\x24\x08\x49\xf1\x87\xee\x0a\x5c\xa0\xb5\x93\xfa\xd6\xaa\x2b\x4c\x8a\xc2\xb0\xb8\x2e\x06\x0f\xb8\x6e\xf7\x3c\x96\x22\x61\xcb\x42\x21\xed\xde\x8d\x21\x08\x9d\x12\xb6\xc5\x79\x20\xb1\xdf\xae\x93\x6e\x5b\x67\x86\xf2\xf5\x18\x06\xf9\x57\x96\x11\xc9\x99\xfd\xb6\xd9\x9c\x43\xa2\x64\xd6\xfc\xa4\x65\xa1\x62\xf4\xa5\xe3\x51\x50\xde\xb8\xb7\xb1\xd2\x68\xf6\x00\x0a\x93\x86\x89\x09\x86\x08\x0b\x45\x59\x46\xdb\xef\xfb\x1e\x6d\x7f\x0c\x53\x35\x1e\xd3\x29\xf3\x4f\xc2\x38\x52\x7b\x93\x96\x58\x57\x86\x67\x17\x4e\xd7\xb0\x36\x2d\x7d\xa9\xd2\x92\x46\xb5\x62\x31\xbe\xb4\x4c\xa8\x94\x4f\xf1\x64\xf0\x4e\xf1\x1f\x0d\x51\x55\x16\x28\x44\x46\x94\x4e\x09\xdf\x4b\x9e\x4c\x24\xb2\x86\xe6\x32\x26\x1c\x56\x84\x17\xa8\xbb\xa5\x8e\x04\xeb\x48\x7a\x3e\x08\x26\x0c\x2a\x81\xbe\x7a\x15\x6c\xef\xa4\xff\x63\x5b\xd0\x20\x96\x59\xce\xd1\x6e\xb7\x2e\xe2\x18\xb5\x4e\x0a\xce\xd7\xdd\xcc\x41\xa6\x4e\xd2\x37\xd2\x00\x2a\x25\x15\xc4\x0a\x89\xb1\x05\x37\x27\xf1\x03\x59\x22\xfc\x64\x26\x6d\x9e\x65\xa8\x35\x59\xee\x05\x17\x88\xa0\xad\x9d\xa4\xf5\x03\xfb\xc1\x77\xaa\x8e\x42\x15\xea\x54\x5d\xef\xfe\xc5\x3e\xed\x6e\xda\x2b\xce\x6c\xa0\x5f\x5b\xf3\x0e\x59\x1d\x8b\x9d\xc0\x97\x62\x45\x38\xa3\xcd\xa4\x28\x13\xf8\xda\x33\x02\x7a\x0c\x82\xa3\x91\xb3\x53\x84\xe2\x30\x9a\x50\x67\x54\xc1\x4f\x72\x59\x0e\xe4\xe9\x71\x47\xa3\xa9\x58\xaa\x6c\x6f\x88\x29\xb4\x0d\xed\x91\x7d\x3b\x0a\x69\x68\xdc\x8c\x62\xcb\x25\xaa\x53\x84\xee\x70\xaa\xa1\x4e\x25\x88\xf4\x94\x9e\x1d\xc8\x37\xb4\x36\xdd\x33\x41\xed\xf7\x13\xe6\xf3\xc3\x29\xfb\xaa\xbe\x4c\xec\x5c\x8d\x82\xa2\x88\xd7\xd6\x94\x62\xbe\x20\x19\x6e\x36\x40\x19\x6d\x9a\xfb\xba\xba\xdb\xe2\xbe\xad\xed\x70\x53\x08\xb8\xdb\xcd\x80\xed\x6c\x7c\x67\xfb\x22\x85\x99\x5c\x61\x3d\x0a\x12\xce\xd7\xcd\xe8\x8e\x14\x88\xd6\x68\x3c\xad\xd5\xef\xa0\xcc\xb3\x65\x7b\x55\xbd\x2c\x23\x59\x98\xbc\x30\x9b\x0d\x44\x51\xe4\xf5\xc7\x63\xd6\x43\x56\xa5\xa5\xa1\x54\x4e\xa3\x1e\xa2\x47\x77\x6a\x28\xa1\xd7\xb8\x87\xb8\x3d\xea\x43\x39\xbb\xec\x02\xe9\xda\x9b\x35\x96\xb6\xcb\xbe\x87\xfe\xf1\x89\x1e\xc4\xec\x31\x75\x37\x6f\xef\x22\x78\x45\x44\x8c\x9c\x37\xe6\xbd\x2f\xbf\xbc\x26\x3d\x24\xd6\x20\xec\x15\x9b\xdf\xa6\x63\x4a\xda\x2d\xf2\xdf\x7e\xcf\xa0\x34\x00\xa2\x2f\x6b\xd6\x69\x64\xc4\xa4\xd4\x65\xf8\xfb\x7a\xdd\x22\x3c\x3f\x82\xbb\x7c\xdc\x7d\x7c\x43\xad\xfb\xfd\x1f\x5b\x0e\xc2\xb6\xe6\x00\xf4\x9e\x36\x82\x22\xc7\xd3\x4c\x83\xd3\x31\x85\xba\x74\xe4\x4e\x7d\x2a\x9e\xff\xa6\x90\x27\xfb\x79\xfc\x29\x64\x42\xaa\xa1\x4e\x1d\x79\x0a\x99\x9a\x2f\xd4\xbd\xe3\xbf\x21\x9b\x90\xca\xe9\xd4\x97\x8b\x9b\xc5\xe5\xe2\xcd\x4b\xb8\x4d\x11\xe6\xf5\xfb\xe6\x39\x7c\xbd\xf8\xf0\xbe\x7e\x77\x2e\xb6\x5b\x8a\xc2\x30\x53\xbd\x4d\xa7\x98\x2b\x8c\x89\x41\x1a\xc1\x35\x47\xa2\x11\x0a\x8d\x30\xb7\x9b\x3e\x07\x26\xb4\x41\x62\x7b\x77\xa0\xa8\x63\xc5\xee\x91\x5a\x1c\x9d\x63\xcc\x92\xe6\xef\x30\x9e\x69\xe3\x57\x2a\x0a\x8d\x7b\xdb\x68\x9e\x30\xfe\xd3\x51\x76\xf5\x51\xae\x46\x36\x25\x1a\xee\x11\xc5\xa3\xde\x68\x3b\x9f\x79\xbb\xab\x71\x70\x4e\x71\xd7\x9e\xfe\x7e\xac\xc2\xc3\x30\xbd\x32\xa7\x94\x37\x81\xac\xdb\xe6\xba\x4c\x21\x6b\x1c\x96\x57\xd6\xb3\xf9\xf4\x50\x6d\x23\x00\x9d\x02\x6f\x9e\x4e\xec\x63\x85\x8d\x00\x72\x0a\xba\x78\xfe\xb6\x62\xac\xa4\x51\x50\x01\x89\x63\xd7\xa1\xbb\xe1\xda\xc1\x32\x3c\x77\x0c\x43\xec\xbb\x00\x4d\xe9\xd8\x47\x6b\xa6\xbf\xa0\x33\xef\x37\xf7\x9e\x22\xdb\x45\x0e\xa2\x0d\x30\xec\x39\x25\xf5\xc8\x31\x88\x34\xd0\xd8\xdf\x4a\x7c\x20\x82\x12\x23\xd5\x1a\x12\x86\x9c\x42\x9b\xcb\x3e\xa3\xd2\x16\xbd\xfd\xaf\x19\x34\x11\x7c\xd2\x08\x04\x28\x26\xa4\xe0\x06\x56\xcd\x8a\x17\xd1\x8b\xe8\xff\x6d\xdd\x0e\x68\x15\x8e\xc0\x38\xce\xc5\xf7\x2c\x46\xa1\xd1\x43\xa8\x8d\xb2\xe5\xe6\xd3\xe2\xdd\xe2\xea\xcb\x62\x02\x1f\x0f\xa1\xb4\x4e\xce\x66\xdf\x67\xff\x04\x00\x00\xff\xff\x28\x71\xd6\xf2\xb1\x2a\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesEn_usAllJson,
        "wski18n/resources/en_US.all.json",
    )
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
    bytes, err := wski18nResourcesEn_usAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 10929, mode: os.FileMode(420), modTime: time.Unix(1505961188, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesEs_esAllJson,
        "wski18n/resources/es_ES.all.json",
    )
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
    bytes, err := wski18nResourcesEs_esAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesFr_frAllJson,
        "wski18n/resources/fr_FR.all.json",
    )
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
    bytes, err := wski18nResourcesFr_frAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesIt_itAllJson,
        "wski18n/resources/it_IT.all.json",
    )
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
    bytes, err := wski18nResourcesIt_itAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesJa_jaAllJson,
        "wski18n/resources/ja_JA.all.json",
    )
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
    bytes, err := wski18nResourcesJa_jaAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesKo_krAllJson,
        "wski18n/resources/ko_KR.all.json",
    )
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
    bytes, err := wski18nResourcesKo_krAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesPt_brAllJson,
        "wski18n/resources/pt_BR.all.json",
    )
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
    bytes, err := wski18nResourcesPt_brAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesZh_hansAllJson,
        "wski18n/resources/zh_Hans.all.json",
    )
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
    bytes, err := wski18nResourcesZh_hansAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
    return bindataRead(
        _wski18nResourcesZh_hantAllJson,
        "wski18n/resources/zh_Hant.all.json",
    )
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
    bytes, err := wski18nResourcesZh_hantAllJsonBytes()
    if err != nil {
        return nil, err
    }

    info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1500653295, 0)}
    a := &asset{bytes: bytes, info: info}
    return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
    cannonicalName := strings.Replace(name, "\\", "/", -1)
    if f, ok := _bindata[cannonicalName]; ok {
        a, err := f()
        if err != nil {
            return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
        }
        return a.bytes, nil
    }
    return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
    a, err := Asset(name)
    if err != nil {
        panic("asset: Asset(" + name + "): " + err.Error())
    }

    return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
    cannonicalName := strings.Replace(name, "\\", "/", -1)
    if f, ok := _bindata[cannonicalName]; ok {
        a, err := f()
        if err != nil {
            return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
        }
        return a.info, nil
    }
    return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
    names := make([]string, 0, len(_bindata))
    for name := range _bindata {
        names = append(names, name)
    }
    return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
    "wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
    "wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
    "wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
    "wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
    "wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
    "wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
    "wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
    "wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
    "wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
    "wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
    node := _bintree
    if len(name) != 0 {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        pathList := strings.Split(cannonicalName, "/")
        for _, p := range pathList {
            node = node.Children[p]
            if node == nil {
                return nil, fmt.Errorf("Asset %s not found", name)
            }
        }
    }
    if node.Func != nil {
        return nil, fmt.Errorf("Asset %s not found", name)
    }
    rv := make([]string, 0, len(node.Children))
    for childName := range node.Children {
        rv = append(rv, childName)
    }
    return rv, nil
}

type bintree struct {
    Func     func() (*asset, error)
    Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
    "wski18n": &bintree{nil, map[string]*bintree{
        "resources": &bintree{nil, map[string]*bintree{
            "de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
            "en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
            "es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
            "fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
            "it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
            "ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
            "ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
            "pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
            "zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
            "zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
        }},
    }},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
    data, err := Asset(name)
    if err != nil {
        return err
    }
    info, err := AssetInfo(name)
    if err != nil {
        return err
    }
    err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
    if err != nil {
        return err
    }
    err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
    if err != nil {
        return err
    }
    err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
    if err != nil {
        return err
    }
    return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
    children, err := AssetDir(name)
    // File
    if err != nil {
        return RestoreAsset(dir, name)
    }
    // Dir
    for _, child := range children {
        err = RestoreAssets(dir, filepath.Join(name, child))
        if err != nil {
            return err
        }
    }
    return nil
}

func _filePath(dir, name string) string {
    cannonicalName := strings.Replace(name, "\\", "/", -1)
    return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

