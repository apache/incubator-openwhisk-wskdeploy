// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x6f\xdc\x36\x12\xfe\x9e\x5f\x31\x08\x0e\x48\x0b\x38\x6a\xda\xc3\x01\x87\x00\xc6\x21\x77\xf1\xb5\xbe\x36\x71\xe0\x97\x06\x45\x6a\x28\x5c\x71\x56\xcb\x2e\x45\x0a\x24\xb5\x9b\x8d\xb1\xf7\xdb\x0f\x43\x4a\x5a\xad\x6d\x4a\xdc\x4d\x83\xcb\x97\xc8\xe6\x70\x9e\xe1\xcc\x70\xde\xe8\x0f\x4f\x00\xee\x9e\x00\x00\x3c\x15\xfc\xe9\x4b\x78\x5a\xd9\x32\xaf\x0d\xce\xc5\xa7\x1c\x8d\xd1\xe6\xe9\x49\x58\x75\x86\x29\x2b\x99\x13\x5a\x11\xd9\x99\x5f\x7b\x02\xb0\x3d\x19\xe1\x20\xd4\x5c\x47\x18\x9c\xd3\xd2\xd4\x7e\xdb\x14\x05\x5a\x1b\x61\x71\xd5\xae\x4e\x71\x59\x33\xa3\x84\x2a\x23\x5c\xde\xb7\xab\x51\x2e\x45\xc5\x73\x8e\xb6\xc8\xa5\x56\x65\x5e\x37\x33\x29\xec\x22\xc2\xec\x5d\x58\x05\x06\x35\x2b\x96\xac\x44\x70\x1a\xdc\x02\xc1\x60\x29\xac\x33\x1b\xb0\xe8\x40\x28\xf8\xef\x77\xd9\xda\x2e\x6b\xa3\x6b\x9b\xa5\x42\x1b\xac\xb5\x71\x11\xe4\x4b\xbf\x68\x41\x2b\xe0\x58\x4b\xbd\x41\x0e\xa8\x9c\x70\x02\x2d\x7c\x23\x32\xcc\x4e\xe0\x5d\x90\xc9\x9e\xc0\xab\x82\xf6\xd9\x13\xb8\x36\xa2\x2c\xd1\xd8\x13\xb8\x6c\x24\xad\xa0\x2b\xb2\x6f\x81\x59\x58\xa3\x94\xf4\xbf\xc1\x02\x95\xf3\x3b\x56\x1e\xcd\x92\xfc\x74\x26\x5b\x63\x21\xe6\x02\x39\x28\x56\xa1\xad\x59\x81\xe9\x67\xd1\x3a\x76\x92\x57\xe0\xb4\x96\xa4\xb8\x70\x90\x13\x68\x54\xf8\x02\xa6\x38\xd8\x8d\x2a\x40\xd7\xa8\xd6\x0b\x61\x97\x9d\x9e\x2d\x34\x56\xa8\x12\x18\x54\x4c\x89\x39\x5a\xe7\x89\x75\x4d\x5c\x99\x6c\x59\x55\x74\x92\xb9\x90\x3d\xf9\x6f\xaf\xde\xfc\x92\x22\xb3\x5d\x68\xe3\x8e\xb1\x3d\xeb\x2d\x9f\x0e\x33\x6a\xe7\x77\x46\xaf\x04\x47\x0b\x0c\x6c\x53\x55\xcc\x6c\x20\xd0\x83\x9e\xc3\x7a\xc1\xdc\x33\x0b\x33\xc4\x81\x17\x7c\x99\xb5\x5a\x91\x26\xcd\x45\x7e\xed\x34\x2c\x50\xd6\x2d\x34\x6c\x74\x63\x92\x2c\x45\x16\x49\x97\x85\x71\x1e\x13\x85\x73\x60\x0a\x98\x77\xee\x13\x98\x23\xf2\x13\x70\xc1\xc3\x41\x1b\x30\x8d\xec\x2f\x64\x07\x9e\x0c\xbb\x42\x63\x09\x27\x66\x16\xa1\x9c\x67\xdc\xd2\x81\x6a\xaa\x19\xc1\xce\x61\x6d\x97\x41\x23\xe3\x58\x73\xc9\xca\x9c\xd5\x22\x5f\x68\x1b\x53\x76\xd0\xe4\xab\x77\xe7\xf0\xf1\xa7\x8b\xab\xeb\x8f\x89\x1c\xc7\x65\x1f\x30\xfd\xf5\xec\xf2\xea\xfc\xe2\x6d\x12\xdf\xc6\x2d\xf2\x25\x6e\x22\x4c\x69\x59\x1b\xf1\xd9\xff\x02\x3e\xfe\x7c\xf6\x5b\x0a\xd3\x02\x8d\xcb\xc9\x1d\x22\x5c\x6b\xe6\x16\xa4\x52\x52\x74\x46\xc4\xde\x77\x52\x18\x6b\x35\x17\xb1\x14\x10\x16\x3d\x2b\xf8\x86\xe3\x9c\x35\xd2\x81\xb0\xf0\x97\x9f\x2e\xde\x9c\xed\x02\xf5\xb7\x29\x5a\x91\x52\xaf\xf3\x96\x47\x2c\x71\x79\x22\xe8\x89\xa6\xb9\xee\xa2\xd7\x98\x5e\xfa\x88\xd9\x87\xb9\x04\xd6\x42\x39\x34\x74\x63\x56\x31\x9d\x07\x69\x07\x74\x50\x1b\x5d\xd5\x49\x82\x2f\x71\x93\x6c\xce\x25\x6e\x52\x85\x0e\x5a\xae\x98\x62\x25\xc6\x82\x41\x10\xbb\x36\xfa\x0f\x2c\xdc\x2e\x15\x3a\x0d\x33\xba\xfd\x66\x89\x1c\x3a\x0e\xd3\x88\x7d\xb8\x18\xd7\xff\x5e\x48\x4b\x60\xdb\x87\xe2\x08\xdf\xdd\xfa\x34\xaf\xf6\xa8\x13\x12\x5a\x34\x2b\x34\x12\xad\xed\x74\x93\xc0\xda\x3a\x23\xa2\x9c\x83\xa2\x1b\x8b\x86\x5c\x5a\x28\xe4\x60\x1a\xe5\x44\xd5\xc7\xc2\x04\x04\xa7\xcb\x52\x62\x4e\xe9\x23\x02\x73\xed\x29\xe0\x27\x4a\x30\x15\x5a\xcb\xca\x74\x4f\x59\xa1\x99\x69\x1b\x53\x72\xbb\x0a\xba\x71\x75\x33\xa6\x0e\x1f\x26\xf2\x4a\x58\x4a\x60\x3e\x00\xc6\xe3\xdf\xf5\x02\x81\x28\xc8\xf1\x8a\x10\x04\xc9\xc1\x85\x05\xa5\x1d\x04\x56\x8d\x41\x9e\xfd\x3e\xa6\x9e\x7b\x88\xb5\x18\xc9\x0d\x84\x48\x41\x9c\x48\xbe\x0c\x67\xca\x2b\x09\xa9\xa7\x39\x0e\xaa\x3d\xca\x58\x87\x70\xff\x3c\x1f\xee\xee\x32\xfa\xde\x6e\x6f\x4f\x60\x6e\x74\x05\x77\x77\x99\xd5\x8d\x29\x70\xbb\x4d\xc2\x0c\x06\x9b\xc2\x24\xb2\xce\x56\x16\xdd\x71\x58\xbd\x7a\xa6\xd0\xf6\xf4\x48\x47\xec\x7f\x71\xf8\x39\x1b\x55\x31\x63\x17\x4c\xca\x5c\xea\x82\xc9\x08\xec\x4d\x47\x06\x17\x35\xaa\xf7\x3e\xfb\x93\x94\x01\xcc\xef\x84\x15\x93\x0d\xda\x54\x34\x85\x6e\xad\xcd\xf2\x28\x3c\x9f\x58\x14\xba\x51\xac\x5d\x5e\xcb\x0b\xa6\x0a\x94\x32\x1a\xf7\x2f\x7e\xce\xe0\x5f\x81\x86\xca\xcc\xdd\xce\x54\x80\x39\x13\x71\xee\xaf\x77\x09\x96\x0b\xde\x3a\x7e\x55\x4b\x74\x08\xb6\xa1\x76\x74\xde\x48\xb9\xc9\xe0\xb2\x51\xf0\xb1\xaf\xfc\xfa\x16\xe6\x23\xc5\x60\x83\x95\xa6\x34\xca\x8c\x13\x4c\xca\xcd\xae\x56\x67\xd6\xa2\x1b\x57\xfb\x40\xd2\x50\xf8\xe7\xd6\x31\xd7\xc4\x6a\x8d\xe7\xcf\x9f\x3f\x3f\x3d\x3d\x3d\x1d\xe8\x7e\x70\x86\x2b\xbf\x15\x88\x80\x08\x93\x50\x7d\x53\x8e\x3c\x45\x45\x9d\x6a\x38\xb4\x9d\x7c\x50\xce\xb8\x57\x1d\x6f\xeb\xe1\xde\x74\x90\x51\x7b\xdf\x0c\x28\xc7\x2d\x9e\x8c\x37\xa5\xbf\x3d\xc8\x23\x34\xd8\xd5\x20\xb9\xef\xb3\xa6\x6b\xc7\x1b\xdf\x8e\x51\xe8\xa1\x1a\x61\xbb\xbd\x85\xb9\x36\xa9\xf7\xe6\x1e\xd8\xf0\xa0\x07\xc1\x25\x9b\xce\x17\x72\x9b\xbc\xbb\x31\x13\x23\xa2\xbb\x3b\x2a\x2b\xb7\xdb\x3e\xb2\x12\xde\x82\xb5\x2d\xf2\x50\xa5\xfd\x1d\x4c\x47\x8f\xcf\x94\x5e\x77\xeb\xf0\xa8\x00\x59\x36\xd2\xed\xb6\x10\x9d\x42\xfe\xcc\x23\xee\x78\xa6\x1c\xb2\xa3\x8e\x1f\xf3\x66\x47\x71\xc4\x41\x39\xd6\xa8\x38\xaa\xe2\x10\x7d\xee\x36\x0d\x81\x0e\xc3\xd9\xdd\xc2\xa8\x52\x5f\x3f\x0a\xf3\x25\x9e\xf3\xb8\x14\x14\x7b\x1a\x13\xab\xb3\x06\x91\x54\xcf\x23\x47\xff\x3f\xa6\xa1\xee\x3c\x87\x39\xca\x97\x59\xf0\x61\x24\xfd\x73\x6c\x98\x78\x35\x62\x92\x8c\xdb\x71\x2f\xa2\x1f\x69\xc9\x89\x20\x4c\x6d\xec\xb1\x69\xcd\x4b\x14\x92\x4c\xdf\x26\x8f\xc9\x02\xbc\x31\x64\xc9\x16\x76\x98\x2a\xbe\x9e\xbf\x75\x67\x9c\xeb\x46\xf1\xbc\x95\xb7\x0d\x55\x51\x07\x90\xe8\xa2\xb1\x69\xbd\x10\xc5\x02\xd6\x7e\xc2\x4d\x72\xf1\x50\x8e\xba\x05\x42\xd1\x18\x43\x8a\xe9\x0e\xd8\x0d\x11\x7c\xd2\x0a\xdf\xc4\x81\x59\x7f\x16\xd2\x5f\x72\xfa\x0a\xa3\x93\x89\x4e\xee\x77\xf5\x4e\x22\xb3\x7e\xd0\xb2\x12\x1c\xbd\x50\x44\x4f\xb2\xfb\x74\xd9\x17\x73\x2f\x61\x1a\x6b\xb4\x4f\x7d\x80\xc5\xd4\xfd\xbe\xd5\xe9\x25\xaa\x04\xa0\x76\xc8\x19\x31\x86\x86\x8d\x6e\xc0\xa0\xb7\xfc\x9a\x29\xb7\x9b\x57\x81\x5b\x08\xfb\x0f\xf8\x66\xf3\xdd\xdb\x6f\x13\x70\xa6\xda\xd3\x87\x47\x1a\x74\x59\x1f\xba\xf9\x9e\xef\x70\xa8\xe9\x2a\x1b\xb4\xee\x36\x01\xb7\x33\xf2\x41\x27\xec\xdf\x2e\x12\xce\x78\x76\x79\x79\x71\x79\x15\x61\x7f\x7a\xff\x1f\x04\x72\x78\xb0\x70\x7a\x3a\x92\xdb\x8d\xd9\x0f\x62\x4b\xa5\xd7\x2a\x77\x9b\x7a\x24\x09\x75\xc1\x8a\xa8\x48\x63\xed\xae\x0c\x76\xa3\x6d\xd0\x4a\x6e\xc0\x36\x75\x78\x85\xfa\xce\xcf\x94\x33\xbb\xb1\x0e\x2b\x98\x09\xc5\x85\x2a\x2d\x68\x03\xa5\x70\x8b\x66\x96\x15\xba\xea\x1f\x04\xc6\x8b\x91\x20\x70\x17\xd5\xc8\x90\xb9\xd2\x2e\xc4\x81\x91\xbe\xfa\xd1\x3b\x2f\xd4\xfd\x09\xa9\x0f\x72\x9e\x17\x2d\xee\xbf\x48\x4c\x89\xd5\xd6\x49\x85\x41\xe6\x62\xda\xf3\xef\xa4\xe0\x49\xf6\x22\xd1\x5a\xb8\x05\xf8\x07\xd6\x6e\x98\xf5\x92\x16\xd1\x98\xed\xd6\xbf\x5c\x85\xb5\x42\xf3\xb0\x40\x1f\x13\xdd\xff\x40\xa4\x10\x1e\x47\x45\xe2\x0f\x82\xe3\x57\x12\x69\x8e\xc8\x73\xa1\x56\x7a\x19\x13\xe8\xdf\x3e\x53\xd1\x65\x09\x64\x3e\xdc\xd1\x36\x58\x2f\xfc\x43\x56\x2b\x69\xf7\x92\x13\x96\xbe\x8e\xb4\x4b\xdc\xf4\x63\xb0\x8a\x29\xce\x9c\x36\x63\x23\xbe\x9e\xc6\x4f\x8c\x3e\x74\xca\xbc\xa5\x6b\xd2\xf2\x99\xc4\xec\x7b\xa8\x29\xbf\x7e\x33\x74\xcf\x81\xe7\x32\x07\x7e\xbc\x3b\x68\xaa\x26\x41\xfd\x45\xaa\x84\xad\x98\x2b\x62\x2f\x9a\x7b\xf7\x88\x36\x70\x0f\xc1\x47\xae\x93\x5f\xef\x1a\x3b\xae\x31\xcc\x06\x3d\x88\x37\xab\xcf\x60\x44\x54\x0d\x98\xec\x5d\xbb\xb0\xda\x1d\x63\xfc\x10\xed\x9c\x99\xdc\x8b\x49\x11\x53\xdb\x79\x58\xa5\xe8\xd3\x9a\xa4\x1f\x50\x13\x56\xfb\x4d\xb2\xec\xde\x48\xf7\xa4\xd2\xc6\xcb\x1e\xde\x15\xfd\x9e\xf0\x99\xa2\xe7\x4e\xc4\x09\x55\x5f\x1e\x22\xd0\x3d\xbd\xfa\xab\x10\x24\x7a\x66\x21\x4c\x0a\x83\x2a\xf1\x93\x43\x65\x3b\xa1\xf1\x93\xeb\xda\xed\x2f\x39\x8a\xcd\x4b\x8c\x55\x2e\xbb\xab\x5c\x62\x78\x0e\x6d\x53\xc2\xee\x51\xc0\x86\x3a\x6b\x37\x8e\xb2\x68\x56\xa2\x18\x5c\xdf\x49\x41\x1a\x23\x0f\x37\xf9\xdd\x5d\xd6\x18\x49\x29\x6c\xbb\x85\x9b\xcb\x5f\xfc\xe1\x1b\x23\x5b\x1f\xa4\x9f\x48\x67\x81\xe0\x36\x2d\x03\x90\x20\x15\x93\x73\x6d\xaa\x68\xa9\xfd\xa6\x5b\x1f\x93\x20\x83\x6b\xb3\x01\x56\x32\xa1\xb2\x6c\x12\xf6\x0f\xab\x55\x1f\xa5\x8a\x8a\x8f\x3c\xc3\xfe\xe7\xea\xe2\x2d\x08\x55\x37\x0e\x38\x73\x0c\xde\xb4\xda\x78\x56\x54\xfc\x19\xc5\xac\xc7\x91\xde\xbf\xba\x7c\x7b\xfe\xf6\xc7\xf4\x5a\xa4\xdb\x70\x58\x35\xb2\x66\x46\xe5\x85\xae\x28\x8a\xe6\x06\x5d\x34\xd4\x5e\xd2\x5a\x37\x37\x2a\x2a\xee\xcb\xef\xb9\x43\x13\xc2\xfc\xcb\xe0\xdf\xe4\x3c\xb7\x63\xca\x6b\xf1\xfc\x84\xfe\x60\x07\x1a\xbe\x12\x0f\xc7\x57\x1c\x1d\x16\x6e\xa2\x71\xf4\xc8\x94\x5c\x38\xd6\x06\x0b\x46\xcd\x8b\xc1\x5a\xb2\x22\xea\x38\x14\x7d\x09\x47\x4b\xde\xe6\x14\xff\x28\x11\xfe\x9a\x63\xcf\x5b\x83\x4c\x6b\x21\x25\x58\xad\x15\xcc\x10\x76\x30\x27\x50\x87\x6a\xb8\xb1\x21\xb3\xfa\x82\x08\xd7\x7b\x3c\xad\x43\x96\x78\x80\x56\x1d\xc7\xe4\x44\xbb\xd0\x8d\xe4\x24\x9e\x45\x97\x41\x98\x04\xee\xd7\xe3\x44\xed\xbf\xc2\x4c\x20\x49\x22\x4f\x3f\x61\x4f\x92\x2b\x20\x50\xf8\x7b\x98\xab\x29\x9a\xfa\xfd\x87\x40\x52\xbe\xb6\x6c\x35\x6a\xc1\x29\x50\xbf\xbf\xb3\x6a\xd7\x78\x76\x7f\x43\x32\xfc\xe3\x91\x69\xc1\xa4\xa8\x84\xcb\x45\xa9\xb4\x89\x8a\xd4\xf9\x75\x9b\x00\xfc\x16\x2f\x95\xff\xba\x9f\x8f\x85\x85\x96\x5d\x2a\x7a\xb1\x60\xaa\x44\x36\x8b\x3e\xf9\xff\xd2\x23\xf6\x05\x80\xed\xce\x2d\x37\x61\xe6\xd0\xf3\xc8\xe0\x9c\xe0\xa9\x88\x4a\xf0\x05\x2f\x81\xcd\xa5\x2e\x73\x2b\x3e\xc7\x04\x90\xba\xbc\x12\x9f\x91\x74\x1b\x36\xec\x9d\x78\xe7\xa2\x4c\xf9\xa7\x29\x2a\x38\x67\xe8\xd6\x88\x0a\x5e\xf8\xc2\xf2\xfb\x17\xc9\xa2\x54\x58\x69\xb3\x19\x93\x26\x50\x1c\x2b\xd0\xf7\x3f\xfc\xdd\x8b\xf4\xb7\xef\x7f\x48\x96\x89\x72\xb0\x6e\x62\x09\xbc\x5d\x3d\x4a\x98\x17\x41\x3f\x7f\x7d\x41\xff\xa6\xe5\xf1\x2d\x22\xf5\xd6\x35\x1a\x27\x30\x36\xc6\xeb\xc2\xe0\x20\x5e\x85\xa1\x8d\x33\x02\xfb\xb1\x4d\xe8\x37\x77\xcc\xba\xf1\xce\xe3\x31\xb1\x0b\x89\x5c\x7b\x87\xa3\xc8\x28\x1c\xe8\xc6\x59\xc1\xbd\x21\xae\x0d\x5b\x09\x0b\xb3\x46\x48\x3e\xde\x9f\xfa\xa3\x84\x70\x60\xc8\x6d\x93\x42\x41\xef\xfd\x7b\x01\x41\xdd\x8b\xea\xad\xb6\x7d\xd7\x7d\x77\x97\xb5\xbf\xed\xd4\x4d\x55\xb2\x50\x6d\xb3\x43\x3f\xb0\x62\xa2\x74\xf2\xa2\x76\xf5\x68\xb8\x64\xb1\x30\xd1\x95\xa3\x2d\x15\x15\x74\xf7\x2a\xd3\x19\xb3\xc8\x41\xab\x41\x65\x1c\x2d\x3e\x0f\xae\x38\x5f\x9f\xfd\xf3\xe6\xc7\xe4\xda\xc3\x53\x1f\x56\x78\xf0\x59\xf8\xdb\xa4\x15\x1a\x31\x8f\x15\x1d\xbf\xfa\xc5\xb6\x76\x7c\x68\x2f\xfc\x24\xac\xb3\x13\x81\x89\x80\xfa\xd9\x77\x78\x24\x9b\x7c\xe3\xf0\x54\x2f\xa7\xb8\x0e\xa6\xee\xa3\x7c\x87\xb3\xf7\x3d\xce\x4f\x6e\x9f\xfc\x2f\x00\x00\xff\xff\x66\xab\xca\xcd\xfe\x2d\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 11774, mode: os.FileMode(420), modTime: time.Unix(1516668149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

