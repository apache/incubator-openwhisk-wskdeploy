/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1518211603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x7b\x8f\x1b\xb7\x11\xff\xdf\x9f\x62\x60\x14\x70\x02\x9c\x65\x27\x45\x81\xc2\xc0\xa1\x70\x6b\x37\xb9\x26\xf6\x19\xf7\x48\x10\x38\x87\x35\xb5\x1c\xad\x18\x71\xc9\x05\xc9\x95\xac\x1c\xd4\xcf\x5e\x0c\xb9\x2f\xe9\x8e\xbb\x94\x9c\xa0\xf9\x27\xf2\x71\x38\xbf\x79\x90\xf3\xe2\x7e\x7c\x02\x70\xff\x04\x00\xe0\xa9\xe0\x4f\x5f\xc1\xd3\xd2\x16\x59\x65\x70\x21\x3e\x67\x68\x8c\x36\x4f\xcf\xc2\xaa\x33\x4c\x59\xc9\x9c\xd0\x8a\xc8\xde\xfa\xb5\x27\x00\xbb\xb3\x11\x0e\x42\x2d\x74\x84\xc1\x05\x2d\x4d\xed\xb7\x75\x9e\xa3\xb5\x11\x16\xd7\xcd\xea\x14\x97\x0d\x33\x4a\xa8\x22\xc2\xe5\xe7\x66\x35\xca\x25\x2f\x79\xc6\xd1\xe6\x99\xd4\xaa\xc8\xaa\x7a\x2e\x85\x5d\x46\x98\x7d\x08\xab\xc0\xa0\x62\xf9\x8a\x15\x08\x4e\x83\x5b\x22\x18\x2c\x84\x75\x66\x0b\x16\x1d\x08\x05\xff\x7d\x31\xdb\xd8\x55\x65\x74\x65\x67\xa9\xd0\x06\x2b\x6d\x5c\x04\xf9\xca\x2f\x5a\xd0\x0a\x38\x56\x52\x6f\x91\x03\x2a\x27\x9c\x40\x0b\x5f\x89\x19\xce\xce\xe0\x43\x90\xc9\x9e\xc1\xeb\x9c\xf6\xd9\x33\xb8\x31\xa2\x28\xd0\xd8\x33\xb8\xaa\x25\xad\xa0\xcb\x67\x5f\x03\xb3\xb0\x41\x29\xe9\xff\x06\x73\x54\xce\xef\x58\x7b\x34\x4b\xf2\x93\x4e\xb6\xc2\x5c\x2c\x04\x72\x50\xac\x44\x5b\xb1\x1c\xd3\x75\xd1\x3a\xa6\xc9\x6b\x70\x5a\x4b\x32\x5c\x50\xe4\x0c\x6a\x15\x7e\x01\x53\x1c\xec\x56\xe5\xa0\x2b\x54\x9b\xa5\xb0\xab\xd6\xce\x16\x6a\x2b\x54\x01\x0c\x4a\xa6\xc4\x02\xad\xf3\xc4\xba\x22\xae\x4c\x36\xac\x4a\xd2\x64\x21\x64\x47\xfe\xcb\xeb\x77\x3f\xa6\xc8\x6c\x97\xda\xb8\x53\x7c\xcf\x3a\xcf\xa7\xc3\x8c\xfa\xf9\x83\xd1\x6b\xc1\xd1\x02\x03\x5b\x97\x25\x33\x5b\x08\xf4\xa0\x17\xb0\x59\x32\xf7\xcc\xc2\x1c\x71\x70\x0a\xbe\xcc\x5b\x8d\x48\x93\xee\xa2\x73\xed\x34\x2c\x51\x56\x0d\x34\x6c\x75\x6d\x92\x3c\x45\x1e\x49\x97\x85\x71\x1e\x13\x85\x73\x60\x0a\x98\x3f\xdc\x67\xb0\x40\xe4\x67\xe0\xc2\x09\x07\x6d\xc0\xd4\xb2\xbb\x90\x2d\xf8\x31\xb0\x99\xbf\x50\xdb\x31\xf4\x17\x4c\xc1\xfd\xfd\x6c\x85\xdb\xdd\xee\x10\xca\xeb\x99\x8c\xb7\x46\x63\x89\x73\xec\x18\x08\xe5\x3c\xf7\x86\x0e\x54\x5d\xce\x49\xcd\x05\x6c\xec\x2a\x78\x60\x1c\x6b\x21\x59\x91\xb1\x4a\x64\x4b\x6d\x63\xce\x0d\x9e\x7b\xfd\xe1\x02\x3e\x7d\x7f\x79\x7d\xf3\x29\x91\xe3\xb8\xec\x03\xa6\x3f\xbd\xbd\xba\xbe\xb8\x7c\x9f\xc4\xb7\x76\xcb\x6c\x85\x31\xeb\xd3\xb2\x36\xe2\x77\xff\x07\xf8\xf4\xc3\xdb\x5f\x52\x98\xe6\x68\x5c\xe6\xdd\xf2\x38\xd7\x8a\xb9\x25\x99\x94\x0c\x3d\x23\xe2\x04\x1f\x06\xc6\x5a\x2d\x44\x2c\xe5\x84\x45\xcf\x0a\xbe\xe2\xb8\x60\xb5\x74\x20\x2c\xfc\xe5\xfb\xcb\x77\x6f\xfb\xc4\xf0\x75\x8a\x55\xa4\xd4\x9b\xac\xe1\x11\x4b\x94\x9e\x08\x3a\xa2\x69\xae\x7d\xb4\x1c\xb3\x4b\x17\xa1\xbb\xb0\x9a\xc0\x5a\x28\x87\x86\x6e\xe8\x3a\x66\xf3\x20\xed\x80\x0e\x2a\xa3\xcb\x2a\x49\xf0\x15\x6e\x93\xdd\xb9\xc2\x6d\xaa\xd0\xc1\xca\x25\x53\xac\xc0\x58\xf0\x09\x62\x57\x46\xff\x86\xb9\xeb\x53\xaf\xd3\x30\xa7\x10\x60\x56\xc8\xa1\xe5\x30\x8d\xd8\x85\xa7\x71\xfb\x1f\x11\x5a\x3c\xdb\x2e\xf4\x47\xf8\xf6\xeb\xd3\xbc\x1a\x55\x27\x24\xb4\x68\xd6\x68\x24\x5a\xdb\xda\x26\x81\xb5\x75\x46\x44\x39\x07\x43\xd7\x16\x0d\x1d\x69\xa1\x90\x83\xa9\x95\x13\x65\x17\x0b\x13\x10\x9c\x2e\x0a\x89\x19\xa5\xab\x08\xcc\x8d\xa7\x80\xef\x29\xa1\x95\x68\x2d\x2b\xd2\x4f\xca\x1a\xcd\x5c\xdb\x98\x91\x9b\x55\xd0\xb5\xab\xea\x31\x73\xf8\x30\x91\x95\xc2\x52\xc2\xf4\x01\x30\x1e\xff\x6e\x96\x08\x44\x41\x07\x2f\x0f\x41\x90\x0e\xb8\xb0\xa0\xb4\x83\xc0\xaa\x36\xc8\x67\xbf\x8e\x99\xe7\x00\xb1\x12\x23\xb9\x81\x10\x29\x88\x13\xc9\x97\xe1\x4c\x9d\x4a\x42\xea\x68\x4e\x83\x6a\x54\x19\xeb\x48\x0e\xf5\xf9\x78\x7f\x3f\xa3\xdf\xbb\xdd\xdd\x19\x2c\x8c\x2e\x29\xb1\x5b\x5d\x9b\x1c\x77\xbb\x24\xcc\xe0\xb0\x29\x4c\x22\x6b\x7d\x65\xd1\x9d\x86\xd5\x99\x67\x0a\x6d\xcf\x8e\xa4\x62\xf7\x87\xd3\xf5\xac\x44\xb1\xc9\x98\x6f\xc6\x32\xa7\x57\xa8\x26\x55\xa6\x1d\x10\x76\x80\xdf\x71\x9a\xf2\xb5\x2a\x99\xb1\x4b\x26\x33\xa9\x73\x26\x23\x88\xb7\x2d\x15\x5c\x56\xa8\x7e\xf6\xd5\x47\x13\x31\x6c\xc0\xf3\xbb\x61\xcd\x64\x8d\x36\x11\x50\xa1\xdb\x68\xb3\x3a\x19\xd2\xe7\x37\x85\x0e\x98\x23\x75\x6b\x23\x27\x74\xed\x53\x6d\x96\x33\x95\xa3\x94\xd1\x54\x74\xf9\xc3\x0c\xfe\x15\x68\xa8\xd2\xee\x77\xa6\x02\x2c\x98\x88\x73\x7f\xd3\xe7\x7c\x2e\x78\x73\x17\xcb\x4a\xa2\x43\xb0\x35\xb9\x74\x51\x4b\xb9\x9d\xc1\x55\xad\xe0\x53\x57\x8c\x76\x5d\xdc\x27\x4a\x0b\x06\x4b\x4d\x99\x9d\x19\x27\x98\x94\xdb\xbe\x5d\x61\xd6\xa2\x1b\xf7\xc2\x40\xd2\xd0\xfb\x64\xd6\x31\x57\xc7\xca\x9f\xe7\xcf\x9f\x3f\x3f\x3f\x3f\x3f\x1f\xf8\x62\xa0\xc3\xb5\xdf\x0a\x44\x40\x84\x49\xa8\x7e\x2e\x81\x3c\xc5\x44\xad\x69\x38\x34\xc3\x8c\x60\x9c\xf1\x43\x76\xba\xaf\x87\x7b\xd3\x41\x46\xfd\x7d\x3b\xa0\x1c\xf7\x78\x32\xde\x94\xfd\xf6\x20\x4f\xb0\x60\x5b\x16\x65\xbe\xd5\x9c\x2e\x67\x6f\x7d\x47\x4a\xd1\x90\xca\x96\xdd\xee\x0e\x16\xda\xa4\xde\x9b\x03\xb0\xa1\xa2\x47\xc1\x25\xbb\x2e\x74\xa1\x59\x7b\x63\x26\xa6\x64\x5d\x37\xda\x06\x7b\xc2\x5b\xb2\x66\x4a\x30\x34\x69\x77\x07\xd3\xd1\xe3\x63\xb5\x37\xed\x3a\x3c\x2a\xc0\x6c\x36\xd2\xf0\x37\x10\xad\x41\xfe\x48\x15\x7b\x9e\x29\x4a\xb6\xd4\x71\x35\x6f\x7b\x8a\x13\x14\xe5\x58\xa1\xe2\xa8\xf2\x63\xec\xd9\x6f\x1a\x02\x1d\x87\xd3\xdf\xc2\xa8\x51\xdf\x3c\x0a\xf3\x25\x27\xe7\x71\x29\x28\xf6\xd4\x26\x56\xfa\x0d\x22\xa9\x5e\x44\x54\xff\x3f\xa6\xa1\x56\x9f\xe3\x0e\xca\x97\x79\xf0\x61\x24\xfd\x63\x7c\x98\x78\x35\x62\x92\x8c\xfb\x71\x2f\xa2\x9f\xe8\xc9\x89\x20\x4c\x9d\xf5\xa9\x69\xcd\x4b\x14\x92\x4c\xd7\xb9\x8f\xc9\x02\xbc\x36\xe4\xc9\x06\x76\x98\x2a\xfe\xbc\xf3\xd6\xea\xb8\xd0\xb5\xe2\x59\x23\xef\xf8\x4c\xf2\x0d\x11\x45\x63\xd3\x66\x29\xf2\x25\x6c\xfc\x90\x9f\xe4\xe2\xa1\x34\x75\x4b\x84\xbc\x36\x86\x0c\xd3\x2a\xd8\xce\x35\x7c\xd2\x0a\xbf\x89\x03\xb3\x5e\x17\xb2\x5f\x72\xfa\x0a\xd3\x9c\x89\xe6\xf2\x57\xf5\x41\x22\xb3\x7e\xf6\xb3\x16\x1c\xbd\x50\x44\x4f\xb2\xfb\x74\xd9\x15\x73\xaf\x60\x1a\x6b\xb4\x75\x7e\x80\xc5\xd4\x61\x2b\xed\x7b\x94\x04\xa0\x66\xee\x1a\x71\x86\x86\xad\xae\xc1\xa0\xf7\xfc\x86\x29\xd7\x8f\xd0\xc0\x2d\x85\xfd\x07\x7c\xb5\x7d\xf1\xfe\xeb\x04\x9c\xa9\x8e\xf9\xa1\x4a\x83\xc6\xef\x63\x3b\x72\xf4\x0d\x0f\x75\x5e\x45\x8d\xd6\xdd\x25\xe0\xb6\x4e\x3e\x4a\xc3\xee\xf9\x26\x41\xc7\xb7\x57\x57\x97\x57\xd7\x11\xf6\xe7\x87\xff\x41\x20\x87\x07\x0b\xe7\xe7\x23\xb9\xdd\x98\xfd\x20\xb6\x52\x7a\xa3\x32\xb7\xad\x46\x92\x50\x1b\xac\x88\x8a\x2c\xd6\xec\x9a\x41\x3f\x6d\x07\xad\xe4\x16\x6c\x5d\x85\x87\xb8\x17\x7e\xcc\x3d\xb3\x5b\xeb\xb0\x84\xb9\x50\x5c\xa8\xc2\x82\x36\x50\x08\xb7\xac\xe7\xb3\x5c\x97\xdd\x9b\xc8\x78\x31\x12\x04\x6e\xa3\x1a\x39\x32\x53\xda\x85\x38\x30\xd2\x65\x3f\x7a\xe7\x85\x3a\x1c\xda\xfa\x20\xe7\x79\xd1\xe2\xfe\xa3\xcc\x94\x58\x4d\x9d\x94\x1b\x64\x2e\x66\x3d\xff\x54\x0c\x9e\x64\x2f\x12\x6d\x84\x5b\x82\x7f\x63\x6e\xe7\x6b\xaf\x68\x11\x8d\xd9\xed\xfc\xe3\x5d\x58\xcb\x35\x0f\x0b\xf4\x63\xa2\x47\x1e\x88\x14\xc2\xe3\xa8\x48\xfc\x41\x70\xfc\x93\x44\x5a\x20\xf2\x4c\xa8\xb5\x5e\xc5\x04\xfa\xb7\xcf\x54\x74\x59\x02\x99\x0f\x77\xb4\x0d\x36\x4b\xff\x96\xd7\x48\xda\x3e\x66\x85\xa5\x3f\x47\xda\x15\x6e\xbb\xc9\x5c\xc9\x14\x67\x4e\x9b\xb1\xa9\x63\x47\xe3\x87\x58\x1f\x5b\x63\xde\xd1\x35\x69\xf8\x4c\x62\x76\x3d\xd4\xd4\xb9\x7e\x37\x3c\x9e\x83\x93\xcb\x1c\xf8\x89\xf3\xa0\xa9\x9a\x04\xf5\x17\xa9\x14\xb6\x64\x2e\x8f\x3d\xea\xee\xdd\x23\xda\xc0\x3d\x04\x1f\xb9\x4e\x7e\xbd\x6d\xec\xb8\xc6\x30\xae\xf4\x20\xde\xad\x3e\x83\x11\x51\x39\x60\xb2\x77\xed\xc2\x6a\xab\xc6\xb8\x12\xcd\x54\x89\x8e\x17\x93\x22\x66\xb6\x8b\xb0\x4a\xd1\xa7\x71\x49\x37\x33\x27\xac\xe6\x37\xc9\xd2\x3f\x13\xef\x49\xa5\x8d\x97\x3d\x3c\xad\xfa\x3d\xe1\x67\x8a\x9d\x5b\x11\x27\x4c\x7d\x75\x8c\x40\x07\x76\xf5\x57\x21\x48\xf4\xcc\x42\x98\x1d\x06\x53\xe2\x67\x87\xca\xb6\x42\xe3\x67\xd7\xb6\xdb\x5f\xa2\x8a\xcd\x0a\x8c\x55\x2e\xfd\x55\x2e\x30\xbc\xd0\x36\x29\xa1\x7f\xa7\x68\x46\x80\xfd\x38\xca\xa2\x59\x8b\x7c\x70\x7d\x27\x05\xa9\x8d\x3c\xde\xe5\x61\xce\x48\x29\x6c\xb7\x83\xdb\xab\x1f\xbd\xf2\x7e\xf2\xe8\xcf\x20\xfd\x8b\x6c\x16\x08\xee\xd2\x32\x00\x09\x52\x32\xb9\xd0\xa6\x8c\x96\xda\xef\xda\xf5\x31\x09\x66\x70\x63\xb6\xc0\x0a\x26\xd4\x6c\x36\x09\xfb\x9b\xd5\xaa\x8b\x52\x79\xc9\x47\x5e\x86\xff\x73\x7d\xf9\x1e\x84\xaa\x6a\x07\x9c\x39\x06\xef\x1a\x6b\x3c\xcb\x4b\xfe\x8c\x62\xd6\x38\x12\xab\x44\x07\xb4\xc1\x79\x16\x0e\x4b\xec\x1b\x80\x47\x0e\x55\xfb\x60\xc1\x60\x83\xf3\xee\xe3\x84\xd7\x1f\x2e\x02\x59\x25\x88\x26\x67\x2a\xd4\x0f\x73\x0c\xa9\x12\x79\xf3\x9d\x44\xbf\x69\x06\x4d\x51\x57\x57\x9c\xb9\x83\xef\x0a\xe8\xc0\xe5\x5a\xad\xd1\xb8\x03\x78\xa7\x87\x3c\xa6\x0c\x3b\x54\xf7\x24\x55\xdb\xc3\xe6\x8f\xf8\x9e\x88\x49\x4a\xcf\x99\x45\x0e\x5a\x0d\xc3\xcd\x43\x56\x93\xa6\x10\x2a\x97\x35\xc7\x03\xf1\x98\xdd\xf3\x42\xd4\x18\x3f\xbf\xbe\x7a\x7f\xf1\xfe\xbb\xf4\x3a\xb4\xdd\x70\x5c\x25\xba\x61\x46\x65\xb9\x2e\x29\x83\x66\x06\x5d\x34\xcd\x5e\xd1\x5a\x3b\x33\xcc\x4b\xee\x75\x59\x38\x34\x21\xc5\xbf\x0a\xb1\x8d\x02\xc7\xdd\x98\x7f\x1b\x3c\xff\x68\x73\x74\xf0\x18\x7e\xb4\x30\x1c\x5d\x72\x74\x98\xbb\x89\xa1\x81\x47\xa6\xc2\x82\x63\x65\x30\x27\x4f\x67\x06\x2b\xc9\xf2\x68\xd0\xa0\xcc\x4b\x38\x5a\xf2\xa6\x9e\xf0\x6f\x64\xe1\x60\xec\x45\xaa\x20\xd3\x46\x48\x09\x56\x6b\x45\xa7\xa9\x87\x39\x83\xaa\x39\x29\x36\x54\x55\xbe\x18\xc6\xcd\x1e\x4f\xeb\x90\x25\x2a\xd0\x98\xe3\x94\x7a\xc8\x2e\x75\x2d\x39\x89\x67\xd1\xcd\x20\x4c\x81\xf7\x7b\x31\xa2\xf6\xbf\xc2\x3c\x28\x49\x22\x4f\x3f\xe1\x4f\x92\x2b\x20\x50\xea\x7b\x58\xa7\x51\x7c\xf2\xfb\x8f\x81\xa4\x5a\xcd\xb2\xf5\xa8\x07\xa7\x40\xfd\xfe\xd6\xab\xed\xd0\xa1\xfd\xa4\x69\xf8\x2d\xd3\xb4\x60\x52\x94\xc2\x65\xa2\x50\xda\x44\x45\x6a\xcf\x75\x13\x58\xfc\x16\x2f\x95\xff\x75\x58\x8b\x09\x0b\x0d\xbb\x54\xf4\x7c\xc9\x54\x81\x6c\x1e\xfd\x02\xe5\xc7\x0e\xb1\x2b\xfe\x6c\xab\xb7\xdc\x86\x79\x53\xc7\x63\x06\x17\x04\x4f\x05\x74\xc2\x59\xf0\x12\xd8\x4c\xea\x22\xb3\xe2\xf7\x98\x00\x52\x17\xd7\xe2\x77\x24\xdb\x86\x0d\x7b\x1a\xf7\x47\x94\x29\xff\x44\x49\xcd\xc6\x1c\xdd\x06\x51\xc1\x4b\xdf\x54\x7c\xf3\x32\x59\x94\x12\x4b\x6d\xb6\x63\xd2\x04\x8a\x53\x05\xfa\xe6\xdb\xbf\x7b\x91\xfe\xf6\xcd\xb7\xc9\x32\x51\xfd\xa5\xeb\x58\xf1\xd6\xac\x9e\x24\xcc\xcb\x60\x9f\xbf\xbe\xa4\xff\xa6\xe5\xf1\xe3\x81\xac\x32\xba\x42\xe3\x04\xc6\x46\xb8\x6d\x18\x1c\xc4\xab\x30\xb0\x73\x46\x60\x37\xb2\x0b\xb3\x86\x9e\x59\x3b\xda\x7b\x3c\x26\xb6\x21\x91\x6b\x7f\xe0\x28\x32\x0a\x07\xba\x76\x56\x70\xef\x88\x1b\xc3\xd6\xc2\xc2\xbc\x16\x92\x8f\xcf\x26\xbc\x2a\x21\x1c\x18\x3a\xb6\x49\xa1\xa0\x3b\xfd\x7b\x01\x41\x1d\x44\xf5\xc6\xda\x7e\xe2\x72\x7f\x3f\x6b\xfe\xda\x9a\x9b\x3a\x24\xa1\x9a\x46\x97\xfe\xc1\xf2\x89\xb2\xd9\x8b\xda\xf6\x22\xe1\x92\xc5\xc2\x44\xdb\x8a\x34\x54\x54\x50\x1c\x74\x25\x8f\x94\x29\xd1\xc6\xe3\xa4\x6e\xc3\x4b\xdb\xcc\x32\x7c\xa3\x8a\x9f\x85\x8d\x7e\xe1\xf7\xa0\x4d\xdd\x0b\x31\x4c\x1a\x64\x7c\x0b\x81\x45\x57\x3b\x59\x94\x98\x3b\x60\x4a\xbb\x25\x1a\xbf\x2d\x2a\xd2\x9b\xb7\xff\xbc\xfd\x2e\xb9\x1c\xf2\xd4\xc7\xd5\x42\x7c\x1e\xbe\xde\x5b\xa3\x11\x8b\x58\x1d\xf4\x93\x5f\x6c\x5a\x99\x87\x47\xa8\xd1\x6f\x3c\x56\x12\x50\xf7\x14\x13\xde\x6c\x27\x9f\xdc\x3c\xd5\xab\x29\xae\x83\x47\xa0\x51\xbe\xc3\xa7\xa0\x34\xce\x16\x99\xc9\x97\xc4\xb7\x99\xbd\x67\x5c\x18\xcc\x47\x06\x33\xd7\xed\x8e\x6e\x72\xdf\xed\x78\xf0\xf0\xdc\x5b\xb0\x37\xdd\x93\xbb\x27\xff\x0b\x00\x00\xff\xff\x62\x1d\x5d\xef\x1b\x32\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 12827, mode: os.FileMode(420), modTime: time.Unix(1518559473, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1518211603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1518211603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1518211603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1518211603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1518211603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1518211603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1518211603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1518211603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json":   wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json":   wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json":   wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json":   wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json":   wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json":   wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json":   wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json":   wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": {nil, map[string]*bintree{
		"resources": {nil, map[string]*bintree{
			"de_DE.all.json":   {wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json":   {wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json":   {wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json":   {wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json":   {wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json":   {wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json":   {wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json":   {wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": {wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": {wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
