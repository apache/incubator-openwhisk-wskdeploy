// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x6f\x1b\x37\xf2\x7f\x9f\x4f\x31\x08\xfe\x40\x5a\xc0\x51\xd2\xfe\x71\xc0\x21\x80\x71\xc8\x5d\xd2\x36\xd7\x26\x0e\xec\xf8\x8a\x22\x35\x36\xd4\x72\xb4\xcb\x6a\x97\x5c\x90\x5c\x2b\xaa\xa1\xef\x7e\x18\x92\xfb\x20\xd9\xdc\xa5\x94\x06\xd7\x37\x55\xcc\xe1\xcc\x6f\x66\xc8\x79\xe2\x7e\x7c\x04\x70\xf7\x08\x00\xe0\xb1\xe0\x8f\x5f\xc0\xe3\xda\x14\x59\xa3\x71\x25\x3e\x67\xa8\xb5\xd2\x8f\xcf\xfc\xaa\xd5\x4c\x9a\x8a\x59\xa1\x24\x91\xbd\x76\x6b\x8f\x00\x76\x67\x13\x1c\x84\x5c\xa9\x08\x83\x37\xb4\x34\xb7\xdf\xb4\x79\x8e\xc6\x44\x58\x5c\x85\xd5\x39\x2e\x1b\xa6\xa5\x90\x45\x84\xcb\xaf\x61\x35\xca\x25\xaf\x79\xc6\xd1\xe4\x59\xa5\x64\x91\x69\x6c\x94\xb6\x11\x5e\x97\x6e\xd1\x80\x92\xc0\xb1\xa9\xd4\x16\x39\xa0\xb4\xc2\x0a\x34\xf0\x8d\x58\xe0\xe2\x0c\xde\xb3\x7c\xcd\x0a\x34\x67\xf0\x32\xa7\x7d\xe6\x0c\x3e\x68\x51\x14\xa8\xcd\x19\x5c\xb6\x15\xad\xa0\xcd\x17\xdf\x02\x33\xb0\xc1\xaa\xa2\xff\x6b\xcc\x51\x5a\xb7\xe3\xd6\x49\x33\x20\x24\xd8\x12\xc1\x34\x98\x8b\x95\x40\x0e\x92\xd5\x68\x1a\x96\xe3\x22\x59\x17\xa5\x62\x9a\xbc\x04\xab\x54\x05\x56\x05\x45\xce\xa0\x95\xfe\x17\x30\xc9\xc1\x6c\x65\x0e\xaa\x41\xb9\x29\x85\x59\x43\x13\x74\x82\xd6\x08\x59\x00\x83\x9a\x49\xb1\x42\x63\x1d\xb1\x6a\x88\x2b\xab\x02\xab\x9a\x34\x59\x89\xaa\x27\xff\xed\xe5\xdb\x5f\x52\x30\x9b\x52\x69\x3b\xed\x80\xf7\x5a\xdd\x0a\x8e\x06\x18\x98\xb6\xae\x99\xde\x82\xa7\x07\xb5\x82\x4d\xc9\xec\x13\x03\x4b\xc4\x91\x7b\xbe\xcc\x8c\x01\xd2\xac\x1d\x0d\x5a\xb2\x65\x89\x55\x13\x44\xc3\x56\xb5\x3a\xc9\x84\x64\xaa\x74\x2c\xb7\xa8\x0d\xc9\x8e\xd9\x47\x48\xeb\x14\x0e\x74\x20\xdb\x7a\x89\xda\x99\xc7\xac\x3d\xb4\x69\x59\xab\x8a\x15\x19\x6b\x44\x56\x2a\x13\xd3\xda\xab\xf4\xf2\xfd\x1b\xf8\xf4\xd3\xc5\xd5\x87\x4f\x89\x1c\xa7\xb1\x8f\x98\xfe\xe7\xf5\xe5\xd5\x9b\x8b\x77\x49\x7c\x5b\x5b\x66\x6b\xdc\x46\x98\xd2\xb2\xd2\xe2\x4f\xf7\x07\xf8\xf4\xf3\xeb\xdf\x52\x98\xe6\xa8\x6d\x46\x7e\x89\x70\x6d\x98\x2d\xc9\xa4\x64\xe8\x05\x11\x3b\x27\xa6\x30\x56\x72\x25\x62\x91\xca\x2f\x3a\x56\xf0\x0d\xc7\x15\x6b\x2b\x0b\xc2\xc0\xff\xfd\x74\xf1\xf6\xf5\xb3\xc5\xc6\xac\x1b\xad\x1a\xf3\x6d\x8a\x55\xaa\x4a\x6d\xb2\xc0\x23\x16\x5f\x1d\x11\xf4\x44\xf3\x5c\x87\xfb\x3d\x65\x97\x3e\xa6\xf4\x81\x20\x81\xb5\x90\x16\x35\xa3\xf0\x17\xb3\xb9\x47\x3b\xa2\x83\x46\xab\xba\x49\x02\xbe\xc6\x6d\xb2\x3b\xd7\xb8\x4d\x05\xed\xad\x5c\x33\xc9\x0a\xe4\x93\xb0\x1b\xad\xfe\xc0\xdc\x0e\xc9\xc2\x2a\x58\x22\xd4\x4c\xaf\x91\x43\xc7\x61\x5e\x62\x17\x34\x66\xec\xbf\x17\x5b\x12\xd8\xf6\x31\x31\xc2\x77\x58\x9f\xe7\x15\x54\x9d\x41\x68\x50\xdf\xa2\xae\xd0\x98\xce\x36\x09\xac\x8d\xd5\x22\xca\xd9\x1b\xba\x35\xa8\xe9\x48\x0b\x89\x1c\x74\x2b\xad\xa8\xfb\x58\x98\x20\xc1\xaa\xa2\xa8\x30\xa3\x38\x1e\x11\xf3\xc1\x51\xc0\x4f\x14\xe9\x6b\x34\x86\x15\xe9\x27\xe5\x16\xf5\x52\x99\x98\x91\xc3\x2a\xa8\xd6\x36\xed\x94\x39\x5c\x98\xc8\x6a\x61\x28\x93\xb8\x00\x18\x8f\x7f\x1f\x4a\x04\xa2\xa0\x83\x97\xfb\x20\x48\x07\x5c\x18\x90\xca\x82\x67\xd5\x6a\xe4\x8b\xdf\xa7\xcc\x73\x20\xb1\x11\x13\xb9\x81\x24\x52\x10\x27\x92\x2f\x93\x33\x77\x2a\x49\x52\x4f\x73\x9a\xa8\xa0\xca\x54\x21\x7b\xa8\xcf\xc7\xbb\xbb\x05\xfd\xde\xed\x6e\xce\x60\xa5\x55\x0d\x77\x77\x0b\xa3\x5a\x9d\xe3\x6e\x97\x24\xd3\x3b\x6c\x4e\x26\x91\x75\xbe\x32\x68\x4f\x93\xd5\x9b\x67\x4e\xda\x9e\x1d\x49\xc5\xfe\x0f\xa7\xeb\xd9\x88\x62\x93\x31\x57\xc3\x67\x56\xad\x51\xce\xaa\x4c\x3b\xc0\xef\x00\xb7\xe3\x34\xe5\x5b\x59\x33\x6d\x4a\x56\x65\x95\xca\x59\x15\x91\x78\xdd\x51\xc1\x45\x83\xf2\x57\x57\x7d\x84\x88\x61\xbc\x3c\xb7\x1b\x6e\x59\xd5\xa2\x49\x14\x28\xd1\x6e\x94\x5e\x9f\x2c\xd2\xe5\x37\x89\x16\x98\x25\x75\x5b\x5d\xcd\xe8\x3a\xa4\xda\x2c\x67\x32\xc7\xaa\x8a\xa6\xa2\x8b\x9f\x17\xf0\x2f\x4f\x43\x25\xe8\xb0\x33\x55\xc0\x8a\x89\x38\xf7\x57\x43\xce\xe7\x82\x87\xbb\x58\x37\x15\x5a\x04\xd3\x92\x4b\x57\x6d\x55\x6d\x17\x70\xd9\x4a\xf8\xd4\x17\xa3\x7d\xdf\xf1\x89\xd2\x82\xc6\x5a\x51\x66\x67\xda\x0a\x56\x55\xdb\xa1\x8e\x67\xc6\xa0\x9d\xf6\xc2\x08\xa9\x6f\x0a\x32\x63\x99\x6d\x63\xe5\xcf\xd3\xa7\x4f\x9f\x9e\x9f\x9f\x9f\x8f\x7c\x31\xd2\xe1\xca\x6d\x05\x22\x20\xc2\x24\xa9\xae\x9d\x45\x9e\x62\xa2\xce\x34\x1c\x42\x0f\xec\x8d\x33\x7d\xc8\x4e\xf7\xf5\x78\x6f\xba\x90\x49\x7f\x5f\x8f\x28\xa7\x3d\x9e\x2c\x6f\xce\x7e\x7b\x22\x4f\xb0\x60\x57\x16\x65\xae\x07\x9b\x2f\x67\xaf\x5d\xab\x46\xd1\x90\xca\x96\xdd\xee\x06\x56\x4a\xa7\xde\x9b\x03\x61\x63\x45\x8f\x12\x97\xec\x3a\x57\x5b\x6e\xb3\xee\xc6\xcc\x0c\x57\xee\xee\xa8\xd2\xdd\xed\xfa\x60\x4f\xf2\x4a\x16\xda\xe7\xb1\x49\xfb\x3b\x98\x2e\x3d\x3e\x8d\x79\xd5\xad\xc3\x83\x00\x16\x8b\x89\x4e\x38\x88\xe8\x0c\xf2\x57\xaa\x38\xf0\x4c\x51\xb2\xa3\x8e\xab\x79\x3d\x50\x9c\xa0\x28\xc7\x06\x25\x47\x99\x1f\x63\xcf\x61\xd3\x58\xd0\x71\x72\x86\x5b\x18\x35\xea\xab\x07\xc5\x7c\xc9\xc9\x79\x18\x05\xc5\x9e\x56\xc7\x4a\xbf\x51\x24\x55\xab\x88\xea\xff\xc3\x34\xd4\xe9\x73\xdc\x41\xf9\x32\x0f\xde\x8f\xa4\x7f\x8d\x0f\x13\xaf\x46\x0c\xc9\xb4\x1f\xf7\x22\xfa\x89\x9e\x9c\x09\xc2\xd4\x59\x9f\x9a\xd6\x1c\x22\x9f\x64\xfa\xce\x7d\x0a\x0b\xf0\x56\x93\x27\x83\xd8\x71\xaa\xf8\x7a\xe7\xad\xd3\x71\xa5\x5a\xc9\xb3\x80\x37\x84\xaa\xe8\x01\xa8\xd0\x46\x63\xd3\xa6\x14\x79\x09\x1b\x37\x96\x26\x5c\xdc\x97\xa6\xb6\x44\xc8\x5b\xad\xc9\x30\x9d\x82\xdd\x5c\xc3\x25\x2d\xff\x9b\x38\x30\xe3\x74\x21\xfb\x25\xa7\x2f\x3f\xcd\x99\x69\x2e\x7f\x97\xef\x2b\x64\xc6\xcd\x7e\x6e\x05\x47\x07\x8a\xe8\x09\xbb\x4b\x97\x7d\x31\xf7\x02\xe6\x65\x4d\xb6\xce\xf7\x64\x31\x79\xd8\x4a\xbb\x1e\x25\x41\x50\x98\xbb\x46\x9c\xa1\x60\xab\x5a\xd0\xe8\x3c\xbf\x61\xd2\x0e\x23\x34\xb0\xa5\x30\xff\x80\x6f\xb6\xcf\xde\x7d\x9b\x20\x67\xae\x63\xbe\xaf\xd2\xa8\xf1\xfb\xd8\x8d\x1c\x5d\xc3\x43\x9d\x57\xd1\xa2\xb1\x37\x09\x72\x3b\x27\x1f\xa5\x61\xff\xe0\x90\xa8\x63\x80\x97\x85\x49\x7a\x6c\x02\xee\x57\x9d\x5e\x30\x1a\xa2\x6a\x74\x23\x27\x7e\x06\xac\x1a\xb7\x5f\xfd\xbd\x26\x38\xba\xdf\x11\x84\x00\xd3\xd8\x5f\xc6\x67\x43\x28\x04\x2e\x34\xe6\x36\x84\x47\xed\x87\xfd\x73\x2f\x0b\xaf\x2f\x2f\x2f\x2e\xaf\x22\xb8\xcf\x0f\xff\x03\x4f\x0e\xf7\x16\xce\xcf\x27\x0a\x14\xad\xf7\x23\xf1\x5a\xaa\x8d\xcc\xec\xb6\x99\xc8\xa4\x5d\xc4\x25\x2a\x32\x55\xd8\xb5\x80\xe1\xc9\x00\x94\xac\xb6\x60\xda\xc6\xbf\x7f\x3d\x73\xb3\xfa\x85\xd9\x1a\x8b\x35\x2c\x85\xe4\x42\x16\x06\x94\x86\x42\xd8\xb2\x5d\x2e\x72\x55\xf7\x2f\x1e\xd3\x15\x95\xd6\x5d\x55\x95\x6b\x64\x36\x06\xd3\xbd\x47\x82\x23\xd9\x8b\x5b\x1b\x61\x4b\x70\x0f\x99\xdd\x34\xee\x05\x2d\xa2\xd6\xbb\x9d\x7b\x9c\xf2\x6b\xb9\xe2\x7e\x81\x7e\xcc\x74\xd4\x23\x48\x3e\x98\x4e\x42\xe2\xf7\x42\xe9\x57\x82\xb4\x42\xe4\x99\x90\xb7\x6a\x1d\x03\xf4\x83\xcb\x6b\x74\xb5\x3c\x99\x0b\x8e\xb4\x0d\x36\xa5\x7b\x12\x0b\x48\xad\x7f\x8e\x0c\x4b\x5f\x07\xed\x1a\xb7\xfd\x1c\xaf\x66\x92\x33\xab\xf4\xd4\x8c\xb2\xa7\x71\x23\xaf\x8f\x9d\x31\x6f\xe8\x3c\x06\x3e\xb3\x32\xfb\x8e\x4b\x2a\xeb\xb3\x61\x44\xe0\xdb\xf1\x78\xdc\x25\x73\x47\x0d\x8c\xee\xbd\x2d\xc7\x2d\xd8\xac\x50\xba\xf4\xa4\x69\xcd\x6c\x5e\x4e\x28\xd8\x1f\x0f\xda\xc0\x9d\x08\xde\x25\x5c\x21\x0f\x5f\x4c\xfc\x7a\xd7\x06\x72\x85\x7e\xb8\xe9\x84\x38\xb7\xba\xf0\x46\x44\xf5\x88\xc9\xde\xd8\xdf\xaf\x76\x6a\x4c\x2b\x11\x66\x50\x74\xbc\x58\x25\x62\x66\x7b\xe3\x57\xe9\x9a\x07\x97\xf4\x13\x76\x92\x15\x7e\x13\x96\xe1\xb5\x75\x0f\x95\xd2\x0e\x3b\x73\xef\xe2\x6e\x8f\xff\x99\x62\xe7\x0e\xe2\x8c\xa9\x2f\x8f\x01\x74\x60\x57\x77\x15\x3c\xa2\x27\x06\xfc\xa4\xd1\x9b\x12\x3f\x5b\x94\xa6\x03\x8d\x9f\x6d\xd7\x9c\x7f\x89\x2a\x26\x2b\x30\x56\xe7\x0c\x57\xb9\x40\xff\x9e\x1b\x62\xef\xf0\xaa\x11\x06\x86\x43\x26\xa3\xfc\x26\xf2\xd1\xf5\x9d\x05\xd2\xea\xea\x78\x97\xfb\xa9\x24\xe5\x8a\xdd\x0e\xae\x2f\x7f\x71\xca\xbb\x39\xa5\x3b\x83\xf4\x2f\xb2\x99\x27\xb8\xf1\xaf\xdb\x29\x40\x6a\x56\xad\x94\xae\xa3\x85\xf9\xdb\x6e\x7d\x0a\xc1\x02\x3e\xe8\x2d\xb0\x82\x09\xb9\x58\xcc\x8a\xfd\xc3\x28\xd9\x47\xa9\xbc\xe6\x13\xef\xc8\xff\xbe\xba\x78\x07\x42\x36\xad\x05\xce\x2c\x83\xb7\xc1\x1a\x4f\xf2\x9a\x3f\xa1\x98\x35\x2d\x89\x35\xa2\x17\xb4\xc1\x65\xe6\x0f\x4b\xec\x9b\x82\x07\x0e\x55\xf7\xbc\xc1\x60\x83\xcb\x70\xec\xce\xdc\xbb\x84\x23\x6b\x04\xd1\xe4\x4c\xfa\x44\xbd\x44\x9f\x2a\x91\x87\xcf\x0d\x86\x4d\x0b\x08\x25\x60\xdb\x70\x66\xf1\x20\x66\x58\x05\xb9\x92\xb7\xa8\xed\x81\x78\xab\xc6\x3c\xe6\x0c\x3b\x56\xf7\x24\x55\xbb\xc3\xe6\x8e\xf8\x1e\xc4\x24\xa5\x97\xcc\x20\x07\x25\xc7\xe1\xe6\x3e\xab\x59\x53\x08\x99\x57\x2d\xc7\x03\x78\xcc\xec\x79\x21\x6a\x8c\x5f\x5f\x5e\xbe\x7b\xf3\xee\xc7\xf4\x82\xaf\xdb\x70\x5c\xc9\xb7\x61\x5a\x66\xb9\xaa\x29\x83\x66\x1a\x6d\x34\xcd\x5e\xd2\x5a\x37\x61\xcc\x6b\xee\x74\x59\x59\xd4\x3e\xc5\xbf\xf0\xb1\x8d\x02\xc7\xcd\x94\x7f\x83\x3c\xf7\xc4\x73\x74\xf0\x18\x7f\xe2\x30\x1e\x74\x72\xb4\x98\xdb\x99\x11\x83\x93\x4c\x85\x05\xc7\x46\x63\x4e\x9e\xce\x34\x36\x15\xcb\xa3\x41\x83\x32\x2f\xc9\x51\x15\x0f\xf5\x84\x7b\x51\xf3\x07\x63\x2f\x52\x79\x4c\x1b\x51\x55\x60\x94\x92\x74\x9a\x06\x31\x67\xd0\x84\x93\x62\x7c\x55\xe5\xda\x65\xdc\xec\xf1\x34\x16\x59\xa2\x02\xc1\x1c\xa7\xd4\x43\xa6\x54\x6d\xc5\x09\x9e\x41\xbb\x00\x3f\x33\xde\xef\xdc\x88\xda\xfd\xf2\xd3\xa3\x24\x44\x8e\x7e\xc6\x9f\x84\xcb\x4b\xa0\xd4\x77\xbf\x4e\xa3\xf8\xe4\xf6\x1f\x23\x92\x6a\x35\xc3\x6e\x27\x3d\x38\x27\xd4\xed\xef\xbc\xda\x8d\x28\xba\x0f\xa0\xc6\x5f\x3e\xcd\x03\xab\x44\x2d\x6c\x26\x0a\xa9\x74\x14\x52\x77\xae\x43\x60\x71\x5b\x1c\x2a\xf7\xeb\xb0\x16\x13\x06\x02\xbb\x54\xe9\x79\xc9\x64\x81\x6c\x19\xfd\x5e\xe5\x97\x5e\x62\x5f\xfc\x99\x4e\xef\x6a\xeb\xa7\x53\x3d\x8f\x05\xbc\x21\xf1\x54\x40\x27\x9c\x05\x87\xc0\x64\x95\x2a\x32\x23\xfe\x8c\x01\xa8\x54\x71\x25\xfe\x44\xb2\xad\xdf\xb0\xa7\xf1\x70\x44\x99\x74\x0f\x9a\xd4\x6c\x2c\xd1\x6e\x10\x25\x3c\x77\x4d\xc5\x77\xcf\x93\xa1\xd4\x58\x2b\xbd\x9d\x42\xe3\x29\x4e\x05\xf4\xdd\xf7\x7f\x77\x90\xfe\xf6\xdd\xf7\xc9\x98\xa8\xfe\x52\x6d\xac\x78\x0b\xab\x27\x81\x79\xee\xed\xf3\xff\xcf\xe9\xbf\x79\x3c\xae\x0f\xcf\x1a\xad\x1a\xd4\x56\x60\x6c\xe0\xdb\x85\xc1\x51\xbc\xf2\xe3\x3d\xab\x05\xf6\x03\x3e\xdf\xd4\x0f\xcc\xba\x41\xe0\xc3\x31\xb1\x0b\x89\x5c\xb9\x03\x47\x91\x51\x58\x50\xad\x35\x82\x3b\x47\x7c\xd0\xec\x56\x18\x58\xb6\xa2\xe2\xd3\x43\x00\xa7\x8a\x0f\x07\x9a\x8e\x6d\x52\x28\xe8\x4f\xff\x5e\x40\x90\x07\x51\x3d\x58\xdb\x8d\x36\xee\xee\x16\xe1\xaf\x9d\xb9\xa9\x43\x12\x32\x34\xba\xf4\x0f\x96\xcf\x94\xcd\x0e\x6a\xd7\x8b\xf8\x4b\x16\x0b\x13\x5d\x2b\x12\xa8\xa8\xa0\x38\xe8\x4a\x1e\x28\x53\xa2\x8d\xc7\x49\xdd\x86\x43\x1b\x66\x19\xae\x51\xc5\xcf\xc2\x44\xbf\x07\xbc\xd7\xa6\xee\x85\x18\x56\x69\x64\x7c\x0b\x9e\x45\x5f\x3b\x19\xac\x30\xb7\xc0\xa4\xb2\x25\xfa\x19\xd8\x3c\xa4\x6e\x34\x34\xdb\xa9\x87\x54\x78\xd0\xd5\x76\x55\x43\xae\xa4\x65\xee\x4b\x2f\xa9\xd2\xc6\x4d\x4e\xfa\xe8\x29\xc0\x19\x25\x05\xc4\x83\x83\xf2\x90\x71\x0e\x7b\x77\xba\x5a\xc3\x50\x21\x10\xed\x57\x9e\x31\x8c\xaf\x5e\xff\xf3\xfa\xc7\xe4\x82\xd1\x51\x1f\x57\x2d\xf2\x65\x31\x7e\x95\xf2\x8f\xd3\x09\x6f\x53\x8e\xee\xc5\xe4\x03\xd0\xb2\xc8\x0c\x32\x9d\x97\xc4\x37\x3c\x06\x64\x7e\x4e\x1a\x9f\xfd\x5c\x75\x3b\xfa\xa7\x84\x7e\xc7\xbd\x97\xf0\xe1\x9e\xcf\x64\x32\x82\x72\xe8\xe4\xbf\xda\xc1\x27\x38\xb7\x83\xd6\x9f\x7e\xff\x62\x33\xf1\x75\xf9\xab\x07\xa6\x42\xc1\x22\x2f\xe0\x07\x87\x60\xf8\xae\xdc\x0d\xa2\x89\xd9\xb1\x00\xa6\xbf\xd8\x3c\x1e\xc3\xf8\x51\xa8\x7b\xc4\x0c\x90\x1e\xdd\x3c\xfa\x6f\x00\x00\x00\xff\xff\x48\x42\xce\x0b\x92\x32\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 12946, mode: os.FileMode(420), modTime: time.Unix(1520527832, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

