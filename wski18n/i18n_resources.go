// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdf\x6f\xdb\x38\x12\x7e\xcf\x5f\x31\xc8\x8b\x5f\x02\x5f\xbb\x87\x03\x0e\x7d\x0b\xae\xdd\xbd\x60\xb7\x49\x90\xe4\xb6\x58\xec\x15\x09\x2d\x8d\x2c\xae\x25\x52\x20\xa9\xa4\xae\xe1\xff\xfd\x40\x52\xb2\xec\x84\xa2\x28\x59\x76\x82\xe2\xf2\xa4\x58\x9a\xef\xfb\x66\xf8\x6b\x86\xa2\xfe\x3c\x01\x58\x9d\x00\x00\x9c\xd2\xf8\xf4\x03\x9c\xe6\x72\x7e\x5f\x08\x4c\xe8\xb7\x7b\x14\x82\x8b\xd3\x33\x7b\x57\x09\xc2\x64\x46\x14\xe5\x4c\x3f\xf6\xc9\xdc\x3b\x01\x58\x9f\x79\x10\x9e\x88\x60\x94\xcd\x5b\x30\xbe\x54\x77\xbb\x50\x64\x19\x45\x28\x65\x0b\xca\x6d\x75\xb7\x0b\x85\xb2\x84\xb7\x40\x5c\xe8\x5b\x4e\xfb\xcf\x54\x4a\xca\xe6\x10\xe5\x31\x2c\x70\xd9\x62\x5f\x3f\x35\x89\xf2\x78\x02\x94\x15\xa5\x32\x4f\x3b\x21\x49\xa9\x52\x2e\xe8\x77\x63\x0d\x0f\xbf\x7e\xfa\xe3\xa1\x05\xd6\xf5\xa4\x13\xf2\x29\xa5\x72\x01\xe7\xd7\x17\xf0\xf0\xef\xab\xdb\xbb\x36\xbc\x17\x8f\x39\xc1\x18\xc9\x51\x16\x24\xc2\x16\x94\xe6\x7e\x97\x96\xdf\x3f\xdd\xdc\x5e\x5c\x5d\x06\xc8\xd9\x3c\xe9\x6e\x44\xc2\x68\x82\x52\xdd\x33\xae\xee\x13\x5e\xb2\xf8\x9e\xa8\xfb\x82\xa8\xb4\xad\x3d\x2a\x03\x48\x68\x86\xc0\xb8\x02\x63\x05\x44\x81\xb6\x82\x3f\x57\xab\xa9\xbe\x58\xaf\xbf\x4e\xff\xcb\xfc\x2d\xbf\x5a\x4d\x97\x24\xcf\xd6\xeb\xbf\xe9\x2b\x7d\x61\x50\xa7\xd0\x45\xa2\x39\x04\xff\x0b\x23\x75\x6d\xa8\x34\x93\xbf\xfb\x8c\x4a\xe5\x76\x6a\x07\x88\xca\x5d\x2c\x95\x62\x13\x1f\xfd\xc4\x75\x13\xa3\x90\x40\xf7\xc1\x73\xca\xfb\x4f\x1d\x86\xba\xc5\xad\x01\x24\x5c\x40\x8c\x45\xc6\x97\x39\x32\xd5\x2e\x27\xdc\xbe\x37\x7d\xc9\xf6\x15\xf0\x1c\xc1\x29\x41\x87\x4c\x94\x4c\xd1\x7c\x13\x4e\x59\x16\x05\x17\x0a\x63\x98\x2d\xe1\xaa\x40\x66\xc7\x4d\x91\x11\x95\x70\x91\xb7\x8b\x19\x86\xe5\x94\xf5\xe5\xfc\xe6\xf2\xe2\xf2\x97\x0f\x70\x53\xe1\xc9\x02\x23\x9a\x50\x8c\x81\x32\xa8\x9d\x85\x3f\xce\x3f\xff\xa6\xbd\xaf\x58\xd7\x6b\x88\x39\x5a\xe6\x9c\xa8\x28\x85\x27\xaa\x52\x20\x91\x99\xcf\x24\x2f\x45\x84\xb6\xe7\xe0\x37\x85\x4c\xea\x5f\x57\xab\x29\x7e\x53\x55\xc8\xaa\x27\x57\xab\xa9\xbd\xf2\x0d\xa2\x37\x25\xd1\x1f\xc4\x2f\x26\xe8\x1f\x4d\x6f\x80\x94\x48\x88\x52\x2e\x91\x01\x29\x0a\xc1\x0b\x41\x89\x6a\x1a\x6e\x47\xea\x8c\x48\x8c\x81\x33\x33\xb2\xbc\x1a\xb5\x34\x95\x12\x35\x2c\x84\xaf\x2f\x70\xdc\x5e\xd8\xd6\xfb\xad\x9f\x12\xc5\x23\x8a\x4a\x11\x1e\xa7\xd3\x8d\xa0\xc8\x3d\x85\xb1\x06\xb2\x6e\x21\xb5\x2c\xf0\x0c\x24\x2a\x50\x1c\x18\x8f\xf1\xaf\xb6\x54\x2a\xd4\xda\x49\x7d\xa7\x95\x96\x2a\x45\xa6\x68\x64\x53\x96\x05\x2e\x6b\x4f\x23\xce\x12\x3a\x2f\x05\xc6\xed\xd1\xec\x83\xd0\x2a\x41\xe7\x13\x29\x97\xaa\x2f\xb1\xdf\xae\x95\x6e\x93\x0d\xf5\xe5\xeb\x30\x0c\xf2\x4f\xf7\x88\x82\xea\xff\xd6\xeb\x33\x48\x04\xcf\xab\x9f\xec\x98\xf3\xf5\xdc\x41\x50\xde\x76\xaf\xdb\x4a\xa2\xda\x02\x28\x55\x1a\x26\x26\x18\x22\xac\x29\x56\xab\xe9\xe6\xff\x6d\x8f\x36\x3f\x86\xa9\x1a\x8e\xe9\x94\xf9\x33\xa1\x19\xc6\x7a\x24\xcd\xd1\xe6\x47\x2f\x06\x9c\xb4\xb0\xbb\x93\x01\x8d\xf0\x83\x59\x77\x84\xf0\x29\x1e\x0d\xde\x29\xfe\x56\x11\x61\x66\x81\x92\xe5\x44\xc8\x94\x64\x5b\x29\x84\xae\xae\x2c\x74\xc6\x23\x92\xc1\x23\xc9\x4a\x94\xed\x52\x07\x82\xb5\x4c\x7a\x3e\x08\xca\x14\x0a\x86\xbe\xac\x2d\xd8\xde\x49\xff\x71\x93\xd6\x41\xc4\xf3\x22\x43\x1d\xee\xaa\x66\x4d\xca\x2c\x5b\xb6\x33\x07\x99\x3a\x49\x7f\xe1\x0a\x4c\x7d\x0e\x91\x40\xa2\x74\xda\x59\x90\x68\x41\xe6\x68\x33\x18\x7b\x2f\x47\x29\xc9\x7c\xab\x71\x81\xb0\xb8\xb6\xe3\xb1\xbd\xa1\x2f\x7c\xbd\xea\x20\x54\xa1\x4e\x55\x6b\xdf\x8f\xe5\x53\x41\x8f\xe1\xd0\x7e\x34\xa1\xce\x88\x32\x3b\x4a\x97\xdb\x93\xa7\xc3\x1d\x89\xca\xb0\x98\x39\x53\x11\x55\x4a\xe0\xc9\xa1\x7d\x3b\x08\x69\x68\xbb\x29\x41\xe7\x73\x14\xc7\x68\xba\xfd\xa9\xfa\x3a\x95\x20\xc6\xc7\xf4\x6c\x4f\xbe\xbe\x33\xfc\x8c\xb2\x58\xff\x7f\xc4\x59\x71\x7f\xca\xae\xb5\x93\x27\x10\x63\x81\x2c\x46\x16\x2d\xb5\x69\x8c\xc5\x25\xb1\x25\x3a\x8d\xab\x14\xd9\xae\x91\x7a\x89\xdc\xac\x90\xba\xf6\x82\x87\x27\xb9\xb0\xdb\x2b\x9b\x7d\x96\x07\x9d\x5d\x08\xcc\xf9\x23\x42\x41\x84\xa2\x24\xcb\x96\xd5\x36\x10\xc6\x40\xa4\x44\xe5\x49\x50\xde\x82\x32\x4f\xc8\xb6\xd6\xc6\xd5\x6a\xca\x4b\x55\x94\x6a\xbd\x86\xe9\x74\xea\xf5\xc7\x63\xd6\x41\x66\xa6\xa5\xbe\x54\x4e\xa3\x0e\xa2\x9d\x31\xd5\x97\xd0\x6b\xdc\x41\x5c\x77\xf5\xbe\x9c\x6d\x76\x81\x74\xf5\xc8\x1a\x4a\xdb\x66\xdf\x41\xbf\xdb\xa3\x7b\x31\x7b\x4c\x9d\xa4\x57\xbf\x4e\xe1\x5f\x84\x45\x98\x65\x95\x79\xe7\x46\xaa\xd7\xa4\x83\x44\x1b\x84\x6d\xd7\xfa\x6d\x5a\x6a\x8d\xe6\x21\xff\xe8\xf7\x94\x1b\x3d\x20\xba\x66\x4d\x3b\x8d\x0c\xa8\x37\xda\x0c\xdf\xae\xd7\x35\xc2\xcb\x2e\xd8\xcc\xc7\xed\xdd\x37\xd4\xba\xdb\xff\xa1\xcb\x41\x58\x68\xf6\x40\xef\x48\x23\x62\xcc\xf0\x38\x35\xd5\x78\x4c\xa1\x2e\x1d\x38\x53\x1f\x8b\xe7\xff\x55\xc8\xb3\x78\x1e\xbe\x0a\x19\x91\xaa\xaf\x53\x07\xae\x42\xc6\xe6\x0b\x75\xef\xf0\xfb\x4c\x23\x52\xf9\x5f\x24\xdd\xa5\x08\x13\xbb\x6b\x3b\xb1\x6f\x69\xcc\x0e\x34\xdb\x84\x14\x99\xa2\xca\xec\x49\xc7\x58\x08\x8c\x88\xc2\x78\x0a\xd7\x19\x12\x89\x50\x4a\x84\x89\x0e\xfa\x04\x28\x93\x0a\x89\xce\xdd\x21\x46\x19\x09\x3a\xb3\xaf\x80\xaa\xf7\x41\xf6\x6d\x86\xa7\xda\x78\x4d\x45\xa1\xed\x5e\x27\x9a\x47\x6c\xff\xf1\x28\xdb\xf2\x28\x57\x22\x9b\x12\x09\x33\x44\xb6\x93\x1b\x6d\xea\x33\x6f\x76\x35\x0c\xce\x29\xee\xda\x93\xdf\x0f\x55\xb8\x1f\xa6\x57\xe6\x98\xf2\x46\x90\x75\x57\x0d\x97\x31\x64\x0d\xc3\xf2\xca\x7a\x51\x9f\xee\xab\x6d\x00\xa0\x53\xe0\xcd\xf3\x8a\x7d\xa8\xb0\x01\x40\x4e\x41\xe7\x2f\x77\x2b\x86\x4a\x1a\x04\x15\x30\x71\x34\x19\xba\x1b\xae\x2e\x2c\xc3\xe7\x8e\x7e\x88\x5d\x03\xa0\x5a\x3a\xb6\xd1\xaa\xea\x2f\xa8\xcf\xfb\xcd\xbd\xbd\x48\x67\x91\xbd\x68\x03\x0c\x3b\x7a\x49\x7d\x44\xa2\x07\x69\xa0\x71\xc7\x1b\x5d\xca\x1e\xf9\x02\x4d\x1a\x6d\x13\xb1\x14\xd9\x91\x72\xc2\x23\x8b\xf0\xe7\x54\x9f\x09\x8b\x89\xe2\x62\x09\x09\xc5\x2c\x86\x7a\x52\xff\x1d\x85\x39\xf9\x93\x97\x52\xc1\x0c\x75\xdd\x11\x90\x0f\xf5\x44\xf3\x4b\x7b\x6e\x5c\x9f\xc2\x21\x8f\x36\x37\xd2\x61\x8b\x4a\x21\x74\x1d\xde\x6c\xdb\x3e\xda\xa7\x03\xc4\xee\x8d\x3f\x2c\xb2\xbf\xd1\x08\x99\xc4\x91\x22\xdb\x82\x16\x16\xd9\xda\xf8\x50\x91\x1d\x8c\xef\x97\x5f\xc3\xae\x56\xd3\xcc\x5e\x5e\x7c\x6c\x4e\x69\x11\x78\x24\x19\x8d\x81\x33\x0c\x90\xda\x0b\xcb\x7d\xde\x19\x73\x2e\x96\xb7\xf4\x3b\xea\x4a\x3c\xa3\x39\x55\x72\xe7\x3c\x99\x4c\x79\x99\xc5\xba\x71\x08\x33\xe7\x13\xf4\xa0\x9e\xa1\x7a\xd2\x33\xd6\xfb\x9f\xfe\x69\x86\xef\x3f\xde\xff\xd4\xae\x76\x54\x0a\xf7\x49\x56\x9a\x23\x2f\xd5\x20\xf8\x77\xef\x0c\xfc\xdf\xdf\xe9\x3f\xcf\x01\xd7\x31\x29\x9c\x4e\x64\x7c\x3e\x34\x46\x16\xff\xbd\x47\xfe\x48\xe0\xfe\x9e\x7d\xc1\x6c\x7f\x33\x0c\xf6\x4c\xdd\xa4\x8a\xdb\x44\x33\x57\x3b\x74\xdb\xcc\x54\x02\x9d\x33\x2e\xb6\xea\xca\x28\xc5\x68\x61\x17\x84\x90\x22\xf6\x30\xa4\xfd\x1d\x6d\x7a\xf9\x71\x7d\x1d\x85\xb7\xbf\xbb\x55\x87\x3a\xae\xaf\xfb\x93\x76\x4d\xcd\x66\x68\xd8\xe9\x34\xa7\x8a\xd9\xbc\x78\x73\x6a\x32\x25\x6c\x4e\x66\x19\x02\x91\xf6\x84\xea\xd3\x19\x3c\xa5\xd4\x9c\xe4\xce\x32\x3d\x7e\x6a\xfe\x90\xa9\x7b\x44\x2e\xa7\x5b\xe6\x73\x08\x9e\x98\xf5\x6a\xba\xc0\xa5\x39\x16\xdd\x22\xcb\xfd\x6c\x37\x6c\x84\x42\x05\xe3\x36\x0f\x7b\xcf\x55\xd6\xcf\x93\xa2\xc8\xea\xb3\xb9\xe6\x7c\xa8\xa9\x53\xec\x6b\x25\xbd\xc8\xb1\xad\x57\x75\xf6\xc8\x37\x51\xe6\xf3\x8f\xe6\xe7\x9f\xa9\x4e\xed\xbf\x3e\x3f\x77\xaf\x82\x98\xea\x0f\x4e\xd6\x96\x2c\xdf\xf9\xfe\xa4\xa2\xaa\x7f\xac\x88\xda\x5e\x08\xfd\x10\xae\xf9\xc7\xce\x36\x91\x43\xbf\xe9\xb4\x92\x73\xa6\x7b\x6e\xb3\x9b\x78\x06\x45\xb3\x9b\x58\x7d\x57\x54\x6f\x27\x06\x0c\xa2\xc3\x90\xf6\x72\x74\x37\x76\x47\x71\x73\x14\xca\xc0\x77\x8f\xf6\x98\xa8\xd9\x08\xa6\x28\xbd\xaf\x05\x21\x2e\x85\xae\xfc\x72\xc2\xc8\x1c\xe3\xed\x17\xe9\x07\x3a\x37\xf3\x66\xe5\xba\xcb\x77\xf3\xad\x9a\xfb\x23\x8b\x6a\x6a\x37\x3b\xed\xd6\x07\x73\x1e\x78\xbb\xd4\xa8\xdb\xb0\xf9\x00\xcf\x35\x78\x37\x38\x33\xdc\x3e\x67\xe0\x5b\x92\x5e\x5f\x57\x47\xb8\x94\x6b\x7f\xe8\x4d\x04\xec\xf5\x94\x75\x84\x6c\xeb\x9c\x50\x75\xf9\x56\x42\xf6\x7a\xca\x74\xc8\x4e\x4e\xbe\x9e\xfc\x2f\x00\x00\xff\xff\x57\x7f\xfa\xf3\x87\x3e\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 16007, mode: os.FileMode(420), modTime: time.Unix(1515079159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

