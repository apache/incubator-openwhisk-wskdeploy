// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x4d\x6f\xdb\x38\x13\xbe\xe7\x57\x0c\x72\xc9\x25\x30\xda\xbe\x78\x81\x45\x6f\xc1\xf6\x63\xb3\x6d\x92\x22\x49\x5b\x14\xdd\xc2\xa1\xa5\xb1\xc4\x46\x22\x05\x92\x4a\xea\x1a\xfe\xef\x0b\x92\x92\xed\xb8\x22\x29\xc9\xb2\x13\x14\xbb\x97\x55\x2c\xce\xf3\xcc\x0c\xc9\xe1\x0c\x35\xfd\x7a\x00\x30\x3f\x00\x00\x38\xa4\xf1\xe1\x4b\x38\xcc\x65\x32\x2e\x04\x4e\xe9\x8f\x31\x0a\xc1\xc5\xe1\xb1\x7d\xab\x04\x61\x32\x23\x8a\x72\xa6\x87\xbd\x36\xef\x0e\x00\x16\xc7\x1e\x84\x7b\x22\x18\x65\x89\x03\xe3\x73\xf5\x36\x84\x22\xcb\x28\x42\x29\x1d\x28\x57\xd5\xdb\x10\x0a\x65\x53\xee\x80\x38\xd5\xaf\x9c\xf2\xdf\x25\x67\xe3\x9c\x4a\x49\x59\x32\x8e\xf2\x78\x7c\x8b\x33\x07\xd0\xdf\x57\x17\xe7\x40\x59\x51\x2a\x88\x89\x22\x70\x66\xa5\xe0\x28\xca\xe3\x23\xd0\x72\x4e\x16\x0d\x3c\xcd\x48\x32\x66\x24\x47\x59\x90\x08\x1d\x1c\xab\xf7\x61\x2c\x52\xaa\xd4\xa3\xae\x7e\xcd\x05\xfd\x69\x7e\x80\x9b\x77\xaf\xbf\xdc\xb4\x01\x2d\xe8\x38\xe5\x52\x39\x40\xef\x53\x2a\x6f\xe1\xe4\xc3\x29\xdc\xfc\x75\x71\x75\xdd\x16\xf1\x0e\x85\xd4\x08\x41\xd0\x4f\xaf\x2f\xaf\x4e\x2f\xce\xdb\xe0\xde\xe2\x6c\x3c\xa5\x99\xcb\x93\x05\x51\x29\xf0\x29\xa8\x14\x61\x74\x8b\x33\x30\x63\xc3\xb0\x11\x0a\xd5\x1a\x57\x0f\x0e\x00\xe7\x84\xd1\x29\x4a\x35\x66\x5c\x8d\xa7\xbc\x64\xb1\x03\xf8\xac\x1a\x68\xf0\x80\x71\x05\x66\x34\x10\x05\x86\x73\x3e\x1f\xe9\xff\x2f\x16\xa3\x7f\x98\x9b\xae\x34\x0b\x79\x49\x1a\x63\x91\x71\xd7\x0a\xf9\x68\x96\xef\x12\x17\xa6\x5c\x80\x15\xc8\x91\xa9\x2e\x34\x25\xeb\x4c\x54\x8b\x04\xa9\x44\xc9\x14\xcd\x51\x6f\xd2\x9c\xa8\x28\x75\x70\x5c\xda\x61\x9a\xa5\x92\x58\x2c\x40\x16\x18\xd1\x29\xc5\x18\x28\x83\x5a\x5b\x88\x39\x4a\xe3\x60\x83\x07\xf7\x54\xa5\x40\x22\xb3\x4d\x24\x2f\x45\x84\x76\x0a\xf0\x87\x42\xa6\x97\xad\xc6\xc4\x1f\xaa\x52\xbc\x1a\x39\x9f\x8f\xec\x53\x60\x42\x6a\xf5\xa3\x94\xb0\x04\x5d\x93\x5f\x6b\x5f\x8d\x02\xc5\x1f\x1a\x32\x21\x12\x63\xe0\xcc\x2c\x3b\xaf\xae\x5b\xa8\x58\x32\x59\x16\x05\x17\x2a\xa8\x66\x0b\x27\x53\xeb\xe2\x25\xa2\x51\x6c\x4d\xfb\xb6\xca\xd9\x41\xe3\x8c\xe6\x54\x8d\x69\xc2\xb8\x70\x6a\x77\xca\xee\x48\x46\xe3\x9a\xc1\x88\x68\x1e\xf3\xb0\x58\x6c\xaa\x57\x81\x79\xd9\x23\xce\xa6\x34\x59\x1e\x10\x3a\xa6\xba\x23\xee\xb5\xb6\xae\x54\x29\x32\x45\x23\x1b\x76\x75\xe0\xa9\x3c\x61\xa1\xca\xae\x8c\x05\xf5\x84\x63\xcd\xa8\xe3\xa6\x1e\xb2\x1d\x4f\xe8\x60\xd2\x4c\xcb\x31\xfd\xa8\x2a\x53\x7c\x67\xf5\xa6\x3d\xf3\xf9\x48\x3f\x2e\x16\xc7\x30\x15\x3c\xd7\x7f\xdb\x55\x1f\x58\x34\x35\xa3\x9d\xae\x10\xa3\x1e\x56\xcf\x94\x44\xd5\x8f\x6b\xe9\x9c\x10\xdb\x03\x2f\xce\xe7\xa3\xe5\xdf\x9d\xad\x44\x21\xc6\x09\xaa\x7a\xff\xba\x72\xa8\x37\x84\x66\x36\xa4\x24\xa8\xcc\x16\x5c\x6d\xca\x5a\xd4\x12\x5f\x14\xc8\x3e\x9b\xc3\x58\xa2\xb8\xa3\x11\xbe\x34\xa1\x4f\x88\x75\x45\x36\x35\xb9\x52\x44\x28\x8d\x5e\xb2\x9c\x08\x99\x92\xcc\xe0\xd8\x43\x5d\xfb\xc2\x62\x67\x3c\x22\x19\xdc\x91\xac\x44\xa9\xc1\x1c\xf9\x5e\x3f\xb0\x46\x17\x7d\xf4\x42\x50\xa6\x50\x30\x54\x6e\x5d\xda\xcb\x37\xd2\xbf\x5a\x1e\x6f\x10\xf1\xbc\xc8\x50\xfb\xbb\xca\x76\xa7\x65\x96\xcd\xdc\xcc\xad\x44\x1b\x49\xdf\x72\x05\x26\xb3\x87\x48\x20\x51\xfa\xd8\x2d\x48\x74\x4b\x12\xb4\xc7\x9c\x7d\x97\xa3\x94\x24\x59\x9b\x5d\x20\x2c\xae\xe5\x78\x6c\x5f\xe8\x07\x3b\xef\xcd\x4a\xee\x84\xaa\xad\x51\x55\x88\xff\xbd\x6c\x2a\xe8\x3e\x0c\xda\x8e\xa6\xad\x31\xa2\xcc\xf6\xb2\xe4\xb6\xe4\x09\x98\x23\x51\x19\x16\x13\x34\x15\x51\xa5\xd4\xa9\xff\x8e\x6d\xdb\x09\x69\xdb\x79\x53\x82\x26\x09\x8a\x7d\x4c\xdd\xf6\x54\x5d\x8d\x9a\x22\xc6\xfb\xb4\x6c\x4b\xbe\xae\x11\x7e\x42\x59\xac\xff\xde\x63\x54\xdc\x9e\x32\x74\x76\xf2\xa9\xae\x49\x91\xc5\xc8\xa2\x99\x16\x8d\xb1\x38\x27\xa6\xf0\x88\x69\x5c\xa5\xa1\xf6\x8c\xd4\x47\xe4\xf2\x84\x84\xcb\x92\xc1\xcd\xbd\xbc\xb5\x65\xe6\xb2\xde\xbc\xd1\xd9\x85\xc0\x9c\xdf\x21\x14\x44\x28\x4a\xb2\x6c\x56\x95\xbd\x18\x03\x91\x12\x95\x27\x41\x79\x0a\x9a\x79\x5c\xb6\x76\x36\xce\xe7\x23\x5e\xaa\xa2\xd4\x95\xcf\x68\x34\xf2\xda\xe3\x11\x0b\x90\x99\xb0\xd4\x95\xaa\x51\x28\x40\xf4\x60\x4f\x75\x25\xf4\x0a\x07\x88\xeb\xa5\xde\x95\xd3\x25\xd7\x92\xae\xde\x59\x7d\x69\x5d\xf2\x01\xfa\x87\x2b\xba\x13\xb3\x47\xb4\x91\xf4\xe2\xdd\x08\xfe\x24\x2c\xc2\x2c\xab\xc4\xd7\xae\x83\x9a\xc9\xbc\x22\x01\x12\x2d\xb0\x79\xe9\x14\x62\x69\x92\x71\xd4\x1a\xab\x41\xfe\xdd\xef\x29\x37\x3a\x40\x84\xa2\xa6\x0d\x23\x3d\xea\x0d\x97\xe0\xd3\xb5\xba\x46\xf8\x75\x09\xae\xe2\xb1\x7b\xf9\xb6\x95\x0e\xdb\xdf\xf7\x38\x68\xe7\x9a\x2d\xd0\x03\x69\x44\x8c\x19\xee\xa7\xa6\x1a\x8e\xa9\xad\x49\x3b\xce\xd4\x87\xe2\xf9\xaf\x0a\xd9\xf0\xe7\xee\xab\x90\x01\xa9\xba\x1a\xb5\xe3\x2a\x64\x68\xbe\xb6\xe6\xed\xfe\x9e\x69\x40\xaa\x46\xa3\x3e\x9f\x5c\x9e\x9f\x9e\xbf\x7d\x09\xd7\x29\xc2\x91\xbd\x82\x3d\x82\x2f\x27\x67\xef\xed\xed\x30\x5b\xba\x14\x99\xa2\xca\xdc\x17\xc7\x58\x08\x8c\x88\xc2\x78\x04\x1f\x32\x24\x12\xa1\x94\x08\x47\xda\xe9\x47\x40\x99\x54\x48\x74\xee\x0e\x31\xca\x48\xd0\x89\xfd\x4a\x52\x7d\x32\xb1\x1f\x09\x3c\xd5\xc6\x63\x6a\xd4\x76\xde\xeb\x44\x73\x8f\xf3\x3f\x1c\xa5\x2b\x8f\x6a\x4a\x64\x53\x22\x61\x82\xc8\x1e\xe4\x46\xcb\xfa\xcc\x9b\x5d\xf5\x83\x6b\x54\xee\x83\x27\xbf\xef\xab\xe1\x76\x98\x5e\x35\x87\x54\x6f\x00\xb5\xae\xab\xed\x32\x84\x5a\xfd\xb0\xbc\x6a\xfd\x52\x9f\x6e\xab\x5b\x0f\xc0\x46\x05\x2f\x37\x2b\xf6\xbe\x8a\xf5\x00\x6a\x54\xe8\xe4\xd7\xdb\x8a\xbe\x2a\xf5\x82\x6a\x11\x38\x56\x19\x7a\x33\x5c\x5d\x58\xb6\x8f\x1d\xdd\x10\x43\x1b\xa0\x3a\x3a\xd6\xd1\xaa\xea\xaf\xd5\x9a\xf7\x8b\x7b\x57\x91\xce\x22\x3b\xd1\xb6\x10\x0c\xac\x92\xba\xd7\xa0\x03\x69\x4b\xe1\x46\xe2\xd5\x37\x57\xca\xee\xf8\x2d\x9a\x34\xda\x26\x62\x29\xb2\x3d\xe5\x84\x7b\x56\xc2\x9f\x53\x9d\x11\x16\x13\xc5\xc5\x0c\xa6\x14\xb3\x18\xea\xa0\xfe\xc9\xb6\x86\x41\x5e\x4a\x05\x13\xd4\x75\x47\x8b\x7c\xa8\x23\x9a\x5f\xb5\x4d\xe1\xba\x75\x85\xdc\xd9\xdc\x48\xbb\x2d\x2a\x85\xd0\x75\xf8\xea\xda\xb6\xea\x69\x6b\xa1\xec\xd6\xf8\xfd\x3c\xfb\x9e\x46\xc8\x24\x0e\xe4\x59\x07\x5a\x3b\xcf\xd6\xc2\xbb\xf2\x6c\x6f\x7c\xbf\xfa\x35\xac\xe9\x21\x32\x8f\xa7\xaf\x16\x8b\x9a\x85\x80\x6d\x37\xe2\x0c\x5b\xa8\xda\x09\xab\xb9\xe5\x03\x73\x2e\x66\x57\xf4\x27\xea\x4a\xdc\x34\x35\xc9\x07\x3d\x4d\x32\xe5\x65\x16\xeb\xc9\x21\xcc\xf4\x27\xe8\x4d\x3d\x41\x75\xaf\x23\xd6\xf3\x17\x7f\x98\xed\xfb\xff\xe7\x2f\xdc\xda\x0e\x4a\xd1\x68\x84\xa2\x39\xf2\x52\xf5\x82\x7f\xf6\xcc\xc0\xff\xef\x99\xfe\xcf\x6d\xc4\xa0\x14\x8d\x46\x64\x3c\xe9\xeb\x23\x8b\xff\xdc\xa3\xfe\x40\xe0\xa1\x95\x6d\x90\x97\xdd\x71\xcc\xa6\x15\xcb\xc6\xae\x94\xb0\x84\x4c\x32\xd4\x75\xa2\xe2\xc0\xf8\xfd\x31\xdc\xa7\xd4\x74\x4b\x66\x99\xa6\x5f\xeb\x9e\x0b\xae\xfc\x01\xb9\x9a\x93\x9a\xaa\xad\xaa\xee\xcb\x25\x45\x91\xd5\x1d\x78\xfa\xf8\x2e\x4c\xda\x64\x6f\xb9\x6d\x1f\xe0\xda\xcd\xaa\xe9\x9f\x24\x0a\xbe\xda\x04\xab\xfa\xf9\x0d\xd5\x99\xc6\xb7\xcd\x5e\x51\xd5\x8a\xa9\x6e\xe5\x5d\x6c\x34\x1d\xae\x53\xd5\x3f\x56\x44\xae\xfb\xe9\xdf\xc2\x34\xff\x5a\x5c\x27\x6a\xd0\xdf\x2c\x02\xc9\x39\xd3\x2b\x61\x75\xb9\x71\x0c\xc5\xea\x72\xa3\x10\xfc\x3b\x46\xaa\xbe\xdd\x68\xb1\x28\x77\x43\xda\xc9\xd0\x87\xbe\xdb\x8b\x99\x83\x50\xb6\xfc\x14\x62\xbb\xd6\xcc\xbd\x14\x45\xe9\xfd\x4a\x01\x71\x29\x74\x22\x9a\x13\x46\x12\x8c\xd7\xbf\xeb\xed\xe8\x33\xfe\x93\x55\xb7\xb9\x9a\x30\xff\x10\xa0\xb9\x79\xba\x0a\x95\xe6\xe2\xcf\xda\x60\xda\x13\xd7\x33\x9f\x7a\x0e\xe7\xf3\x51\xf5\xd8\xb4\x79\x97\x38\x13\x5c\xff\xec\xe9\x0b\xf1\x8f\xaf\x57\xc0\x5d\xaa\xa9\x5c\x7d\x12\x0e\x7b\x3c\xcd\x02\x2e\x5b\x6b\x5b\xa8\x1e\x9f\x8a\xcb\x1e\x4f\x33\xed\xb2\x83\x6f\x07\xff\x06\x00\x00\xff\xff\x1d\xcb\x54\x18\x4f\x37\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 14159, mode: os.FileMode(420), modTime: time.Unix(1515436381, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

