// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x41\x6f\xdb\x3a\x12\xbe\xe7\x57\x0c\x72\xc9\x25\x6b\xb4\x6f\xb1\xc0\xa2\xc0\x1e\x82\x7d\x6d\x37\xdb\x26\x29\x92\xb4\x45\xd1\x2d\x1c\x5a\x1a\x4b\x6c\x24\x52\x20\xa9\xa4\x6e\xe0\xff\xbe\x20\x29\xd9\x8a\x2b\x91\x94\x2c\x3b\x41\xf1\x72\x52\x2d\xce\xf7\xcd\x0c\x87\xe4\x0c\x35\xfd\x7a\x00\xf0\x70\x00\x00\x70\x48\xe3\xc3\x57\x70\x98\xcb\x64\x5a\x08\x9c\xd3\x1f\x53\x14\x82\x8b\xc3\x63\xfb\x56\x09\xc2\x64\x46\x14\xe5\x4c\x0f\x7b\x6d\xde\x1d\x00\x2c\x8f\x1d\x08\xf7\x44\x30\xca\x92\x0e\x8c\xcf\xd5\x5b\x1f\x8a\x2c\xa3\x08\xa5\xec\x40\xb9\xaa\xde\xfa\x50\x28\x9b\xf3\x0e\x88\x53\xfd\xaa\x53\xfe\xbb\xe4\x6c\x9a\x53\x29\x29\x4b\xa6\x51\x1e\x4f\x6f\x71\xd1\x01\xf4\xdf\xab\x8b\x73\xa0\xac\x28\x15\xc4\x44\x11\x38\xb3\x52\x70\x14\xe5\xf1\x11\x68\xb9\x4e\x16\x0d\x3c\xcf\x48\x32\x65\x24\x47\x59\x90\x08\x3b\x38\xd6\xef\xfd\x58\xa4\x54\xa9\x43\x5d\xfd\x9a\x0b\xfa\xd3\xfc\x00\x37\xef\x5e\x7f\xb9\x09\x01\x2d\xe8\x34\xe5\x52\x75\x80\xde\xa7\x54\xde\xc2\xc9\x87\x53\xb8\xf9\xcf\xc5\xd5\x75\x28\xe2\x1d\x0a\xa9\x11\xbc\xa0\x9f\x5e\x5f\x5e\x9d\x5e\x9c\x87\xe0\xde\xe2\x62\x3a\xa7\x59\x97\x27\x0b\xa2\x52\xe0\x73\x50\x29\xc2\xe4\x16\x17\x60\xc6\xfa\x61\x23\x14\x2a\x18\x57\x0f\xf6\x00\xe7\x84\xd1\x39\x4a\x35\x65\x5c\x4d\xe7\xbc\x64\x71\x07\xf0\x59\x35\xd0\xe0\x01\xe3\x0a\xcc\x68\x20\x0a\x0c\xe7\xd7\x87\x87\x89\x7e\x58\x2e\xbf\x4d\xfe\xc7\xba\x09\x4b\x13\xca\x2b\xda\x18\x8b\x8c\x77\xc5\xc8\x47\x13\xc0\x0d\x64\x98\x73\x01\x56\x24\x47\xa6\xfa\x10\x95\x6c\x00\x55\x2d\xe4\x25\x13\x25\x53\x34\x47\xbd\x54\x73\xa2\xa2\xb4\x83\xe5\xd2\x0e\x33\x3c\x95\x88\xa6\x92\x05\x46\x74\x4e\x31\x06\xca\xa0\xd6\x18\x62\x8e\xd2\x38\xda\x20\xc2\x3d\x55\x29\x90\xc8\x2c\x17\xc9\x4b\x11\xa1\x9d\x0a\xfc\xa1\x90\xe9\xf0\x35\xa8\xf8\x43\xd5\xca\x57\x63\xf5\xaf\xf6\xd1\x37\x35\xb5\x11\x51\x4a\x58\x82\x5d\x81\x50\xdb\x50\x8d\x02\xc5\x37\xcd\x99\x11\x89\x31\x70\x66\x82\xd0\xa9\xf1\x56\x6a\x96\x4c\x96\x45\xc1\x85\xf2\xaa\x1a\xe4\x6e\x6a\x9d\xbd\xc2\x34\xca\x35\x2c\x08\x57\xd0\x8e\x9a\x66\x34\xa7\x6a\x4a\x13\xc6\x45\xa7\x86\xa7\xec\x8e\x64\x34\xae\x39\x8c\x88\x61\x32\x4f\x5a\xd9\x0d\x15\x2b\x38\x27\x7f\xc4\xd9\x9c\x26\xab\x63\x43\xef\xb4\xdd\xfb\xf0\xb5\xb6\xb0\x54\x29\x32\x45\x23\xbb\x19\xeb\xed\xa8\xf2\x86\x85\x2a\xfb\x32\x16\xd4\xb1\x49\x6b\x46\xbd\x9b\xea\x21\xdb\xf1\xf8\x8e\x2b\xcd\xb4\x1a\x33\x8c\xaa\x32\xc5\x75\x82\x6f\xda\xa3\xa7\x4f\x3f\x2f\x97\xdf\x8e\x61\x2e\x78\x6e\x7e\xb1\x0b\xc0\x17\x3a\x35\xab\x9d\x32\x1f\xab\x1e\x56\xcf\x96\x44\x35\x94\x6d\xe5\x22\x1f\xdf\x23\x5f\x6a\x9a\xd5\x0f\xe1\xb6\xfe\x4d\x83\xfd\x6b\xab\xbf\x76\x83\xde\x10\x9a\xd9\xed\x28\x41\x65\x16\xee\x7a\x29\x57\x8b\x5f\x5a\x15\x2f\x0a\x64\x9f\xcd\xa1\x2e\x51\xdc\xd1\x08\x5f\x81\xde\x39\x85\x58\x2e\xb5\xc2\xed\xf6\x8f\x06\xdf\xaa\xfc\x95\x22\x42\x69\xf0\x92\xe5\x44\xc8\x94\x64\x06\xc6\xa6\x1e\x7a\x56\x2c\x74\xc6\x23\x92\xc1\x1d\xc9\x4a\x94\xdd\xaa\x0e\x04\x6b\x55\xec\xa3\x13\x82\x32\x85\x82\xa1\xea\xd6\x25\x5c\xbe\x95\xfe\xcf\xd5\xf1\x0b\x11\xcf\x8b\x0c\xb5\xbb\xab\x9c\x7c\x5e\x66\xd9\xa2\x9b\x39\x48\xb4\x95\xf4\x2d\x57\x60\xea\x0f\x88\x04\x12\xa5\x13\x83\x82\x44\xb7\x24\x41\x7b\x08\xdb\x77\x39\x4a\x49\x92\xc6\xe4\x02\x61\x71\x2d\xc7\x63\xfb\x42\x3f\xb8\xa2\x6a\x27\x54\xa1\x46\x55\x87\xce\xef\x65\x53\x41\xf7\x61\xd0\x76\x34\xa1\xc6\x88\x32\xdb\x4b\xc8\x6d\xc9\xe3\x31\x47\xa2\x32\x2c\x66\xcf\x54\x44\x95\x52\x17\x28\x3b\xb6\x6d\x27\xa4\xa1\xf3\xa6\x04\x4d\x12\x14\xfb\x98\xba\xed\xa9\xfa\x1a\x35\x47\x8c\xf7\x69\xd9\x96\x7c\x7d\x77\xf8\x19\x65\xb1\xfe\xf7\x1e\x77\xc5\xed\x29\x7d\x67\x27\x9f\xeb\xaa\x19\x59\x8c\x2c\x5a\x68\xd1\x18\x8b\x73\xa2\xab\x21\x88\x69\x5c\xa5\xc5\xf6\x8c\xd4\x47\xe4\xea\x84\x84\xcb\x92\xc1\xcd\xbd\xbc\xb5\x65\xf0\xaa\x1e\xbe\xd1\xd9\x85\xc0\x9c\xdf\x21\x14\x44\x28\x4a\xb2\x6c\x51\x15\xe6\x18\x03\x91\x12\x95\x23\x41\x79\x0e\x9a\x39\x5c\xd6\x38\x1b\x1f\x1e\x26\xbc\x54\x45\xa9\x96\x4b\x98\x4c\x26\x4e\x7b\x1c\x62\x1e\x32\xb3\x2d\xf5\xa5\x6a\x15\xf2\x10\x3d\x5a\x53\x7d\x09\x9d\xc2\x1e\xe2\x3a\xd4\xfb\x72\x76\xc9\x05\xd2\xd5\x2b\x6b\x28\x6d\x97\xbc\x87\xfe\x71\x44\xf7\x62\x76\x88\xb6\x92\x5e\xbc\x9b\xc0\xbf\x09\x8b\x30\xcb\x2a\xf1\xc6\x75\x55\x3b\x99\x53\xc4\x43\xa2\x05\x36\x2f\xc5\x7c\x2c\x6d\x32\x1d\xb5\xc6\x7a\x90\x7b\xf5\x3b\xca\x8d\x1e\x10\xbe\x5d\xd3\x6e\x23\x03\xea\x8d\x2e\xc1\xe7\x6b\x75\x8d\xf0\x6b\x08\xae\xf7\xe3\xee\xf0\x0d\x95\xf6\xdb\x3f\xf4\x38\x08\x73\xcd\x16\xe8\x9e\x34\x22\xc6\x0c\xf7\x53\x53\x8d\xc7\x14\x6a\xd2\x8e\x33\xf5\xb1\x78\xfe\xaa\x42\x36\xfc\xb9\xfb\x2a\x64\x44\xaa\xbe\x46\xed\xb8\x0a\x19\x9b\x2f\xd4\xbc\xdd\xdf\x33\x8d\x48\xd5\x6a\xd4\xe7\x93\xcb\xf3\xd3\xf3\xb7\xaf\xe0\x3a\x45\x38\xb2\x37\xc1\x47\xf0\xe5\xe4\xec\xbd\xbd\xa9\x66\x2b\x97\x22\x53\x54\x99\xbb\xeb\x18\x0b\x81\x11\x51\x18\x4f\xe0\x43\x86\x44\x22\x94\x12\xe1\x48\x3b\xfd\x08\x28\x93\x0a\x89\xce\xdd\x21\x46\x19\x09\x3a\xb3\x5f\x6e\xaa\xcf\x38\xf6\xa3\x85\xa3\xda\x78\x4a\x8d\x42\xe7\xbd\x4e\x34\xf7\x38\xff\xe3\x51\x76\xe5\x51\x6d\x89\x6c\x4a\x24\xcc\x10\xd9\xa3\xdc\x68\x55\x9f\x39\xb3\xab\x61\x70\xad\xca\x7d\x70\xe4\xf7\x43\x35\xdc\x0e\xd3\xa9\xe6\x98\xea\x8d\xa0\xd6\x75\xb5\x5c\xc6\x50\x6b\x18\x96\x53\xad\x5f\xea\xd3\x6d\x75\x1b\x00\xd8\xaa\xe0\xe5\x66\xc5\x3e\x54\xb1\x01\x40\xad\x0a\x9d\xfc\x7a\x5b\x31\x54\xa5\x41\x50\x01\x1b\xc7\x3a\x43\x6f\x87\xab\x0b\xcb\xf0\xbd\xa3\x1f\xa2\x6f\x01\x54\x47\x47\x13\xad\xaa\xfe\x82\x62\xde\x2d\xee\x8c\x22\x9d\x45\xf6\xa2\x0d\x10\xf4\x44\x49\xdd\xfe\xd0\x83\x34\x50\xd8\xf3\x45\x97\xb2\x3b\x7e\x8b\x26\x8d\xb6\x89\x58\x8a\x6c\x4f\x39\xe1\x9e\x95\x70\xe7\x54\x67\x84\xc5\x44\x71\xb1\x80\x39\xc5\x2c\x86\x7a\x53\xff\x64\x1b\xd8\x20\x2f\xa5\x82\x19\xea\xba\x23\x20\x1f\xea\x89\xe6\x56\x6d\x53\xb8\x6e\xa7\x21\x77\x36\x37\xd2\x6e\x8b\x4a\x21\x74\x1d\xbe\xbe\xb6\xad\x3a\xef\x02\x94\xdd\x1a\x7f\x98\x67\xdf\xd3\x08\x99\xc4\x91\x3c\xdb\x81\x16\xe6\xd9\x5a\x78\x57\x9e\x1d\x8c\xef\x56\xbf\x86\x35\x4d\x4d\xe6\xf1\xf4\xcf\xe5\xb2\x66\x21\x60\x1b\xa0\x38\xc3\x00\x55\x7b\x61\xb5\xb7\xbd\x60\xce\xc5\xe2\x8a\xfe\x44\x5d\x89\x9b\x2e\x2b\xf9\xa8\xc7\x4a\xa6\xbc\xcc\x62\x3d\x39\x84\x99\xfe\x04\xbd\xa8\x67\xa8\xee\xf5\x8e\xf5\xf2\x8f\x7f\x9a\xe5\xfb\x8f\x97\x7f\x74\x6b\x3b\x2a\x45\xab\x11\x8a\xe6\xc8\x4b\x35\x08\xfe\xc5\x0b\x03\xff\xf7\x17\xfa\xaf\xdb\x88\x51\x29\x5a\x8d\xc8\x78\x32\xd4\x47\x16\xff\xa5\x43\xfd\x91\xc0\x7d\x91\x6d\x90\xa1\x6e\xd7\x63\x36\xad\x58\x35\x9a\xa5\x84\x25\x64\x96\xa1\xae\x13\x15\x07\xc6\xef\x8f\xe1\x3e\xa5\xa6\x97\x33\xcb\x34\x7d\xa3\x9b\xcf\x1b\xf9\x23\x72\xb5\x27\x35\x55\x83\x57\xdd\x3d\x4c\x8a\x22\xab\x3b\x02\xf5\xf1\x5d\x98\xb4\xc9\xde\x72\xeb\x35\xc7\x1a\x5f\x0e\x6c\x5f\x27\xb1\xad\x8b\xeb\x9f\xdf\xd0\xcc\x34\x5c\x6e\x74\xb2\xaa\x20\xa6\xba\xe1\x78\x69\xc9\xf2\x47\xfd\xc7\x15\x55\xfd\x63\x45\xd4\x75\x3f\xfd\x5b\x98\xe6\x8e\xc5\x26\x51\x8b\xfe\x26\x08\x24\xe7\x4c\x47\xc2\xfa\x72\xe3\x18\x8a\xf5\xe5\x46\x21\xf8\x77\x8c\x54\x7d\xbb\x11\x10\x94\xbb\x21\xed\x65\xe8\x63\xdf\xed\xc5\xcc\x51\x28\x03\x3f\x85\xd8\xae\x35\x73\x2f\x45\x51\x3a\xbf\x52\x40\x5c\x0a\x9d\x88\xe6\x84\x91\x04\xe3\xe6\x77\xbd\x1d\x7d\xc6\x7f\xb6\xea\xb6\x57\x13\xe6\xbf\x2b\x34\x1a\xba\x9b\x35\x89\xdd\x2a\xcd\xc5\x9f\xb5\xc1\xb4\x27\x36\x33\x9f\x7a\x0e\x1f\x1e\x26\xd5\x63\xdb\xe2\x5d\xe1\xcc\xb0\xf9\xd9\xd3\xb5\xc5\x3f\xbd\x5e\x1e\x77\xa9\xb6\x72\xf5\x59\x38\xec\xe9\x34\xf3\xb8\xac\xd1\xb6\x50\x3d\x3e\x17\x97\x3d\x9d\x66\xda\x65\x07\x07\xdf\x0e\xfe\x1f\x00\x00\xff\xff\x63\x62\x75\x48\xf6\x37\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 14326, mode: os.FileMode(420), modTime: time.Unix(1515193797, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

