/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x6f\xe3\x36\x16\x7e\xcf\xaf\x38\xc8\x8b\x5f\x02\xed\x4c\x17\x0b\x2c\xe6\x2d\xd8\xe9\x25\x68\xe7\x82\x99\xd9\x16\x45\x77\x80\xd0\xe2\xb1\xc5\x9a\x22\x05\x92\x72\xea\x0a\xfe\xef\x0b\x92\x92\x2f\x89\x44\x51\xb2\xec\x04\x45\xf3\xe4\xd8\x3a\xdf\xf7\x9d\xc3\xdb\x21\x79\xf4\xdb\x15\x40\x75\x05\x00\x70\xcd\xe8\xf5\x1b\xb8\xfe\x01\x39\x97\xd7\x37\xfe\x2b\xa3\x88\xd0\x9c\x18\x26\x85\xfd\xed\x56\xc0\xed\xc7\x3b\xc8\xa4\x36\x90\x97\xda\xc0\x1c\xa1\x50\x72\xcd\x28\xd2\xe4\xfa\x0a\x60\x7b\xf3\x18\xee\x1d\xd3\x9a\x89\x25\xa4\x39\x85\x15\x6e\x3a\x80\x9b\xa7\x66\x69\x4e\x67\xc0\x44\x51\x1a\xf7\x74\x2b\x24\x29\x4d\x26\x15\xfb\xd3\x59\xc3\xfd\x8f\xdf\xfe\x7a\xdf\x01\xdb\xf6\x64\x2b\xe4\x43\xc6\xf4\xca\xf9\x76\xff\xc3\x87\xcf\x5f\xba\xf0\x9e\x3c\xd6\x0a\x26\x48\x8e\xba\x20\x29\x76\xa0\xec\x7f\xef\xd3\xf2\xf3\xb7\x9f\x3e\xdf\x7d\x78\x1f\x21\x67\xf7\x64\x7b\x23\x10\xc1\x16\xa8\x0d\x2c\x18\x47\x10\xd2\xc0\x42\x96\x82\x02\x31\x50\x10\x93\x41\x55\x25\x85\x92\xbf\x63\x6a\x3e\x12\x93\x6d\xb7\xc9\xff\x44\x57\x43\x8d\x40\x0a\xf6\x8b\xaa\x4a\x36\x24\xe7\xdb\xed\x3f\xec\x27\xfb\xc1\x41\x27\x30\xa1\xe6\x73\x50\x45\xc4\x99\xe9\x63\x2c\x93\xa1\xc7\xfb\xad\xaa\x12\xfb\x84\x47\xfb\x1a\x1b\xed\x21\x78\xad\xf2\xfe\xdb\x84\x21\xaf\x71\xbd\x01\x2c\xa4\x02\x8a\x05\x97\x9b\x1c\x85\xe9\x96\x13\x6f\x3f\x98\xbe\x14\xa7\x0a\x78\x8c\xd0\x2a\xc1\x86\x4c\x95\xc2\xb0\x7c\x17\x4e\x5d\x16\x85\x54\x06\x29\xcc\x37\xf0\xa1\x40\xe1\x47\x55\xc1\x89\x59\x48\x95\x77\x8b\x19\x87\xd5\x2a\xeb\x97\xdb\x4f\xef\xef\xde\x7f\xff\x06\x3e\xd5\x78\xba\xc0\x94\x2d\x18\x52\x60\x02\x1a\x67\xe1\xd7\xdb\x77\x3f\x59\xef\x6b\xd6\xed\x16\xa8\x44\xcf\x9c\x13\x93\x66\xf0\xc0\x4c\x06\x24\x75\xb3\x9d\x96\xa5\x4a\xd1\xf7\x1c\xfc\xc3\xa0\xd0\xf6\xdb\xaa\x4a\xf0\x0f\x53\x87\xac\x7e\xb2\xaa\x12\xff\x29\x34\x88\x5e\x94\xc4\x70\x10\x7f\x71\x41\x7f\xeb\x7a\x03\x64\x44\x43\x9a\x49\x8d\x02\x48\x51\x28\x59\x28\x46\xcc\xbe\xe1\x8e\xa4\xce\x89\x46\x0a\x52\xb8\x91\x15\xd4\x68\xa5\x99\x8c\x98\x71\x21\x7c\x7e\x81\xd3\xf6\xc2\xae\xde\xef\xfd\xd4\xa8\xd6\xa8\x6a\x45\x78\x99\x4e\x37\x81\xa2\xab\xf6\x39\x4c\xec\x31\x9b\x26\x32\x9b\x02\x6f\x40\xa3\x01\x23\x41\x48\x8a\xbf\xeb\xae\xf9\x2b\xd2\xba\x95\xfa\x8b\x95\x5a\x9a\x0c\x85\x61\xa9\xcf\x68\x56\xb8\x69\x5c\x4d\xa5\x58\xb0\x65\xa9\x90\x76\x87\x73\x08\x42\xa7\x84\x5d\x02\x38\x90\x38\x6c\xd7\x49\xb7\x4b\x96\x86\xf2\xf5\x18\x46\xf9\x67\xbb\x44\xc1\xec\x7f\xdb\xed\x0d\x2c\x94\xcc\xeb\xaf\xfc\xa0\x0b\x75\xdd\x51\x50\xc1\x76\x6f\xda\x4a\xa3\x39\x00\x28\x4d\x16\x27\x26\x1a\x22\xae\x29\xaa\x2a\xd9\xfd\x7f\xe8\xd1\xee\xcb\x38\x55\xe3\x31\x5b\x65\x7e\x47\x18\x47\x6a\x47\xd2\x12\x7d\x82\xf4\x64\xc0\x69\x0f\x7b\x3c\x1b\xb0\x14\xdf\xb8\x85\x47\xa9\x90\xe2\xc9\xe0\x5b\xc5\x7f\x36\x44\xb9\x59\xa0\x14\x39\x51\x3a\x23\xfc\x20\x87\x60\x62\x21\x3d\x34\x97\x29\xe1\xb0\x26\xbc\x44\xdd\x2d\x75\x24\x58\xc7\xa4\x17\x82\x60\xc2\xa0\x12\x18\x4a\xdb\xa2\xed\x5b\xe9\xdf\xee\xf2\x3a\x48\x65\x5e\x70\xb4\xe1\xd6\x65\x9a\xa2\xd6\x8b\x92\xf3\x4d\x37\x73\x94\x69\x2b\xe9\xf7\xd2\x00\x2a\x25\x15\xa4\x0a\x89\xb1\x79\x67\x41\xd2\x15\x59\xa2\x4f\x61\xfc\x6f\x39\x6a\x4d\x96\x07\x8d\x0b\x44\xd0\xc6\x4e\x52\xff\x83\xfd\x10\xea\x55\x67\xa1\x8a\x75\xaa\x5e\xfc\xfe\x5a\x3e\x15\xec\x12\x0e\x9d\x46\x13\xeb\x8c\x2a\xf9\x45\xba\xdc\x89\x3c\x3d\xee\x68\x34\x8e\xc5\xcd\x99\x86\x98\x52\x83\x5c\x9c\xdb\xb7\xb3\x90\xc6\xb6\x9b\x51\x6c\xb9\x44\x75\x89\xa6\x3b\x9d\x6a\xa8\x53\x0b\x44\x7a\x49\xcf\x4e\xe4\x1b\x3a\xc3\xcf\x99\xa0\xf6\xff\x0b\xce\x8a\xa7\x53\xf6\xad\x9d\x72\x01\x14\x0b\x14\x14\x45\xba\xb1\xa6\x14\x8b\xf7\xc4\xef\xd1\x19\xad\x53\x64\xbf\x46\xda\x25\x72\xb7\x42\xda\xcd\x17\xdc\x3f\xe8\x95\x3f\x5f\xd9\x1d\xb4\xdc\xdb\xec\x42\x61\x2e\xd7\x08\x05\x51\x86\x11\xce\x37\xf5\x39\x10\x52\x20\x5a\xa3\x09\x24\x28\x2f\x41\x59\x20\x64\x07\x6b\x63\x55\x25\xb2\x34\x45\x69\xb6\x5b\x48\x92\x24\xe8\x4f\xc0\xac\x87\xcc\x4d\x4b\x43\xa9\x5a\x8d\x7a\x88\x8e\xc6\xd4\x50\xc2\xa0\x71\x0f\x71\xd3\xd5\x87\x72\x76\xd9\x45\xd2\x35\x23\x6b\x2c\x6d\x97\x7d\x0f\xfd\x71\x8f\x1e\xc4\x1c\x30\x6d\x25\xfd\xf0\x63\x02\xff\x21\x22\x45\xce\x6b\xf3\xde\x93\xd4\xa0\x49\x0f\x89\x35\x88\x3b\xaf\x0d\xdb\x74\xec\x35\xf6\x0f\x85\x47\x7f\x60\xbb\x31\x00\xa2\x6f\xd6\xf4\xd3\xc8\x88\xfd\x46\x97\xe1\xcb\xf5\xba\x41\x78\xda\x05\xf7\xf3\x71\x77\xf7\x8d\xb5\xee\xf7\x7f\xec\x72\x10\x17\x9a\x13\xd0\x7b\xd2\x08\x8a\x1c\x2f\xb3\xa7\x9a\x8e\x29\xd6\xa5\x33\x67\xea\x53\xf1\xfc\xbd\x0b\x79\x14\xcf\xf3\xef\x42\x26\xa4\x1a\xea\xd4\x99\x77\x21\x53\xf3\xc5\xba\x77\xfe\x73\xa6\x09\xa9\xc2\x37\x49\x5f\x32\x84\x99\x3f\xb5\x9d\xf9\x6b\x1a\x77\x02\x2d\x76\x21\x45\x61\x98\x71\x67\xd2\x14\x0b\x85\x29\x31\x48\x13\xf8\xc8\x91\x68\x84\x52\x23\xcc\x6c\xd0\x67\xc0\x84\x36\x48\x6c\xee\x0e\x14\x75\xaa\xd8\xdc\xdf\x01\xd5\x17\x42\xfe\x36\x23\xb0\xdb\x78\x4e\x45\xb1\xed\xde\x24\x9a\x17\x6c\xff\xe9\x28\xbb\xf2\xa8\xb6\x44\x36\x23\x1a\xe6\x88\xe2\x28\x37\xda\xed\xcf\x82\xd9\xd5\x38\xb8\x56\x71\x1f\x03\xf9\xfd\x58\x85\xa7\x61\x06\x65\x4e\x29\x6f\x02\x59\x5f\xea\xe1\x32\x85\xac\x71\x58\x41\x59\x4f\xf6\xa7\xa7\x6a\x1b\x01\xd8\x2a\xf0\xd3\xe3\x1d\xfb\x58\x61\x23\x80\x5a\x05\xdd\x3e\x3d\xad\x18\x2b\x69\x14\x54\xc4\xc4\xb1\xcf\xd0\xdb\xe1\x9a\x8d\x65\xfc\xdc\x31\x0c\xb1\x6f\x00\xd4\x4b\xc7\x21\x5a\xbd\xfb\x8b\xea\xf3\x61\xf3\x60\x2f\xb2\x59\xe4\x20\xda\x08\xc3\x9e\x5e\xd2\xd4\x48\x0c\x20\x8d\x34\xee\xb9\xd1\x65\x62\x2d\x57\xe8\xd2\x68\x9f\x88\x65\x28\x2e\x94\x13\x5e\x58\x44\x38\xa7\x7a\x47\x04\x25\x46\xaa\x0d\x2c\x18\x72\x0a\xcd\xa4\xfe\x33\x2a\x57\xfa\xd3\x14\xe6\xea\xd0\x95\xec\x58\xb4\xb0\xb4\xc7\xc6\x4d\x19\x0e\x59\xfb\xdc\xc8\x86\x2d\x2d\x95\xb2\xfb\xf0\xfd\xb1\xed\xda\x3f\x1d\x21\xf6\x64\xfc\x71\x91\xfd\x89\xa5\x28\x34\x4e\x14\xd9\x0e\xb4\xb8\xc8\x36\xc6\xe7\x8a\xec\x68\xfc\xb0\xfc\x06\xb6\xaa\x12\xee\x3f\xde\xbd\xdd\x97\x69\x11\x58\x13\xce\x28\x48\x81\x11\x52\x07\x61\xb5\xca\xca\x31\x97\x6a\xf3\x99\xfd\x89\x76\x27\xce\x59\xce\x8c\x3e\x2a\x28\xd3\x99\x2c\x39\xb5\x8d\x43\x84\xab\x4f\xb0\x83\x7a\x8e\xe6\xc1\xce\x58\xaf\xbf\xf9\xb7\x1b\xbe\xff\x7a\xfd\x4d\xb7\xda\x49\x29\xda\x4b\x59\x59\x8e\xb2\x34\xa3\xe0\x5f\xbd\x72\xf0\xff\x7c\x65\xff\x02\x15\xae\x53\x52\xb4\x3a\xc1\xe5\x72\x6c\x8c\x3c\xfe\xeb\x80\xfc\x89\xc0\xc3\x3d\xfb\x4e\xf8\xfe\xe6\x18\x7c\x4d\xdd\xac\x8e\xdb\xcc\x32\xd7\x27\x74\x87\xcc\x4c\x03\x5b\x0a\xa9\x0e\xf6\x95\x69\x86\xe9\xca\x2f\x08\x31\x9b\xd8\xf3\x90\x0e\x77\x74\xdf\xcb\x2f\xeb\xeb\x24\xbc\xc3\xdd\xad\x3b\xd4\x65\x7d\x3d\x9d\xb4\x6f\x6a\x76\x43\xc3\x4f\xa7\x39\x33\xc2\xe7\xc5\xbb\xaa\xc9\x8c\x88\x25\x99\x73\x04\xa2\x7d\x85\xea\xc3\x0d\x3c\x64\xcc\x95\x72\x73\x6e\xc7\x4f\xc3\x1f\x33\x75\x4f\xc8\xd5\xea\x96\x7b\x1f\x42\x2e\xdc\x7a\x95\xac\x70\xe3\xea\xa2\x3b\x64\xb5\x3f\xdb\x0f\x9b\xa2\x32\xd1\xb8\xfb\x87\x83\x75\x95\xcd\xf3\xa4\x28\x78\x53\x9b\xeb\xea\x43\xdd\x3e\xc5\x5f\x2b\xd9\x45\x4e\x1c\x5c\xd5\xf9\x9a\x6f\x62\xdc\xfb\x1f\xfb\xaf\xbf\x63\x36\xb5\xff\xfa\xb8\xf0\xde\x44\x31\x35\x6f\x9c\x6c\x3d\x59\x7e\xf4\x02\x4a\x4d\xd5\x7c\x59\x13\x75\x5d\x08\xfd\x25\x5c\x0b\x8f\x9d\x43\xa2\x16\xfd\xae\xd3\x6a\x29\x85\xed\xb9\xfb\xd3\xc4\x1b\x28\xf6\xa7\x89\xf5\x8b\x45\xcd\x71\x62\xc4\x20\x3a\x0f\xe9\x20\x47\x8f\x63\x77\x11\x37\x27\xa1\x8c\xbc\x7b\xf4\x65\xa2\xee\x20\x98\xa1\x0e\x5e\x0b\x02\x2d\x95\xdd\xf9\xe5\x44\x90\x25\xd2\xc3\x8b\xf4\x33\xd5\xcd\xbc\x58\xb9\xed\xdb\x77\xf7\xb2\x5a\xfb\x5b\x16\xf5\xd4\xee\x4e\xda\xbd\x0f\xae\x1e\xf8\x70\xab\xd1\xb4\xe1\xfe\x0d\xbc\xb6\xc1\xbb\xc3\x99\xe3\x61\x9d\x41\x68\x49\x7a\x7e\x5d\x3d\xe1\x32\x6d\xe7\x43\x2f\x22\x60\xcf\xa7\xac\x27\x64\x07\x75\x42\xf5\xc7\x97\x12\xb2\xe7\x53\x66\x43\x76\x75\xf5\xf5\xea\xff\x01\x00\x00\xff\xff\xad\xc0\x83\x15\xe7\x3d\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 15847, mode: os.FileMode(420), modTime: time.Unix(1513194493, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

