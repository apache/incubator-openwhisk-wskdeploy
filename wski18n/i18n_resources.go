// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x3c\x6b\x6f\x1b\x39\x92\xdf\xe7\x57\x14\x06\x0b\x64\x16\x90\xe5\xec\xe2\x70\x58\x18\x97\x03\xbc\x89\x33\xeb\x9d\x64\x6c\xd8\xce\x0c\xe6\x12\xa3\x43\x75\x97\x24\xae\xbb\xc9\x5e\x92\x2d\x45\x63\xe8\xbf\x1f\xaa\x48\x76\xb7\x64\xf5\x43\x4e\x06\x77\xf9\x12\x49\x4d\xd6\x8b\xc5\x7a\xb7\x3f\x7e\x07\xf0\xf8\x1d\x00\xc0\xf7\x32\xfb\xfe\x0c\xbe\x2f\xec\x22\x29\x0d\xce\xe5\x97\x04\x8d\xd1\xe6\xfb\x89\x7f\xea\x8c\x50\x36\x17\x4e\x6a\x45\xcb\x2e\xf8\xd9\x77\x00\xdb\x49\x0f\x04\xa9\xe6\xba\x03\xc0\x25\x3d\x1a\xda\x6f\xab\x34\x45\x6b\x3b\x40\xdc\x86\xa7\x43\x50\xd6\xc2\x28\xa9\x16\x1d\x50\x7e\x0d\x4f\x3b\xa1\xa4\x45\x96\x64\x68\xd3\x24\xd7\x6a\x91\x18\x2c\xb5\x71\x1d\xb0\x6e\xf8\xa1\x05\xad\x20\xc3\x32\xd7\x1b\xcc\x00\x95\x93\x4e\xa2\x85\x1f\xe4\x14\xa7\x13\xb8\x16\xe9\x83\x58\xa0\x9d\xc0\x79\x4a\xfb\xec\x04\xee\x8c\x5c\x2c\xd0\xd8\x09\xdc\x54\x39\x3d\x41\x97\x4e\xff\x0c\xc2\xc2\x1a\xf3\x9c\xfe\x37\x98\xa2\x72\xbc\x63\xc5\xd8\x2c\x48\x05\x6e\x89\x60\x4b\x4c\xe5\x5c\x62\x06\x4a\x14\x68\x4b\x91\xe2\x74\x34\x2f\x5a\x77\x71\x72\xb7\x44\xb8\x2a\x51\xfd\xba\x94\xf6\x01\xde\x30\x33\x05\x91\x70\xa7\x75\xfe\x49\x7d\x52\x77\x1a\x66\xb8\x90\x0a\xd6\xda\x3c\x48\xb5\x80\xb5\x74\x4b\x58\xdb\x07\xcf\xf8\x04\x4c\xe5\x09\x7c\x51\xff\xf6\x02\x52\x5d\x14\x42\x65\x67\x04\xe0\x93\xfb\x53\xb3\x9c\x21\x2e\xa5\x85\xb5\xcc\xf3\x20\xbb\x16\x7e\x61\x2d\x3a\xdb\xe2\x55\x2a\x28\x84\x92\x73\xb4\x6e\xba\x11\x45\x0e\xda\xb4\x7e\x28\xf2\x4f\xea\x72\x0e\x69\x65\x0c\x91\x9c\x49\x83\xa9\xd3\x66\x03\x99\x46\xab\x1c\x2c\xc5\x0a\x41\xa8\x4d\xbd\x05\xe6\x32\xc7\x49\x43\x0e\x94\x46\x2a\x67\xc1\x11\x49\x4b\xcc\x4b\x28\xd0\x5a\xb1\xc0\xa9\x27\x14\xa1\xd0\xd6\x31\x3b\x5a\xc1\x5a\x6c\x2c\xe8\x39\x54\x96\xe5\x50\x03\x71\x3a\x72\x22\x54\x76\xaa\x0d\x54\xaa\x8b\x33\x61\x90\x85\xb2\x23\x92\xd6\x17\x38\x29\xa0\x14\x6e\x79\xea\xf4\xe9\x0e\xe3\xe3\x56\xc1\x49\x56\x3f\xc8\xea\xb3\x3c\x00\x20\x52\x78\xf8\xd7\x91\x54\x0c\x2e\xef\x25\xe7\x93\x3a\xaf\x94\x5b\xd2\xb5\x49\x59\x1d\xcf\x3e\xa9\x06\xb6\x41\x91\x59\x48\x0d\x66\xb4\x40\xe4\x16\xe6\x46\x17\xf0\xa7\x7f\x5c\xbd\xbf\x38\x9d\xae\xed\x43\x69\x74\x69\x61\xb6\x81\x0c\xe7\xa2\xca\xdd\x27\x75\xb5\x42\xb3\x36\xd2\x61\xfc\x09\x52\xad\xe6\x72\xc1\x87\x4e\x57\xf5\xf5\xbb\xcb\xb3\x4f\x0a\x60\x47\x92\x27\x61\xd1\x7f\xb5\x16\xff\x77\x8f\x00\xae\x4c\x50\xcf\x0d\x88\x3c\x07\xb7\x34\xd8\x03\x5c\x94\x72\x49\x1a\xf4\x8f\xab\xdb\x3b\xfa\x5a\xb9\x25\xfc\x74\xf1\x1b\x9c\x9c\xd4\xb7\x18\x7e\x3e\x7f\x7f\x71\x7b\x7d\xfe\xfa\xa2\x13\xeb\x88\x7b\x6e\x97\xda\xb8\x7e\xa3\x75\x6d\xf4\x4a\x66\x68\x41\x80\xad\x8a\x42\x18\x92\x32\xad\x27\x9d\x7e\xa2\xa9\x33\x24\x25\x8f\xd6\xed\x34\x9e\x35\x66\x30\x13\x16\x33\x62\x39\xd2\xd8\x3a\x5b\xf8\xed\xfc\xfd\xbb\x31\x76\x29\xd0\xdb\x6d\x98\xce\xc1\x69\x9d\x83\x45\x47\xf7\x8b\xef\x66\x90\xea\x46\x57\x06\x74\x89\x6a\xcd\xf4\x96\xc1\xce\x86\x6b\x29\x76\x2f\xfb\x78\x5a\x56\x68\x2c\xe1\xee\x12\x9e\x54\x8e\xed\x5c\x58\x07\xaa\x2a\x66\x68\x48\x76\xf5\x81\x8f\xc6\x65\x37\x2a\xed\xe7\xdb\x69\xa0\x45\x9e\xd9\xe6\x70\x6a\x66\x67\xe8\xd6\x88\x0a\xd2\x5c\x92\xd8\x85\xca\xc0\xa2\x59\xa1\x19\xed\x14\xc6\xd3\xd0\x3a\x5e\xc2\x13\x55\x81\x7f\xd8\x51\x9d\xee\xa3\xa0\x7d\xba\x24\xf8\x22\x6f\xc3\xa3\x23\x8a\xcb\x59\x75\xc8\x2e\xbc\x91\xf3\x39\xb2\x45\x8f\x16\xd7\x54\x8a\x7c\x37\x93\x73\xb6\x6b\x84\xe8\xa7\xa7\xbf\x8c\xb4\x60\xbd\x4b\xdb\xd6\xeb\xf9\x30\x4e\x4a\xa3\xff\x85\xa9\xa3\xfb\x0e\xd7\x37\x57\xff\xbc\x78\x7d\x37\x5a\x4f\xa2\xa8\x3b\xce\xe9\x43\xa7\x9f\x61\x63\xe9\x15\x62\xac\x3e\x8c\xc5\x65\xb0\xd0\x2b\xb4\x4f\x71\xae\x97\x32\x5d\xc2\x1a\x0d\x36\x41\x11\xd3\x41\xb7\x66\x47\x13\xf6\xed\xc5\x4e\x9c\x91\x61\x8e\x8e\x0e\xfb\x30\x53\x3b\xc0\xbc\x3b\x37\x95\x3a\xfb\x7f\xe7\xde\x0e\x43\x3a\xa4\x0d\xf0\x83\x56\xf9\x86\xe3\x2b\x0b\x73\x6d\x5a\xe2\xe1\xe8\x8f\x15\xac\xd0\x19\xfe\x79\xb4\xde\xe0\x97\x1e\x3f\x70\xc1\x0f\x21\x50\xb2\x23\xdc\x5a\xe4\x63\x95\x66\x04\x22\x4b\xc7\x25\x16\x98\xf5\x63\x24\x6b\xb3\xa3\x24\xf3\x4a\x71\xdc\xec\x6d\x44\x47\x3c\x46\xbb\x28\x00\xf5\x74\xec\x69\x81\xff\xb1\x43\xe8\xad\x43\xf5\xeb\x30\x3b\x39\xc2\xe9\xce\x73\xb1\x48\x44\x29\x13\x72\xef\x1d\xfc\x7b\xff\x74\x7e\x7d\x09\x9f\xc9\xff\x7f\x1e\x09\xb1\xdf\x11\xb5\x80\xfe\x72\x71\x73\x7b\x79\xf5\xf3\x28\xb8\x95\x5b\x26\x0f\xd8\x75\xb9\xe9\xb1\x36\xf2\x77\xfe\x01\x3e\xff\x74\xf1\xdb\x18\xa0\x29\x1a\x97\xd0\xe9\x74\x40\x25\xf9\x92\xf5\xa6\x2b\x3b\xa5\xc5\x7c\x94\x63\x00\x73\x28\xd6\x01\xb5\x1d\xd4\xfd\x10\x23\x3d\x69\xf7\x43\xc3\x81\xcb\xe2\xa5\x92\xe7\x7a\x9d\x04\x18\x5d\xd9\x27\x2f\x82\x7a\xd1\x30\xd4\xe6\xfa\xf6\xc9\xa5\x4e\x1a\x6a\x3f\x38\x02\x74\x69\x70\x25\x71\xdd\x01\xd7\x2e\x99\xd0\x08\xf4\x74\xc7\x51\x97\xb9\x50\x23\x30\x3c\xe0\x66\xf4\x91\x3e\xe0\x66\x2c\xe1\x5e\xd2\xc1\x10\xf4\x0a\x3a\x1a\x89\x3a\x9d\x76\xe4\x18\xa0\x10\xe6\x01\xb3\x68\x4a\x46\x89\x8a\xe1\x24\x74\xe9\xbb\x98\x09\xa8\x78\xc9\x30\xc4\x68\x1d\x06\x4e\x75\xc7\x39\x8d\x00\x5b\x27\x02\x1d\x70\x9b\xe7\xa3\x99\x1e\xa0\xd0\xc7\x05\x39\x5a\x1b\xa5\x3d\x02\xb4\x75\x46\x76\x42\xf6\x47\x57\x59\x24\xe7\x35\x97\x0a\x33\xb2\xca\x4e\x16\x75\xb8\x3c\x02\x83\x33\xdd\x42\xe0\x67\xa0\x2b\x57\x56\x63\x88\xf5\xea\xb6\x42\x33\xd3\xb6\x0b\x64\x78\x7a\x2c\xd0\x52\x18\x51\x74\x0a\xd8\x88\x02\x1d\x1a\x58\x89\xbc\x42\xf6\xde\x64\x4c\xe1\x97\xf3\x77\x1f\x2e\x3e\x93\x73\x2f\xc4\x91\xa8\xfa\x6e\xe3\xe7\xb7\x97\xef\x2e\x3e\x53\x9a\xeb\x84\xe4\x00\xf9\x10\x05\xff\xbc\xbd\xfa\x79\x18\x35\x5b\xd5\xa4\x90\x96\x62\x71\xf6\x17\xdd\xee\x82\x1c\x31\xad\x68\x72\x77\x20\x5b\x20\x2d\x28\x1d\xb3\xee\xca\x60\x36\xfd\xd4\x77\xee\x7b\x18\x7d\xa6\xdc\x83\x91\x7c\x1e\x27\xd3\x5f\x85\x67\xe8\xba\x11\xa6\x26\x37\x7f\x16\xaa\xc0\x4a\x5f\x55\x74\x9f\x9f\x8f\x8f\x8f\x53\xfa\xbc\xdd\xde\x4f\x7c\x60\xf4\xf8\x38\xb5\xba\x32\x29\x6e\xb7\xa3\x70\xfa\x03\x1b\xc2\xc9\x05\x88\x70\x56\x16\xdd\xf3\x70\xd5\xe2\x19\xc2\xb6\x23\x47\x62\xb1\xfe\xe1\xf9\x7c\x96\x72\xb1\x4e\x04\x17\x84\x13\xa7\x1f\x50\x0d\xb2\x4c\x3b\xc0\xef\x00\xde\xf1\x3c\xe6\x2b\x55\x08\x63\x97\x22\x4f\x72\x9d\x8a\xbc\x33\x4d\x0a\xab\x5a\x91\x6d\x30\x85\x21\xe2\xe5\xdd\xe1\x7a\x8e\x44\xa8\xd0\x51\x76\xf0\x6c\x94\x52\x39\x34\x0a\x1d\x08\x47\xec\x56\x26\x1f\xe0\xb5\x89\x1b\x92\x54\xa8\x14\xf3\xbc\xd3\x6b\x5f\xfd\x34\x85\xd7\x7e\x4d\x53\x30\xe2\x3c\x68\x24\x82\xb9\x90\xdd\xd0\x5b\x05\xe9\x4c\x66\xe1\x2e\x16\x65\x8e\x0e\xc1\x56\x74\xa4\xf3\x2a\xcf\x37\x53\xb8\xa9\x14\x7c\x7e\x9a\x71\x7d\xe6\x04\x81\x33\x56\xb2\x8d\x4e\x8a\x3c\xdf\x34\xe9\xa9\xcf\x44\xc6\x52\xea\xab\x65\x89\x75\xc2\x55\x5d\xd1\xe2\xc9\xc9\xc9\xc9\xab\x57\xaf\x5e\x1d\x2e\xaa\xdf\xf2\x56\xa0\x05\xb4\x70\x14\x56\xee\x8d\x60\x36\x46\x44\x51\x34\x19\x84\x86\x8a\x17\x4e\xbf\x92\x3d\xff\xac\xdb\x7b\xc7\x23\xe9\x3d\xef\x0f\xed\x90\xb5\xf7\xc4\x47\xe3\x1b\x92\xdf\x0e\xca\x67\x48\x30\xf4\x3a\x12\x2e\x62\xb1\xb7\x26\x2b\x97\x08\x97\x50\xbc\xd5\x81\xf4\xf1\x71\x9a\x16\xd9\x76\x1b\x4a\x5f\x8f\x8f\x53\xda\xe8\x36\x25\x6e\xb7\x6c\x29\x69\xef\x76\x7b\x3f\x9d\xf6\xe2\xe6\x20\x79\x93\x44\x7d\x1e\xe8\xa3\x3d\x3e\x52\xc8\x1e\x10\x10\x91\xdb\xed\x3d\x2c\x85\x85\x19\xa2\xda\x61\xb8\xbe\x21\xe3\xb1\x77\x37\xde\xde\xc4\xe7\x70\x90\x80\xe9\xb4\xa7\x64\x19\x50\x34\xd5\xe7\x6f\xc7\x62\x03\x73\x0c\x93\x71\x75\x37\x9b\x1f\x9a\x15\x07\x19\xed\xe5\x33\xc3\x12\x55\x86\x2a\x3d\x46\x9c\xcd\xa6\xe7\xe3\x69\xae\x48\xa7\x4c\xdf\x1c\x44\xf3\x35\x8a\x73\x98\x0a\x32\x0c\x95\xe9\x8a\xcb\xde\xec\xd4\x9c\x0f\xb3\xfe\x7f\xe8\x23\x22\x3f\xc7\xe9\xc9\xd7\x9d\xe0\x53\x33\xf7\x6d\xce\x70\xe4\xcd\xe8\xa2\xa4\xff\x1c\x3f\xec\x75\x0f\x9e\x73\x92\x7d\x54\x85\x0a\xc1\x73\x7d\x0e\x53\xe4\x3d\x40\x5d\x81\xe8\xa3\x05\xb2\xca\xd0\x49\xc6\x1a\x67\xcb\x23\xfe\x71\xfa\x16\x79\x9c\xeb\x4a\x65\x49\xa0\x37\x58\xaa\x4e\x05\x08\x55\xf5\x83\x16\x32\x94\xee\x79\x00\x81\xe8\x6a\x15\xee\x63\x73\x7d\xbf\x88\xcb\x4e\xca\x7f\x26\x08\xc2\x32\x2f\xdc\x1e\x1f\x1b\x16\x84\x9a\x5a\x12\xda\x46\x5d\x9d\x37\xff\x94\x93\x09\x68\xd5\xfb\x0c\x72\x1d\x23\x9b\x70\x1f\xb6\x09\xb7\xea\x63\x23\x3a\x4c\xbd\x23\x20\x01\xd1\x6a\x4f\xb4\xbb\x9a\x7e\x78\x20\x68\xbf\xf1\x7d\xb7\xa1\x49\x8b\x8b\x9b\x9b\xab\x9b\xdb\x0e\xba\x5f\xed\xff\x03\xbf\x1c\x9e\x3c\x78\xf5\xaa\xc7\xfd\x18\xb3\x7b\xd1\x1e\x94\x5e\xab\x84\x22\x85\xe1\xab\x4e\xab\x48\x54\x61\xd7\x14\x5a\xc5\x71\xee\x39\xd8\xaa\xf4\x25\xfa\x53\x2e\x2b\x4f\xed\xc6\x3a\x2c\x60\x26\x55\x26\xd5\xc2\x82\x36\xb0\x90\x6e\x59\xcd\xa6\xa9\x2e\xea\xf6\x5e\xbf\xbf\x34\x26\xfa\xcc\xd4\xa0\x70\x5d\x64\xf2\x60\x11\xf0\x92\x1d\xb5\xe4\xf1\x12\x9e\x48\x8a\xb3\x18\x67\xf4\x10\x8d\xd9\x6e\xb9\x2f\xe0\x9f\xa5\x3a\xf3\x0f\xe8\xc3\x40\x36\xd3\x22\xc9\xdf\x95\x5e\x92\xb2\x27\x37\xe5\x0f\x22\x69\x8e\x98\x25\x52\xad\xf4\x43\x17\x41\x6f\xd9\x6c\x91\xb9\xf0\xcb\xf8\x42\xd2\x36\x58\x2f\xb1\xd5\x29\x73\x7e\xae\x28\x3c\xfa\x63\xa8\x7d\xc0\x4d\x5d\x43\xa1\x78\x57\x38\x6d\xfa\xea\x43\xf5\x1a\x2e\x37\x7c\x8c\xc2\xbc\x27\x7d\x0c\x70\x06\x71\xc6\x52\x6a\xa2\xb4\xf3\xc6\xae\x03\xe1\xfb\x76\xcd\x95\x6d\x35\xaf\xa6\x7c\x97\x8b\x9e\xed\x88\x7a\x08\x29\x47\xef\x85\xb4\x85\x70\x69\x57\xf8\x4e\x0c\xd6\xea\x41\x1b\x32\x46\x91\x45\x7b\x2a\xd5\x7e\x71\xdf\x3f\x0f\x34\xf0\x7c\x12\x93\xc9\x48\xf8\x58\xd9\xbc\xd1\xa2\xa2\x05\x64\xa7\x96\xec\x9f\x46\x36\xfa\x99\x08\xf9\x3f\xa9\x97\xc8\x65\x97\xd8\x2e\xfd\x53\x1e\xaa\xf2\x47\x52\x97\x6d\x09\x57\xf8\x4c\xb4\x1c\x9c\xc8\xe2\x66\x25\xd1\x2e\x7c\xa3\x8e\xf6\xf8\x8f\x63\xe4\x1c\x49\x1c\x10\xf5\xcd\x31\x04\xed\xc9\x95\xaf\x82\xa7\xe8\x85\x05\x5f\xe5\xf1\xa2\xc4\x2f\x0e\x95\x8d\x44\xe3\x17\xf6\x61\xc4\xce\xd7\xb0\x62\x93\x05\x76\x15\x30\x9b\xab\xbc\x40\x3f\x47\x12\x6c\x6f\x53\x2a\x7f\xd2\x11\x25\xff\x26\xd3\xd6\xf5\x1d\x2d\x53\x4f\x7a\xe2\x39\xe6\xdb\x53\x63\xeb\xa0\x6f\x87\x61\x8e\x0b\x49\x8c\x8d\x94\x85\xda\xd4\xba\x41\x46\xa4\x75\xec\x83\x72\x0d\x45\xd4\x9a\x84\x41\x36\x2a\x93\x1f\xaf\xb9\xbe\xb0\x15\x52\xe8\x0f\x37\xef\x98\x02\x2e\x75\xf1\x55\xfa\xb8\x93\x63\xdf\xfb\xe1\xa0\x31\x84\x14\x22\x9f\x6b\x53\x74\x4a\xee\x7d\x7c\xde\x47\xc1\x14\xee\xcc\x06\xc4\x42\x48\x35\x94\xd2\x1b\x93\xfc\xcb\x6a\x55\x1b\xdb\xb4\xc8\x7a\x3a\xb7\x5c\xdc\x97\xaa\xac\x1c\x64\xc2\x09\x78\x1f\xa4\xf1\x22\x2d\xb2\x17\x64\x7a\xfb\x31\x89\x52\x36\x15\x78\xaf\x34\xda\x24\x16\xff\x5d\xa1\xea\x2c\x91\xfb\x79\xd6\xd3\xdb\xb0\x6a\xf7\xb2\xb4\xec\xbb\xd7\xe7\xbd\x61\x8d\xf3\xeb\x4b\xbf\xa1\x94\xb4\x3a\x15\xca\x87\x22\x33\xf4\xc1\x40\x7b\xc0\xac\x51\xb2\xd3\x48\xd2\x01\x98\x53\xb8\xce\x51\x58\x84\xaa\xcc\x84\xdb\x9b\x0e\xf1\xce\x33\xcd\xab\x6c\x9f\x4e\x61\x41\xc0\x1a\x67\xfb\x18\x06\x4f\x27\xc8\xa9\x5f\x41\xcf\x0f\xd8\x11\x12\x4d\xd8\x35\x85\x4b\xe7\xb3\x2f\xed\x96\xec\x8b\x77\x67\x1e\xea\x8b\x37\xf1\xd2\xd1\x0a\x43\xdb\xb5\x20\x28\xf8\xa5\xc4\x74\xcc\x4d\x0a\xb4\xc6\x23\x8e\xf6\x81\x0c\x63\x42\x58\xbf\x92\x7a\x26\xbc\x31\x12\x04\x56\x57\xae\x6d\x2c\xa6\xf0\x6b\x63\x84\xa3\xa9\xa0\x6d\x93\xda\x9c\x48\xdb\x04\x0b\x03\x6e\x2d\xb0\x13\xc5\x94\x50\xb6\xe2\x30\xc9\xa4\x19\x65\xe4\x0e\xb2\x45\x7c\xd4\x72\x2f\xb5\x54\x3e\xa4\xf2\x29\x9a\xc3\xd6\x54\x71\x73\x9d\x27\x94\x02\x46\xae\x78\xaa\x77\xcf\xc2\xf5\xb3\x91\x0a\x4a\xd8\xc5\x0a\x93\x4c\xa7\x0f\xd8\x35\x7b\xff\x5a\x28\x86\x2a\x56\x08\x6f\x78\x21\xc8\x82\x03\xf0\x81\xc0\x52\xe6\x98\x88\xdc\xa0\xc8\x36\x09\x7e\x91\xb6\x73\xb6\xe1\x2d\xdd\x90\xb0\x12\xfc\xca\x01\xd8\x59\x9c\xcd\x6b\xb2\x12\x89\xd6\x2b\x94\xa5\xc8\x29\x17\x33\xec\x6a\x8e\x5c\x29\x04\xd2\xc3\x1c\xf7\xd3\xfe\xe6\x6b\x3c\x12\xb7\xd6\x50\x23\xe3\xa6\x89\x97\x35\xad\x8e\xdf\xbc\x61\x5d\x4a\x0b\x0f\x52\x65\x74\x41\x82\x2e\x86\xa6\xe4\x13\xc7\xb3\x67\x29\xc8\xbe\xb4\x08\x61\xd2\x0f\x90\x13\x26\xf0\x9f\xd8\x15\x56\x16\x6e\xa8\x53\xec\x16\x89\x82\x98\xd6\x20\xf3\x60\xb1\x14\x86\xbe\x30\x74\x3f\xe0\xd5\xc1\xdb\x38\xe5\x0f\x97\x2c\x21\x96\x8f\xd5\x73\xa5\xbd\xa4\x2c\xba\xe3\x90\x1d\x6b\x2b\x02\xb2\xd6\x7d\x1f\xc0\x17\xad\x6f\xb2\x14\x2b\xb2\x54\xac\x4b\xbe\x90\x6e\x03\x31\x5d\x6f\x87\xb4\xdd\x50\x04\x13\xec\x55\x54\xed\x38\x94\x40\x36\x5f\x45\x63\xe4\x13\x7d\x0e\xc5\xe8\xfc\x42\x76\x3b\x8d\xaf\x6b\x84\x99\x5a\x0f\xcf\xb2\xa3\x22\x65\xe2\x77\x0a\x78\x03\x47\xec\x52\x81\x88\x3a\x1d\x21\x0c\x5c\x7e\xad\xe6\xb9\x4c\xc9\xca\x24\x21\x71\x23\x0e\x8d\xb6\x36\x56\x42\xba\xae\x6b\xeb\xfe\xc4\x94\x8f\x98\x0e\x9f\x03\xcf\x91\x57\x0e\x7e\x8b\x2a\x77\xb2\xcc\x7d\xd6\xe8\x2f\x0f\x7d\x0a\x11\x89\x47\xce\xe6\x2b\xfa\xde\xbd\x32\x88\x6b\x77\x71\x27\x20\x9d\xbf\x51\xa5\xb6\x56\xce\xfc\x2d\x60\x81\x44\x46\x3c\xd6\x46\x3c\x33\x8a\x4b\x6a\x4d\x67\x22\x9e\x5c\xc2\xc0\x09\xa3\x79\x92\xf4\x1c\x21\x4c\x53\xe5\xf8\x0c\x49\xd2\xb6\x90\x5d\xe4\x78\x48\x86\x0d\xfd\xd1\xde\xef\x05\x12\xfe\xa5\x8f\x5a\x04\xbb\x47\x32\xf5\xef\xfa\x7c\x0b\x21\x33\x83\x87\x24\x2c\xac\xd5\xa9\x64\xd0\x87\x29\x3e\x8d\xc4\xed\x0b\x9f\x99\x7f\x96\xe4\x85\x69\x66\x2a\xb8\x99\xdd\x39\x4b\x1e\x1a\x64\x90\x4b\x85\x20\xcc\xa2\xe2\xa4\x98\x44\x68\x16\xdb\x6d\x3b\x5e\x64\x38\x13\x28\x3d\x89\xf1\x35\x0b\x92\x07\x3f\x39\x82\xa2\x07\xdc\x7c\x33\xaa\x1e\x70\x73\xca\xb0\xa0\x14\xd2\x3c\x21\x6f\xf7\x31\xdb\x77\xfc\x22\x8a\x92\x82\xdd\x1a\xdc\x03\x6e\x46\xf1\x10\x02\xac\xe1\xd1\x9f\x2e\x06\x7e\x88\x28\xff\xcc\x36\x38\xc0\xf3\x73\x41\xde\x71\xd5\xa5\x90\x89\x2f\x48\xb6\xd2\xcb\xa8\x1c\xf5\x0b\x2e\xe0\x77\x73\x92\xd1\x80\x18\xaa\x3d\xe0\xbf\x2b\x69\xb8\xb6\x55\x56\xce\x8e\xd2\x92\x9b\xb0\xc7\xa7\x32\xfe\xb6\xec\x68\x85\x05\x5c\xa1\x02\x31\x77\x68\x40\x94\x65\xce\xfd\x13\x1e\x6c\x28\xb5\x87\x13\x7a\xa9\xa8\x56\x53\x58\x09\x23\xc5\x2c\xc7\x46\xe1\x2d\xba\x1a\xe2\xee\x92\x78\x81\x7d\x16\xd5\xcc\x4d\x1d\x7a\xbd\xc5\xbf\x4a\x64\xc2\x0b\x3f\x7c\xd8\x73\x9d\xe7\x7a\xed\xa9\x21\xda\x59\x9e\xfe\xe3\x76\x3b\x9c\x7d\x2d\x84\xc3\xb5\xd8\x24\x94\xf4\x70\xc7\x78\x28\xb1\xb8\xbe\x84\x1f\xfd\x1e\x4e\x94\x9a\x02\x97\x28\x25\xfd\x10\x6b\x4c\x07\xc2\x75\x5e\x5a\x8f\x88\xc5\x89\xfd\xfd\x28\x29\xa4\x1c\x06\x09\xe9\x2a\x20\xa8\x2b\xc5\x7b\x30\x46\xd6\xa1\x4a\x61\x2c\x9a\xde\x37\x4d\x9b\x0a\x89\x41\x67\x24\xb2\xc1\x0b\x85\x91\x5a\x43\x0f\x63\xfb\xf5\xfc\xe6\xe7\xcb\x9f\x7f\x1c\x5f\x89\x8f\x1b\x8e\xab\xc5\xaf\x85\x51\x75\xbb\x9f\x88\xec\x4a\xca\x6f\xe8\x19\x69\xc4\xc7\xd8\xe7\xbf\x0f\x9a\xcb\x02\x38\xf3\xc5\x11\x62\xe8\xbe\x2f\x81\x0b\xf8\x78\xee\xe9\xe8\x72\x48\x7b\x4c\xba\x55\xfe\x84\x0c\xdd\x70\xea\xc8\x98\xc9\x86\x66\x58\x1a\x4c\xc9\xb3\x24\x06\xcb\x5c\xa4\x9d\xb9\xd5\xdd\xd2\xe3\xd1\x79\x16\x0a\xbd\x3c\x66\xe6\x43\xe7\xdd\xf9\x06\x7e\xf7\xd3\x6a\xad\x28\xe9\x6f\x30\xd4\x96\xb5\xb2\x3e\x34\xe7\x0e\x15\xae\x77\xc0\x59\x87\x62\x24\xed\x41\x12\xcf\xa9\x51\xdb\xa5\xae\xf2\x8c\xc8\xa3\x48\x19\x3e\x58\xdf\xac\xf5\x9d\x24\x6f\xec\x69\x35\x7f\x1a\x9e\xd2\xa8\x29\xe2\xf5\x03\x47\x49\x74\x79\x0c\x64\x5c\x9e\xd6\xce\xe9\xaa\xfa\x5b\x7d\x04\x4a\x4e\x8e\xc5\xaa\xf7\xf0\x86\x90\xf2\xfe\x78\xa0\xb1\x2b\x18\x5f\x86\x6b\xbf\x05\x37\x4c\x58\x2e\x0b\xe9\x12\xb9\x50\xda\x74\x92\x14\x55\x3a\x04\xeb\xbc\xc5\x27\x7f\xf4\x69\xbf\x3e\x4e\xc6\xce\x83\x1b\x8b\x3d\x5d\x0a\xb5\x40\x72\x00\xfd\x79\xcd\xbb\x1a\x71\x5d\x97\xb7\x91\xfd\x7c\xe3\xfb\xc2\x35\xa8\x29\x5c\x12\x15\x52\x2d\xc6\xa8\x04\x13\x62\x93\x5c\x2f\x12\x2b\x7f\x1f\xa0\x83\x17\x9f\xc1\x8b\x5c\x2f\x6e\xe5\xef\xf8\x02\x0a\xc1\x45\x33\x5d\x39\x2b\xb3\x98\xcb\x7a\x0d\x35\x44\x0f\x9d\xc9\xc7\x97\x13\xf8\xcb\xcb\x7b\x78\xff\xf7\xda\x0f\xae\xd0\x90\x6b\xe7\xfe\x66\xe9\xdf\x08\x35\x8d\x75\xe7\x17\xa1\x7d\xa0\x32\x96\xfc\x02\x0b\x6d\x36\x47\x70\xe0\x37\x1c\xc1\xc4\x5f\xfe\xfa\xb7\x09\xfc\xf5\xe5\x7f\xfc\xed\x8f\x65\x84\x5c\x8d\xae\x3a\xdf\x47\xdd\x65\x22\x2c\x1e\xcb\xc1\xcb\x97\x13\xf8\xcf\x97\xf4\xef\x1e\x0a\x99\xe7\xd2\x62\xaa\x55\x2b\x19\xfa\x76\xdc\x70\x27\x37\x29\x8d\x2e\xd1\x38\xd9\x99\x01\x45\x7b\xdd\xb2\xae\xbe\xff\xef\x7d\x6f\x98\x00\xf0\x6d\xe1\x06\x58\x9c\x14\x38\x6c\xc1\xa3\x01\xcf\x34\xdf\x0b\xb2\xe3\xd2\xd5\xa2\xd1\x73\xb8\x33\x62\x25\x2d\xcc\x2a\x99\x67\xfd\x6d\x64\x66\xc5\x1b\x2f\x16\xe3\x28\xc3\x55\x5f\xd2\x1d\xf3\xa5\xf6\xdc\x4f\x30\xee\xdc\x1c\xa7\x54\xcd\xff\x1a\x5f\xa8\x7d\x7c\x9c\x16\x52\x85\x56\x29\x7d\x11\xe9\x40\xe3\x85\x49\x8d\x81\x8e\xb7\x05\x5d\x46\x2d\x36\xb3\xc2\x2a\x0a\x76\xf6\xfa\x5a\x07\x6a\xdf\x9d\xad\xab\x67\xf5\xab\x98\xda\xd0\x0d\xe7\xfa\x4a\x6f\x81\xf0\x49\xa3\x73\xc7\x12\xee\x55\x0e\x9b\x50\x3b\xe7\xd7\xfc\x94\x76\xcb\x90\xd8\x0f\x93\x14\x13\xf6\xc1\x5e\xef\xdd\x93\x52\x5c\x3b\xbc\x09\xef\x42\x60\x06\x4a\x8f\x1b\x58\x60\xec\xad\x59\x21\x16\xca\x18\x22\x0e\x4e\xd2\x04\xff\xb8\x9f\x32\xac\x43\x43\xcd\xb7\xa5\x0f\x15\x14\x47\x48\xa8\xf5\x46\x53\xa2\x57\x68\x8c\xcc\x32\xec\x2a\x8b\x11\x85\xed\x17\x9c\x9a\x59\xaf\x66\x6b\x8c\x6c\xda\xa3\x3c\x63\x0f\x2a\x91\x36\x29\xab\x59\x2e\xbb\x5e\x22\xf7\xa7\xc2\x6b\x63\x5b\xc8\xbf\xc3\x45\x89\x08\x6f\x7c\x52\x72\x98\x90\xb9\x60\xdb\x32\x43\x58\x49\x5f\xfd\xa0\x7b\x98\x0a\xb6\x34\x7e\x88\x1f\x33\x98\x6d\x40\xa8\x8d\x56\x3d\xef\x44\x31\xad\xb1\x8a\x89\xb3\xf0\xa6\xea\x40\xd0\xf1\xb4\x88\xc9\xfd\x19\xee\x12\xa9\x8c\xfe\x3f\x09\x2f\x95\xee\x37\x68\xe8\x22\xf0\x5f\x05\xc1\xd9\xc4\x87\x22\xe1\x5b\xd8\xd0\x93\x27\x79\x4a\x5b\x8d\x38\x22\xb7\xb7\xe4\xd9\xd5\x9e\x21\x0d\x6b\xf7\xb4\x46\x75\xdb\xc2\x5f\x33\xa9\x37\x4d\xe1\xb5\x56\x2b\x32\xf7\x21\x81\x69\x50\x38\xbd\x03\x7e\x58\x65\xf7\xb9\x1a\x68\x2c\xf6\x95\x72\x1b\xde\xe2\x83\x23\xb9\xab\xfb\x7b\xfb\xfc\xb5\x11\xd5\x1c\x8e\xea\x06\xd6\x3c\xc6\xb2\x8d\x41\x5b\x6a\x65\xb1\x6f\x3e\x6b\x8f\x68\x2e\xd8\xed\x27\xe6\xe1\x79\x4c\xc1\x5b\x29\x7d\x2c\xae\xd4\x45\xc1\xa5\x73\xa5\xff\xcb\x41\x1e\x35\xfb\xb5\x29\xbc\x26\x0f\xc3\x03\x1d\xed\xdf\xbd\x53\x67\x97\x13\x7e\x0e\x4c\x33\x14\xf2\x27\x0d\x65\x43\x1a\x1b\xcf\x15\xd5\x4a\x1a\xad\xd8\x76\xc6\x9a\x4a\x57\xab\x3c\xe4\xa6\x17\xcd\x16\xf8\x25\x6c\xd9\x4d\xa8\x0e\xe3\x7e\x73\xf1\xf7\x0f\x3f\x8e\x4e\xf2\x79\xf5\x71\x19\x7e\x36\x5b\x24\x16\x85\x49\x97\xc4\x59\x34\xb8\x75\x07\xb0\x53\x6d\xc3\x8e\xda\xe0\xee\xf6\x0c\xe3\xf1\x45\xf9\xfa\xc0\x64\x20\x43\x20\x52\xf6\xbd\xd2\xb7\xf6\x48\xcf\xf4\x46\x44\x5a\xed\xae\xfd\x0c\x6a\xcf\x1f\x72\x79\x73\x60\x10\x2a\x48\xe4\x0c\xde\x32\x05\xcd\xdf\x0d\xe1\x7a\x38\x01\x3b\x96\x80\xfe\x37\x5f\x8f\xa7\xa1\x3d\xe6\x1a\xc7\xb2\x8f\x7b\x9b\x71\xef\x35\xb5\xa3\xdf\x50\x3b\xe2\xbd\xc3\xf0\x2a\x6b\xf2\xbb\x2c\x13\xfc\xc2\xc3\x0e\xbe\x09\xdc\xf3\x06\xca\x05\xaf\x23\xa5\xbd\x16\x6e\x79\xd6\x16\xc9\x58\x54\x22\xcb\xe2\x2b\x2f\x7d\x98\xce\x79\xd9\xce\x4d\x70\x1a\xfe\x47\x96\xf0\x76\x48\xd3\xda\xd8\xc2\x14\x47\x1c\x6a\xea\x41\xf8\x36\x8c\xa5\xdd\xfa\xa8\xf9\xd9\xfc\x1d\xc0\x98\x64\x68\x9d\x54\x8c\xea\x6b\x48\xe0\x70\xe2\x4d\x03\xab\xb5\xa2\x85\x61\x24\xad\xd1\xfb\x44\x7a\x51\x75\x97\x26\x63\x7d\x02\x2e\xc3\x50\xcc\x05\x2d\x26\x07\x22\x5d\xab\x64\xcc\x94\x04\x78\xdc\xc4\x8a\xcb\x19\x36\x7b\x5a\x94\x1c\xdd\xb3\x13\xfa\xe8\xf9\xbc\x07\xb2\x70\xfe\xf3\xa4\xcd\x5e\xff\xdd\x89\x7c\xc4\x61\x60\x16\x7e\x4f\xef\xe3\x75\x1c\x1a\x26\x09\x47\x3d\x3a\xfa\x84\x73\x69\x5d\xa2\xe7\x8c\xc8\x26\x3c\x30\xc8\x46\x5f\x38\x87\xa6\xeb\xba\x7a\x5b\xc1\x63\xb8\x75\xd9\xdf\xff\x0d\x23\xdf\x6e\x0d\x50\xe2\xb9\xf3\x7c\xc5\xb5\x77\xee\x0c\x36\xca\xe1\xbb\xfb\xef\xfe\x37\x00\x00\xff\xff\x1d\xc5\x14\xbc\x92\x51\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 20882, mode: os.FileMode(420), modTime: time.Unix(1554423521, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

