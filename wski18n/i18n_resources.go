// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x8b\xdc\x38\x12\xfe\x3e\xbf\xa2\x08\x07\xbb\x0b\x49\x6f\xb2\xc7\xc1\x11\x08\xc7\x71\xc9\x91\xb9\xdd\x64\x42\x66\xb2\xcb\x91\x1d\x3c\x6a\xbb\xec\xd6\xb6\x2c\x19\x49\xee\x4e\x67\x98\xfb\xed\x47\xe9\xc5\x76\xf7\x8c\x6c\x77\x27\x61\xf3\xc9\xd3\x2a\xd5\x53\x2a\x95\xaa\x9e\x92\xf2\xf1\x0c\xe0\xf6\x0c\x00\xe0\x11\x2f\x1e\x3d\x87\x47\xb5\xa9\xb2\x46\x63\xc9\x3f\x65\xa8\xb5\xd2\x8f\x1e\xfb\x51\xab\x99\x34\x82\x59\xae\x24\x89\xbd\x72\x63\x67\x00\x77\x8f\x47\x34\x6c\x99\x96\x5c\x56\x09\x1d\xbf\x85\xd1\x29\x2d\xa6\xcd\x73\x34\x26\xa1\xe5\x32\x8c\x4e\x69\xe1\xb2\x54\x09\x15\xe7\x34\x94\x9c\x8f\x5a\x67\x7f\x18\x25\xb3\x9a\x1b\xc3\x65\x95\xe5\x75\x91\xad\x71\x97\x50\xf6\x9f\xcb\x8b\xb7\xc0\x65\xd3\x5a\x28\x98\x65\xf0\xc6\xcf\x82\xef\xf2\xba\xf8\x0e\x68\x5e\x12\x89\x14\x97\x82\x55\x99\xb1\x9a\xe7\x36\x01\xc0\x84\x50\x5b\x68\x0d\x6a\x28\xb0\xe4\x12\x0b\xd0\xad\xb4\xbc\x46\xd8\xa0\x36\x24\x35\x8d\xe0\x94\x64\x1b\xd4\x4b\x65\x30\x01\x14\x46\x41\xb5\xb6\x69\xed\x6c\xa5\x35\x93\xac\xc2\x62\xd4\xfa\x46\xab\x3f\x30\xb7\x80\xd2\x72\xcb\xd1\x80\x55\xb0\x44\xa8\x99\x5e\x63\x01\x51\xc3\x34\xa2\x55\x55\x25\x30\x5b\xa1\x68\x12\x78\x57\x4e\x02\x5e\xa3\x68\xa0\x46\x63\x58\x85\x33\xf4\xe6\x4a\x96\x3c\x15\xb7\x7e\x10\x4a\x2e\x10\xbe\x2f\xb0\x64\xad\xb0\xc0\x0d\xfc\xe5\xf5\xc5\x9b\x57\x3f\x2e\xb6\x66\xdd\x68\xd5\x98\x1f\x66\xe0\x70\x69\x51\xb3\xdc\xf2\x4d\x6a\x13\xbc\xbf\x06\x72\xe4\xbb\xba\xb1\x23\x01\x7f\xb0\x1f\xc1\xc2\xd4\xf9\xf1\x00\x9d\xd0\xb4\x56\xc9\x6a\x34\x0d\xcb\x53\x16\xf7\xe3\xd3\xba\x42\x1c\x24\x34\x35\xcc\xae\x28\x32\x0c\xea\x0d\x6a\x81\xc6\xc4\xc0\x99\xa1\xba\x66\x92\x97\x68\xa6\x74\x47\x31\xb7\x9d\x33\xd4\x16\xd8\x08\xb5\xab\x51\x4e\x29\xee\x05\xe7\xaa\x66\xad\x5d\x8d\x24\x16\x1a\x56\x9a\x7f\x76\x3f\xc0\xcd\xcf\xaf\xfe\x7b\x33\x47\x69\xc3\xb3\x95\x4a\xba\x61\xbb\xe2\x66\x0d\xff\x7c\x77\x0e\x37\xaf\x2f\x2e\xaf\xe6\x6a\x8c\x89\x66\x52\xe9\xaf\xaf\xde\x5f\x9e\x5f\xbc\x9d\xa3\x77\x8d\xbb\xcc\x79\x6a\xc4\xaf\xaa\x04\xbb\x42\x58\xac\x71\x37\xd7\xab\x39\x6a\x3b\x5b\x2f\x09\xcf\x50\xdc\xb4\x4b\xc1\xcd\x2a\x13\x2a\x59\xdc\xde\x79\x11\x60\xd0\xb0\x7c\xcd\x2a\xa4\x98\x20\x0c\x8d\x15\x37\x56\xef\xc0\xa0\x05\x2e\xe1\x7f\x7d\xc6\x98\x07\x6a\x56\x4a\xa7\xb6\xf3\x41\x54\xd6\x61\x8e\x15\x49\x4a\x2a\x21\xba\x13\xca\x5f\x2a\xd8\xa9\x16\x34\x32\x21\x76\xb0\x65\xd2\xf6\x71\x0e\x76\xc5\xcd\x3f\xe0\xfb\xdd\x8f\x6f\x7f\x78\x0e\x93\x38\xad\x3c\x01\x29\x4e\x3a\x12\x8b\xce\x4d\xfa\x54\xfd\x2e\xdf\x09\x64\xc6\xa5\xd5\x0d\x2f\x10\x98\x04\x9a\x41\x95\x29\xf7\x47\xcd\xaa\x35\xca\x39\x40\x0d\x1f\x39\x69\xf7\x80\x28\x18\x48\x9e\xf2\x25\x94\x4a\xc3\x45\x83\xf2\x37\x3a\x3a\x33\xb0\xa6\x92\xf0\xfd\x65\x41\x37\x05\x3e\xc6\xa2\xb5\x61\xa2\x45\x2a\x5d\x55\x8b\xc6\x5e\x8f\xe1\xc6\x3c\x99\x49\x65\xb3\x52\xb5\x32\x55\xe0\xdf\x0c\x13\x2a\x48\x65\xc1\x49\x03\xb3\xe0\x8e\xda\xc7\xdb\xdb\x05\x7d\xdc\xdd\x5d\x2f\x7e\x1f\xa1\x2a\xad\xe3\x5a\x1d\xec\x68\xbc\x7c\x70\x0c\x6b\xa0\xd9\xf9\xb3\xcf\xc0\xc7\x00\x4d\x84\xe6\xc3\x50\x71\xd2\x24\x58\x60\x6a\xc4\x25\x6b\x66\xf3\x55\x02\xe5\x7d\x20\x74\x84\x13\xa6\x10\x94\x69\x30\xe7\x25\xc7\x82\x12\x47\x57\xb9\x0a\x85\xc6\x39\xda\x69\x84\x2d\xb7\x2b\x20\xae\xa0\x24\x18\xd5\xea\x1c\xfd\x56\xe0\x27\x8b\x92\xb2\xb6\xd3\x8a\x9f\x6c\x34\x3e\xc8\xd2\xaf\xfe\x73\x6a\x6b\xe2\x22\xf2\x15\x93\x69\xa6\x17\xd7\x10\xa4\xe8\x04\x1f\x2c\x67\xc9\x0c\x16\x40\x27\x6c\x85\xe3\x16\x7f\x91\x99\xad\x34\x6d\xd3\x28\x6d\x27\x4d\x9d\xe5\x6e\xee\x9d\xdd\xe9\x74\xc6\x0d\x56\x30\xdf\x40\x2f\x95\x09\x5e\x73\x9b\xf1\x4a\x2a\x9d\xb4\xf0\x5c\x6e\x98\xe0\x45\xc4\x70\x53\x1c\x92\xfb\x22\x63\x0f\x4c\x0c\xea\x46\xf1\x3d\x91\xed\xfa\x9a\xf1\x44\x79\x45\x2b\xdc\x4f\x8c\x54\x85\x83\x37\xbc\xaa\xf6\x58\xc4\xd1\x8c\x49\x88\x44\x22\x48\xe4\xcb\x70\xa6\xb2\x25\x21\xf5\xe9\xf1\x24\xa8\xb0\x94\xb1\x36\xf3\x70\x3d\xb7\xb7\x0b\xfa\xbc\xbb\x7b\x0c\xa5\x56\x35\xfd\xed\xa3\xff\xee\x6e\x16\xa2\xdf\xae\x29\x44\x12\x8b\x3b\x65\xd0\x9e\x86\xd5\x39\x67\x0a\x6d\xcf\x8b\xb7\xb7\x8b\xee\xef\xa3\x57\x49\x6d\x77\x85\x36\x9e\xe2\x54\xfb\xf2\x6f\xc6\x85\x4f\x2e\x15\x5a\x77\x0c\xfb\x83\x19\xa7\x7a\xe0\xae\xbc\xba\x7e\x82\xe7\xf8\x9c\x6c\x41\xad\x27\x0c\x69\x65\xcd\xb4\x59\x31\x21\x32\xa1\x72\x26\x52\x85\x21\x8a\x0d\x80\xc8\x59\x1e\xdc\xcd\xf4\xf5\xd6\xcc\x45\x93\x68\xb7\x4a\xaf\x4f\xc2\x73\x0d\xa3\xc4\xf1\x62\xd4\xd7\x2c\x7f\xc7\x82\x45\x32\xff\xbc\xec\xbb\x99\x5c\xd5\x8d\x40\xf2\x6f\xb8\x98\x29\x5b\x21\x76\x73\x81\x4a\xb7\x5f\xd3\x28\x05\x2f\xc2\x29\xf4\x68\x04\xd6\x61\xc1\xfb\x56\xc2\xcd\xd6\xac\x03\x21\x8c\xe5\xf7\x86\xe2\x40\x63\xad\xa8\x4d\x66\xda\x72\xc7\x1f\xfd\x18\x16\xc0\x8c\x41\x3b\xee\xfe\x81\xa5\x39\x93\x39\x8a\xb4\xb1\x17\x3f\x2f\xe0\x5f\x5e\x86\x28\xc1\x4c\x02\x30\x00\xd0\x48\x71\x9a\x19\xcb\x6c\x9b\x0a\xef\x27\x4f\x9e\x3c\x79\xf1\xe2\xc5\x8b\xc1\x26\x0f\x9c\x74\xe9\xa6\x02\x09\x90\xe0\x58\x54\x1d\xb1\xd7\x1f\x06\xc2\xa7\xec\xf6\x1e\xd8\xe8\x7e\xef\x21\x8d\xee\xf8\x6c\xbc\x23\x77\x6d\x36\x71\xdb\x03\x09\x17\x54\x47\x2c\x4e\x95\x50\xa0\xf7\x63\x77\xe7\x35\xb6\x60\x28\x5a\x4d\xf6\x05\xa4\x61\x74\x7d\xbb\xe0\xdf\x32\x2d\x33\xd7\xbc\x53\x9b\xd1\xa0\x26\x33\x47\x92\x3d\xf1\x8f\x35\xee\x88\x7d\x50\x81\xd9\x32\x03\x1a\xad\xe6\xb8\x21\x56\x44\x69\xc8\x29\x5b\xf4\xca\xe8\x07\x47\x51\x85\x00\xa3\x94\x84\x25\x92\x85\x1a\x73\x46\xae\x69\x7c\xcf\x52\x28\xe7\x97\xd6\x20\x70\x0b\xaa\xb5\x86\x3a\x18\x55\xc2\x95\x66\x1b\x6e\x60\xd9\x72\x51\xcc\x58\x0a\x55\xc7\x5e\x3b\x9d\x37\xc1\xf2\xe4\x7e\xc5\x15\x29\x51\x0c\x16\xc5\x3d\x3b\xbd\xbd\x5d\x10\x25\xb5\xbb\x06\xef\xee\x3c\x3b\x4d\x2c\xe2\x71\x5c\x05\x99\x6f\x83\x4e\x89\xdb\x3d\x9d\xc6\x22\x1b\xa7\x15\x54\xfe\x22\x7d\xa9\x99\x2c\x98\x55\x7a\x37\x72\x3b\x44\xd6\x77\x72\x0e\x65\xb0\x3b\xdc\x40\xd0\x35\xed\xb4\xaf\x06\x6a\x56\xaa\x15\x05\x39\xc7\xa0\x5d\x80\x6f\x9c\xf6\x3b\x4f\x92\x76\x5f\xc4\x94\x17\x73\xfc\xe1\x5a\x1c\x47\x47\x26\xee\x0e\xaf\xfc\xa6\x39\x5b\x1c\x2b\x29\x1c\x5a\x41\x9f\x81\x2e\x1f\xdc\xd0\xf9\xf1\xd8\xd5\x1d\x34\x55\x36\x70\x1b\x27\x54\x0f\x94\xec\xdd\x1f\xfa\xd1\xd8\xdd\x4e\x15\x01\xf2\x72\x81\x0d\xca\x02\x65\x9e\xbc\x0a\x89\xa2\xd0\x8b\xfa\x90\xf2\x36\x2c\x16\x23\x38\x31\x35\xcc\x42\xfa\xd0\x0b\x9f\x82\xd5\x4f\xb9\xc7\x2b\x92\x6f\x37\x2f\x1f\x84\x81\x15\x33\xb0\x44\x94\x7b\x25\xa7\xcb\x64\x53\xe5\xf5\x01\x2b\x28\x4f\xb7\x3a\xc5\xfe\x5f\x1e\xa4\xe9\x07\x6d\xfa\xf3\xf8\x48\x5c\xcf\xfd\x1a\xfe\x75\xfc\x1a\xf5\xce\xf7\xec\xbd\x02\x9f\xf6\xed\xfd\x22\x78\xbc\x77\xc7\xac\xea\x2a\xb1\x6a\x65\x91\x85\x12\x9b\xb9\x12\x9b\x3e\x51\x02\x2d\x05\x79\x97\x1e\x86\x96\x84\x02\xe5\x4a\x19\xed\x5b\x28\x64\x74\xfe\xf3\x56\x6b\x5a\x46\xac\xc9\xf1\x11\xcb\x5d\x06\xf9\x6f\xd2\xc0\x8c\xdb\x6b\x5a\xed\x6c\x76\x41\xd9\xcd\x1b\x9d\xe5\x1a\x99\x4d\xb9\xd3\x3d\xbb\x82\x13\xd9\x5b\x81\xbb\xf3\x71\xef\xb5\xf1\x91\xab\x6f\x6e\x80\xc9\x22\x8c\xe5\xaa\xf0\x03\xf4\x31\xa3\xff\x0a\x26\x79\xb7\x8e\x9a\x54\xdc\x73\xea\xb7\x30\x29\x9a\x13\xd2\xd4\x64\xca\x7c\x70\x87\x47\xb3\x58\x80\x18\x24\xce\x19\xd9\xf2\x64\x98\x78\xf0\x26\x8e\xf3\x83\xfa\xbf\x20\x49\x1e\x2c\xf2\x6b\xe2\xcf\x4c\x26\x14\x5c\x25\x62\x91\x71\xb9\x51\xeb\x54\x68\xf5\xbd\xbd\x17\x73\xa7\x90\xa6\xc1\x76\x85\xb2\x8f\x39\xab\x79\x55\xa1\x0e\x43\x5f\x3f\xee\x3a\x32\xe9\xb8\x8a\xbb\x01\x37\x6c\x33\x4a\x24\x3d\xbf\x29\x95\x7e\x80\x8a\xb9\xdb\x43\x9a\x1f\xc9\x65\x4c\x2c\xe1\x55\x8d\x32\x47\x57\x4b\xa6\x0d\xe3\xfe\x6a\xb0\x37\xf0\x0b\xcc\x72\x9a\xa6\x21\xdd\xa5\xa3\xc9\x6a\xac\x89\x1f\x1a\xfe\x39\x85\xe9\x25\x2e\xf9\x67\x47\xdf\xfd\xb4\x3d\xd6\xd4\x93\x44\x26\xdd\xa5\x05\xed\xe3\x12\xed\x96\x22\xeb\xd9\x4f\x7f\x77\x3b\xf6\xb7\x67\x3f\xcd\xb6\xc9\xf2\x1a\x55\x9b\x62\x85\x61\xf4\x24\x63\x9e\x3e\x75\xc6\xfc\xf5\x29\xfd\x3b\xd6\x47\x42\x55\x63\x7e\x12\xaa\x3a\xd5\x49\xde\xaa\x67\x73\x2d\x0a\x97\xf6\x6c\x99\x7c\x10\xfd\xa5\xbb\x5b\xee\x68\xae\x89\x21\x2a\x76\xbe\x4c\x77\x3a\x16\x70\x5e\x49\x45\xad\xea\x04\x7f\x77\x16\x50\x77\xb8\xcb\x72\x55\x53\xd3\x90\xba\x8b\x27\x99\xf8\xc6\x92\xd7\x85\x2b\xa9\xa5\x45\xed\x0f\xee\x73\xff\x7a\x41\xa7\xf9\x7a\x2a\xc3\xb4\x5a\xc4\xd3\x91\x7a\xac\x0a\xff\x39\x47\x69\x08\x82\x94\x12\x5a\x2d\x42\xa3\xf7\xe1\xfd\x2f\x0e\xaf\xd5\x22\xf0\xfd\x8f\x7b\x9d\xe0\xb5\xa3\xfd\x93\xa9\x8e\x0c\xa9\x99\x28\x95\xae\x93\x59\xe3\x4d\x1c\x1f\xb3\x60\x01\x57\x7a\x07\xac\x62\x5c\xce\xf1\x77\xb8\xbd\x3d\xda\x07\xc3\xff\xe1\x32\x7c\xea\x2a\xd0\x62\x6e\x67\xe4\xf6\x01\x3f\x74\xbd\xda\xd4\xa3\xe1\x5e\xb7\xb6\x17\x7a\xf7\xdb\xb4\xfe\x49\xf1\xb0\xfd\x1a\xe7\xaf\x4b\xff\x5f\x0c\x36\xa8\x79\x99\xe2\x86\xbf\xba\xc1\x50\xd3\xbd\x0d\xc3\x2c\x89\x9f\xb8\xb1\x66\x8e\xe7\x7d\xa5\xd0\x74\x4c\x66\xa5\xe3\x07\xe1\xb8\x3c\xb8\x77\x08\x89\x80\xfe\xa2\x91\xf0\x6b\xcc\x04\xd4\x7b\x72\x19\xaa\x1c\xfd\xc1\xf2\xbe\xb0\x9d\x5d\x9f\xfd\x3f\x00\x00\xff\xff\x5e\x4f\x5b\xe5\xec\x27\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 10220, mode: os.FileMode(420), modTime: time.Unix(1516224585, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

