// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\xe3\xb8\x11\x7f\xcf\xa7\x18\xec\x4b\x5a\x20\x70\x77\xaf\x28\x50\x2c\x50\x14\x41\x93\x5e\xd3\xbb\x4d\x82\x24\x7b\x8b\xc3\x5e\xa0\xd0\xd2\xd8\xe6\x59\x22\x05\x92\xb2\xd7\x67\xf8\xbb\x17\x43\x8a\xb2\xec\x88\x92\xfc\x2f\x57\x14\xcd\x93\x1c\x71\x7e\xbf\x99\xe1\x70\x66\x48\xf1\xeb\x19\xc0\xf2\x0c\x00\xe0\x1d\x4f\xde\x7d\x84\x77\x99\x1e\x47\xb9\xc2\x11\xff\x16\xa1\x52\x52\xbd\xbb\x70\x6f\x8d\x62\x42\xa7\xcc\x70\x29\x68\xd8\xb5\x7d\x77\x06\xb0\xba\x68\x41\x98\x33\x25\xb8\x18\x07\x30\xbe\x94\x6f\xbb\x50\x74\x11\xc7\xa8\x75\x00\xe5\xb1\x7c\xdb\x85\xc2\xc5\x48\x06\x20\x6e\xe8\x55\x50\xfe\x57\x2d\x45\x94\x71\xad\xb9\x18\x47\x71\x96\x44\x53\x5c\x04\x80\xfe\xfd\x78\x77\x0b\x5c\xe4\x85\x81\x84\x19\x06\x9f\x9c\x14\x9c\xc7\x59\x72\x0e\x24\x17\x64\x21\xe0\x51\xca\xc6\x91\x60\x19\xea\x9c\xc5\x18\xe0\x58\xbf\xef\xc6\x62\x85\x99\xb4\xa8\x4b\xaf\xa5\xe2\xbf\xd9\x7f\xc0\xcb\x0f\xd7\x3f\xbf\xf4\x01\xcd\x79\x34\x91\xda\x04\x40\xe7\x13\xae\xa7\x70\x79\x7f\x03\x2f\xff\xba\x7b\x7c\xea\x8b\x38\x43\xa5\x09\xa1\x13\xf4\xa7\xeb\x87\xc7\x9b\xbb\xdb\x3e\xb8\x53\x5c\x44\x23\x9e\x86\x3c\x99\x33\x33\x01\x39\x02\x33\x41\x18\x4c\x71\x01\x76\x6c\x37\x6c\x8c\xca\xf4\xc6\xa5\xc1\x1d\xc0\xb9\x92\x59\x6e\xa2\x04\xf3\x54\x86\xa6\xea\x4a\xc2\x42\x16\xa0\x90\xa5\xe9\x02\xe6\x4c\x18\x30\x12\x9c\x08\x98\x09\xd7\x7f\x87\x3f\x2c\xfe\x74\xfb\xc7\x8f\xd0\xc9\x43\xb3\x1e\x8e\x89\x5f\xc4\x7d\x8a\x4c\x23\xe4\x4a\xce\x78\x82\xc0\x04\x90\x04\x0a\xc3\x63\x17\x28\x46\x4e\x51\xf4\x21\xca\x79\x4b\x9c\xbc\x22\x22\x77\xd1\x78\x0a\x70\x18\x49\x05\x77\x39\x8a\x2f\x34\xf1\x3d\xb8\xba\x56\xcd\x6b\xb3\xa0\x12\x81\xaf\x09\x8e\x58\x91\x1a\x98\xb1\xb4\x40\xe0\x1a\xc6\x05\x6a\xf3\xdc\xc6\x9b\x31\xc1\x47\xa8\x4d\x24\xa4\x89\x46\xb2\x10\x49\x80\xf9\x53\x39\xd0\x06\x01\x08\x69\xc0\x8e\x06\x66\xc0\x06\xca\xd7\xe5\x72\x40\x0f\xab\xd5\xf3\xe0\x17\x11\x26\x2c\x6c\xfe\xa9\x68\x5b\xa3\xe5\xb3\xcd\x3a\x35\x64\xeb\x4f\x27\x92\xa1\x30\xbb\x10\x15\x62\x0f\x2a\x2f\xd4\x49\xa6\x0a\x61\x78\x86\x94\x5f\x33\x66\xe2\x49\x80\xe5\xc1\x0d\xb3\x3c\xa5\x08\x51\xe9\x1c\x63\x3e\xe2\x98\x00\x17\xe0\x35\x86\x44\xa2\xb6\x8e\xb6\x88\x30\xe7\x66\x02\x2c\xb6\xa1\xab\x65\xa1\x62\x74\x53\x81\xdf\x0c\x0a\xca\x39\x16\x15\xbf\x19\xaf\x7c\x39\x96\xfe\xeb\x1e\xbb\xa6\xc6\x1b\x11\x4f\x98\x18\x63\x28\x10\xbc\x0d\xe5\x28\x5a\xbf\x5b\xe6\x0c\x99\xc6\x04\x68\x85\x4d\xb0\x5d\xe3\x83\xd4\x2c\x84\x2e\xf2\x5c\x2a\xd3\xa9\x6a\x2f\x77\x73\xe7\xec\x0a\xd3\x2a\x57\xb3\xa0\xbf\x82\x6e\x54\x94\xf2\x8c\x9b\x88\x8f\x85\x54\x41\x0d\x6f\xc4\x8c\xa5\x3c\xf1\x1c\x56\xc4\x32\xd9\x27\x52\x76\x4b\xc5\x12\xae\x95\x3f\x96\x62\xc4\xc7\x55\xad\x6f\x4f\x94\x4f\x64\xe1\x66\x62\xa4\x1a\x52\x7a\xc3\x41\x15\xbb\x32\xb6\x66\x4c\x62\xa4\x12\x48\x43\x0e\xe3\xe9\xca\x96\xc4\xb4\x4e\x8f\x7b\x51\x95\xa6\xb4\xb5\x5d\xdb\xf6\x2c\x97\x03\x7a\x5c\xad\x2e\x60\xa4\x64\x46\xbf\x5d\xf4\xaf\x56\xbd\x18\xdd\x74\x75\x31\xd2\x30\x3f\x53\x1a\xcd\x7e\x5c\x95\x73\xba\xd8\x36\xbc\xb8\x5c\x0e\xaa\xdf\x3b\x5b\x89\x4a\x45\x63\x34\x7e\x15\x87\xda\xe1\x7f\x32\x9e\xba\xe4\x32\x46\x63\x97\xe1\x7a\x61\x7a\x51\x47\x5c\x95\x57\xd0\xa8\x66\x3c\xc6\x8f\xa4\x0b\x2a\x55\x57\xa4\xb1\x40\x88\x8c\x29\x3d\x61\x69\x1a\xa5\x32\x66\x69\xa8\x32\xf8\x61\x35\x26\xf2\x96\x63\xb7\x92\xae\xe0\xea\xf6\x72\xb4\x66\x13\x68\xe6\x52\x4d\xf7\xe2\xe3\xc2\xa0\x12\xd8\x5e\x8d\xd6\x45\xcb\x6d\x3a\x30\x09\x26\xa0\xab\x6a\x28\xc4\x32\xcb\x53\x24\x07\x97\x3b\x95\x51\x91\xa6\x8b\xbe\x44\x23\x3b\x61\xdd\x2c\x09\x4f\xca\x65\xe8\xd8\x88\xac\xe2\x82\x87\x42\xc0\xcb\x5c\x4f\xcb\x8e\xd0\xd7\xdf\x17\x0a\x04\x85\x99\x9c\x21\xe4\x4c\x19\x6e\xdb\x47\xf7\x0e\x13\x60\x5a\xa3\x69\x77\x7f\x4d\xd3\x98\x89\x18\xd3\xb0\xb2\x77\x3f\x0c\xe0\x1f\x6e\x0c\xf5\x04\x7d\xdb\x8d\x5a\xab\x40\x5d\x07\x1b\x63\xd2\xee\x94\xcf\x35\x09\xea\xb3\x13\x74\xde\xa7\x4c\x6c\x38\xea\x56\x57\x41\x52\x28\xd2\xae\x64\xaa\x6b\x79\x3a\x27\xd2\x3e\x38\xb2\x7b\x18\xea\x57\x73\x54\xa4\x66\x4b\xd6\xa0\x42\x36\xc5\x05\x95\x31\xca\x54\x73\xa6\x41\xa1\x51\x1c\x67\x54\x5e\x29\x9c\x2d\xd8\x60\x0d\x46\xff\xb0\xbd\x4e\x9a\x82\x96\x52\xc0\x10\x49\x43\x85\x31\x23\xd7\xe4\xae\xf9\x4d\xa4\xf5\x4b\xa1\x11\xb8\x01\x59\x18\x4d\xad\xb0\x1c\xc1\x93\x62\x33\xae\x61\x58\xf0\x34\xe9\x61\x0a\xa5\xd9\x35\x7a\xa4\x30\x4f\x59\x1c\x9c\x2f\x6f\x91\x4c\x93\x9a\x51\xdc\xb5\x39\xcb\xe5\x80\x7a\x1b\xb3\xc8\x71\xb5\x72\x6d\x4e\xc0\x88\x0b\x6f\x05\xa9\x6f\x4a\x4c\x81\xf3\x0d\x4c\x6d\x90\x6d\xd6\xa7\xed\x1c\xea\x6b\x60\xc6\x44\xc2\x8c\x54\x8b\x96\x0d\x32\x69\x5e\x8d\xb3\x0c\xb5\x99\xe1\x1a\x4a\xac\x41\x7b\xd6\xf6\xbd\xad\xad\x1a\x14\x00\xbf\x62\xdc\x56\xe3\x3d\x85\x2d\x1e\x09\xfd\x4c\xe8\x69\xb5\x22\x9f\xd5\x42\xdf\x3a\x8b\x14\x4a\x7c\xeb\xbd\xd5\xf9\x9a\xb2\x00\x11\x44\xe6\x20\x56\x1b\x7d\x51\x85\x90\xf9\x1d\x48\x57\x22\x20\xcf\x25\x98\xa3\x48\x50\xc4\xc1\xcd\xaa\x1f\x0a\xeb\xa1\x6e\xb6\xac\x0e\xcf\x83\x41\x0b\x8f\x5f\x75\xbd\x98\x3e\xaf\x07\xef\xc3\xb5\x16\x79\x95\xfa\x83\xe7\x4d\x57\x6b\x9a\x8a\x05\x26\x4c\xc3\x10\x51\x6c\x54\x80\x2a\x45\x74\x25\xd8\x06\x1d\x28\x01\x16\x2a\xd4\x9f\x5d\x6d\xe5\xbf\x06\x8d\x7e\xbf\x72\xe1\xad\xd9\x48\xec\x47\xf3\xa9\x47\xed\xef\xd5\x0d\x3d\xda\xfd\xfa\xba\xb2\xec\xea\xd9\x36\x9d\xaa\xe2\x46\xfb\xff\xa8\xac\x5a\x91\xad\x5a\xe1\x95\x94\xa2\xa1\xe0\xae\x72\x42\x2d\xb4\x7d\xce\xb7\xd5\x81\xe6\xac\xac\x0d\xb4\xec\xe3\x42\x29\x32\xc2\x97\xb9\x32\xeb\xb8\x8d\xba\x7b\x26\x04\xa6\xed\x3c\x93\xad\xbd\xb6\xec\x8f\xd7\xf7\x97\x0f\x97\x4f\x77\x0f\x01\x7d\xff\xd6\xf8\x07\xd7\x82\x8a\x17\x4d\x67\x2a\xe7\xf6\xb8\x0a\x52\x2e\x10\x18\x2a\xeb\xca\x19\x2a\xb7\xaf\x6c\x96\xdf\xf8\x6b\x56\xec\x7b\x69\xc0\x9e\x57\x43\xac\x90\x59\x97\xe5\x2c\x9e\xb2\x31\xba\xfd\xbf\x7b\x97\xa1\xd6\x6c\x5c\x6b\x74\x81\x89\xc4\xcb\xc9\xc4\xbd\xa0\x07\xd7\x02\x37\xdb\x78\x12\xaa\xbe\x46\x95\xfb\xdd\xff\x2d\x9b\x72\xfe\x16\x06\x1d\x46\xd3\xd7\x18\x55\xa4\x6f\x12\x72\x07\xf2\x74\x98\xa3\xd1\x58\x16\xbb\x7f\x34\xcc\x14\x9a\x52\xc4\x89\x6d\x3b\x09\x69\xdf\x79\x33\x8a\x8f\xc7\xa8\xde\x62\xea\x0e\xa7\xda\xd5\xa8\x11\x62\xf2\x96\x96\x1d\xc8\xb7\x6b\x86\x1f\x72\x91\xd0\xef\x37\xcc\x8a\x87\x53\x36\x1a\xb9\xee\x9c\xcb\x44\x4f\xdb\xa6\xc2\xe4\x85\x59\xad\x80\x5a\xd9\xae\x86\x3b\x20\xd6\x41\x66\xd7\xd8\xae\x54\x8d\x42\x1d\x44\x1b\x01\xb2\x2b\x61\xab\x70\x07\xb1\x9f\xb7\x5d\x39\x43\x72\x3d\xe9\x7c\x98\xec\x4b\x1b\x92\x6f\xa4\x5f\x9f\xbf\x90\xc8\x76\x3f\xd7\x75\x66\xd3\x24\xd3\x48\xb3\xd1\x24\x77\x35\xc3\x3d\xfa\xec\xbd\xfa\xe9\xda\x0e\xc8\xf7\xbe\xdb\x87\x6f\x9d\x5b\xa7\x90\xe0\x7f\xaf\xd5\xeb\x84\x94\xf8\x8d\xc1\xc9\x1b\xc2\xe3\x31\xf5\x35\xe9\xc4\x6d\xc6\xb1\x78\xfe\xdf\x42\x6d\xf9\xf3\xf4\x2d\xd4\x11\xa9\x76\x35\xea\xc4\x2d\xd4\xb1\xf9\xfa\x9a\x77\xfa\x4d\xf2\x11\xa9\x1a\x8d\xfa\x72\xf9\x70\x7b\x73\xfb\xfd\x47\x78\x9a\x20\x9c\xbb\x4f\x69\xe7\xf0\xf3\xe5\xa7\x1f\xab\x63\xe6\xd2\xa5\xee\xa4\x05\xb8\xae\x1d\x2a\x0f\xe0\x7e\x7d\xa8\x7c\x4e\x4e\x3f\xf7\xa7\xc8\xc0\x68\xa0\x8e\x15\x1f\xba\x2f\xde\xe5\xe7\x6f\xf7\xb1\x57\x87\x6d\xff\x3d\x35\xea\x3b\xef\xbe\xb1\x78\xc3\xf9\x3f\x1e\x65\xa3\x91\xf7\x2d\x2d\x53\xf7\xf1\x6c\xb3\x15\x87\x61\xb6\xaa\x79\x4c\xf5\x8e\xa0\xd6\x53\x19\x91\xc7\x50\x6b\x3f\xac\x56\xb5\x5e\xb5\xfc\x87\xea\xb6\x07\x60\xa3\x82\x0f\xdb\x9b\xa0\x7d\x15\xdb\x03\xa8\x51\xa1\xcb\xd7\x1b\xc0\x7d\x55\xda\x0b\xaa\x2b\xba\xca\xd4\x57\xc7\x2a\xfb\xf0\x5e\x01\xd5\x2e\xde\x3a\x45\xd4\x05\xed\x44\xdb\x43\xb0\x63\x0a\xfc\xb5\xa7\x1d\x48\x7b\x0a\x37\x12\xaf\xef\x7e\x70\x31\x93\x53\xf7\x95\xd4\x35\x12\x13\x14\x6f\xd4\xd3\xbc\xb1\x12\xed\x3d\xc1\xa7\xea\xe3\xed\x88\x63\x9a\x80\xcf\x98\x3f\xb9\xdb\xc6\x90\x15\xda\xc0\x10\xa9\x6f\xee\x51\xcf\x77\x44\x6b\x57\x6d\x5b\xd8\x5f\xa3\x63\x33\x57\xdb\xeb\x5f\x71\xd6\x5f\xea\xca\x6b\xd2\x3d\x94\x3d\x18\x7f\x3f\xcf\xfe\xc8\x63\x14\x1a\x8f\xe4\xd9\x00\x5a\x3f\xcf\x7a\xe1\x53\x79\x76\x6f\xfc\x76\xf5\x3d\xac\xbd\xcc\x68\x1f\x6f\xae\x56\x2b\xcf\xc2\xc0\x5d\x7c\x94\x02\x7b\xa8\xba\x13\x56\xf3\x87\x4b\xcc\xa4\x5a\x3c\xf2\xdf\xec\x3d\x11\x7b\xbb\x52\x6f\xdc\x21\xd0\x13\x59\xa4\x09\x4d\x0e\x13\xf6\x96\x15\x2d\xea\x21\x9a\x39\x65\xac\x0f\xdf\xfd\xd5\x2e\xdf\xbf\x7c\xf8\x2e\xac\xed\x51\x29\x1a\x8d\x30\x3c\x43\x59\x98\xbd\xe0\xdf\xbf\xb7\xf0\x7f\x7e\x4f\x7f\x61\x23\x8e\x4a\xd1\x68\x44\x2a\xc7\xfb\xfa\xc8\xe1\x7f\x68\x51\xff\x48\xe0\x5d\x91\x6d\x91\xc1\x5f\xd3\x2d\x3f\xa8\x57\x17\x4c\x27\x4c\x8c\xd9\x30\x45\xda\xe7\x18\x09\x42\xce\x2f\xea\xf7\x9a\x86\x58\xbf\xc5\xdb\x19\xf9\x47\xe4\x6a\x37\x8b\xe5\x79\xea\xaf\x00\x37\xdc\xd0\xe9\x73\x9d\xc9\x7f\x9e\xaf\x5d\x60\xea\xb0\xef\x34\xa4\x64\xe8\xd9\xf3\xd9\x7f\x02\x00\x00\xff\xff\x53\xcc\xe9\x52\x16\x36\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 13846, mode: os.FileMode(420), modTime: time.Unix(1515534056, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

