// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x3c\x6b\x6f\x1b\x39\x92\xdf\xe7\x57\x14\x06\x0b\x64\x16\x90\xe5\xec\xe2\x70\x58\xf8\x2e\x07\x78\x13\x67\xc7\x3b\xc9\x38\xe7\xc7\x0e\xe6\x12\xa3\x43\x75\x97\x24\xae\xbb\xc9\x5e\x92\x2d\x45\x63\xe8\xbf\x1f\xaa\x48\x76\xb7\x64\xf5\x43\x4e\x06\x77\xf9\x12\x59\x24\xeb\xc5\x62\xb1\x5e\xd4\xc7\xef\x00\x1e\xbf\x03\x00\xf8\x5e\x66\xdf\x9f\xc1\xf7\x85\x5d\x24\xa5\xc1\xb9\xfc\x92\xa0\x31\xda\x7c\x3f\xf1\xa3\xce\x08\x65\x73\xe1\xa4\x56\x34\xed\x82\xc7\xbe\x03\xd8\x4e\x7a\x20\x48\x35\xd7\x1d\x00\x2e\x69\x68\x68\xbd\xad\xd2\x14\xad\xed\x00\x71\x13\x46\x87\xa0\xac\x85\x51\x52\x2d\x3a\xa0\xfc\x12\x46\x3b\xa1\xa4\x45\x96\x64\x68\xd3\x24\xd7\x6a\x91\x18\x2c\xb5\x71\x1d\xb0\xae\x79\xd0\x82\x56\x90\x61\x99\xeb\x0d\x66\x80\xca\x49\x27\xd1\xc2\x0f\x72\x8a\xd3\x09\x7c\x10\xe9\x83\x58\xa0\x9d\xc0\x79\x4a\xeb\xec\x04\x6e\x8d\x5c\x2c\xd0\xd8\x09\x5c\x57\x39\x8d\xa0\x4b\xa7\x7f\x04\x61\x61\x8d\x79\x4e\xff\x1b\x4c\x51\x39\x5e\xb1\x62\x6c\x16\xa4\x02\xb7\x44\xb0\x25\xa6\x72\x2e\x31\x03\x25\x0a\xb4\xa5\x48\x71\x3a\x9a\x17\xad\xbb\x38\xb9\x5d\x22\x5c\x95\xa8\x7e\x59\x4a\xfb\x00\x6f\x98\x99\x82\x48\xb8\xd5\x3a\xff\xa4\x3e\xa9\x5b\x0d\x33\x5c\x48\x05\x6b\x6d\x1e\xa4\x5a\xc0\x5a\xba\x25\xac\xed\x83\x67\x7c\x02\xa6\xf2\x04\xbe\xa8\xbf\x7b\x01\xa9\x2e\x0a\xa1\xb2\x33\x02\xf0\xc9\xfd\xa1\x99\xce\x10\x97\xd2\xc2\x5a\xe6\x79\x90\x5d\x0b\xbf\xb0\x16\x9d\x6d\xf1\x2a\x15\x14\x42\xc9\x39\x5a\x37\xdd\x88\x22\x07\x6d\x5a\x5f\x14\xf9\x27\x75\x39\x87\xb4\x32\x86\x48\xce\xa4\xc1\xd4\x69\xb3\x81\x4c\xa3\x55\x0e\x96\x62\x85\x20\xd4\xa6\x5e\x02\x73\x99\xe3\xa4\x21\x07\x4a\x23\x95\xb3\xe0\x88\xa4\x25\xe6\x25\x14\x68\xad\x58\xe0\xd4\x13\x8a\x50\x68\xeb\x98\x1d\xad\x60\x2d\x36\x16\xf4\x1c\x2a\xcb\x72\xa8\x81\x38\x1d\x39\x11\x2a\x3b\xd5\x06\x2a\xd5\xc5\x99\x30\xc8\x42\xd9\x11\x49\xeb\x0f\x38\x29\xa0\x14\x6e\x79\xea\xf4\xe9\x0e\xe3\xe3\x66\xc1\x49\x56\x0f\x64\xf5\x5e\x1e\x00\x10\x29\x3c\xfc\xed\x48\x2a\x06\xa7\xf7\x92\xf3\x49\x9d\x57\xca\x2d\xe9\xd8\xa4\xac\x8e\x67\x9f\x54\x03\xdb\xa0\xc8\x2c\xa4\x06\x33\x9a\x20\x72\x0b\x73\xa3\x0b\xf8\xc3\x8f\x57\xef\x2f\x4e\xa7\x6b\xfb\x50\x1a\x5d\x5a\x98\x6d\x20\xc3\xb9\xa8\x72\xf7\x49\x5d\xad\xd0\xac\x8d\x74\x18\xbf\x82\x54\xab\xb9\x5c\xf0\xa6\xd3\x51\x7d\xfd\xee\xf2\xec\x93\x02\xd8\x91\xe4\x49\x98\xf4\x9f\xad\xc9\xff\xd5\x23\x80\x2b\x13\xd4\x73\x03\x22\xcf\xc1\x2d\x0d\xf6\x00\x17\xa5\x5c\x92\x06\xfd\x78\x75\x73\x4b\x7f\x56\x6e\x09\x3f\x5d\xfc\x0a\x27\x27\xf5\x29\x86\x9f\xcf\xdf\x5f\xdc\x7c\x38\x7f\x7d\xd1\x89\x75\xc4\x39\xb7\x4b\x6d\x5c\xbf\xd1\xfa\x60\xf4\x4a\x66\x68\x41\x80\xad\x8a\x42\x18\x92\x32\xcd\x27\x9d\x7e\xa2\xa9\x33\x24\x25\x8f\xd6\xed\x34\xee\x35\x66\x30\x13\x16\x33\x62\x39\xd2\xd8\xda\x5b\xf8\xf5\xfc\xfd\xbb\x31\x76\x29\xd0\xdb\x6d\x98\xce\xc1\x69\x9d\x83\x45\x47\xe7\x8b\xcf\x66\x90\xea\x46\x57\x06\x74\x89\x6a\xcd\xf4\x96\xc1\xce\x86\x63\x29\x76\x0f\xfb\x78\x5a\x56\x68\x2c\xe1\xee\x12\x9e\x54\x8e\xed\x5c\x98\x07\xaa\x2a\x66\x68\x48\x76\xf5\x86\x8f\xc6\x65\x37\x2a\xed\xe7\xdb\x69\xa0\x49\x9e\xd9\x66\x73\x6a\x66\x67\xe8\xd6\x88\x0a\xd2\x5c\x92\xd8\x85\xca\xc0\xa2\x59\xa1\x19\x7d\x29\x8c\xa7\xa1\xb5\xbd\x84\x27\xaa\x02\x7f\xb1\xa3\x3a\xdd\x5b\x41\xeb\x74\x49\xf0\x45\xde\x86\x47\x5b\x14\xa7\xb3\xea\x90\x5d\x78\x23\xe7\x73\x64\x8b\x1e\x2d\xae\xa9\x14\xdd\xdd\x4c\xce\xd9\xae\x11\xa2\xaf\x9e\x7e\x33\xd2\x82\xf5\x4e\x6d\x5b\xaf\xe7\xc3\x38\x29\x8d\xfe\x27\xa6\x8e\xce\x3b\x7c\xb8\xbe\xfa\xfb\xc5\xeb\xdb\xd1\x7a\x12\x45\xdd\xb1\x4f\x77\x9d\xf7\x0c\x1b\x4b\xaf\x10\x63\xf5\x61\x2c\x2e\x83\x85\x5e\xa1\x7d\x8a\x73\xbd\x94\xe9\x12\xd6\x68\xb0\x71\x8a\x98\x0e\x3a\x35\x3b\x9a\xb0\x6f\x2f\x76\xfc\x8c\x0c\x73\x74\xb4\xd9\x87\x99\xda\x01\xe6\xaf\x73\x53\xa9\xb3\xff\x77\xd7\xdb\x61\x48\x87\xb4\x01\x7e\xd0\x2a\xdf\xb0\x7f\x65\x61\xae\x4d\x4b\x3c\xec\xfd\xb1\x82\x15\x3a\xc3\x3f\x8e\xd6\x1b\xfc\xd2\x73\x0f\x5c\xf0\x20\x04\x4a\x76\x84\x5b\x8b\x7c\xac\xd2\x8c\x40\x64\x69\xbb\xc4\x02\xb3\x7e\x8c\x64\x6d\x76\x94\x64\x5e\x29\xf6\x9b\xbd\x8d\xe8\xf0\xc7\x68\x15\x39\xa0\x9e\x8e\x3d\x2d\xf0\x5f\x76\x08\xbd\xb5\xa9\x7e\x1e\x66\x27\x47\x5c\xba\xf3\x5c\x2c\x12\x51\xca\x84\xae\xf7\x0e\xfe\xfd\xfd\x74\xfe\xe1\x12\x3e\xd3\xfd\xff\x79\x24\xc4\xfe\x8b\xa8\x05\xf4\x1f\x17\xd7\x37\x97\x57\x3f\x8f\x82\x5b\xb9\x65\xf2\x80\x5d\x87\x9b\x86\xb5\x91\xbf\xf1\x17\xf0\xf9\xa7\x8b\x5f\xc7\x00\x4d\xd1\xb8\x84\x76\xa7\x03\x2a\xc9\x97\xac\x37\x1d\xd9\x29\x4d\xe6\xad\x1c\x03\x98\x5d\xb1\x0e\xa8\x6d\xa7\xee\x87\xe8\xe9\x49\xbb\xef\x1a\x0e\x1c\x16\x2f\x95\x3c\xd7\xeb\x24\xc0\xe8\x8a\x3e\x79\x12\xd4\x93\x86\xa1\x36\xc7\xb7\x4f\x2e\x75\xd0\x50\xdf\x83\x23\x40\x97\x06\x57\x12\xd7\x1d\x70\xed\x92\x09\x8d\x40\x4f\x77\x2e\xea\x32\x17\x6a\x04\x86\x07\xdc\x8c\xde\xd2\x07\xdc\x8c\x25\xdc\x4b\x3a\x18\x82\x5e\x41\x47\x23\x51\x87\xd3\x8e\x2e\x06\x28\x84\x79\xc0\x2c\x9a\x92\x51\xa2\x62\x38\x09\x1d\xfa\x2e\x66\x02\x2a\x9e\x32\x0c\x31\x5a\x87\x81\x5d\xdd\xb9\x9c\x46\x80\xad\x03\x81\x0e\xb8\xcd\xf8\x68\xa6\x07\x28\xf4\x7e\x41\x8e\xd6\x46\x69\x8f\x00\x6d\x9d\x91\x9d\x90\xfd\xd6\x55\x16\xe9\xf2\x9a\x4b\x85\x19\x59\x65\x27\x8b\xda\x5d\x1e\x81\xc1\x99\x6e\x21\xf0\x18\xe8\xca\x95\xd5\x18\x62\xbd\xba\xad\xd0\xcc\xb4\xed\x02\x19\x46\x8f\x05\x5a\x0a\x23\x8a\x4e\x01\x1b\x51\xa0\x43\x03\x2b\x91\x57\xc8\xb7\x37\x19\x53\xf8\xc7\xf9\xbb\xbb\x8b\xcf\x74\xb9\x17\xe2\x48\x54\x7d\xa7\xf1\xf3\xdb\xcb\x77\x17\x9f\x29\xcc\x75\x42\xb2\x83\x7c\x88\x82\xbf\xdf\x5c\xfd\x3c\x8c\x9a\xad\x6a\x52\x48\x4b\xbe\x38\xdf\x17\xdd\xd7\x05\x5d\xc4\x34\xa3\x89\xdd\x81\x6c\x81\xb4\xa0\x74\x8c\xba\x2b\x83\xd9\xf4\x53\xdf\xbe\xef\x61\xf4\x91\x72\x0f\x46\xba\xf3\x38\x98\xfe\x2a\x3c\x43\xc7\x8d\x30\x35\xb1\xf9\xb3\x50\x05\x56\xfa\xb2\xa2\xfb\xfc\x7c\x7c\x7c\x9c\xd2\xe7\xed\xf6\x7e\xe2\x1d\xa3\xc7\xc7\xa9\xd5\x95\x49\x71\xbb\x1d\x85\xd3\x6f\xd8\x10\x4e\x4e\x40\x84\xbd\xb2\xe8\x9e\x87\xab\x16\xcf\x10\xb6\x1d\x39\x12\x8b\xf5\x17\xcf\xe7\xb3\x94\x8b\x75\xe2\x50\x09\xe5\x12\x99\x8d\x91\xf1\xdf\x84\x43\x72\x15\x6f\x79\x11\x5c\xbe\x89\xd4\x54\x95\xcc\xbe\x92\x10\xc1\x99\xe9\xc4\xe9\x07\x54\xc7\xd0\xe2\xd7\x01\xaf\x7b\xde\x5e\x54\xaa\x10\xc6\x2e\x45\x9e\xe4\x3a\x15\x79\x67\xd4\x16\x66\xb5\x1c\xed\x60\x99\x83\x03\xce\xab\x83\xb5\x18\x89\x50\xa1\xa3\x60\xe5\xd9\x28\xa5\x72\x68\x14\x3a\x10\x8e\xd8\xad\x4c\x3e\xc0\x6b\xe3\xc6\x24\xa9\x50\x29\xe6\x79\xa7\x13\x71\xf5\xd3\x14\x5e\xfb\x39\x4d\xfe\x8a\xc3\xb2\x91\x08\xe6\x42\x76\x43\x6f\xe5\xc7\x33\x99\x05\xd3\x50\x94\x39\x3a\x04\x5b\xd1\x96\xce\xab\x3c\xdf\x4c\xe1\xba\x52\xf0\xf9\x69\x00\xf8\x99\xe3\x15\x0e\xa0\xc9\x54\x3b\x29\xf2\x7c\xd3\x44\xcb\x3e\x30\x1a\x4b\xa9\x4f\xde\x25\xd6\x09\x57\x75\x39\xaf\x27\x27\x27\x27\xaf\x5e\xbd\x7a\x75\x38\xc7\x7f\xc3\x4b\x81\x26\xd0\xc4\x51\x58\xb9\x54\x83\xd9\x18\x11\x45\xd1\x64\x10\xea\x3b\x5e\x38\xfd\x4a\xf6\xfc\xbd\x6e\xaf\x1d\x8f\xa4\x77\xbf\xef\xda\x1e\x74\xef\x8e\x8f\xc6\x37\x24\xbf\x1d\x94\xcf\x90\x60\x28\xbd\x24\x9c\x53\x63\xe7\x81\x8c\x6e\x22\x5c\x42\xee\x5f\x07\xd2\xc7\xc7\x69\x5a\x64\xdb\x6d\xc8\xc4\x3d\x3e\x4e\x69\xa1\xdb\x94\xb8\xdd\xb2\xa9\xa4\xb5\xdb\xed\xfd\x74\xda\x8b\x9b\x7d\xf6\x4d\x12\xf5\x79\xa0\xac\xf7\xf8\x48\x11\x44\x40\x40\x44\x6e\xb7\xf7\xb0\x14\x16\x66\x88\x6a\x87\xe1\xfa\x84\x8c\xc7\xde\x5d\x07\x7c\x13\xc7\xe1\x20\x01\xd3\x69\x4f\x06\x35\xa0\x68\x92\xe1\xdf\x8e\xc5\x06\xe6\x18\x26\xe3\xec\x6e\x36\xef\x9a\x19\x07\x19\xed\xe5\x33\xc3\x12\x55\x86\x2a\x3d\x46\x9c\xcd\xa2\xe7\xe3\x69\x8e\x48\xa7\x4c\xdf\x1c\x44\xf3\x35\x8a\x73\x98\x0a\x32\x0c\x95\xe9\x72\x13\xdf\xec\xa4\xc0\x0f\xb3\xfe\x7f\x78\x47\x44\x7e\x8e\xd3\x93\xaf\xdb\xc1\xa7\x66\xee\xdb\xec\xe1\xc8\x93\xd1\x45\x49\xff\x3e\xde\xed\x15\x33\x9e\xb3\x93\x7d\x54\x85\x84\xc5\x73\xef\x1c\xa6\xc8\xdf\x00\x75\x42\xa4\x8f\x16\xc8\x2a\x43\x3b\x19\x53\xae\xad\x1b\xf1\xf7\xd3\xb7\xc8\xe3\x5c\x57\x2a\x4b\x02\xbd\xc1\x52\x75\x2a\x40\x48\xf2\x1f\xb4\x90\xa1\x92\xc0\xfd\x10\x44\x57\xab\x8e\x10\x6b\xfd\xfb\x39\x65\xbe\xa4\xfc\x67\x82\x20\x2c\xf3\xc2\xd5\xfa\xb1\x6e\x41\x48\xf1\x25\xa1\x8a\xd5\x55\x08\xf4\xa3\x1c\xdb\x40\x2b\xfd\x68\x90\xd3\x2a\xd9\x84\xcb\xc2\x8d\xbb\x55\x6f\x1b\xd1\x61\xea\x15\x01\x09\x88\x56\xb5\xa4\x5d\x64\xf5\xbd\x0c\x41\xfb\x8d\x2f\x03\x0e\x35\x7e\x5c\x5c\x5f\x5f\x5d\xdf\x74\xd0\xfd\x6a\xff\x1f\xf8\xe9\xf0\x64\xe0\xd5\xab\x9e\xeb\xc7\x98\xdd\x83\xf6\xa0\xf4\x5a\x25\xe4\x29\x0c\x1f\x75\x9a\x45\xa2\x0a\xab\xa6\xd0\xca\xd5\x73\x09\xc4\x56\xa5\xaf\x18\x9c\x72\x96\x7b\x6a\x37\xd6\x61\x01\x33\xa9\x32\xa9\x16\x16\xb4\x81\x85\x74\xcb\x6a\x36\x4d\x75\x51\x57\x1b\xfb\xef\x4b\x63\xe2\x9d\x99\x1a\x14\xae\x8b\x4c\xee\x73\x02\x9e\xb2\xa3\x96\xdc\xed\xc2\x0d\x52\xb1\x35\xe4\x8c\x06\xd1\x98\xed\x96\xcb\x14\x7e\x2c\xd5\x99\x1f\xa0\x0f\x03\xd1\x4c\x8b\x24\x7f\x56\x7a\x49\xca\x9e\x9c\x94\xdf\x89\xa4\x39\x22\x85\xd3\x2b\xfd\xd0\x45\xd0\x5b\x36\x5b\x64\x2e\xfc\x34\x3e\x90\xb4\x0c\xd6\x4b\x6c\x15\xee\x9c\x6f\x73\x0a\x43\xbf\x0f\xb5\x0f\xb8\xa9\x53\x3a\xe4\xef\x0a\xa7\x4d\x5f\xba\xaa\x9e\xc3\xd9\x8f\x8f\x51\x98\xf7\xa4\x8f\x01\xce\x20\xce\x98\xd9\x4d\x94\x76\xde\xd8\x75\x20\x7c\xdf\x4e\x01\xb3\xad\xe6\xd9\x14\xef\x72\x0e\xb6\xed\x51\x0f\x21\x65\xef\xbd\x90\xb6\x10\x2e\xed\x72\xdf\x89\xc1\x5a\x3d\x68\x41\xc6\x28\xb2\x68\x4f\xa5\xda\xaf\x35\xf8\xf1\x40\x03\xb7\x4b\x31\x99\x8c\x84\xb7\x95\xcd\x1b\x4d\x2a\x5a\x40\x76\x52\xdb\x7e\x34\xb2\xd1\xcf\x44\x88\xff\x49\xbd\x44\x2e\xbb\xc4\x76\xe9\x47\xb9\xc7\xcb\x6f\x49\x9d\x45\x26\x5c\xe1\x33\xd1\x72\xb0\x41\x8c\x6b\xa7\x44\xbb\xf0\x75\x43\x5a\xe3\x3f\x8e\x91\x73\x24\x71\x40\xd4\xd7\xc7\x10\xb4\x27\x57\x3e\x0a\x9e\xa2\x17\x16\x7c\x96\xc7\x8b\x12\xbf\x38\x54\x36\x12\x8d\x5f\xf8\x0e\x23\x76\xbe\x86\x15\x9b\x2c\xb0\x2b\x9f\xda\x1c\xe5\x05\xfa\xb6\x96\x60\x7b\x9b\xcc\xfd\x93\x02\x2d\xdd\x6f\x32\x6d\x1d\xdf\xd1\x32\xf5\xa4\x27\x9e\x63\x3e\x3d\x35\xb6\x0e\xfa\x76\x18\x66\xbf\x90\xc4\xd8\x48\x59\xa8\x4d\xad\x1b\x64\x44\x5a\xdb\x3e\x28\xd7\x90\xd3\xad\x49\x18\x64\xa3\x32\xf9\xf1\x9a\xeb\x13\x5b\x21\x84\xbe\xbb\x7e\xe7\x33\x8e\x26\x0f\x47\xe9\xe3\x4e\x8c\x7d\xef\x7b\x95\xc6\x10\x52\x88\x7c\xae\x4d\xd1\x29\xb9\xf7\x71\xbc\x8f\x82\x29\xdc\x9a\x0d\x88\x85\x90\x6a\x28\xa4\x37\x26\xf9\xa7\xd5\xaa\x36\xb6\x69\x91\xf5\x14\x92\xb9\xd6\x20\x55\x59\x39\xc8\x84\x13\xf0\x3e\x48\xe3\x45\x5a\x64\x2f\xc8\xf4\xf6\x63\x12\xa5\x6c\x0a\x02\x5e\x69\xb4\x49\x2c\xfe\xab\x42\xd5\x99\xb1\xf7\xed\xb5\xa7\x37\x61\xd6\xee\x61\x69\xd9\x77\xaf\xcf\x7b\xbd\x23\xe7\x1f\x2e\xfd\x82\x52\xd2\xec\x54\x28\xef\x8a\xcc\xd0\x3b\x03\xed\x7e\xb7\x46\xc9\x4e\x23\x49\x07\x60\x4e\xe1\x43\x8e\xc2\x22\x54\x65\x26\xdc\x5e\xb3\x8a\xbf\x3c\xd3\xbc\xca\xf6\xe9\x14\x16\x04\xac\x71\xb6\x8f\x61\x70\x77\x82\x9c\xfa\x15\xf4\xfc\x80\x1d\x21\xd1\x84\x55\x53\xb8\x74\x3e\xfa\xd2\x6e\xc9\x77\xf1\x6e\x0b\x46\x7d\xf0\x26\x5e\x3a\x5a\x61\xa8\x02\x17\x04\x05\xbf\x94\x98\x8e\x39\x49\x81\xd6\xb8\xc5\xd1\x3e\x90\x61\x4c\x08\xeb\x57\x52\xcf\x84\x37\x46\x82\xc0\xea\xca\xb5\x8d\xc5\x14\x7e\x69\x8c\x70\x34\x15\xb4\x6c\x52\x9b\x13\x69\x1b\x67\x61\xe0\x5a\x0b\xec\x44\x31\x25\x14\xad\x38\x4c\x32\x69\x46\x19\xb9\x83\x6c\x11\x1f\xb5\xdc\x4b\x2d\x95\x77\xa9\x7c\x88\xe6\xb0\xd5\xe4\xdc\x1c\xe7\x09\x85\x80\x91\x2b\x6e\x32\xde\xb3\x70\xfd\x6c\xa4\x82\x02\x76\xb1\xc2\x24\xd3\xe9\x03\x76\x3d\x05\x78\x2d\x14\x43\x15\x2b\x84\x37\x3c\x11\x64\xc1\x0e\xf8\x80\x63\x29\x73\x4c\x44\x6e\x50\x64\x9b\x04\xbf\x48\xdb\xd9\x6a\xf1\x96\x4e\x48\x98\x09\x7e\xe6\x00\xec\x2c\xb6\x0a\x36\x51\x89\x44\xeb\x15\xca\x92\xe7\x94\x8b\x19\x76\x15\x47\xae\x14\x02\xe9\x61\x8e\xfb\x61\x7f\xf3\x67\xdc\x12\xb7\xd6\x50\x23\xe3\xa2\x89\x97\x35\xcd\x8e\x7f\x79\xc3\xba\x94\x16\x1e\xa4\xca\xe8\x80\x04\x5d\x0c\x35\xd2\x27\x17\xcf\x9e\xa5\x20\xfb\xd2\x22\x84\x49\x3f\x40\x4e\x78\x10\xf0\xc4\xae\xb0\xb2\x70\x7d\x9f\x7c\xb7\x48\x14\xc4\xb0\x06\x99\x07\x8b\xa5\x30\xf4\x07\x43\xf7\xfd\x66\x1d\xbc\x8d\x53\xfe\x70\xc8\x12\x62\xf9\x58\x3d\x57\xda\x4b\xca\xa2\x3b\x0e\xd9\xb1\xb6\x22\x20\x6b\x9d\xf7\x01\x7c\xd1\xfa\x26\x4b\xb1\x22\x4b\xc5\xba\xe4\x13\xe9\x36\x10\xd3\xf5\x58\xa5\x7d\x0d\x45\x30\xc1\x5e\x45\xd5\x8e\x3d\x12\x64\xf3\x55\x34\x46\x3e\xd0\x67\x57\x8c\xf6\x2f\x44\xb7\xd3\xf8\x7a\x24\xb4\xf8\x7a\x78\x96\x2f\x2a\x52\x26\x7e\xe2\xc0\x0b\xd8\x63\x97\x0a\x44\xd4\xe9\x08\x61\xe0\xf0\x6b\x35\xcf\x65\x4a\x56\x26\x09\x81\x1b\x71\x68\xb4\xb5\x31\x13\xd2\x75\x5c\x5b\xe7\x27\x86\x7c\xc4\x74\xf8\x1c\x78\x8e\xbc\xb2\xf3\x5b\x54\xb9\x93\x65\xee\xa3\x46\x7f\x78\xe8\x53\xf0\x48\x3c\x72\x36\x5f\xf1\xee\xdd\x4b\x83\xb8\x76\x51\x79\x02\xd2\xf9\x13\x55\x6a\x6b\xe5\xcc\x9f\x02\x16\x48\x64\xc4\x63\x6d\xc4\x33\x23\xbf\xa4\xd6\x74\x26\xe2\xc9\x21\x0c\x9c\x30\x9a\x27\x41\xcf\x11\xc2\x34\x55\x8e\xcf\x90\x24\x2d\x0b\xd1\x45\x8e\x87\x64\xd8\xd0\x1f\xed\xfd\x9e\x23\xe1\xdf\xa0\xd4\x22\xd8\xdd\x92\xa9\x7f\x7a\xf4\x2d\x84\xcc\x0c\x1e\x92\xb0\xb0\x56\xa7\x92\x41\x1f\xa6\xf8\x34\x12\xb7\x2f\x7c\x66\xfe\x59\x92\x17\xa6\x69\xf1\xe0\x62\x76\x67\x6b\x7b\x28\x90\x41\x2e\x15\x82\x30\x8b\x8a\x83\x62\x12\xa1\x59\x6c\xb7\x6d\x7f\x91\xe1\x4c\xa0\xf4\x24\xc6\x57\x1f\x24\x0f\x1e\x39\x82\xa2\x07\xdc\x7c\x33\xaa\x1e\x70\x73\xca\xb0\xa0\x14\xd2\x3c\x21\x6f\x77\x98\xed\x3b\x7e\x11\x45\x49\xce\x6e\x0d\xee\x01\x37\xa3\x78\x08\x0e\xd6\x70\x27\x52\x17\x03\x3f\x44\x94\x7f\x64\x1b\x1c\xe0\xf9\x36\x25\x7f\x71\xd5\xa9\x90\x89\x4f\x48\xb6\xc2\xcb\xa8\x1c\xf5\x7b\x1b\xf0\xab\x39\xc8\x68\x40\x0c\xe5\x1e\xf0\x5f\x95\x34\x9c\xdb\x2a\x2b\x67\x47\x69\xc9\x75\x58\xe3\x43\x19\x7f\x5a\x76\xb4\xc2\x02\xae\x50\x81\x98\x3b\x34\x20\xca\x32\xe7\xfa\x09\x37\x36\x94\xda\xc3\x09\xb5\x54\x54\xab\x29\xac\x84\x91\x62\x96\x63\xa3\xf0\x16\x5d\x0d\x71\x77\x4a\x3c\xc0\x3e\x8a\x6a\xda\xb8\x0e\xbd\xb6\xf1\x2f\x9b\x4c\x78\x7f\xc4\x9b\x3d\xd7\x79\xae\xd7\x9e\x1a\xa2\x9d\xe5\xe9\x3f\x6e\xb7\xc3\xd1\xd7\xc2\x37\xa8\x24\x14\xf4\x70\xc5\x78\x28\xb0\x68\x35\xb5\xd0\x9a\x26\xc1\x25\x4a\x49\x5f\xc4\x1c\xd3\x01\x77\x9d\xa7\xd6\x1d\x6b\xf1\x01\xc1\xbe\x97\x14\x42\x0e\x83\x84\x74\x15\x10\xd4\x99\xe2\x3d\x18\x23\xf3\x50\xa5\x30\x16\x4d\xef\xc3\xd7\x26\x43\x62\xd0\x19\x89\x6c\xf0\x42\x62\xa4\xd6\xd0\x7e\x6c\x6b\x9c\x45\xc7\x25\x28\xa1\xef\xc3\x8e\xdd\x42\x7d\x72\xbd\x53\x22\xd8\x5a\x8b\x69\x65\xbc\x73\xd8\x84\x87\xff\x01\x07\xfd\x9c\x73\xf2\xd0\x45\x3d\x10\x52\x9c\xed\x93\xe7\x4d\x03\x0d\xf2\xa7\xee\xd4\xdd\x2f\xe7\xd7\x3f\x5f\xfe\xfc\xb7\xf1\xe5\x84\xb8\xe0\xb8\x82\xc2\x5a\x18\x55\xf7\x2c\x90\xa4\xbb\x32\x0b\xd7\x34\x46\x6a\xfd\x31\x36\x2b\xdc\x87\xe3\xc7\xbb\x78\xe6\x33\x3c\xb4\x2b\xf7\x7d\x51\x68\xc0\xc7\x2d\x5c\x47\xe7\x74\xda\xad\xe7\xad\x1c\x2e\x64\xe8\x86\xe3\x5f\xc6\x4c\x17\x41\x86\xa5\xc1\x94\xae\xc7\xc4\x60\x99\x8b\xb4\x33\x40\xbc\x5d\x7a\x3c\x3a\xcf\xc2\x56\x72\xeb\x9e\xf7\xff\x77\x9b\x34\xf8\x3d\xad\xd5\x5a\xc1\x8c\x83\x88\x80\xa1\xbe\x1e\x2a\xeb\x55\x88\xcb\x6c\xb8\xde\x01\x67\x1d\x8a\x91\xb4\x07\x49\x3c\x27\xd1\x6e\x97\xba\xca\x33\x22\x8f\xdc\x7d\xb8\xb3\xbe\xe2\xec\xcb\x61\x07\xd4\xb2\x3f\x2f\x55\x53\xc4\xf3\x07\xb6\x92\xe8\xf2\x18\xc8\x42\x3e\x2d\x00\x90\xbd\xf1\xa6\xe9\x08\x94\x1c\xe1\x8b\x55\xef\xe6\x0d\x21\xe5\xf5\x71\x43\x63\x69\x33\x3e\x30\x6c\xbf\x2c\x1c\x26\x2c\x97\x85\x74\x89\x5c\x28\x6d\x3a\x49\x8a\x2a\x1d\x22\x0e\x5e\xe2\x23\x58\xfa\xb4\x9f\xe4\x27\x8b\xed\xc1\x8d\xc5\x9e\x2e\x85\x5a\x20\x19\xae\xfe\xe0\xec\x5d\x8d\xb8\x2e\x2e\xd8\xc8\x7e\xbe\xf1\xc5\xed\x1a\xd4\x14\x2e\x89\x0a\xa9\x16\x63\x54\x82\x09\xb1\x49\xae\x17\x89\x95\xbf\x0d\xd0\xc1\x93\xcf\x20\xd7\x8b\x1b\xf9\x1b\xa9\x2e\xe7\xfd\x74\xe5\xac\xcc\x62\x38\xee\xf5\xd3\x10\x35\xb4\x23\x1f\x5f\x4e\xe0\x4f\x2f\xef\xe1\xfd\x5f\xeb\xab\x7c\x85\x86\xbc\x13\x2e\xd1\x96\xfe\x8d\xad\x69\x2e\x28\x7e\x5a\xee\x7d\xad\xb1\xc4\x17\x58\x68\xb3\x19\x4f\xbf\x9f\x3f\x9e\x85\x3f\xfd\xf9\x2f\x13\xf8\xf3\xcb\x7f\xfb\xcb\xef\xcb\x06\xdd\x95\xba\xea\x7c\xdf\xbb\xc3\x42\x98\x3b\x92\xfe\x97\x2f\x27\xf0\xef\x2f\xe9\xdf\x3d\x14\x32\xcf\xa5\xc5\x54\xab\x56\x2c\xf7\xed\x78\xe1\x42\x74\x52\x1a\x5d\xa2\x71\xb2\x33\x80\x8b\x96\xba\x65\x57\x7d\xfb\x82\x77\x1d\x42\x03\x83\xaf\x6a\x37\xc0\x62\xa3\xc3\x61\xdb\x1d\x4d\x77\xa6\xf9\x44\x90\x05\x97\xae\x16\x8d\x9e\xc3\xad\x11\x2b\x69\x61\x56\xc9\x3c\xeb\xaf\x82\x33\x2b\xde\x6c\xb1\x18\x47\x99\xac\xfa\x78\xee\x18\x2e\xb5\x77\xf1\x04\xb3\xce\xb5\x7d\x8a\x34\xfd\xb7\xf1\x79\xf2\xe3\xe3\xb4\x90\x2a\x54\x7a\xe9\x0f\x91\x0e\xd4\x8d\x98\xd4\xe8\xa7\x79\x2b\xd0\x65\xce\x62\x2d\x2e\xcc\x22\x67\x69\xaf\x2c\x77\x20\x75\xdf\x59\x79\x7b\x56\xb9\x8d\xa9\x0d\xc5\x7c\x4e\x0f\xf5\xe6\x37\x9f\xd4\x69\x77\x6c\xe0\x5e\xe2\xb3\x89\x14\x72\x7e\x34\xa9\xb4\x5b\x86\xbc\xc4\x30\x49\x31\xdf\x30\x58\xaa\xbe\x7d\x92\x49\x6c\x3b\x36\xe1\x65\x09\x66\xa0\xf4\xb8\x7e\x0b\xc6\xde\x6a\x75\x62\xa1\x8c\x21\xe2\x60\x23\x50\xb8\x19\xf7\x23\x9e\x75\xa8\x07\xfa\xaa\xfa\xa1\x7c\xe8\x08\x09\xb5\xde\x87\x25\x7a\x85\xc6\xc8\x2c\xc3\xae\xac\x1e\x51\xd8\x7e\x2e\xd6\xb4\xaa\x35\x4b\xa3\x4f\xd3\xee\x44\x1a\xbb\x51\x89\xb4\x49\x59\xcd\x72\xd9\xf5\x24\xdf\xef\x0a\xcf\x8d\x55\x2d\xff\x22\x8e\xe2\x28\x5e\xf8\x24\x63\x32\x21\x73\xc1\xb6\x65\x86\xb0\x92\x3e\x79\x43\xe7\x30\x15\x6c\x69\xfc\x1b\x04\xcc\x60\xb6\x01\xa1\x36\x5a\xf5\xbc\x30\x63\x5a\x63\x12\x16\x67\xe1\xdd\xef\x80\xbb\xf1\x34\x07\xcb\xe5\x25\x8e\x62\x54\x46\xff\x9f\x84\x27\xba\xfb\xf5\x25\x3a\x08\xfc\x1b\x2b\x38\x9b\x78\x27\x24\xfc\x15\x16\xf4\x04\x5e\x9e\xd2\x56\x1d\xb1\x89\xc2\x8e\xac\x2e\x91\x86\xb5\x4b\x72\xa3\x8a\x85\xe1\xb7\x61\xea\x45\x53\x78\xad\xd5\x8a\xcc\x7d\x08\x5d\x1a\x14\x4e\xef\x80\x1f\x56\xd9\x7d\xae\x06\xea\xa2\x7d\x99\xe8\x86\xb7\x38\x70\x24\x77\x75\x79\x72\x9f\xbf\x36\xa2\x9a\xc3\x51\xc5\xcc\x9a\xc7\x98\x75\x32\x68\x4b\xad\x2c\xf6\xb5\x97\xed\x11\xcd\xf9\xc6\xfd\xbc\x42\x18\x8f\x19\x84\x56\x46\x22\xe6\x86\xea\x9c\xe6\xd2\xb9\xd2\xff\x0e\x93\x47\xcd\xf7\xda\x14\x5e\xd3\x0d\xc3\xfd\x28\xed\xef\xfd\xa5\xce\x57\x4e\xf8\x3a\x30\xcd\x50\xe8\x3e\x69\x28\x1b\xd2\xd8\xb8\xaf\xa8\x56\xd2\x68\xc5\xb6\x33\xa6\x84\xba\x2a\xfd\x21\x2a\xbd\x68\x96\xc0\x3f\xc2\x92\x31\x11\xfe\x9b\x8b\xbf\xde\xfd\x6d\x74\x78\xcf\xb3\x8f\x8b\xed\xb3\xd9\x22\xb1\x28\x4c\xba\x24\xce\xa2\xc1\xad\x0b\x98\x9d\x6a\x1b\x56\xd4\x06\x77\xb7\xe4\x19\xb7\x2f\xca\xd7\x3b\x26\x03\xb1\x01\x91\xb2\x7f\x2b\x7d\xeb\x1b\xe9\x99\xb7\x11\x91\x56\x5f\xd7\xbe\x85\xb6\xe7\x67\x71\xde\x1c\xe8\xe3\x0a\x12\x39\x83\xb7\x4c\x41\xf3\x2b\x2c\x9c\xce\x27\x60\xc7\x12\xd0\xff\x8e\xf8\x78\x1a\xda\x5d\xba\xb1\xab\xfc\xb8\xb7\xa1\x7b\x6f\xed\xfa\x9e\x38\xd2\xe4\x27\x0f\xec\x8e\x7f\xc5\x19\xe2\x86\xba\x2d\xf8\x9b\x13\x31\x61\x97\xfe\xc5\xe3\xe3\x34\xab\x8a\x62\xc3\xb3\xb6\xdb\x17\x64\x7e\xda\x71\x8f\x56\xfd\xfa\x13\xde\x31\x27\xbf\xc9\x32\xc1\x2f\xdc\x5a\xe2\x4b\xee\x3d\xef\x7d\x2e\x78\x1e\x9d\xb1\x0f\xc2\x2d\xcf\xda\x3b\x38\x16\x95\xc8\xb2\xf8\xc0\xa8\x0f\xd3\x39\x4f\xdb\x39\xb8\x4e\xc3\xff\xc8\x12\xde\x0e\x1d\x8c\x36\xb6\xd0\x33\x13\x5b\xc8\x7a\x10\xbe\x0d\x4d\x80\x37\xde\xc9\x7f\x36\x7f\x07\x30\x26\x19\x5a\x27\x15\xa3\xfa\x1a\x12\xd8\xfb\x79\xd3\xc0\x6a\xcd\x68\x61\x18\x49\x6b\xbc\x2c\x23\xbd\xa8\xba\x73\xa8\x31\x91\x02\x97\xa1\x05\xe9\x82\x26\x93\xc2\x49\xd7\x4a\xd0\x33\x25\x01\x1e\x97\x0c\xe3\x74\x86\xcd\x8e\x01\x4a\x0e\x46\xf8\xce\xfc\xe8\xf9\xbc\x07\x32\xc8\xfe\xf3\xa4\xcd\x5e\xff\x51\x8f\x7c\xc4\xd6\x6b\x16\x7e\x4f\xa5\xe9\x75\x6c\xd1\x26\x09\x47\x3d\x3a\x7a\x87\x73\x69\x5d\xa2\xe7\x8c\xc8\x26\xdc\x9e\xc9\x77\x94\x70\x0e\x4d\xd7\xc1\xf6\xa6\x8d\x9b\x9e\xeb\x22\x8b\xff\x01\x2b\x5f\xdc\x0e\x50\xe2\xbe\x73\x37\xcb\x07\xef\x8b\x30\xd8\x5e\x39\x90\xe3\xe3\x53\xfd\x7d\x77\xd2\x9e\xbb\x23\xe3\xef\xb4\x85\x95\xc1\x41\x23\x12\xaf\x2f\xfe\xfb\xee\xf2\xfa\x22\xf9\xe5\xc7\xcb\x9b\x9f\x92\xf3\xbb\xdb\x1f\xdb\xd5\x81\x10\xe5\x93\xff\x72\xc8\xfd\x8d\x94\x7e\x77\xff\xdd\xff\x06\x00\x00\xff\xff\xd2\xcb\xef\xf0\x39\x54\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 21561, mode: os.FileMode(420), modTime: time.Unix(1579629079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

