/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x6f\xe3\x36\x16\x7e\xcf\xaf\x38\xc8\x4b\x5e\x02\xed\x4c\x17\x0b\x2c\xe6\x2d\xd8\xe9\x25\x68\xe7\x82\x99\xd9\x16\x45\x77\x80\xd0\xe2\xb1\xc5\x86\x22\x05\x92\x72\xea\x0a\xfe\xef\x0b\x92\x92\x2d\x27\x12\x45\xc9\xb2\x13\x14\xcd\x93\x63\xeb\x7c\xdf\x77\x0e\x6f\x87\xe4\xd1\x6f\x17\x00\xd5\x05\x00\xc0\x25\xa3\x97\x6f\xe0\xf2\x07\xe4\x5c\x5e\x5e\xfb\xaf\x8c\x22\x42\x73\x62\x98\x14\xf6\xb7\x1b\x01\x37\x1f\x6f\x21\x93\xda\x40\x5e\x6a\x03\x0b\x84\x42\xc9\x35\xa3\x48\x93\xcb\x0b\x80\xed\xf5\x63\xb8\x77\x4c\x6b\x26\x56\x90\xe6\x14\xee\x71\xd3\x03\xdc\x3c\x75\x95\xe6\xf4\x0a\x98\x28\x4a\xe3\x9e\xee\x84\x24\xa5\xc9\xa4\x62\x7f\x3a\x6b\xb8\xfb\xf1\xdb\x5f\xef\x7a\x60\xbb\x9e\xec\x84\x7c\xc8\x98\xbe\x77\xbe\xdd\xfd\xf0\xe1\xf3\x97\x3e\xbc\x27\x8f\x75\x82\x09\x92\xa3\x2e\x48\x8a\x3d\x28\xfb\xdf\x87\xb4\xfc\xfc\xed\xa7\xcf\xb7\x1f\xde\x47\xc8\xd9\x3d\xd9\xdd\x08\x44\xb0\x25\x6a\x03\x4b\xc6\x11\x84\x34\xb0\x94\xa5\xa0\x40\x0c\x14\xc4\x64\x50\x55\x49\xa1\xe4\xef\x98\x9a\x8f\xc4\x64\xdb\x6d\xf2\x3f\xd1\xd7\x50\x13\x90\x82\xfd\xa2\xaa\x92\x0d\xc9\xf9\x76\xfb\x0f\xfb\xc9\x7e\x70\xd0\x09\xcc\xa8\xf9\x14\x54\x11\x71\x66\xfa\x10\xcb\x64\xe8\xf1\x7e\xab\xaa\xc4\x3e\xe1\xd1\xbe\xc6\x46\x7b\x0c\x5e\xa7\xbc\xff\x36\x61\xc8\x6b\x5c\x6f\x00\x4b\xa9\x80\x62\xc1\xe5\x26\x47\x61\xfa\xe5\xc4\xdb\x8f\xa6\x2f\xc5\xb1\x02\x1e\x23\x74\x4a\xb0\x21\x53\xa5\x30\x2c\xdf\x85\x53\x97\x45\x21\x95\x41\x0a\x8b\x0d\x7c\x28\x50\xf8\x51\x55\x70\x62\x96\x52\xe5\xfd\x62\xa6\x61\x75\xca\xfa\xe5\xe6\xd3\xfb\xdb\xf7\xdf\xbf\x81\x4f\x35\x9e\x2e\x30\x65\x4b\x86\x14\x98\x80\xc6\x59\xf8\xf5\xe6\xdd\x4f\xd6\xfb\x9a\x75\xbb\x05\x2a\xd1\x33\xe7\xc4\xa4\x19\x3c\x30\x93\x01\x49\xdd\x6c\xa7\x65\xa9\x52\xf4\x3d\x07\xff\x30\x28\xb4\xfd\xb6\xaa\x12\xfc\xc3\xd4\x21\xab\x9f\xac\xaa\xc4\x7f\xda\x6e\x93\x7e\x77\x5f\x96\xc6\x70\x18\x7f\x71\x61\x7f\xeb\xfa\x03\x64\x44\x43\x9a\x49\x8d\x02\x48\x51\x28\x59\x28\x46\xcc\xbe\xe9\x0e\xb4\x2e\x88\x46\x0a\x52\xb8\xb1\x15\x14\x69\xb5\x99\x8c\x98\x0e\x81\x10\x11\xc4\xe7\x55\xd8\x44\xf0\xc9\x08\x15\xfb\x1e\xdc\xb0\x9b\x4d\x81\xd7\xa0\xd1\x80\x91\x20\x24\xc5\xdf\x75\xdf\xe8\x8c\xb4\xee\x6c\xbb\x2f\xd6\x9d\xd2\x64\x28\x0c\x4b\xfd\x7a\x7d\x8f\x9b\x66\x60\xa5\x52\x2c\xd9\xaa\x54\x48\xfb\x63\x3b\x06\xa1\x57\xc2\x2e\xbd\x19\x49\x1c\xb6\xeb\xa5\xdb\xa5\x02\x63\xf9\x06\x0c\xa3\xfc\xb3\x1d\xa2\x60\xf6\xbf\xed\xf6\x1a\x96\x4a\xe6\xf5\x57\xbe\x3f\x85\x96\xd4\x49\x50\xc1\x76\x6f\xda\x4a\xa3\x69\x01\x94\x26\x8b\x13\x13\x0d\x11\xd7\x14\x55\x95\xec\xfe\x6f\x7b\xb4\xfb\x32\x4e\xd5\x74\xcc\x4e\x99\xdf\x11\xc6\x91\xda\x91\xb4\x42\xbf\xfc\x3f\x19\x70\xda\xc3\xda\xb5\xc7\x4f\x31\x1a\xd5\x9a\xa5\xf8\xc6\xcd\xaa\x4a\x85\x14\xcf\x06\xdf\x29\xfe\xb3\x21\xca\xcd\x02\xa5\xc8\x89\xd2\x19\xe1\xad\x15\x92\x89\xa5\xf4\xd0\x5c\xa6\x84\xc3\x9a\xf0\x12\x75\xbf\xd4\x89\x60\xdd\x69\x49\x10\x82\x09\x83\x4a\x60\x28\x29\x89\xb6\xef\xa4\x7f\xbb\xcb\x5a\x20\x95\x79\xc1\xd1\x86\x5b\x97\x69\x8a\x5a\x2f\x4b\xce\x37\xfd\xcc\x51\xa6\x9d\xa4\xdf\x4b\x03\xa8\x94\x54\x90\x2a\x24\xc6\x66\x55\x05\x49\xef\xc9\x0a\xfd\xfa\xec\x7f\xcb\x51\x6b\xb2\x6a\x35\x2e\x10\x41\x1b\x3b\x49\xfd\x0f\xf6\x43\xa8\x57\x9d\x84\x2a\xd6\xa9\x7a\xe9\xfb\x6b\xf9\x54\xb0\x73\x38\x74\x1c\x4d\xac\x33\xaa\xe4\x67\xe9\x72\x47\xf2\x0c\xb8\xa3\xd1\x38\x16\x37\x67\x1a\x62\x4a\x0d\x72\x79\x6a\xdf\x4e\x42\x1a\xdb\x6e\x46\xb1\xd5\x0a\xd5\x39\x9a\xee\x78\xaa\xb1\x4e\x2d\x11\xe9\x39\x3d\x3b\x92\x6f\xec\x0c\xbf\x60\x82\xda\xff\xcf\x38\x2b\x1e\x4f\x39\xb4\x76\xca\x25\x50\x2c\x50\x50\x14\xe9\xc6\x9a\x52\x2c\xde\x13\xbf\x01\x65\xb4\x4e\x91\xfd\x1a\x69\x97\xc8\xdd\x0a\x69\xb7\xb3\x70\xf7\xa0\xef\xfd\xe9\xc1\xee\x18\xe1\xce\x66\x17\x0a\x73\xb9\x46\x28\x88\x32\x8c\x70\xbe\xa9\x4f\x39\x90\x02\xd1\x1a\x4d\x20\x41\x79\x09\xca\x02\x21\x6b\xad\x8d\x55\x95\xc8\xd2\x14\xa5\xdd\x70\x27\x49\x12\xf4\x27\x60\x36\x40\xe6\xa6\xa5\xb1\x54\x9d\x46\x03\x44\x07\x63\x6a\x2c\x61\xd0\x78\x80\xb8\xe9\xea\x63\x39\xfb\xec\x22\xe9\x9a\x91\x35\x95\xb6\xcf\x7e\x80\xfe\xb0\x47\x8f\x62\x0e\x98\x76\x92\x7e\xf8\x31\x81\xff\x10\x91\x22\xe7\xb5\xf9\xe0\x39\x61\xd0\x64\x80\xc4\x1a\xc4\x9d\x46\x86\x6d\x7a\xf6\x1a\xfb\x87\xc2\xa3\x3f\xb0\xdd\x18\x01\x31\x34\x6b\xfa\x69\x64\xc2\x7e\xa3\xcf\xf0\xe5\x7a\xdd\x20\x3c\xed\x82\xfb\xf9\xb8\xbf\xfb\xc6\x5a\x0f\xfb\x3f\x75\x39\x88\x0b\xcd\x11\xe8\x03\x69\x04\x45\x8e\xe7\xd9\x53\xcd\xc7\x14\xeb\xd2\x89\x33\xf5\xb9\x78\xfe\xde\x85\x3c\x8a\xe7\xe9\x77\x21\x33\x52\x8d\x75\xea\xc4\xbb\x90\xb9\xf9\x62\xdd\x3b\xfd\x39\xd3\x8c\x54\xe1\x6b\xa6\x2f\x19\xc2\x95\x3f\xb5\xbd\xf2\x17\x5f\xee\x04\x5a\xec\x42\x8a\xc2\x30\xe3\xce\xa4\x29\x16\x0a\x53\x62\x90\x26\xf0\x91\x23\xd1\x08\xa5\x46\xb8\xb2\x41\xbf\x02\x26\xb4\x41\x62\x73\x77\xa0\xa8\x53\xc5\x16\xfe\x56\xad\xbe\x62\xf3\xb7\x19\x81\xdd\xc6\x73\x2a\x8a\x6d\xf7\x26\xd1\x3c\x63\xfb\xcf\x47\xd9\x97\x47\x75\x25\xb2\x19\xd1\xb0\x40\x14\x07\xb9\xd1\x6e\x7f\x16\xcc\xae\xa6\xc1\x75\x8a\xfb\x18\xc8\xef\xa7\x2a\x3c\x0e\x33\x28\x73\x4e\x79\x33\xc8\xfa\x52\x0f\x97\x39\x64\x4d\xc3\x0a\xca\x7a\xb2\x3f\x3d\x56\xdb\x04\xc0\x4e\x81\x9f\x1e\xef\xd8\xa7\x0a\x9b\x00\xd4\x29\xe8\xe6\xe9\x69\xc5\x54\x49\x93\xa0\x22\x26\x8e\x7d\x86\xde\x0d\xd7\x6c\x2c\xe3\xe7\x8e\x71\x88\x43\x03\xa0\x5e\x3a\xda\x68\xf5\xee\x2f\xaa\xcf\x87\xcd\x83\xbd\xc8\x66\x91\xa3\x68\x23\x0c\x07\x7a\xc9\xae\x86\x23\x9e\x34\xd2\x78\xe0\x46\x97\x89\xb5\xbc\x47\x97\x46\xfb\x44\x2c\x43\x71\xa6\x9c\xf0\xcc\x22\xc2\x39\xd5\x3b\x22\x28\x31\x52\x6d\x60\xc9\x90\x53\x68\x26\xf5\x9f\x51\xb9\xaa\x96\xa6\xec\x54\x87\xae\x64\xa7\xa2\x85\xa5\x3d\x36\x6e\x8a\xbe\xc8\xda\xe7\x46\x36\x6c\x69\xa9\x94\xdd\x87\xef\x8f\x6d\xd7\xfe\xe9\x08\xb1\x47\xe3\x4f\x8b\xec\x4f\x2c\x45\xa1\x71\xa6\xc8\xf6\xa0\xc5\x45\xb6\x31\x3e\x55\x64\x27\xe3\x87\xe5\x37\xb0\x55\x95\x70\xff\xf1\xf6\xed\x76\xdb\xb0\x10\x58\x13\xce\x28\x48\x81\x11\x52\x47\x61\x75\xca\xca\x31\x97\x6a\xf3\x99\xfd\x89\x76\x27\xce\x59\xce\x8c\x3e\x28\xd1\xd3\x99\x2c\x39\xb5\x8d\x43\x84\xab\x4f\xb0\x83\x7a\x81\xe6\xc1\xce\x58\xaf\xbf\xf9\xb7\x1b\xbe\xff\x7a\xfd\x4d\xbf\xda\x59\x29\xba\x0b\x35\x59\x8e\xb2\x34\x93\xe0\x5f\xbd\x72\xf0\xff\x7c\x65\xff\x02\xf5\x9b\x73\x52\x74\x3a\xc1\xe5\x6a\x6a\x8c\x3c\xfe\xeb\x80\xfc\x99\xc0\xc3\x3d\xfb\x56\xf8\xfe\xe6\x18\x7c\x4d\xdd\x55\x1d\xb7\x2b\xcb\x5c\x9f\xd0\xb5\x99\x99\x06\xb6\x12\x52\xb5\xf6\x95\x69\x86\xe9\xbd\x5f\x10\x62\x36\xb1\xa7\x21\x1d\xef\xe8\xbe\x97\x9f\xd7\xd7\x59\x78\xc7\xbb\x5b\x77\xa8\xf3\xfa\x7a\x3c\xe9\xd0\xd4\xec\x86\x86\x9f\x4e\x73\x66\x84\xcf\x8b\x77\x55\x93\x19\x11\x2b\xb2\xe0\x08\x44\xfb\x0a\xd5\x87\x6b\x78\xc8\x98\xab\x53\xe6\xdc\x8e\x9f\x86\x3f\x66\xea\x9e\x91\xab\xd3\x2d\x57\xed\x2f\x97\x6e\xbd\x4a\xee\x71\xe3\x4a\x7e\x7b\x64\x75\x3f\x3b\x0c\x9b\xa2\x32\xd1\xb8\xfb\x87\x83\x75\x95\xcd\xf3\xa4\x28\x78\x53\x9b\xeb\xea\x43\xdd\x3e\xc5\x5f\x2b\xd9\x45\x4e\xb4\xae\xea\x7c\x39\x33\x31\xee\xed\x86\xfd\xd7\xdf\x31\x9b\xda\x7f\x7d\x5c\x55\x6e\xa2\x98\x9a\xf7\x29\xb6\x9e\x2c\x3f\x78\xbd\xa2\xa6\x6a\xbe\xac\x89\xfa\x2e\x84\xfe\x12\xae\x85\xc7\x4e\x9b\xa8\x43\xbf\xeb\xb4\x5a\x4a\x61\x7b\xee\xfe\x34\xf1\x1a\x8a\xfd\x69\x62\xfd\xda\x4c\x73\x9c\x18\x31\x88\x4e\x43\x3a\xca\xd1\xc3\xd8\x9d\xc5\xcd\x59\x28\x23\xef\x1e\x7d\x99\xa8\x3b\x08\x66\xa8\x83\xd7\x82\x40\x4b\x65\x77\x7e\x39\x11\x64\x85\xb4\x7d\x91\x7e\xa2\xba\x99\x17\x2b\xb7\x7b\xfb\xee\x5e\xc5\x6a\xbd\x89\xd1\x3e\x04\xf0\x53\xbb\x3b\x69\xf7\x3e\xb8\x7a\xe0\xf6\x56\xa3\x69\xc3\xfd\xfb\x65\x5d\x83\x77\x87\xb3\xc0\x76\x9d\x41\x68\x49\x7a\x7e\x5d\x03\xe1\x32\x5d\xe7\x43\x2f\x22\x60\xcf\xa7\x6c\x20\x64\xad\x3a\xa1\xfa\xe3\x4b\x09\xd9\xf3\x29\x73\xef\x30\x5d\x7c\xbd\xf8\x7f\x00\x00\x00\xff\xff\xd6\x2c\x3d\xbe\xc5\x3c\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 15557, mode: os.FileMode(420), modTime: time.Unix(1512765179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

