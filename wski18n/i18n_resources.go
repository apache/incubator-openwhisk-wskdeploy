// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x6f\x6f\xdb\xbc\x11\x7f\x9f\x4f\x71\xc8\x9b\x6e\x40\xe0\xb5\x1d\x06\x0c\x01\x86\x21\x58\xb2\x2d\xeb\x9a\x14\x49\xba\x62\x68\x0b\x85\x11\x4f\x32\x6b\x8a\x14\x48\xca\xae\x6b\xf8\xbb\x3f\x38\x52\x92\xe5\xc4\x94\x64\x27\xc1\xd3\x57\x6a\x78\xfc\xfd\xee\x8e\xc7\xfb\x43\x7f\x3d\x02\x58\x1d\x01\x00\x1c\x0b\x7e\x7c\x0a\xc7\x85\xcd\x93\xd2\x60\x26\x7e\x26\x68\x8c\x36\xc7\x27\x61\xd5\x19\xa6\xac\x64\x4e\x68\x45\x62\x17\x7e\xed\x08\x60\x7d\xd2\x83\xb0\x60\x46\x09\x95\x47\x30\xbe\xd4\xab\x43\x28\xb6\x4a\x53\xb4\x36\x82\x72\x5b\xaf\x0e\xa1\x08\x95\xe9\x08\xc4\x25\x2d\x45\xf7\xff\xb0\x5a\x25\x85\xb0\x56\xa8\x3c\x49\x0b\x9e\xcc\x70\x19\x01\xfa\xcf\xed\xf5\x15\x08\x55\x56\x0e\x38\x73\x0c\x3e\x86\x5d\xf0\x26\x2d\xf8\x1b\xa0\x7d\x51\x16\x02\xce\x24\xcb\x13\xc5\x0a\xb4\x25\x4b\x31\xc2\xb1\x59\x1f\xc6\x62\x95\x9b\xf6\xa8\x4b\xcb\xda\x88\x5f\xfe\x0f\x70\xff\xe1\xe2\xff\xf7\x63\x40\x4b\x91\x4c\xb5\x75\x11\xd0\xc5\x54\xd8\x19\x9c\x7d\xba\x84\xfb\x7f\x5f\xdf\xde\x8d\x45\x9c\xa3\xb1\x84\x30\x08\xfa\xbf\x8b\x9b\xdb\xcb\xeb\xab\x31\xb8\x33\x5c\x26\x99\x90\x31\x4f\x96\xcc\x4d\x41\x67\xe0\xa6\x08\x93\x19\x2e\xc1\xcb\x0e\xc3\xa6\x68\xdc\x68\x5c\x12\x1e\x00\x2e\x8d\x2e\x4a\x97\x70\x2c\xa5\x8e\x1d\xd5\xb9\x86\xa5\xae\xc0\x20\x93\x72\x09\x0b\xa6\x1c\x38\x0d\x61\x0b\xb8\xa9\xb0\x7f\x87\x3f\x2c\xff\x74\xf5\xc7\x53\x18\xe4\xa9\xd4\x01\x4c\xcd\xa6\x3d\xb9\x28\xc2\xe2\xf1\xf7\x4d\x7d\x92\xc8\x2c\x42\x69\xf4\x5c\x70\x04\xa6\x80\x76\xa0\x72\x22\x0d\x41\xe9\xf4\x0c\xd5\x18\xa2\x52\xf4\xc4\xe4\x13\x22\x3a\x1a\x92\xa7\xcb\x04\x99\x36\x70\x5d\xa2\xfa\x42\x41\x36\x82\x6b\xe8\x86\x3e\x35\x0b\xda\x2d\xf0\x95\x63\xc6\x2a\xe9\x60\xce\x64\x85\x20\x2c\xe4\x15\x5a\xf7\xbd\x8f\xb7\x60\x4a\x64\x68\x5d\xa2\xb4\x4b\x32\x5d\x29\x1e\x61\xfe\x58\x0b\xfa\x80\x03\xa5\x1d\x78\x69\x60\x0e\x7c\x50\x7e\x5d\xad\x26\xf4\xb1\x5e\x7f\x9f\x7c\x53\x71\xc2\xca\xe7\xba\x96\xb6\x37\x5e\x3e\xfb\x0c\xd7\x41\xf6\xfe\x0c\x5b\x0a\x54\x6e\x1f\xa2\x81\xd0\xdc\x4d\xd5\x6c\x1a\x24\x33\x95\x72\xa2\x40\xca\xe5\x05\x73\xe9\x34\xc2\x72\x13\xc4\x3c\x4f\xbd\x85\xa8\x6c\x89\xa9\xc8\x04\x72\x10\x0a\x1a\x8d\x81\x6b\xb4\xde\xd1\x1e\x11\x16\xc2\x4d\x81\xa5\x3e\x74\xad\xae\x4c\x8a\xe1\x28\xf0\xa7\x43\x45\xf9\xcd\xa3\xe2\x4f\xd7\x28\x5f\xcb\xd2\x5f\xc3\xe7\xd0\xd1\x34\x46\xa4\x53\xa6\x72\x8c\x05\x42\x63\x43\x2d\x45\x37\xf8\x91\x39\x0f\xcc\x22\x07\xba\x61\x53\xec\xd7\xf8\x59\x6a\x56\xca\x56\x65\xa9\x8d\x1b\x54\x75\x94\xbb\x45\x70\x76\x8b\xe9\x95\xeb\x58\x30\x5e\xc1\x20\x95\x48\x51\x08\x97\x88\x5c\x69\x13\xd5\xf0\x52\xcd\x99\x14\xbc\xe1\xf0\x5b\x3c\x93\xff\x22\x65\x1f\xa9\x58\xc3\xf5\xf2\xa7\x5a\x65\x22\x6f\xfb\x8a\xfe\x44\x79\x47\x16\x6e\x27\x46\xaa\x57\xb5\x37\x02\x54\xb5\x2f\x63\x6f\xc6\x24\x46\x2a\xb7\x24\xf2\x3c\x9e\xa1\x6c\x49\x4c\x9b\xf4\x78\x10\x55\x6d\x4a\x5f\x8b\xf7\xd8\x9e\xd5\x6a\x42\x9f\xeb\xf5\x09\x64\x46\x17\xf4\xff\x10\xfd\xeb\xf5\x28\xc6\x70\x5c\x43\x8c\x24\xd6\x9c\x94\x45\x77\x18\x57\xeb\x9c\x21\xb6\x2d\x2f\xae\x56\x93\xf6\xff\x7b\x5b\x89\xc6\x24\x39\xba\xe6\x16\xc7\x5a\xef\x7f\x32\x21\x43\x72\xc9\xd1\xf9\x6b\xb8\xb9\x98\xcd\xd6\x40\xdc\x96\x57\xb0\x68\xe6\x22\xc5\x53\xd2\x05\x8d\x19\x50\xa4\x52\x05\x33\x76\xca\xa4\x4c\xa4\x4e\x99\x8c\x15\x86\x46\xac\x43\x44\xce\x0a\xe4\x7e\x67\xa8\xb7\x76\x2c\x9b\x42\xb7\xd0\x66\x76\x10\x9f\x50\x0e\x8d\xc2\xfe\x62\xb4\xa9\x59\x61\xbe\x41\x1e\xcd\x3f\xe7\xad\x28\xa4\xba\x28\x25\x92\x7f\xeb\xa1\x28\xab\xa4\x5c\x8e\x25\xca\xfc\x79\x0d\xb3\x70\xc1\xeb\x5b\x18\xd8\x88\xac\xe5\x82\x9b\x4a\xc1\xfd\xc2\xce\xea\x86\xb0\x29\xbf\xf7\x14\x07\x06\x0b\x3d\x47\x28\x99\x71\xc2\xf7\x8f\x61\x0d\x39\x30\x6b\xd1\xf5\xbb\xbf\xa3\x69\xca\x54\x8a\x32\xae\xec\xf5\x87\x09\xfc\x23\xc8\x50\x4b\x30\xb6\xdb\x50\x7b\x78\xfd\x73\x47\xf8\x10\xbf\x6f\x91\xf5\x7a\x7e\x8b\xa9\xd7\xf7\xa3\xf9\xf6\xf4\xdf\xe8\x16\x6a\x8b\xa4\x60\x8a\xe5\xc8\xf7\x30\x4e\x67\xc0\x31\xf8\x91\x4a\x99\x13\x68\x7b\x0d\x06\x5e\x19\xd2\xaf\x66\xea\x9e\xf3\xeb\x85\xe1\x82\x19\x95\xf8\x81\x93\x1a\xfe\x12\x0d\xa9\xd9\x93\x76\xa9\x13\x98\xe1\x92\xfa\x00\x4a\xf5\x0b\x66\xc1\xa0\x33\x02\xe7\xd4\x9f\x50\x42\xf0\x60\x93\x0d\x18\xfd\xc1\x37\x8b\x52\x82\xd5\x5a\xc1\x03\x92\x86\x06\x53\x46\xae\x29\xc3\xf4\xc0\xb5\xf7\x4b\x65\x11\x84\x03\x5d\x39\x4b\xb3\x84\xce\xe0\xce\xb0\xb9\xb0\xf0\x50\x09\xc9\x47\x98\x42\x75\x6a\x83\x9e\x18\x2c\x25\x4b\xa3\xe7\xd5\x58\xa4\x25\xef\x18\x25\x42\x9f\xb8\x5a\x4d\xa8\x39\x74\xcb\x12\xd7\xeb\xd0\x27\x46\x8c\x38\x69\xac\x20\xf5\x5d\x8d\xa9\x70\xb1\x85\x69\x1d\xb2\xed\x02\xff\xb8\x08\x35\x4d\x44\xc1\x14\x67\x4e\x9b\x65\xcf\x6b\x06\x69\xde\xca\x79\x86\xce\xc9\x08\x0b\x35\x56\x94\xcf\x3b\xeb\xc5\x08\xed\x54\x57\x92\x93\x53\x2c\xba\x09\x84\xd1\x65\x7b\xf6\x23\x69\xff\x45\xbd\xea\x64\xb0\x20\x37\x63\x8b\x6f\x08\x28\x34\x7f\x60\xda\xd7\xbe\x35\xba\xf8\xbe\x80\x7b\x36\x4e\x9f\x75\xc3\xda\xb9\x96\xfe\x20\xfd\x7a\x33\x57\x3d\x1a\x6b\x5c\xdd\x5d\x78\xa1\xa2\x03\x52\x6c\x0d\x9c\x7e\xb5\x99\x2f\x87\xf2\x3c\x79\x99\x63\x89\x8a\xa3\x4a\xa3\x8f\x11\x8d\x28\x6c\x44\x43\x28\x05\x1d\x26\x93\x1e\x9e\x26\x25\x8c\x62\xfa\xbc\x11\x3e\x84\x6b\xb3\xe5\x49\x65\x8f\xbe\x5c\x9e\xef\xa4\x81\x29\xb3\xf0\x80\xa8\xb6\x4a\x4d\x9b\xc1\x86\x2a\xe8\x0e\x2d\x28\x3f\x57\x26\xd6\x7f\x9f\x3f\x4a\xcf\x3b\x75\xfa\xfd\x3a\x82\xc6\x9e\xa7\xb5\xfb\x65\xfc\xda\xe0\x8e\xf7\xec\x93\xc2\x1e\xf7\xed\xd3\xe2\xb7\xbf\x77\xfb\xb4\x6a\x2b\xb0\xae\x14\x4f\xea\xd2\x9a\xf8\xd2\x1a\xbf\x51\x12\x1d\x05\x79\x9b\x1e\xba\x9a\xd4\x85\xc9\x97\x30\x3a\xb7\xba\x80\xd1\xfd\x4f\x2b\x63\xc8\x8c\xa6\x16\xd7\x09\x28\x3c\xc7\x84\x6f\x42\x60\xd6\x9f\x35\x59\x3b\xba\xab\xa0\xec\x96\x1a\x64\x0e\xfb\x75\xf7\x3f\x3a\x80\x97\xdc\xb2\xc0\xbf\xba\xf8\x5f\x2b\xa0\x40\x6b\x59\xde\x19\x2f\x80\x29\x5e\xaf\xa5\x9a\x87\x05\xfa\x18\x31\x01\x05\x7f\x8e\x51\x89\x3f\x71\xea\x6b\xa8\xe4\xf5\xd8\x64\xcf\xc1\x94\xb9\xf3\x84\x7b\xb3\x58\x4d\xd1\x49\x9c\x23\xb2\xe5\xc1\x34\xcd\xc5\x1b\xb8\xce\x3b\xf1\x9f\x91\x24\x1f\x19\xf9\x92\xfc\x23\x93\x09\x05\x57\x86\xc8\x13\xa1\xe6\x7a\x16\x4b\x1e\x9b\xe9\x3a\x88\xf9\x5b\x48\xdb\x60\x31\x45\xb5\x89\x39\x67\x44\x9e\xa3\xa9\x97\x5e\x3e\xee\xda\x26\xd2\xf7\x2a\xfe\x0d\xda\xb2\x79\x6f\x03\x19\xfa\x9b\x4c\x9b\x1d\x6d\x98\x7f\xbf\xa3\xfd\x4d\x53\xd9\x24\x96\xfa\x17\x20\xca\x1c\x6d\x2d\x19\x56\x4c\x84\xc7\xb9\x8d\x82\xcf\x50\xcb\x23\x45\x29\x6f\x2f\x3e\x9d\xdd\x9c\xdd\x5d\xdf\x44\x18\xfe\xb6\xf3\x1f\x5c\x28\x9a\x05\x28\x5a\xa4\x5e\xf8\x9f\x4f\x40\x0a\x85\xc0\x4c\x78\xa1\x9f\xa3\x09\xef\x9c\xbb\xf7\x6f\xfd\x8b\xf8\x02\x0b\x6d\x96\xb7\xe2\x97\x9f\x0e\xfc\xa3\xa4\xdd\x6a\xce\x36\xbd\x28\x53\xfe\x75\x82\xc2\xe5\x01\xdd\x82\x02\xf8\xdd\xfb\xbf\xfa\xc0\xf8\xcb\xbb\xf7\x64\xfa\x6e\xdb\x5e\x94\x62\xa7\x11\x4e\x14\xa8\x2b\x77\x10\xfc\xdb\xb7\x1e\xfe\xcf\x6f\xe9\x5f\xdc\x88\x17\xa5\xd8\x69\x84\xd4\xf9\xa1\x3e\x0a\xf8\xef\x7a\xd4\x7f\x21\xf0\x9d\x8a\x7f\x39\xbb\xb9\xba\xbc\xfa\xd7\x29\xfc\x37\x20\x43\xf3\xba\x1d\xf2\x1d\xb4\xef\xb2\x53\xa6\x72\xf6\x20\x91\xea\xbc\xa3\x01\x75\x71\xd2\x9d\x66\x1f\xb0\xfb\xf8\x1d\xf9\xd9\xff\x55\xb8\xfa\xcd\x62\x65\x29\x9b\x97\xf3\x1d\xb3\xcf\x98\x21\xb6\xe9\x77\x3a\x63\xeb\x80\x7d\xaf\x43\x4a\x86\x1e\x7d\x3f\xfa\x2d\x00\x00\xff\xff\x99\x53\xce\x04\xb9\x21\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 8633, mode: os.FileMode(420), modTime: time.Unix(1515782806, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

