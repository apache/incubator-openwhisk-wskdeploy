/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x6f\xe3\x36\x16\x7e\xcf\xaf\x38\xc8\x4b\x5e\x02\xed\x4c\x17\x0b\x2c\xe6\x2d\xd8\xe9\x25\x68\xe7\x82\x99\xd9\x16\x45\x77\x80\xd0\xe2\xb1\xc5\x86\x22\x05\x92\x72\xea\x0a\xfe\xef\x0b\x92\x92\x2d\x27\x12\x45\xc9\xb2\x13\x14\xcd\x93\x63\xeb\x7c\xdf\x77\x0e\x6f\x87\xe4\xd1\x6f\x17\x00\xd5\x05\x00\xc0\x25\xa3\x97\x6f\xe0\xf2\x07\xe4\x5c\x5e\x5e\xfb\xaf\x8c\x22\x42\x73\x62\x98\x14\xf6\xb7\x1b\x01\x37\x1f\x6f\x21\x93\xda\x40\x5e\x6a\x03\x0b\x84\x42\xc9\x35\xa3\x48\x93\xcb\x0b\x80\xed\xf5\x63\xb8\x77\x4c\x6b\x26\x56\x90\xe6\x14\xee\x71\xd3\x03\xdc\x3c\x75\x95\xe6\xf4\x0a\x98\x28\x4a\xe3\x9e\xee\x84\x24\xa5\xc9\xa4\x62\x7f\x3a\x6b\xb8\xfb\xf1\xdb\x5f\xef\x7a\x60\xbb\x9e\xec\x84\x7c\xc8\x98\xbe\x77\xbe\xdd\xfd\xf0\xe1\xf3\x97\x3e\xbc\x27\x8f\x75\x82\x09\x92\xa3\x2e\x48\x8a\x3d\x28\xfb\xdf\x87\xb4\xfc\xfc\xed\xa7\xcf\xb7\x1f\xde\x47\xc8\xd9\x3d\xd9\xdd\x08\x44\xb0\x25\x6a\x03\x4b\xc6\x11\x84\x34\xb0\x94\xa5\xa0\x40\x0c\x14\xc4\x64\x50\x55\x49\xa1\xe4\xef\x98\x9a\x8f\xc4\x64\xdb\x6d\xf2\x3f\xd1\xd7\x50\x13\x90\x82\xfd\xa2\xaa\x92\x0d\xc9\xf9\x76\xfb\x0f\xfb\xc9\x7e\x70\xd0\x09\xcc\xa8\xf9\x14\x54\x11\x71\x66\xfa\x10\xcb\x64\xe8\xf1\x7e\xab\xaa\xc4\x3e\xe1\xd1\xbe\xc6\x46\x7b\x0c\x5e\xa7\xbc\xff\x36\x61\xc8\x6b\x5c\x6f\x00\x4b\xa9\x80\x62\xc1\xe5\x26\x47\x61\xfa\xe5\xc4\xdb\x8f\xa6\x2f\xc5\xb1\x02\x1e\x23\x74\x4a\xb0\x21\x53\xa5\x30\x2c\xdf\x85\x53\x97\x45\x21\x95\x41\x0a\x8b\x0d\x7c\x28\x50\xf8\x51\x55\x70\x62\x96\x52\xe5\xfd\x62\xa6\x61\x75\xca\xfa\xe5\xe6\xd3\xfb\xdb\xf7\xdf\xbf\x81\x4f\x35\x9e\x2e\x30\x65\x4b\x86\x14\x98\x80\xc6\x59\xf8\xf5\xe6\xdd\x4f\xd6\xfb\x9a\x75\xbb\x05\x2a\xd1\x33\xe7\xc4\xa4\x19\x3c\x30\x93\x01\x49\xdd\x6c\xa7\x65\xa9\x52\xf4\x3d\x07\xff\x30\x28\xb4\xfd\xb6\xaa\x12\xfc\xc3\xd4\x21\xab\x9f\xac\xaa\xc4\x7f\x0a\x0d\xa2\x17\x25\x31\x1c\xc4\x5f\x5c\xd0\xdf\xba\xde\x00\x19\xd1\x90\x66\x52\xa3\x00\x52\x14\x4a\x16\x8a\x11\xb3\x6f\xb8\x03\xa9\x0b\xa2\x91\x82\x14\x6e\x64\x05\x35\x5a\x69\x26\x23\x66\x5a\x08\x9f\x5f\x60\xf7\xf8\x14\xfb\xfe\xdb\xd0\x9b\x4d\x81\xd7\xa0\xd1\x80\x91\x20\x24\xc5\xdf\x75\xdf\xd8\x8c\xb4\xee\xa4\xfe\x62\xfd\x29\x4d\x86\xc2\xb0\xd4\xaf\xd6\xf7\xb8\x69\x86\x55\x2a\xc5\x92\xad\x4a\x85\xb4\x3f\xb8\x63\x10\x7a\x25\xec\x92\x9b\x91\xc4\x61\xbb\x5e\xba\x5d\x22\x30\x96\x6f\xc0\x30\xca\x3f\xdb\x23\x0a\x66\xff\xdb\x6e\xaf\x61\xa9\x64\x5e\x7f\xe5\x3b\x54\xa8\x23\x4f\x82\x0a\xb6\x7b\xd3\x56\x1a\x4d\x0b\xa0\x34\x59\x9c\x98\x68\x88\xb8\xa6\xa8\xaa\x64\xf7\x7f\xdb\xa3\xdd\x97\x71\xaa\xa6\x63\x76\xca\xfc\x8e\x30\x8e\xd4\x8e\xa4\x15\xfa\xc5\xff\xc9\x80\xd3\x1e\xd6\xae\x3c\x7e\x8e\xd1\xa8\xd6\x2c\xc5\x37\x6e\x52\x55\x2a\xa4\x78\x36\xf8\x4e\xf1\x9f\x0d\x51\x6e\x16\x28\x45\x4e\x94\xce\x08\x6f\xad\x8f\x4c\x2c\xa5\x87\xe6\x32\x25\x1c\xd6\x84\x97\xa8\xfb\xa5\x4e\x04\xeb\x99\xf4\x42\x10\x4c\x18\x54\x02\x43\x29\x49\xb4\x7d\x27\xfd\xdb\x5d\xce\x02\xa9\xcc\x0b\x8e\x36\xdc\xba\x4c\x53\xd4\x7a\x59\x72\xbe\xe9\x67\x8e\x32\xed\x24\xfd\x5e\x1a\x40\xa5\xa4\x82\x54\x21\x31\x36\xa7\x2a\x48\x7a\x4f\x56\xe8\x97\x67\xff\x5b\x8e\x5a\x93\x55\xab\x71\x81\x08\xda\xd8\x49\xea\x7f\xb0\x1f\x42\xbd\xea\x24\x54\xb1\x4e\xd5\x6b\xdf\x5f\xcb\xa7\x82\x9d\xc3\xa1\xe3\x68\x62\x9d\x51\x25\x3f\x4b\x97\x3b\x92\x67\xc0\x1d\x8d\xc6\xb1\xb8\x39\xd3\x10\x53\x6a\x90\xcb\x53\xfb\x76\x12\xd2\xd8\x76\x33\x8a\xad\x56\xa8\xce\xd1\x74\xc7\x53\x8d\x75\x6a\x89\x48\xcf\xe9\xd9\x91\x7c\x63\x67\xf8\x05\x13\xd4\xfe\x7f\xc6\x59\xf1\x78\xca\xa1\xb5\x53\x2e\x81\x62\x81\x82\xa2\x48\x37\xd6\x94\x62\xf1\x9e\xf8\xfd\x27\xa3\x75\x8a\xec\xd7\x48\xbb\x44\xee\x56\x48\xbb\x9b\x85\xbb\x07\x7d\xef\xcf\x0e\x76\x87\x08\x77\x36\xbb\x50\x98\xcb\x35\x42\x41\x94\x61\x84\xf3\x4d\x7d\xc6\x81\x14\x88\xd6\x68\x02\x09\xca\x4b\x50\x16\x08\x59\x6b\x6d\xac\xaa\x44\x96\xa6\x28\xed\x7e\x3b\x49\x92\xa0\x3f\x01\xb3\x01\x32\x37\x2d\x8d\xa5\xea\x34\x1a\x20\x3a\x18\x53\x63\x09\x83\xc6\x03\xc4\x4d\x57\x1f\xcb\xd9\x67\x17\x49\xd7\x8c\xac\xa9\xb4\x7d\xf6\x03\xf4\x87\x3d\x7a\x14\x73\xc0\xb4\x93\xf4\xc3\x8f\x09\xfc\x87\x88\x14\x39\xaf\xcd\x07\x4f\x09\x83\x26\x03\x24\xd6\x20\xee\x2c\x32\x6c\xd3\xb3\xd7\xd8\x3f\x14\x1e\xfd\x81\xed\xc6\x08\x88\xa1\x59\xd3\x4f\x23\x13\xf6\x1b\x7d\x86\x2f\xd7\xeb\x06\xe1\x69\x17\xdc\xcf\xc7\xfd\xdd\x37\xd6\x7a\xd8\xff\xa9\xcb\x41\x5c\x68\x8e\x40\x1f\x48\x23\x28\x72\x3c\xcf\x9e\x6a\x3e\xa6\x58\x97\x4e\x9c\xa9\xcf\xc5\xf3\xf7\x2e\xe4\x51\x3c\x4f\xbf\x0b\x99\x91\x6a\xac\x53\x27\xde\x85\xcc\xcd\x17\xeb\xde\xe9\xcf\x99\x66\xa4\x0a\x5f\x33\x7d\xc9\x10\xae\xfc\xa9\xed\x95\xbf\xf7\x72\x27\xd0\x62\x17\x52\x14\x86\x19\x77\x26\x4d\xb1\x50\x98\x12\x83\x34\x81\x8f\x1c\x89\x46\x28\x35\xc2\x95\x0d\xfa\x15\x30\xa1\x0d\x12\x9b\xbb\x03\x45\x9d\x2a\xb6\xf0\x97\x6a\xf5\x0d\x9b\xbf\xcd\x08\xec\x36\x9e\x53\x51\x6c\xbb\x37\x89\xe6\x19\xdb\x7f\x3e\xca\xbe\x3c\xaa\x2b\x91\xcd\x88\x86\x05\xa2\x38\xc8\x8d\x76\xfb\xb3\x60\x76\x35\x0d\xae\x53\xdc\xc7\x40\x7e\x3f\x55\xe1\x71\x98\x41\x99\x73\xca\x9b\x41\xd6\x97\x7a\xb8\xcc\x21\x6b\x1a\x56\x50\xd6\x93\xfd\xe9\xb1\xda\x26\x00\x76\x0a\xfc\xf4\x78\xc7\x3e\x55\xd8\x04\xa0\x4e\x41\x37\x4f\x4f\x2b\xa6\x4a\x9a\x04\x15\x31\x71\xec\x33\xf4\x6e\xb8\x66\x63\x19\x3f\x77\x8c\x43\x1c\x1a\x00\xf5\xd2\xd1\x46\xab\x77\x7f\x51\x7d\x3e\x6c\x1e\xec\x45\x36\x8b\x1c\x45\x1b\x61\x38\xd0\x4b\x9a\x12\x89\x11\xa4\x91\xc6\x03\x37\xba\x4c\xac\xe5\x3d\xba\x34\xda\x27\x62\x19\x8a\x33\xe5\x84\x67\x16\x11\xce\xa9\xde\x11\x41\x89\x91\x6a\x03\x4b\x86\x9c\x42\x33\xa9\xff\x8c\xca\x95\xb5\x34\x45\xa7\x3a\x74\x25\x3b\x15\x2d\x2c\xed\xb1\x71\x53\xf2\x45\xd6\x3e\x37\xb2\x61\x4b\x4b\xa5\xec\x3e\x7c\x7f\x6c\xbb\xf6\x4f\x47\x88\x3d\x1a\x7f\x5a\x64\x7f\x62\x29\x0a\x8d\x33\x45\xb6\x07\x2d\x2e\xb2\x8d\xf1\xa9\x22\x3b\x19\x3f\x2c\xbf\x81\xad\xaa\x84\xfb\x8f\xb7\x6f\xb7\xdb\x86\x85\xc0\x9a\x70\x46\x41\x0a\x8c\x90\x3a\x0a\xab\x53\x56\x8e\xb9\x54\x9b\xcf\xec\x4f\xb4\x3b\x71\xce\x72\x66\xf4\x41\x85\x9e\xce\x64\xc9\xa9\x6d\x1c\x22\x5c\x7d\x82\x1d\xd4\x0b\x34\x0f\x76\xc6\x7a\xfd\xcd\xbf\xdd\xf0\xfd\xd7\xeb\x6f\xfa\xd5\xce\x4a\xd1\x5d\xa6\xc9\x72\x94\xa5\x99\x04\xff\xea\x95\x83\xff\xe7\x2b\xfb\x17\xa8\xde\x9c\x93\xa2\xd3\x09\x2e\x57\x53\x63\xe4\xf1\x5f\x07\xe4\xcf\x04\x1e\xee\xd9\xb7\xc2\xf7\x37\xc7\xe0\x6b\xea\xae\xea\xb8\x5d\x59\xe6\xfa\x84\xae\xcd\xcc\x34\xb0\x95\x90\xaa\xb5\xaf\x4c\x33\x4c\xef\xfd\x82\x10\xb3\x89\x3d\x0d\xe9\x78\x47\xf7\xbd\xfc\xbc\xbe\xce\xc2\x3b\xde\xdd\xba\x43\x9d\xd7\xd7\xe3\x49\x87\xa6\x66\x37\x34\xfc\x74\x9a\x33\x23\x7c\x5e\xbc\xab\x9a\xcc\x88\x58\x91\x05\x47\x20\xda\x57\xa8\x3e\x5c\xc3\x43\xc6\x5c\x99\x32\xe7\x76\xfc\x34\xfc\x31\x53\xf7\x8c\x5c\x9d\x6e\xb9\x5a\x7f\xb9\x74\xeb\x55\x72\x8f\x1b\x57\xf3\xdb\x23\xab\xfb\xd9\x61\xd8\x14\x95\x89\xc6\xdd\x3f\x1c\xac\xab\x6c\x9e\x27\x45\xc1\x9b\xda\x5c\x57\x1f\xea\xf6\x29\xfe\x5a\xc9\x2e\x72\xa2\x75\x55\xe7\xeb\x99\x89\x71\xef\x36\xec\xbf\xfe\x8e\xd9\xd4\xfe\xeb\xe3\xa2\x72\x13\xc5\xd4\xbc\x4d\xb1\xf5\x64\xf9\xc1\xcb\x15\x35\x55\xf3\x65\x4d\xd4\x77\x21\xf4\x97\x70\x2d\x3c\x76\xda\x44\x1d\xfa\x5d\xa7\xd5\x52\x0a\xdb\x73\xf7\xa7\x89\xd7\x50\xec\x4f\x13\xeb\x97\x66\x9a\xe3\xc4\x88\x41\x74\x1a\xd2\x51\x8e\x1e\xc6\xee\x2c\x6e\xce\x42\x19\x79\xf7\xe8\xcb\x44\xdd\x41\x30\x43\x1d\xbc\x16\x04\x5a\x2a\xbb\xf3\xcb\x89\x20\x2b\xa4\xed\x8b\xf4\x13\xd5\xcd\xbc\x58\xb9\xdd\xdb\x77\xf7\x22\x56\xeb\x55\x8c\xf6\x21\x80\x9f\xda\xdd\x49\xbb\xf7\xc1\xd5\x03\xb7\xb7\x1a\x4d\x1b\xee\xdf\x2e\xeb\x1a\xbc\x3b\x9c\x05\xb6\xeb\x0c\x42\x4b\xd2\xf3\xeb\x1a\x08\x97\xe9\x3a\x1f\x7a\x11\x01\x7b\x3e\x65\x03\x21\x6b\xd5\x09\xd5\x1f\x5f\x4a\xc8\x9e\x4f\x99\x0d\xd9\xc5\xc5\xd7\x8b\xff\x07\x00\x00\xff\xff\x9b\x5e\x18\x0c\xc3\x3c\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 15555, mode: os.FileMode(420), modTime: time.Unix(1513027189, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1501631495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

