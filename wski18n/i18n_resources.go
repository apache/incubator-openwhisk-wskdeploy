// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x8b\xdc\x38\x12\xfe\x3e\xbf\xa2\x08\x07\xd9\x85\xa4\x37\xd9\xe3\xe0\x08\x84\xe3\xb8\xe4\xc8\xdc\x6e\x32\x21\x33\xd9\xe5\xc8\x0e\x1e\xb5\x5d\x76\x6b\x5b\x96\x8c\x24\x77\xa7\xd3\xcc\xfd\xf6\xa3\xf4\x62\xbb\x67\x46\xb6\xbb\x93\x65\xf3\xc9\xd3\x2a\xd5\x53\x2a\x95\xaa\x9e\x92\xf2\xe9\x0c\x60\x7f\x06\x00\xf0\x88\x17\x8f\x5e\xc0\xa3\xda\x54\x59\xa3\xb1\xe4\x9f\x33\xd4\x5a\xe9\x47\x4f\xfc\xa8\xd5\x4c\x1a\xc1\x2c\x57\x92\xc4\x5e\xbb\xb1\x33\x80\xdb\x27\x23\x1a\xb6\x4c\x4b\x2e\xab\x84\x8e\x5f\xc3\xe8\x94\x16\xd3\xe6\x39\x1a\x93\xd0\x72\x19\x46\xa7\xb4\x70\x59\xaa\x84\x8a\x73\x1a\x4a\xce\x47\xad\xb3\xdf\x8d\x92\x59\xcd\x8d\xe1\xb2\xca\xf2\xba\xc8\xd6\xb8\x4b\x28\xfb\xcf\xe5\xc5\x3b\xe0\xb2\x69\x2d\x14\xcc\x32\x78\xeb\x67\xc1\xe3\xbc\x2e\x1e\x03\xcd\x4b\x22\x91\xe2\x52\xb0\x2a\x33\x56\xf3\xdc\x26\x00\x98\x10\x6a\x0b\xad\x41\x0d\x05\x96\x5c\x62\x01\xba\x95\x96\xd7\x08\x1b\xd4\x86\xa4\xa6\x11\x9c\x92\x6c\x83\x7a\xa9\x0c\x26\x80\xc2\x28\xa8\xd6\x36\xad\x9d\xad\xb4\x66\x92\x55\x58\x8c\x5a\xdf\x68\xf5\x3b\xe6\x16\x50\x5a\x6e\x39\x1a\xb0\x0a\x96\x08\x35\xd3\x6b\x2c\x20\x6a\x98\x46\xb4\xaa\xaa\x04\x66\x2b\x14\x4d\x02\xef\xca\x49\xc0\x1b\x14\x0d\xd4\x68\x0c\xab\x70\x86\xde\x5c\xc9\x92\xa7\xe2\xd6\x0f\x42\xc9\x05\xc2\x77\x05\x96\xac\x15\x16\xb8\x81\xbf\xbc\xb9\x78\xfb\xfa\x87\xc5\xd6\xac\x1b\xad\x1a\xf3\xfd\x0c\x1c\x2e\x2d\x6a\x96\x5b\xbe\x49\x6d\x82\xf7\xd7\x40\x8e\x7c\x57\x37\x76\x24\xe0\xef\xec\x47\xb0\x30\x75\x7e\x3c\x40\x27\x34\xad\x55\xb2\x1a\x4d\xc3\xf2\x94\xc5\xfd\xf8\xb4\xae\x10\x07\x09\x4d\x0d\xb3\x2b\x8a\x0c\x83\x7a\x83\x5a\xa0\x31\x31\x70\x66\xa8\xae\x99\xe4\x25\x9a\x29\xdd\x51\xcc\x6d\xe7\x0c\xb5\x05\x36\x42\xed\x6a\x94\x53\x8a\x7b\xc1\xb9\xaa\x59\x6b\x57\x23\x89\x85\x86\x95\xe6\x5f\xdc\x0f\x70\xf3\xd3\xeb\xff\xde\xcc\x51\xda\xf0\x6c\xa5\x92\x6e\xd8\xae\xb8\x59\xc3\x3f\xdf\x9f\xc3\xcd\x9b\x8b\xcb\xab\xb9\x1a\x63\xa2\x99\x54\xfa\xcb\xeb\x0f\x97\xe7\x17\xef\xe6\xe8\x5d\xe3\x2e\x73\x9e\x1a\xf1\xab\x2a\xc1\xae\x10\x16\x6b\xdc\xcd\xf5\x6a\x8e\xda\xce\xd6\x4b\xc2\x33\x14\x37\xed\x52\x70\xb3\xca\x84\x4a\x16\xb7\xf7\x5e\x04\x18\x34\x2c\x5f\xb3\x0a\x29\x26\x08\x43\x63\xc5\x8d\xd5\x3b\x30\x68\x81\x4b\xf8\x5f\x9f\x31\xe6\x81\x9a\x95\xd2\xa9\xed\x7c\x10\x95\x75\x98\x63\x45\x92\x92\x4a\x88\xee\x84\xf2\x57\x0a\x76\xaa\x05\x8d\x4c\x88\x1d\x6c\x99\xb4\x7d\x9c\x83\x5d\x71\xf3\x0f\xf8\x6e\xf7\xc3\xbb\xef\x5f\xc0\x24\x4e\x2b\x4f\x40\x8a\x93\x8e\xc4\xa2\x73\x93\x3e\x55\xbf\xc9\xf7\x02\x99\x71\x69\x75\xc3\x0b\x04\x26\x81\x66\x50\x65\xca\xfd\x51\xb3\x6a\x8d\x72\x0e\x50\xc3\x47\x4e\xda\x3d\x20\x0a\x06\x92\xa7\x7c\x09\xa5\xd2\x70\xd1\xa0\xfc\x95\x8e\xce\x0c\xac\xa9\x24\x7c\x7f\x59\xd0\x4d\x81\x4f\xb1\x68\x6d\x98\x68\x91\x4a\x57\xd5\xa2\xb1\xd7\x63\xb8\x31\x4f\x66\x52\xd9\xac\x54\xad\x4c\x15\xf8\xb7\xc3\x84\x0a\x52\x59\x70\xd2\xc0\x2c\xb8\xa3\xf6\x69\xbf\x5f\xd0\xc7\xed\xed\xf5\xe2\xb7\x11\xaa\xd2\x3a\xae\xd5\xc1\x8e\xc6\xcb\x47\xc7\xb0\x06\x9a\x9d\x3f\xfb\x0c\x7c\x0c\xd0\x44\x68\x3e\x0c\x15\x27\x4d\x82\x05\xa6\x46\x5c\xb2\x66\x36\x5f\x25\x50\x3e\x04\x42\x47\x38\x61\x0a\x41\x99\x06\x73\x5e\x72\x2c\x28\x71\x74\x95\xab\x50\x68\x9c\xa3\x9d\x46\xd8\x72\xbb\x02\xe2\x0a\x4a\x3e\x36\x60\x54\xab\x73\xf4\x9b\x81\x9f\x2d\x4a\xca\xdb\x4e\x2f\x7e\xb6\xd1\x7c\x2f\xed\x7e\xf5\x9f\x53\x9b\x13\x97\x91\xaf\x98\x4c\x73\xbd\xb8\x8a\x20\x45\x67\xf8\xce\x82\x96\xcc\x60\x01\x74\xc6\x56\x38\x65\xf3\x57\x19\xca\xe5\x86\x09\x9e\x32\xf4\xdc\x8f\x82\xd2\x10\x48\x7e\x47\xa9\x67\xed\x00\x99\xd6\xaf\xe0\x08\xf3\xbc\x54\x26\x78\xcd\x6d\xc6\x2b\xa9\x74\xd2\x99\xd1\xc6\x80\xe1\xa6\x38\x24\xf7\x45\xb6\x0d\x2d\xe2\x06\x82\xba\x51\x7c\x4f\x65\xbb\xce\x66\x3c\x55\x5e\xd1\x0a\x0f\x53\x23\xd5\x61\xee\x83\xcf\xab\x6a\x8f\x45\x1c\xcd\x99\x84\x48\x34\x82\x44\xbe\x0e\x67\x2a\x5f\x12\x52\x9f\x20\x4f\x82\x0a\x4b\x19\x6b\x34\xef\xae\x67\xbf\x5f\xd0\xe7\xed\xed\x13\x28\xb5\xaa\xe9\x6f\x1f\xfb\xb7\xb7\xb3\x10\xfd\x76\x4d\x21\x92\x58\xdc\x29\x83\xf6\x34\xac\xce\x39\x53\x68\x07\x5e\xdc\xef\x17\xdd\xdf\x47\xaf\x92\x1a\xef\x0a\x6d\x3c\xc3\xa9\x06\xe6\xdf\x8c\x0b\x9f\x5c\x2a\xb4\xee\x18\x9a\xb6\x69\x94\xb6\x7d\x63\x6c\x3c\x70\x57\x60\x5d\x47\xc1\x73\x7c\x41\xb6\xa0\xd6\x13\x86\xb4\xb2\x66\xda\xac\x98\x10\x99\x50\x39\x13\xa9\xd2\x10\xc5\x06\x40\xe4\x2c\x0f\xee\x66\xfa\x8a\x6b\xe6\xa2\x49\xb4\x5b\xa5\xd7\x27\xe1\xb9\x96\x51\xe2\x78\x39\xea\xab\x96\xbf\x65\xc1\x22\x99\x7f\x5e\xf5\xfd\x4c\xae\xea\x46\x20\xf9\x37\x5c\xcd\x94\xad\x10\xbb\xb9\x40\xa5\xdb\xaf\x69\x94\x82\x17\xe1\x14\x7a\x34\x02\xeb\xb0\xe0\x43\x2b\xe1\x66\x6b\xd6\x81\x12\xc6\x02\x7c\x43\x71\xa0\xb1\x56\xd4\x28\x33\x6d\xb9\x63\x90\x7e\x0c\x0b\x60\xc6\xa0\x1d\x77\xff\xc0\xd2\x9c\xc9\x1c\x45\xda\xd8\x8b\x9f\x16\xf0\x2f\x2f\x43\x25\x63\x26\x05\x18\x00\x68\xa4\x38\xcd\x8c\x65\xb6\x4d\x85\xf7\xd3\xa7\x4f\x9f\xbe\x7c\xf9\xf2\xe5\x60\x93\x07\x4e\xba\x74\x53\x81\x04\x48\x70\x2c\xaa\x8e\xd8\xeb\x8f\x03\xe1\x53\x76\xfb\x00\x6c\x74\xbf\x0f\x90\x46\x77\x7c\x36\xde\x91\xbb\x36\x9b\xba\x1d\x80\x84\x2b\xaa\x23\x16\xa7\x4a\x28\xd0\xfb\xb1\xbb\xf5\x1a\x5b\x30\x14\xad\x26\xfb\x02\xd2\x30\xba\xfe\xb8\xe0\xdf\x32\x2d\x33\xd7\xbe\x53\xa3\xd1\xa0\x26\x33\x47\x92\x3d\xf1\x8f\x35\xee\x88\x7d\x50\x81\xd9\x32\x03\x1a\xad\xe6\xb8\xc1\xc2\xa7\x21\xa7\x6c\xd1\x2b\xa3\x1f\x1c\x49\x15\x02\x8c\x52\x12\x96\x48\x16\x6a\xcc\x19\xb9\xa6\xf1\x5d\x4b\xa1\x9c\x5f\x5a\x83\xc0\x2d\xa8\xd6\x1a\xea\x61\x54\x09\x57\x9a\x6d\xb8\x81\x65\xcb\x45\x31\x63\x29\x54\x1d\x7b\xed\x74\xde\x04\xcb\x93\xfb\x15\x57\xa4\x44\x31\x58\x14\xf7\xec\x74\xbf\x5f\x10\x21\xb5\xbb\x06\x6f\x6f\x3d\x37\x4d\x2c\xe2\x49\x5c\x05\x99\x6f\x83\x4e\x89\xdb\x03\x9d\xc6\x22\x1b\xa7\x15\x54\xfe\x22\x7d\xa9\x99\x2c\x98\x55\x7a\x37\x72\x3f\x44\xd6\x77\x72\x0e\x65\xb0\x3b\xdc\x44\x66\x3b\xed\xb4\x6f\x06\x6a\x56\xaa\x15\x05\x39\xc7\xa0\x5d\x80\x6f\x9d\x0e\x7b\x4f\x92\x76\x5f\xc4\x94\x17\x73\xfc\xe1\x9a\x1c\x47\x47\x26\x6e\x0f\xaf\xfc\xa6\x39\x5b\x1c\x2b\x29\x1c\x5a\x41\x9f\x81\x2e\xdf\xb9\xa3\xf3\xe3\xb1\xaf\xbb\xd3\x56\xd9\xc0\x6d\x9c\x50\x3d\x50\x72\x70\x83\xe8\x47\x63\x7f\x3b\x55\x04\xc8\xcb\x05\x36\x28\x0b\x94\x79\xf2\x32\x24\x8a\x42\x2f\xea\x43\xca\xdb\xb0\x58\x8c\xe0\xc4\xd4\x30\x0b\xe9\x63\x2f\x7c\x0a\x56\x3f\xe5\x1e\xaf\x48\xbe\xde\xbc\x7a\x10\x06\x56\xcc\xc0\x12\x51\x1e\x94\x9c\x2e\x93\x4d\x95\xd7\x07\xac\xa0\x3c\xdd\xea\x14\xfb\x7f\x75\x27\x4d\x3f\x68\xd3\x9f\xc7\x47\xe2\x7a\xee\xd7\xf0\x6f\xe3\xd7\xa8\x77\xbe\x67\xef\x15\xf8\xb4\x6f\xef\x17\xc1\xe3\xbd\x3b\x66\x55\x57\x89\x55\x2b\x8b\x2c\x94\xd8\xcc\x95\xd8\xf4\x89\x12\x68\x29\xc8\xbb\xf4\x30\xb4\x24\x14\x28\x57\xca\x68\xdf\x42\x21\xa3\xf3\x9f\xb7\x5a\xd3\x32\x62\x4d\x8e\xcf\x58\xee\x3a\xc8\x7f\x93\x06\x66\xdc\x5e\xd3\x6a\x67\xb3\x0b\xca\x6e\xde\xe8\x2c\xd7\xc8\x6c\xca\x9d\xee\xe1\x15\x9c\xc8\xc1\x0a\xdc\xad\x8f\x7b\xb1\x8d\xcf\x5c\x7d\x73\x03\x4c\x16\x61\x2c\x57\x85\x1f\xa0\x8f\x19\xfd\x57\x30\xc9\xbb\x75\xd4\xa4\xe2\x9e\x53\xff\x08\x93\xa2\x39\x21\x4d\x4d\xa6\xcc\x07\x77\x78\x34\x8b\x05\x88\x41\xe2\x9c\x91\x2d\x4f\x86\x89\x07\x6f\xe2\x38\x3f\xa8\xff\x2b\x92\xe4\x9d\x45\x7e\x4b\xfc\x99\xc9\x84\x82\xab\x44\x2c\x32\x2e\x37\x6a\x9d\x0a\xad\xbe\xb7\xf7\x62\xee\x14\xd2\x34\xd8\xae\x50\xf6\x31\x67\x35\xaf\x2a\xd4\x61\xe8\xdb\xc7\x5d\x47\x26\x1d\x57\x71\x77\xe0\x86\x6d\x46\x89\xa4\xe7\x37\xa5\xd2\x0f\x50\x31\x4a\x74\x6e\x7e\x24\x97\x31\xb1\x84\x77\x35\xca\x1c\x5d\x2d\x99\x36\x2c\x5c\x6e\xf6\x06\x7e\x85\x59\x4e\xd3\x34\xa4\xbb\x74\x34\x59\x8d\x35\xf1\x43\xc3\xbf\xa4\x30\xbd\xc4\x25\xff\xe2\xe8\xbb\x9f\x76\xc0\x9a\x7a\x92\xc8\xa4\xbb\xb4\xa0\x7d\x5c\xa2\xdd\x52\x64\x3d\xff\xf1\xef\x6e\xc7\xfe\xf6\xfc\xc7\xd9\x36\x59\x5e\xa3\x6a\x53\xac\x30\x8c\x9e\x64\xcc\xb3\x67\xce\x98\xbf\x3e\xa3\x7f\xc7\xfa\x48\xa8\x6a\xcc\x4f\x42\x55\xa7\x3a\xc9\x5b\xf5\x7c\xae\x45\xe1\xd2\x9e\x2d\x93\x4f\xa2\x3f\x77\x77\xcb\x1d\xcd\x35\x31\x44\xc5\xce\x97\xe9\x4e\xc7\x02\xce\x2b\xa9\xa8\x55\x9d\xe0\xef\xce\x02\xea\x0e\x77\x59\xae\x6a\x6a\x1a\x52\xcf\x06\x24\x13\x5f\x59\xf2\xba\x70\x25\xb5\xb4\xa8\xfd\xc1\x7d\xe1\x5f\x2f\xe8\x34\x5f\x4f\x65\x98\x56\x8b\xe3\xaf\xfe\xf7\xfb\x45\xab\x45\x68\xf4\x3e\x7e\xf8\xd9\xe1\xb5\x5a\x04\xbe\xff\xe9\xa0\x13\xbc\x76\xb4\x7f\x32\xd5\x91\x21\x35\x13\xa5\xd2\x75\x32\x6b\xbc\x8d\xe3\x63\x16\x2c\xe0\x4a\xef\x80\x55\x8c\xcb\x39\xfe\x0e\xb7\xb7\x47\xfb\x60\xf8\x7f\x5c\x86\x8f\x5d\x05\x5a\xcc\xed\x8c\xdc\x3e\xe0\x87\xae\x57\x9b\x7a\x36\x3c\xe8\xd6\x0e\x42\xef\x7e\x9b\xd6\x3f\x2a\xde\x6d\xbf\xc6\xf9\xeb\xd2\xff\x27\x83\x0d\x6a\x5e\xa6\xb8\xe1\x2f\x6e\x30\x84\x81\xb7\x61\x98\x25\xf1\x33\x37\xd6\xcc\xf1\xbc\xaf\x14\x9a\x8e\xc9\xac\x74\xfc\x20\x1c\x97\x77\xee\x1d\x42\x22\xa0\xbf\x68\x24\xfc\x1a\x33\x01\xf5\x9e\x5c\x86\x2a\x47\x7f\xb0\xbc\x2f\x6c\x67\xd7\x67\xff\x0f\x00\x00\xff\xff\xee\x02\x81\xf6\xee\x27\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 10222, mode: os.FileMode(420), modTime: time.Unix(1516301304, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

