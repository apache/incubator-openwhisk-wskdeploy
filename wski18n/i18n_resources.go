// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5b\x6f\x8f\xdb\x36\xd2\x7f\x9f\x4f\x31\x08\x1e\x20\x2d\xe0\x38\x69\x1f\x3c\xc0\x83\x00\x79\x91\x6b\xd2\x36\xd7\x26\x1b\xec\x26\x17\x14\xb9\x85\x42\x4b\x63\x9b\x5d\x89\xd4\x91\x94\x1d\x77\xe1\xef\x7e\x98\x21\x29\xc9\x5e\x53\xd2\x3a\xed\x5d\xde\xc4\x36\xc9\xf9\xc7\x99\xe1\xcc\x8f\xdc\x4f\x0f\x00\x6e\x1f\x00\x00\x3c\x94\xc5\xc3\x67\xf0\xb0\xb2\xab\xac\x36\xb8\x94\x5f\x32\x34\x46\x9b\x87\x33\x3f\xea\x8c\x50\xb6\x14\x4e\x6a\x45\xd3\x5e\xf1\xd8\x03\x80\xfd\x6c\x80\x82\x54\x4b\x9d\x20\xf0\x9a\x86\xc6\xd6\xdb\x26\xcf\xd1\xda\x04\x89\xab\x30\x3a\x46\x65\x2b\x8c\x92\x6a\x95\xa0\xf2\x31\x8c\x26\xa9\xe4\x55\x91\x15\x68\xf3\xac\xd4\x6a\x95\x19\xac\xb5\x71\x09\x5a\x97\x3c\x68\x41\x2b\x28\xb0\x2e\xf5\x0e\x0b\x40\xe5\xa4\x93\x68\xe1\x1b\x39\xc7\xf9\x0c\xde\x89\xfc\x46\xac\xd0\xce\xe0\x45\x4e\xeb\xec\x0c\xde\x1b\xb9\x5a\xa1\xb1\x33\xb8\x6c\x4a\x1a\x41\x97\xcf\xbf\x05\x61\x61\x8b\x65\x49\xff\x1b\xcc\x51\x39\x5e\xb1\x61\x6e\x16\xa4\x02\xb7\x46\xb0\x35\xe6\x72\x29\xb1\x00\x25\x2a\xb4\xb5\xc8\x71\x3e\x59\x17\xad\x53\x9a\xbc\x00\xa7\x75\x09\x4e\x07\x45\x66\xd0\x28\xff\x09\x84\x2a\xc0\xee\x54\x0e\xba\x46\xb5\x5d\x4b\x7b\x03\x75\xd0\x09\x1a\x2b\xd5\x0a\x04\x54\x42\xc9\x25\x5a\xc7\x93\x75\x4d\x54\x45\x19\x48\x55\xa4\xc9\x52\x96\xed\xf4\xdf\x5e\xbc\xf9\x75\x8a\xcc\x76\xad\x8d\x1b\xde\x80\x77\x46\x6f\x64\x81\x16\x04\xd8\xa6\xaa\x84\xd9\x81\x9f\x0f\x7a\x09\xdb\xb5\x70\x8f\x2c\x2c\x10\x7b\xdb\xf3\x75\x66\x0c\x22\x8d\xda\xd1\xa2\x23\x5b\xae\xb1\xac\x03\x6b\xd8\xe9\xc6\x4c\x32\x21\x99\x6a\xba\x2c\x1b\x34\x96\x78\xa7\xec\x23\x95\x63\x85\xc3\x3c\x50\x4d\xb5\x40\xc3\xe6\xb1\x37\x5e\xb4\xc9\xbc\xc8\x0b\x46\xfd\x87\x5d\x85\x95\xbd\xa8\x51\x7d\x3c\x54\x76\x81\x6e\x4b\xdb\x91\x97\x92\xbc\x82\x5d\x0b\xcd\x06\xcd\x64\x1f\x9e\x2e\x43\xcf\xfb\x88\x4f\xf4\x67\xfe\x41\x2f\xff\x93\xde\xbc\x2c\xc5\x2a\x13\xb5\xcc\xd6\xda\xa6\x1c\xc7\x8b\xf2\xe2\xdd\x6b\xf8\xfc\xf3\xc5\xd5\xfb\xcf\x13\x29\x0e\x6f\x7f\x8f\xe8\x3f\x5e\x5d\x5e\xbd\xbe\x78\x3b\x89\x6e\xe3\xd6\xd9\x0d\xee\x12\x44\x69\x58\x1b\xf9\x07\xff\x00\x9f\x7f\x79\xf5\xdb\x14\xa2\x39\x1a\x97\x91\xdd\x12\x54\x6b\xe1\xd6\xb4\x2d\xe4\xab\x73\x9a\xcc\x46\x9e\x42\x58\xab\xa5\x4c\x25\x7b\x3f\xc8\xa4\xe0\x9b\x02\x97\xa2\x29\x1d\x48\x0b\xff\xf3\xf3\xc5\x9b\x57\x4f\xe6\x5b\x7b\x53\x1b\x5d\xdb\x6f\xa7\x58\xa5\x2c\xf5\x36\x0b\x34\x52\x47\x14\x4f\x82\x76\xd2\x38\xd5\xce\xa9\x86\xec\xd2\xa6\xe5\xd6\xfb\x26\x90\xae\x0d\x6e\x24\x6e\x13\x74\xed\x9a\x05\x8d\x44\x9f\x1c\x84\x47\x5d\x0a\x35\x81\xc3\x0d\xee\x26\x6f\xe9\x0d\xee\xa6\x0a\xee\x2d\x5d\x09\x25\x56\x58\x0c\x1a\xba\x36\xfa\x77\xcc\x5d\x77\xe6\x3a\x0d\x0b\x84\x4a\x98\x1b\x2c\x20\x52\x98\x62\x2a\xa6\x93\xd1\x59\x90\x52\x26\xb0\xe2\x29\xe3\x14\x63\x0a\x19\xd9\xd5\x83\xa4\x3f\x81\x6c\x7b\x58\x25\xe8\x76\xe3\x93\x95\x1e\x91\xd0\xa7\xe7\x12\xad\x8d\xd6\x9e\x40\xda\x3a\x23\x93\x94\xfd\xd6\x35\x16\x0d\x05\x8a\x54\x58\x80\x69\x94\x93\x55\x7b\x48\x4d\xe0\xe0\x4c\xda\x08\x3c\x06\xba\x71\x75\x33\x45\x58\xef\x6e\x1b\x34\x0b\x6d\x53\x24\xc3\xe8\x38\x51\xce\x37\x59\x25\x2d\x9d\x0d\x9c\x49\xd3\x89\xf4\xfd\x1a\x81\x66\x90\xf7\xe6\x3e\x9b\x52\x94\x48\x0b\x4a\x3b\xf0\xa4\x1a\x83\xc5\xfc\x9f\x43\x16\x39\xe2\x58\xcb\x81\x43\x86\x38\xd2\x69\x40\x53\xbe\x8e\xcf\x98\x23\x12\xa7\x76\xce\x79\xac\x82\x2a\x43\x4d\xc5\xb1\x3e\x9f\x6e\x6f\xe7\xf4\x79\xbf\xbf\x9e\xc1\xd2\xe8\x0a\x6e\x6f\xe7\x56\x37\x26\xc7\xfd\x7e\x12\x4f\xbf\x61\x63\x3c\x69\x5a\xdc\x2b\x8b\xee\x3c\x5e\xad\x79\xc6\xb8\x1d\xd8\x91\x54\x6c\x7f\x38\x5f\xcf\x5a\xae\xb6\x99\xe0\x7e\x2a\x73\xfa\x06\xd5\xa8\xca\xb4\x02\xfc\x0a\xe0\x15\xe7\x29\xdf\xa8\x4a\x18\xbb\x16\x65\x56\xea\x5c\x94\x09\x8e\x1f\xe2\xac\x5e\x11\x19\x92\x84\xf5\xfc\x78\x35\x6c\x44\xd9\xa0\x9d\xc8\x50\xa1\xdb\x6a\x73\x73\x36\x4b\xa9\x1c\x1a\x85\x0e\x84\x23\x75\x1b\x53\x8e\xe8\xda\x9d\xa8\x59\x2e\x54\x8e\x65\x99\x3c\xcf\x2e\x7e\x99\xc3\x0f\x7e\x0e\x15\x95\xdd\xca\xa9\x0c\x96\x42\xa6\xa9\xbf\xec\x8e\xf6\x42\x16\x21\x16\xab\xba\x44\x87\x60\x1b\xda\xd2\x65\x53\x96\xbb\x39\x5c\x36\x0a\x3e\xb7\x8d\x41\x5b\x33\x7f\xa6\x93\xc0\x60\xa5\x37\x08\xb5\x30\x4e\x8a\xb2\xdc\x75\x3d\x95\xb0\x16\xdd\xf0\x2e\xf4\x24\xf5\x0d\x5a\x66\x9d\x70\x4d\xaa\x8e\x7a\xfc\xf8\xf1\xe3\xe7\xcf\x9f\x3f\xef\xed\x45\x4f\x87\x2b\x5e\x0a\x34\x81\x26\x4e\xe2\xca\xd0\x02\x16\x53\x4c\x14\x4d\x53\x40\xc0\x23\xbc\x71\x86\x9d\xec\xfc\xbd\xee\xaf\x9d\xce\x64\x70\xbf\x3f\xf4\x8b\xb9\xc1\x1d\x9f\xcc\x6f\xcc\x7e\x07\x2c\xcf\xb0\x60\xae\xab\x4a\xa8\x22\xe3\xa6\x8a\xab\x4a\xca\x72\x99\x70\x19\x55\x22\x09\xa6\xb7\xb7\xf3\xbc\x2a\xf6\xfb\xd0\x8a\xdd\xde\xce\x69\xa1\xdb\xd5\xb8\xdf\x73\xa6\xa4\xb5\xfb\xfd\xf5\x7c\x3e\xc8\x9b\xcb\xc7\x5d\x16\xfd\x79\x04\x86\xba\xbd\xa5\x62\x36\x30\x20\x21\xf7\xfb\x6b\x58\x8b\x00\x34\xf4\x15\x6e\x23\x64\x3a\xf7\x34\x6e\xf5\x32\x8e\xc3\x49\x01\xe6\xf3\x81\x26\x34\xb0\x88\x1b\xfa\x67\xaa\xd8\xd1\x9c\xa2\x64\x9c\x9d\x56\xf3\x43\x37\xe3\xa4\xa2\x83\x7a\x16\x58\xa3\x2a\x50\xe5\xf7\x31\x67\xb7\xe8\x7c\x3e\x5d\x88\x24\x6d\xfa\xf2\x24\x9b\xaf\x71\x9c\xd3\x52\x50\x62\x68\x4c\xaa\x2e\x7b\x79\x80\x81\x9c\x56\xfd\xbf\x78\x46\x44\x7d\xee\xe7\x27\x5f\xb7\x83\x77\xd3\xdc\x9f\xb3\x87\x13\x23\x23\x25\xc9\xf0\x3e\x7e\x38\x42\xb3\xce\xd9\xc9\x21\xa9\x42\xef\x7c\xee\x99\xc3\x12\xf9\x13\xa0\xed\xcd\x87\x64\x81\xa2\x31\xb4\x93\x81\x6d\xbf\xfe\xf9\xeb\xfc\x2d\xea\xb8\xd4\x8d\x2a\xb2\x20\x6f\xc8\x54\x49\x07\x28\xd1\x25\x73\xf0\x76\x2d\xf3\x35\x6c\x19\xbf\x27\xb9\x0a\x5f\x37\xba\x35\x42\xde\x18\x43\x86\x89\x0a\x46\x38\x81\x0f\x29\xff\x99\x28\x08\xcb\xba\x90\xfd\x26\x97\x05\x01\x6d\xca\x02\x8c\x99\x42\x82\xfd\x28\x37\x13\xd0\x43\xc2\x0c\x72\x87\x5f\xcc\x40\x94\xfd\xd2\xb7\xdd\x36\x92\xc3\xb4\x2b\x02\x13\x10\x06\x5b\x5b\x3f\xe9\x3c\x1d\x0a\x69\x30\x77\xc1\xfb\x8d\xc7\x81\xc7\x10\xf6\x57\x97\x97\x17\x97\x57\x09\xb9\x9f\x1f\xff\x03\x3f\x1d\xee\x0c\x3c\x7f\x3e\x70\xfc\x18\x73\x18\x68\x37\x4a\x6f\x55\x46\x95\xc2\x78\xa8\xd3\x2c\x32\x55\x58\x35\x87\x0e\x3a\x07\xad\xca\x1d\xd8\xa6\xf6\xf7\x40\x4f\x18\x70\x9d\xdb\x9d\x75\x58\xc1\x42\xaa\x42\xaa\x95\x05\x6d\x60\x25\xdd\xba\x59\xcc\x73\x5d\xb5\x70\xf3\xf0\x79\x69\x4c\x3c\x33\x73\x83\xc2\xa5\xc4\xe4\x7b\x39\xe0\x29\x07\x6e\xb9\x95\x6e\x0d\x7c\xa1\x07\x15\x5a\x2b\x56\xf8\x8c\x06\xd1\x98\xfd\x9e\x61\x6d\x3f\x96\xeb\xc2\x0f\xd0\x87\x91\x6e\xa6\x27\x92\x8f\x95\x41\x91\x8a\x3b\x91\xf2\x17\x89\xb4\x44\x2c\x32\xa9\x36\xfa\x26\x25\xd0\x8f\x9c\xb6\x28\x5d\xf8\x69\x1c\x90\xb4\x0c\xb6\x6b\xbe\x1a\x0a\x92\x3a\x7f\x2d\x17\x86\xfe\x1a\x69\x6f\x70\xd7\x62\x28\x54\xef\x0a\xa7\xcd\x10\x3e\xd4\xce\x61\xb8\xe1\x53\x34\xe6\x35\xf9\x63\xa0\x33\xca\x33\x82\x8c\x99\xd2\xce\x27\xbb\x04\xc3\x37\x7d\x34\x92\x73\x35\xcf\xa6\x7e\x97\xe1\xc0\x7e\x45\x3d\xc6\x94\xab\xf7\x4a\xda\x4a\xb8\x3c\x55\xbe\x93\x82\xad\x7b\xd0\x82\x82\x59\x14\x31\x9f\x4a\x75\x0c\x7b\xfb\xf1\x20\x03\x14\x1a\x3d\xb0\xc4\x4c\x78\x5b\x39\xbd\xd1\xa4\xaa\x47\xe4\x00\x65\xf5\xa3\x51\x8d\x61\x25\x42\xff\x4f\xee\x25\x4a\x99\x32\xdb\x6b\x3f\x4a\x61\x1e\xb6\xa4\x05\x34\x89\x57\xf8\x4c\xb2\x74\xb7\x8e\x07\x52\x69\xc3\xb2\x0b\xbe\x1f\xe6\x35\xfe\xe3\x14\x3b\x47\x11\x47\x4c\x7d\x79\x1f\x81\x8e\xec\xca\xa1\xe0\x25\x7a\x64\xc1\xa3\x3c\xde\x94\xf8\xc5\xa1\xb2\x51\x68\xfc\xc2\x67\x18\xa9\xf3\x35\xaa\xd8\x6c\x85\x29\x00\xb3\x0b\xe5\x15\xfa\x7b\xcd\x90\x7b\x3b\x10\x39\x80\x35\xdd\x49\x46\xe7\x9b\xcc\x7b\xe1\x3b\xd9\xa6\x5e\xf4\xcc\x6b\xcc\xd1\xd3\x72\x4b\xc8\x77\xa0\x30\xd7\x85\x64\xc6\xce\xca\x42\xed\x5a\xdf\xa0\x24\xd2\xdb\xf6\x51\xbb\x06\x10\xb5\x15\x61\x54\x8d\xc6\x94\xf7\xf7\x5c\x0f\x6c\x85\x16\xfa\xc3\xe5\xaf\x2c\x01\x43\x5d\x1c\x4a\x9f\x0e\x7a\xec\x6b\x7f\x59\x3d\x45\x90\x4a\x94\x4b\x6d\xaa\xa4\xe5\xde\xc4\xf1\x21\x09\xe6\xf0\xde\xec\x40\xac\x84\x54\x63\x2d\xbd\x31\xd9\xef\x56\xab\x36\xd9\xe6\x55\x31\x70\xa7\xf9\xf7\xab\x8b\xb7\x20\x55\xdd\x38\x28\x84\x13\xf0\x26\x58\xe3\x51\x5e\x15\x8f\x28\xf5\x0e\x73\x12\xb5\xec\x10\x78\xde\xce\xd4\x15\xf5\x89\xb8\xe8\xa5\x72\xef\xba\x07\xe9\x6a\xc6\x00\x37\x2f\xa8\x25\xcd\xce\x85\xf2\x55\xc7\x02\xfd\xb9\x8f\x05\x2c\x84\xc5\x02\xb4\xea\xfb\xd3\x5d\x52\x73\x78\x57\xa2\xb0\x08\x4d\x5d\x08\x87\x47\x69\x91\x8f\xc7\xbc\x6c\x0a\x3c\x12\x4f\x58\x10\xb0\xc5\x45\x20\x3c\x6a\xf6\x10\x35\xc3\x9e\x97\x32\x44\x58\x35\x87\xd7\xce\xb7\x55\xda\xad\xf9\x90\xe5\x70\x59\x36\x2a\x04\x4b\x8c\xa8\x99\xb7\x85\x56\x18\x6e\x1a\x2b\xa2\x82\x5f\x6a\xcc\xa7\x84\x48\x90\x35\xee\x5d\x0c\x7c\xca\x78\x19\x71\xfd\x4a\xe9\x59\xf0\x2e\xfa\x89\xac\x6e\x5c\x3f\x0b\xcc\xe1\x63\x97\x5d\x63\x0e\xa0\x65\xb3\x36\x4f\x90\x7b\xc4\x2a\x60\xe4\xbc\x0a\xea\x44\x33\x65\xd4\x86\x38\xcc\x0a\x69\x26\x65\xaf\x93\x6a\x91\x1e\xad\xdd\x6b\x2d\x95\xaf\x95\x7c\xef\xe5\x30\x54\xfc\x54\xa1\x74\x71\x3a\xa3\xde\x2e\x6a\x65\xb9\x59\x38\x4c\x5d\xc3\x6a\xe4\x82\x3a\x71\xb1\xc1\xac\xd0\xf9\x0d\xa6\xde\xa4\xfd\x20\x14\x53\x15\x1b\x84\x97\x3c\x11\x64\xc5\x95\xf5\x48\xc5\x28\x4b\xcc\x44\x69\x50\x14\xbb\x0c\xbf\x48\x9b\xbc\xce\xff\x91\x02\x23\xcc\x04\x3f\x73\x84\x76\x21\x97\x4b\xa4\x4e\xaf\x6b\x37\x24\x5a\xef\x50\x96\x4a\xa2\x52\x2c\x30\x75\xeb\x71\xa1\x10\xc8\x0f\x4b\x3c\xee\xe7\xbb\xaf\x71\x4b\xdc\x56\x43\xcb\x8c\x6f\x43\xbc\xad\x69\x76\xfc\xe6\x33\xe6\x5a\x5a\xb8\x91\xaa\xa0\x00\x09\xbe\x18\x6e\x1b\xef\x9c\x28\x47\x09\x82\xb2\x49\x4f\x10\x16\xfd\x84\x38\xe1\x49\xd5\x9d\x74\xc2\xce\xc2\x77\xc8\x54\x94\x45\xa1\x20\xf6\x2b\xc8\x3a\x58\xac\x85\xa1\x2f\x4c\xdd\xfa\x62\xe8\xb4\x6e\xd3\x9c\x3f\x04\x59\x46\x2a\xdf\xd7\xcf\x95\xf6\x96\xb2\xe8\xee\xc7\xec\xbe\xb9\x22\x30\xeb\xc5\xfb\x08\x3f\x8b\xff\x6a\x50\xe5\x98\xad\xc5\x86\x32\x15\xfb\x92\x47\xc8\xed\xf0\x91\x73\x15\x56\xde\xcd\x56\xd1\xb1\xe3\x2d\x3c\x25\x7a\x15\x53\x91\xef\xdf\xb9\xc2\xa2\xdd\x0b\x4d\xeb\x3c\x3e\x62\x0c\x4f\xb7\x3c\x69\xcb\x87\x12\xb9\xd2\x9a\x62\x91\x17\x70\x21\x2e\x15\x88\xe8\xd1\x91\xc2\x69\x3d\x3f\xbe\xb8\x7c\xfb\xfa\xed\x4f\xd3\x51\x80\xb8\xe0\x7e\x38\xc0\x56\x18\xd5\x5e\x35\x18\x74\xc9\xde\xeb\x92\xc6\x28\xd1\x7d\x8a\x77\x0c\xd7\x20\x96\x0e\x8d\xef\xfb\x9e\xf9\xc2\x8c\xaa\xc9\xeb\xa1\x33\x26\xf0\xe3\x3b\xd7\x7b\x97\x62\xfd\xc7\x4b\xbd\xd6\x0b\x0a\x74\xe3\xa7\x1b\x73\xa6\x6e\xb3\xc0\xda\x60\x4e\x65\x42\x66\xb0\x2e\x45\x9e\x4c\xff\xd4\x8e\x11\x1f\x5d\x16\xa1\xc9\xe4\x2b\x6e\x1f\xdd\x87\x77\x2b\x5b\x59\x96\x60\xb5\x56\x54\x85\x74\x1c\x66\x50\x87\x04\x62\x7d\xf6\x60\x74\x0c\xb7\x07\xe4\xac\x43\x31\x51\xf6\x60\x89\x73\xfa\x63\xbb\xd6\x4d\x59\x90\x78\x14\xcc\xf0\xc1\x7a\xa0\xd8\xa3\x58\x7c\x6d\xcc\xb3\xf9\xd3\xf8\x0d\x51\x2b\x11\xcf\x1f\xd9\x4a\x92\xcb\x73\xa0\x64\x76\xb7\x6f\xa7\x40\xf1\x75\xc2\x3d\x58\xf2\xf9\x2d\x36\x83\x9b\x37\xc6\x94\xd7\xc7\x0d\x8d\x88\x64\x7c\x18\xda\x7f\x11\x3a\x2e\x58\x29\x2b\xe9\x32\xb9\x52\xda\x24\x45\x8a\x2e\x1d\x32\x0a\x2f\xf1\xe7\x13\x7d\x3a\xee\xcd\xa9\x7c\xf2\xe4\xa6\x72\xcf\xd7\x42\xad\x50\x2c\x92\x0f\xd0\x7e\x6d\x39\xb6\x60\x80\x8d\x7a\x97\x3b\x0f\x46\xb7\x34\xe6\xf0\x9a\xd8\x4b\xb5\x9a\xe2\x0b\x2c\x81\xcd\x4a\xbd\xca\xac\xfc\x23\x25\x40\xa9\x57\x57\xf2\x0f\x2e\x4d\xfd\x82\x03\x8d\x3b\x17\x15\x8a\x1f\x17\xac\xd0\xb4\x2f\x64\x9f\x72\x86\xfd\xee\xe9\x64\x51\x2a\xac\xb4\xd9\x0d\x49\xe3\x67\x9c\x2b\xd0\x77\xdf\xff\x3f\x8b\xf4\x7f\xdf\x7d\x3f\x59\x26\xaa\x5f\x75\x93\x6a\xe6\xc3\xe8\x59\xc2\x3c\xf5\xf6\xf9\xdf\xa7\xf4\x6f\x5c\x1e\xc6\x65\xb3\xda\xe8\x1a\x8d\x93\x98\xaa\xf7\x62\x06\xec\xe5\x2b\x8f\xe6\x3b\x23\xb1\xc5\xf3\x3d\xc8\xdb\x11\x8b\xb8\xff\xe9\x9c\x18\x53\x62\xa1\xd9\xe1\x28\x33\x4a\x07\xba\x71\x56\x16\xbc\x11\xef\x8d\xd8\x48\x0b\x8b\x46\x96\xc5\x30\x28\xcc\xaa\xf8\x74\x60\xc8\x6d\x27\xa5\x82\xd6\xfb\x0f\x12\x82\x3a\x4a\xe8\xc1\xda\x0c\x75\xdf\xde\xce\xc3\xaf\xd1\xdc\xb7\xb7\xf3\x4a\xaa\x00\x7c\xd2\x17\x91\x8f\xc0\x28\x2c\x6a\x6c\xa7\x7c\x90\xa5\xd2\x44\x84\xa6\xc2\x2c\x2a\x18\x8f\x50\xaa\x13\xed\x6d\x12\x88\x3a\x0b\x7d\x62\x69\x03\xb6\xcd\x45\xd5\x60\x57\x70\x07\xb6\x3c\x48\x31\x47\xed\x42\x2c\xa9\x2d\x96\x98\x53\xeb\xa7\xdd\x1a\xfd\x9d\xc8\xb8\x48\xf1\xaa\x60\x14\xb9\x7d\x7f\xa7\xfe\xee\x17\x0c\xb9\x56\x4e\x70\x89\xa7\xf4\xb4\xeb\x07\xe6\xde\xbb\xf9\x63\xa3\x4c\x11\xe2\xe4\xbd\x58\x38\x71\x8e\xb1\xdc\x6d\x80\xc7\x3c\xc8\x7c\xaa\x8b\x98\x60\xa1\xde\xcb\xdd\x4c\x6f\xd0\x18\x59\x14\x98\xaa\x85\x49\xc2\xfe\x43\xde\xee\xe6\xb6\x5b\x1a\x6b\x85\xfe\xc5\xdc\xd4\x8d\xca\xa4\xcd\xea\x66\x51\xca\xd4\x9f\x28\xf8\x5d\xe1\xb9\x11\xf9\xf1\x6f\x95\x85\x05\xbf\xf0\x0e\x5e\x3d\xa3\x74\xc1\xb9\x65\x81\xb0\x91\x56\x2e\x4a\x0f\x86\x50\xcd\x4d\xd9\x91\xaf\x9c\xb1\x80\xc5\x0e\x84\xda\x69\x35\xf0\xf6\x97\x65\x8d\xad\x0b\x2e\x32\xfc\xc2\x4f\xb1\x86\x8f\xf1\xbb\x9d\x0b\x83\x32\x8c\x08\xa9\x82\xfe\x7f\xec\xe9\xdc\x41\x65\x28\x10\xc8\x94\x5b\x5c\xcc\xfc\xe1\x1e\xbe\x85\x05\x03\x3d\x8f\x97\xb4\x07\xab\x91\xb8\x67\x41\x6b\xe4\x61\x7d\xfc\x6a\x12\xa0\xe6\xdf\x13\xf5\x40\x2f\xf8\x41\xab\x0d\xa5\xfb\xd0\x12\x74\x2c\x9c\x9e\x06\x8f\xbd\x7c\xf5\xb7\x0f\x3f\x4d\x6e\x6f\x78\xf6\xfd\x7a\x9b\x62\xb1\xca\x2c\x0a\x93\xaf\xc9\x5e\x31\x30\x5a\x78\x26\xd9\x1e\x86\x15\x6d\x60\x1c\x02\x3a\x31\x87\x50\x5e\xed\x0e\x90\x91\x12\x89\x44\x39\xce\x1e\x7f\x76\xe6\x38\x33\x6b\x90\x68\x6d\x5a\xf5\x37\xff\x03\x7f\xce\xf5\xf2\xc4\xf5\x53\xb0\xc8\x33\xf8\x91\x25\xe8\xfe\x7a\x88\x3b\x66\x22\x76\x5f\x01\x86\x5f\xe2\xdf\x5f\x86\xfe\xe3\x82\xf8\x18\x26\x88\xf4\xe0\xfa\xc1\xbf\x03\x00\x00\xff\xff\xaf\xce\xd7\x17\x03\x3a\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 14851, mode: os.FileMode(420), modTime: time.Unix(1523052402, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json":   wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json":   wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json":   wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json":   wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json":   wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json":   wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json":   wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json":   wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json":   &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json":   &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json":   &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json":   &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json":   &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json":   &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json":   &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json":   &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
