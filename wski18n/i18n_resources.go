// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1539631576, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x3c\x6b\x6f\x1b\x39\x92\xdf\xe7\x57\x14\x06\x0b\xcc\x2c\x20\xcb\xd9\xc5\xe1\xb0\x30\x2e\x07\x78\x13\x67\xd6\x3b\x49\x6c\xd8\xce\x0c\xe6\x12\xa3\x43\x75\x97\x24\xae\xbb\xc9\x5e\x92\x2d\x45\x63\xe8\xbf\x1f\xaa\x48\x76\xb7\x64\xf5\x43\x4e\x06\x77\xf9\x12\x49\x24\xeb\xc5\x62\x3d\x49\x7f\xfc\x0e\xe0\xf1\x3b\x00\x80\xef\x65\xf6\xfd\x19\x7c\x5f\xd8\x45\x52\x1a\x9c\xcb\x2f\x09\x1a\xa3\xcd\xf7\x13\x3f\xea\x8c\x50\x36\x17\x4e\x6a\x45\xd3\x2e\x78\xec\x3b\x80\xed\xa4\x07\x82\x54\x73\xdd\x01\xe0\x92\x86\x86\xd6\xdb\x2a\x4d\xd1\xda\x0e\x10\xb7\x61\x74\x08\xca\x5a\x18\x25\xd5\xa2\x03\xca\xaf\x61\xb4\x13\x4a\x5a\x64\x49\x86\x36\x4d\x72\xad\x16\x89\xc1\x52\x1b\xd7\x01\xeb\x86\x07\x2d\x68\x05\x19\x96\xb9\xde\x60\x06\xa8\x9c\x74\x12\x2d\xfc\x28\xa7\x38\x9d\xc0\xb5\x48\x1f\xc4\x02\xed\x04\xce\x53\x5a\x67\x27\x70\x67\xe4\x62\x81\xc6\x4e\xe0\xa6\xca\x69\x04\x5d\x3a\xfd\x33\x08\x0b\x6b\xcc\x73\xfa\xdf\x60\x8a\xca\xf1\x8a\x15\x63\xb3\x20\x15\xb8\x25\x82\x2d\x31\x95\x73\x89\x19\x28\x51\xa0\x2d\x45\x8a\xd3\xd1\xbc\x68\xdd\xc5\xc9\xdd\x12\xe1\xaa\x44\xf5\xeb\x52\xda\x07\x78\xcd\xcc\x14\x44\xc2\x9d\xd6\xf9\x27\xf5\x49\xdd\x69\x98\xe1\x42\x2a\x58\x6b\xf3\x20\xd5\x02\xd6\xd2\x2d\x61\x6d\x1f\x3c\xe3\x13\x30\x95\x27\xf0\x87\xfa\xb7\x1f\x20\xd5\x45\x21\x54\x76\x46\x00\x3e\xb9\x3f\x35\xd3\x19\xe2\x52\x5a\x58\xcb\x3c\x0f\xb2\x6b\xe1\x17\xd6\xa2\xb3\x2d\x5e\xa5\x82\x42\x28\x39\x47\xeb\xa6\x1b\x51\xe4\xa0\x4d\xeb\x87\x22\xff\xa4\x2e\xe7\x90\x56\xc6\x10\xc9\x99\x34\x98\x3a\x6d\x36\x90\x69\xb4\xca\xc1\x52\xac\x10\x84\xda\xd4\x4b\x60\x2e\x73\x9c\x34\xe4\x40\x69\xa4\x72\x16\x1c\x91\xb4\xc4\xbc\x84\x02\xad\x15\x0b\x9c\x7a\x42\x11\x0a\x6d\x1d\xb3\xa3\x15\xac\xc5\xc6\x82\x9e\x43\x65\x59\x0e\x35\x10\xa7\x23\x27\x42\x65\xa7\xda\x40\xa5\xba\x38\x13\x06\x59\x28\x3b\x22\x69\x7d\x81\x93\x02\x4a\xe1\x96\xa7\x4e\x9f\xee\x30\x3e\x6e\x16\x9c\x64\xf5\x40\x56\xef\xe5\x01\x00\x91\xc2\xc3\xbf\x8e\xa4\x62\x70\x7a\x2f\x39\x9f\xd4\x79\xa5\xdc\x92\x8e\x4d\xca\xea\x78\xf6\x49\x35\xb0\x0d\x8a\xcc\x42\x6a\x30\xa3\x09\x22\xb7\x30\x37\xba\x80\x3f\xfd\xe3\xea\xdd\xc5\xe9\x74\x6d\x1f\x4a\xa3\x4b\x0b\xb3\x0d\x64\x38\x17\x55\xee\x3e\xa9\xab\x15\x9a\xb5\x91\x0e\xe3\x4f\x90\x6a\x35\x97\x0b\xde\x74\x3a\xaa\xaf\xde\x5e\x9e\x7d\x52\x00\x3b\x92\x3c\x09\x93\xfe\xab\x35\xf9\xbf\x7b\x04\x70\x65\x82\x7a\x6e\x40\xe4\x39\xb8\xa5\xc1\x1e\xe0\xa2\x94\x4b\xd2\xa0\x7f\x5c\xdd\xde\xd1\xd7\xca\x2d\xe1\xe7\x8b\xdf\xe0\xe4\xa4\x3e\xc5\xf0\xfe\xfc\xdd\xc5\xed\xf5\xf9\xab\x8b\x4e\xac\x23\xce\xb9\x5d\x6a\xe3\xfa\x8d\xd6\xb5\xd1\x2b\x99\xa1\x05\x01\xb6\x2a\x0a\x61\x48\xca\x34\x9f\x74\xfa\x89\xa6\xce\x90\x94\x3c\x5a\xb7\xd3\xb8\xd7\x98\xc1\x4c\x58\xcc\x88\xe5\x48\x63\x6b\x6f\xe1\xb7\xf3\x77\x6f\xc7\xd8\xa5\x40\x6f\xb7\x61\x3a\x07\xa7\x75\x0e\x16\x1d\x9d\x2f\x3e\x9b\x41\xaa\x1b\x5d\x19\xd0\x25\xaa\x35\xd3\x5b\x06\x3b\x1b\x8e\xa5\xd8\x3d\xec\xe3\x69\x59\xa1\xb1\x84\xbb\x4b\x78\x52\x39\xb6\x73\x61\x1e\xa8\xaa\x98\xa1\x21\xd9\xd5\x1b\x3e\x1a\x97\xdd\xa8\xb4\x9f\x6f\xa7\x81\x26\x79\x66\x9b\xcd\xa9\x99\x9d\xa1\x5b\x23\x2a\x48\x73\x49\x62\x17\x2a\x03\x8b\x66\x85\x66\xb4\x53\x18\x4f\x43\x6b\x7b\x09\x4f\x54\x05\xfe\x61\x47\x75\xba\xb7\x82\xd6\xe9\x92\xe0\x8b\xbc\x0d\x8f\xb6\x28\x4e\x67\xd5\x21\xbb\xf0\x5a\xce\xe7\xc8\x16\x3d\x5a\x5c\x53\x29\xf2\xdd\x4c\xce\xd9\xae\x11\xa2\x9f\x9e\xfe\x32\xd2\x82\xf5\x4e\x6d\x5b\xaf\xe7\xc3\x38\x29\x8d\xfe\x17\xa6\x8e\xce\x3b\x5c\xdf\x5c\xfd\xf3\xe2\xd5\xdd\x68\x3d\x89\xa2\xee\xd8\xa7\x0f\x9d\x7e\x86\x8d\xa5\x57\x88\xb1\xfa\x30\x16\x97\xc1\x42\xaf\xd0\x3e\xc5\xb9\x5e\xca\x74\x09\x6b\x34\xd8\x04\x45\x4c\x07\x9d\x9a\x1d\x4d\xd8\xb7\x17\x3b\x71\x46\x86\x39\x3a\xda\xec\xc3\x4c\xed\x00\xf3\xee\xdc\x54\xea\xec\xff\x9d\x7b\x3b\x0c\xe9\x90\x36\xc0\x8f\x5a\xe5\x1b\x8e\xaf\x2c\xcc\xb5\x69\x89\x87\xa3\x3f\x56\xb0\x42\x67\xf8\xe7\xd1\x7a\x83\x5f\x7a\xfc\xc0\x05\x0f\x42\xa0\x64\x47\xb8\xb5\xc8\xc7\x2a\xcd\x08\x44\x96\xb6\x4b\x2c\x30\xeb\xc7\x48\xd6\x66\x47\x49\xe6\x95\xe2\xb8\xd9\xdb\x88\x8e\x78\x8c\x56\x51\x00\xea\xe9\xd8\xd3\x02\xff\x63\x87\xd0\x5b\x9b\xea\xe7\x61\x76\x72\x84\xd3\x9d\xe7\x62\x91\x88\x52\x26\xe4\xde\x3b\xf8\xf7\xfe\xe9\xfc\xfa\x12\x3e\x93\xff\xff\x3c\x12\x62\xbf\x23\x6a\x01\xfd\xe5\xe2\xe6\xf6\xf2\xea\xfd\x28\xb8\x95\x5b\x26\x0f\xd8\x75\xb8\x69\x58\x1b\xf9\x3b\xff\x00\x9f\x7f\xbe\xf8\x6d\x0c\xd0\x14\x8d\x4b\x68\x77\x3a\xa0\x92\x7c\xc9\x7a\xd3\x91\x9d\xd2\x64\xde\xca\x31\x80\x39\x14\xeb\x80\xda\x0e\xea\x7e\x8c\x91\x9e\xb4\xfb\xa1\xe1\xc0\x61\xf1\x52\xc9\x73\xbd\x4e\x02\x8c\xae\xec\x93\x27\x41\x3d\x69\x18\x6a\x73\x7c\xfb\xe4\x52\x27\x0d\xb5\x1f\x1c\x01\xba\x34\xb8\x92\xb8\xee\x80\x6b\x97\x4c\x68\x04\x7a\xba\xe3\xa8\xcb\x5c\xa8\x11\x18\x1e\x70\x33\x7a\x4b\x1f\x70\x33\x96\x70\x2f\xe9\x60\x08\x7a\x05\x1d\x8d\x44\x9d\x4e\x3b\x72\x0c\x50\x08\xf3\x80\x59\x34\x25\xa3\x44\xc5\x70\x12\x3a\xf4\x5d\xcc\x04\x54\x3c\x65\x18\x62\xb4\x0e\x03\xbb\xba\xe3\x9c\x46\x80\xad\x13\x81\x0e\xb8\xcd\xf8\x68\xa6\x07\x28\xf4\x71\x41\x8e\xd6\x46\x69\x8f\x00\x6d\x9d\x91\x9d\x90\xfd\xd6\x55\x16\xc9\x79\xcd\xa5\xc2\x8c\xac\xb2\x93\x45\x1d\x2e\x8f\xc0\xe0\x4c\xb7\x10\x78\x0c\x74\xe5\xca\x6a\x0c\xb1\x5e\xdd\x56\x68\x66\xda\x76\x81\x0c\xa3\xc7\x02\x2d\x85\x11\x45\xa7\x80\x8d\x28\xd0\xa1\x81\x95\xc8\x2b\x64\xef\x4d\xc6\x14\x7e\x39\x7f\xfb\xe1\xe2\x33\x39\xf7\x42\x1c\x89\xaa\xef\x34\x7e\x7e\x73\xf9\xf6\xe2\x33\xa5\xb9\x4e\x48\x0e\x90\x0f\x51\xf0\xcf\xdb\xab\xf7\xc3\xa8\xd9\xaa\x26\x85\xb4\x14\x8b\xb3\xbf\xe8\x76\x17\xe4\x88\x69\x46\x93\xbb\x03\xd9\x02\x69\x41\xe9\x98\x75\x57\x06\xb3\xe9\xa7\xbe\x7d\xdf\xc3\xe8\x33\xe5\x1e\x8c\xe4\xf3\x38\x99\xfe\x2a\x3c\x43\xc7\x8d\x30\x35\xb9\xf9\xb3\x50\x05\x56\xfa\xaa\xa2\xfb\xfc\x7c\x7c\x7c\x9c\xd2\xe7\xed\xf6\x7e\xe2\x03\xa3\xc7\xc7\xa9\xd5\x95\x49\x71\xbb\x1d\x85\xd3\x6f\xd8\x10\x4e\x2e\x40\x84\xbd\xb2\xe8\x9e\x87\xab\x16\xcf\x10\xb6\x1d\x39\x12\x8b\xf5\x0f\xcf\xe7\xb3\x94\x8b\x75\x22\xb8\x20\x9c\x38\xfd\x80\x6a\x90\x65\x5a\x01\x7e\x05\xf0\x8a\xe7\x31\x5f\xa9\x42\x18\xbb\x14\x79\x92\xeb\x54\xe4\x9d\x69\x52\x98\xd5\x8a\x6c\x83\x29\x0c\x11\x2f\xaf\x0e\xc7\x73\x24\x42\x85\x8e\xb2\x83\x67\xa3\x94\xca\xa1\x51\xe8\x40\x38\x62\xb7\x32\xf9\x00\xaf\x4d\xdc\x90\xa4\x42\xa5\x98\xe7\x9d\x5e\xfb\xea\xe7\x29\xbc\xf2\x73\x9a\x82\x11\xe7\x41\x23\x11\xcc\x85\xec\x86\xde\x2a\x48\x67\x32\x0b\x67\xb1\x28\x73\x74\x08\xb6\xa2\x2d\x9d\x57\x79\xbe\x99\xc2\x4d\xa5\xe0\xf3\xd3\x8c\xeb\x33\x27\x08\x9c\xb1\x92\x6d\x74\x52\xe4\xf9\xa6\x49\x4f\x7d\x26\x32\x96\x52\x5f\x2d\x4b\xac\x13\xae\xea\x8a\x16\x4f\x4e\x4e\x4e\x5e\xbe\x7c\xf9\xf2\x70\x51\xfd\x96\x97\x02\x4d\xa0\x89\xa3\xb0\x72\x6f\x04\xb3\x31\x22\x8a\xa2\xc9\x20\x34\x54\xbc\x70\xfa\x95\xec\xf9\x7b\xdd\x5e\x3b\x1e\x49\xef\x7e\x7f\x68\x87\xac\xbd\x3b\x3e\x1a\xdf\x90\xfc\x76\x50\x3e\x43\x82\xa1\xd7\x91\x70\x11\x8b\xbd\x35\x59\xb9\x44\xb8\x84\xe2\xad\x0e\xa4\x8f\x8f\xd3\xb4\xc8\xb6\xdb\x50\xfa\x7a\x7c\x9c\xd2\x42\xb7\x29\x71\xbb\x65\x4b\x49\x6b\xb7\xdb\xfb\xe9\xb4\x17\x37\x07\xc9\x9b\x24\xea\xf3\x40\x1f\xed\xf1\x91\x42\xf6\x80\x80\x88\xdc\x6e\xef\x61\x29\x2c\xcc\x10\xd5\x0e\xc3\xf5\x09\x19\x8f\xbd\xbb\xf1\xf6\x3a\x8e\xc3\x41\x02\xa6\xd3\x9e\x92\x65\x40\xd1\x54\x9f\xbf\x1d\x8b\x0d\xcc\x31\x4c\xc6\xd9\xdd\x6c\x7e\x68\x66\x1c\x64\xb4\x97\xcf\x0c\x4b\x54\x19\xaa\xf4\x18\x71\x36\x8b\x9e\x8f\xa7\x39\x22\x9d\x32\x7d\x7d\x10\xcd\xd7\x28\xce\x61\x2a\xc8\x30\x54\xa6\x2b\x2e\x7b\xbd\x53\x73\x3e\xcc\xfa\xff\xa1\x8f\x88\xfc\x1c\xa7\x27\x5f\xb7\x83\x4f\xcd\xdc\xb7\xd9\xc3\x91\x27\xa3\x8b\x92\xfe\x7d\xfc\xb0\xd7\x3d\x78\xce\x4e\xf6\x51\x15\x2a\x04\xcf\xf5\x39\x4c\x91\xf7\x00\x75\x05\xa2\x8f\x16\xc8\x2a\x43\x3b\x19\x6b\x9c\x2d\x8f\xf8\xc7\xe9\x5b\xe4\x71\xae\x2b\x95\x25\x81\xde\x60\xa9\x3a\x15\x20\x54\xd5\x0f\x5a\xc8\x50\xba\xe7\x0b\x08\x44\x57\xab\x70\x1f\x9b\xeb\xfb\x45\x5c\x76\x52\xfe\x33\x41\x10\x96\x79\xe1\xf6\xf8\xd8\xb0\x20\xd4\xd4\x92\xd0\x36\xea\xea\xbc\xf9\x51\x4e\x26\xa0\x55\xef\x33\xc8\x75\x8c\x6c\xc2\x7d\xd8\x26\xdc\xaa\xb7\x8d\xe8\x30\xf5\x8a\x80\x04\x44\xab\x3d\xd1\xee\x6a\xfa\xcb\x03\x41\xfb\x8d\xef\xbb\x0d\xdd\xb4\xb8\xb8\xb9\xb9\xba\xb9\xed\xa0\xfb\xe5\xfe\x3f\xf0\xd3\xe1\xc9\xc0\xcb\x97\x3d\xee\xc7\x98\xdd\x83\xf6\xa0\xf4\x5a\x25\x14\x29\x0c\x1f\x75\x9a\x45\xa2\x0a\xab\xa6\xd0\x2a\x8e\x73\xcf\xc1\x56\xa5\x2f\xd1\x9f\x72\x59\x79\x6a\x37\xd6\x61\x01\x33\xa9\x32\xa9\x16\x16\xb4\x81\x85\x74\xcb\x6a\x36\x4d\x75\x51\xb7\xf7\xfa\xfd\xa5\x31\xd1\x67\xa6\x06\x85\xeb\x22\x93\x2f\x16\x01\x4f\xd9\x51\x4b\xbe\x5e\xc2\x37\x92\xe2\x5d\x8c\x33\x1a\x44\x63\xb6\x5b\xee\x0b\xf8\xb1\x54\x67\x7e\x80\x3e\x0c\x64\x33\x2d\x92\xfc\x59\xe9\x25\x29\x7b\x72\x52\xfe\x20\x92\xe6\x88\x59\x22\xd5\x4a\x3f\x74\x11\xf4\x86\xcd\x16\x99\x0b\x3f\x8d\x0f\x24\x2d\x83\xf5\x12\x5b\x9d\x32\xe7\xef\x15\x85\xa1\x3f\x86\xda\x07\xdc\xd4\x35\x14\x8a\x77\x85\xd3\xa6\xaf\x3e\x54\xcf\xe1\x72\xc3\xc7\x28\xcc\x7b\xd2\xc7\x00\x67\x10\x67\x2c\xa5\x26\x4a\x3b\x6f\xec\x3a\x10\xbe\x6b\xd7\x5c\xd9\x56\xf3\x6c\xca\x77\xb9\xe8\xd9\x8e\xa8\x87\x90\x72\xf4\x5e\x48\x5b\x08\x97\x76\x85\xef\xc4\x60\xad\x1e\xb4\x20\x63\x14\x59\xb4\xa7\x52\xed\x17\xf7\xfd\x78\xa0\x81\xef\x27\x31\x99\x8c\x84\xb7\x95\xcd\x1b\x4d\x2a\x5a\x40\x76\x6a\xc9\x7e\x34\xb2\xd1\xcf\x44\xc8\xff\x49\xbd\x44\x2e\xbb\xc4\x76\xe9\x47\xf9\x52\x95\xdf\x92\xba\x6c\x4b\xb8\xc2\x67\xa2\xe5\xe0\x8d\x2c\x6e\x56\x12\xed\xc2\x37\xea\x68\x8d\xff\x38\x46\xce\x91\xc4\x01\x51\xdf\x1c\x43\xd0\x9e\x5c\xf9\x28\x78\x8a\x7e\xb0\xe0\xab\x3c\x5e\x94\xf8\xc5\xa1\xb2\x91\x68\xfc\xc2\x3e\x8c\xd8\xf9\x1a\x56\x6c\xb2\xc0\xae\x02\x66\x73\x94\x17\xe8\xef\x91\x04\xdb\xdb\x94\xca\x9f\x74\x44\xc9\xbf\xc9\xb4\x75\x7c\x47\xcb\xd4\x93\x9e\x78\x8e\xf9\xf4\xd4\xd8\x3a\xe8\xdb\x61\x98\xe3\x42\x12\x63\x23\x65\xa1\x36\xb5\x6e\x90\x11\x69\x6d\xfb\xa0\x5c\x43\x11\xb5\x26\x61\x90\x8d\xca\xe4\xc7\x6b\xae\x2f\x6c\x85\x14\xfa\xc3\xcd\x5b\xa6\x80\x4b\x5d\x7c\x94\x3e\xee\xe4\xd8\xf7\xfe\x72\xd0\x18\x42\x0a\x91\xcf\xb5\x29\x3a\x25\xf7\x2e\x8e\xf7\x51\x30\x85\x3b\xb3\x01\xb1\x10\x52\x0d\xa5\xf4\xc6\x24\xff\xb2\x5a\xd5\xc6\x36\x2d\xb2\x9e\xce\x2d\x17\xf7\xa5\x2a\x2b\x07\x99\x70\x02\xde\x05\x69\xfc\x90\x16\xd9\x0f\x64\x7a\xfb\x31\x89\x52\x36\x15\x78\xaf\x34\xda\x24\x16\xff\x5d\xa1\xea\x2c\x91\xfb\xfb\xac\xa7\xb7\x61\xd6\xee\x61\x69\xd9\x77\xaf\xcf\x7b\x97\x35\xce\xaf\x2f\xfd\x82\x52\xd2\xec\x54\x28\x1f\x8a\xcc\xd0\x07\x03\xed\x0b\x66\x8d\x92\x9d\x46\x92\x0e\xc0\x9c\xc2\x75\x8e\xc2\x22\x54\x65\x26\xdc\xde\xed\x10\xef\x3c\xd3\xbc\xca\xf6\xe9\x14\x16\x04\xac\x71\xb6\x8f\x61\x70\x77\x82\x9c\xfa\x15\xf4\xfc\x80\x1d\x21\xd1\x84\x55\x53\xb8\x74\x3e\xfb\xd2\x6e\xc9\xbe\x78\xf7\xce\x43\x7d\xf0\x26\x5e\x3a\x5a\x61\x68\xbb\x16\x04\x05\xbf\x94\x98\x8e\x39\x49\x81\xd6\xb8\xc5\xd1\x3e\x90\x61\x4c\x08\xeb\x57\x52\xcf\x84\x37\x46\x82\xc0\xea\xca\xb5\x8d\xc5\x14\x7e\x6d\x8c\x70\x34\x15\xb4\x6c\x52\x9b\x13\x69\x9b\x60\x61\xc0\xad\x05\x76\xa2\x98\x12\xca\x56\x1c\x26\x99\x34\xa3\x8c\xdc\x41\xb6\x88\x8f\x5a\xee\xa5\x96\xca\x87\x54\x3e\x45\x73\xd8\xba\x55\xdc\x1c\xe7\x09\xa5\x80\x91\x2b\xbe\xd5\xbb\x67\xe1\xfa\xd9\x48\x05\x25\xec\x62\x85\x49\xa6\xd3\x07\xec\xba\x7b\xff\x4a\x28\x86\x2a\x56\x08\xaf\x79\x22\xc8\x82\x03\xf0\x81\xc0\x52\xe6\x98\x88\xdc\xa0\xc8\x36\x09\x7e\x91\xb6\xf3\x6e\xc3\x1b\x3a\x21\x61\x26\xf8\x99\x03\xb0\xb3\x78\x37\xaf\xc9\x4a\x24\x5a\xaf\x50\x96\x22\xa7\x5c\xcc\xb0\xab\x39\x72\xa5\x10\x48\x0f\x73\xdc\x4f\xfb\x9b\xaf\x71\x4b\xdc\x5a\x43\x8d\x8c\x9b\x26\x5e\xd6\x34\x3b\x7e\xf3\x86\x75\x29\x2d\x3c\x48\x95\xd1\x01\x09\xba\x18\x9a\x92\x4f\x1c\xcf\x9e\xa5\x20\xfb\xd2\x22\x84\x49\x3f\x40\x4e\xb8\x81\xff\xc4\xae\xb0\xb2\x70\x43\x9d\x62\xb7\x48\x14\xc4\xb4\x06\x99\x07\x8b\xa5\x30\xf4\x85\xa1\xfb\x0b\x5e\x1d\xbc\x8d\x53\xfe\x70\xc8\x12\x62\xf9\x58\x3d\x57\xda\x4b\xca\xa2\x3b\x0e\xd9\xb1\xb6\x22\x20\x6b\x9d\xf7\x01\x7c\xd1\xfa\x26\x4b\xb1\x22\x4b\xc5\xba\xe4\x0b\xe9\x36\x10\xd3\xf5\x3a\xa4\xed\x86\x22\x98\x60\xaf\xa2\x6a\xc7\x4b\x09\x64\xf3\x55\x34\x46\x3e\xd1\xe7\x50\x8c\xf6\x2f\x64\xb7\xd3\xf8\x5c\x23\xdc\xa9\xf5\xf0\x2c\x3b\x2a\x52\x26\x7e\x53\xc0\x0b\x38\x62\x97\x0a\x44\xd4\xe9\x08\x61\xe0\xf0\x6b\x35\xcf\x65\x4a\x56\x26\x09\x89\x1b\x71\x68\xb4\xb5\xb1\x12\xd2\x75\x5c\x5b\xe7\x27\xa6\x7c\xc4\x74\xf8\x1c\x78\x8e\xbc\x72\xf0\x5b\x54\xb9\x93\x65\xee\xb3\x46\x7f\x78\xe8\x53\x88\x48\x3c\x72\x36\x5f\xd1\xf7\xee\x95\x41\x5c\xbb\x8b\x3b\x01\xe9\xfc\x89\x2a\xb5\xb5\x72\xe6\x4f\x01\x0b\x24\x32\xe2\xb1\x36\xe2\x99\x51\x5c\x52\x6b\x3a\x13\xf1\xe4\x10\x06\x4e\x18\xcd\x93\xa4\xe7\x08\x61\x9a\x2a\xc7\x67\x48\x92\x96\x85\xec\x22\xc7\x43\x32\x6c\xe8\x8f\xf6\x7e\x2f\x90\xf0\x8f\x3e\x6a\x11\xec\x6e\xc9\xd4\xbf\xf5\xf9\x16\x42\x66\x06\x0f\x49\x58\x58\xab\x53\xc9\xa0\x0f\x53\x7c\x1a\x89\xdb\x17\x3e\x33\xff\x2c\xc9\x0b\xd3\xdc\xa9\xe0\x66\x76\xe7\x5d\xf2\xd0\x20\x83\x5c\x2a\x04\x61\x16\x15\x27\xc5\x24\x42\xb3\xd8\x6e\xdb\xf1\x22\xc3\x99\x40\xe9\x49\x8c\xcf\x2c\x48\x1e\x3c\x72\x04\x45\x0f\xb8\xf9\x66\x54\x3d\xe0\xe6\x94\x61\x41\x29\xa4\x79\x42\xde\xee\x30\xdb\x77\xfc\x22\x8a\x92\x82\xdd\x1a\xdc\x03\x6e\x46\xf1\x10\x02\xac\xe1\xab\x3f\x5d\x0c\xfc\x18\x51\xfe\x99\x6d\x70\x80\xe7\xef\x05\x79\xc7\x55\x97\x42\x26\xbe\x20\xd9\x4a\x2f\xa3\x72\xd4\x0f\x5c\xc0\xaf\xe6\x24\xa3\x01\x31\x54\x7b\xc0\x7f\x57\xd2\x70\x6d\xab\xac\x9c\x1d\xa5\x25\x37\x61\x8d\x4f\x65\xfc\x69\xd9\xd1\x0a\x0b\xb8\x42\x05\x62\xee\xd0\x80\x28\xcb\x9c\xfb\x27\x7c\xb1\xa1\xd4\x1e\x4e\xe8\xa5\xa2\x5a\x4d\x61\x25\x8c\x14\xb3\x1c\x1b\x85\xb7\xe8\x6a\x88\xbb\x53\xe2\x01\xf6\x59\x54\x73\x6f\xea\xd0\xf3\x16\xff\x94\xc8\x84\x07\x3f\xbc\xd9\x73\x9d\xe7\x7a\xed\xa9\x21\xda\x59\x9e\xfe\xe3\x76\x3b\x9c\x7d\x2d\x84\xc3\xb5\xd8\x24\x94\xf4\x70\xc7\x78\x28\xb1\xb8\xbe\x84\x9f\xfc\x1a\x4e\x94\x9a\x02\x97\x28\x25\xfd\x10\x6b\x4c\x07\xc2\x75\x9e\x5a\x5f\x11\x8b\x37\xf6\xf7\xa3\xa4\x90\x72\x18\x24\xa4\xab\x80\xa0\xae\x14\xef\xc1\x18\x59\x87\x2a\x85\xb1\x68\x7a\x5f\x9a\x36\x15\x12\x83\xce\x48\x64\x83\x17\x0a\x23\xb5\x86\x1e\xc6\xf6\xeb\xf9\xcd\xfb\xcb\xf7\x3f\x8d\xaf\xc4\xc7\x05\xc7\xd5\xe2\xd7\xc2\xa8\xba\xdd\x4f\x44\x76\x25\xe5\x37\x34\x46\x1a\xf1\x31\xf6\xf9\xef\x83\xe6\xb2\x00\xce\x7c\x71\x84\x18\xba\xef\x4b\xe0\x02\x3e\xbe\xf7\x74\x74\x39\xa4\x7d\x4d\xba\x55\xfe\x84\x0c\xdd\x70\xea\xc8\x98\xc9\x86\x66\x58\x1a\x4c\xc9\xb3\x24\x06\xcb\x5c\xa4\x9d\xb9\xd5\xdd\xd2\xe3\xd1\x79\x16\x0a\xbd\x7c\xcd\xcc\x87\xce\xbb\xf7\x1b\xf8\xed\xa7\xd5\x5a\x51\xd2\xdf\x60\xa8\x2d\x6b\x65\x7d\x68\xce\x1d\x2a\x5c\xef\x80\xb3\x0e\xc5\x48\xda\x83\x24\x9e\x53\xa3\xb6\x4b\x5d\xe5\x19\x91\x47\x91\x32\x7c\xb0\xbe\x59\xeb\x3b\x49\xde\xd8\xd3\x6c\xfe\x34\x7c\x4b\xa3\xa6\x88\xe7\x0f\x6c\x25\xd1\xe5\x31\x90\x71\x79\x5a\x3b\xa7\xa3\xea\x4f\xf5\x11\x28\x39\x39\x16\xab\xde\xcd\x1b\x42\xca\xeb\xe3\x86\xc6\xae\x60\x7c\x0c\xd7\x7e\x05\x37\x4c\x58\x2e\x0b\xe9\x12\xb9\x50\xda\x74\x92\x14\x55\x3a\x04\xeb\xbc\xc4\x27\x7f\xf4\x69\xbf\x3e\x4e\xc6\xce\x83\x1b\x8b\x3d\x5d\x0a\xb5\x40\x72\x00\xfd\x79\xcd\xdb\x1a\x71\x5d\x97\xb7\x91\xfd\x7c\xe3\xfb\xc2\x35\xa8\x29\x5c\x12\x15\x52\x2d\xc6\xa8\x04\x13\x62\x93\x5c\x2f\x12\x2b\x7f\x1f\xa0\x83\x27\x9f\x41\xae\x17\xb7\xf2\x77\x52\x5d\x2e\x99\xe9\xca\x59\x99\xc5\x4c\xd6\xeb\xa7\x21\x6a\x68\x47\x3e\xbe\x98\xc0\x5f\x5e\xdc\xc3\xbb\xbf\xd7\x5e\x70\x85\x86\x1c\x3b\x77\x37\x4b\xff\x1e\xd4\x34\xb6\x9d\x9f\x41\xfb\x30\x65\x2c\xf1\x05\x16\xda\x6c\xc6\xd3\xef\xe7\x8f\x67\xe1\x2f\x7f\xfd\xdb\x04\xfe\xfa\xe2\x3f\xfe\xf6\xc7\xb2\x41\x6e\x46\x57\x9d\x6f\x51\x77\x58\x08\x73\x47\xd2\xff\xe2\xc5\x04\xfe\xf3\x05\xfd\xbb\x87\x42\xe6\xb9\xb4\x98\x6a\xd5\x4a\x83\xbe\x1d\x2f\xdc\xc3\x4d\x4a\xa3\x4b\x34\x4e\x76\xe6\x3e\xd1\x52\xb7\xec\xaa\xef\xfc\x7b\xaf\x1b\x7a\xff\xbe\x21\xdc\x00\x8b\x77\x04\x0e\xdb\xee\x68\xba\x33\xcd\x27\x82\x2c\xb8\x74\xb5\x68\xf4\x1c\xee\x8c\x58\x49\x0b\xb3\x4a\xe6\x59\x7f\x03\x99\x59\xf1\x66\x8b\xc5\x38\xca\x64\xd5\xc7\x73\xc7\x70\xa9\x3d\xc7\x13\xcc\x3a\xb7\xc5\x29\x49\xf3\xbf\xc6\xa7\xb4\x8f\x8f\xd3\x42\xaa\xd0\x24\xa5\x2f\x22\x1d\x68\xb9\x30\xa9\x31\xc4\xf1\x56\xa0\xcb\x9c\xc5\x36\x56\x98\x45\x61\xce\x5e\x47\xeb\x40\xd5\xbb\xb3\x69\xf5\xac\x4e\x15\x53\x1b\xfa\xe0\x5c\x59\xe9\x2d\x0d\x3e\x69\x71\xee\xd8\xc0\xbd\x9a\x61\x13\x64\xe7\xfc\xc0\x4f\x69\xb7\x0c\x29\xfd\x30\x49\x31\x55\x1f\xec\xf2\xde\x3d\x29\xc2\xb5\x03\x9b\xf0\x0a\x02\x33\x50\x7a\xdc\x55\x05\xc6\xde\xba\x25\xc4\x42\x19\x43\xc4\xc1\x3b\x34\xc1\x33\xee\x27\x0b\xeb\xd0\x4a\xf3\x0d\xe9\x43\xa5\xc4\x11\x12\x6a\xbd\x65\x4a\xf4\x0a\x8d\x91\x59\x86\x5d\x05\x31\xa2\xb0\xfd\xb4\xa9\xb9\xe5\xd5\x2c\x8d\x31\x4d\xfb\x12\xcf\xd8\x8d\x4a\xa4\x4d\xca\x6a\x96\xcb\xae\xe7\xe3\x7e\x57\x78\x6e\x6c\x08\xf9\xd7\x5b\x94\x82\xf0\xc2\x27\xc5\x86\x09\x99\x0b\xb6\x2d\x33\x84\x95\xf4\x75\x0f\x3a\x87\xa9\x60\x4b\xe3\xaf\xef\x63\x06\xb3\x0d\x08\xb5\xd1\xaa\xe7\x35\x14\xd3\x1a\xeb\x97\x38\x0b\x6f\x54\x07\xc2\x8d\xa7\xe5\x4b\xee\xcc\x70\x7f\x48\x65\xf4\xff\x49\x78\x4e\xba\xdf\x9a\xa1\x83\xc0\x7f\x0f\x04\x67\x13\x1f\x84\x84\x6f\x61\x41\x4f\x86\xe4\x29\x6d\xb5\xe0\x88\xdc\xde\x62\x67\x57\x63\x86\x34\xac\xdd\xcd\x1a\xd5\x67\x0b\x7f\xc7\xa4\x5e\x34\x85\x57\x5a\xad\xc8\xdc\x87\xd4\xa5\x41\xe1\xf4\x0e\xf8\x61\x95\xdd\xe7\x6a\xa0\xa5\xd8\x57\xc4\x6d\x78\x8b\x03\x47\x72\x57\x77\xf6\xf6\xf9\x6b\x23\xaa\x39\x1c\xd5\x07\xac\x79\x8c\x05\x1b\x83\xb6\xd4\xca\x62\xdf\xcd\xac\x3d\xa2\xb9\x54\xb7\x9f\x92\x87\xf1\x98\x7c\xb7\x92\xf9\x58\x56\xa9\xcb\x81\x4b\xe7\x4a\xff\x37\x83\x3c\x6a\xf6\x6b\x53\x78\x45\x1e\x86\xaf\x72\xb4\x7f\xf7\x4e\x9d\x5d\x4e\xf8\x39\x30\xcd\x50\xc8\x9f\x34\x94\x0d\x69\x6c\xdc\x57\x54\x2b\x69\xb4\x62\xdb\x19\xab\x29\x5d\x4d\xf2\x90\x95\x5e\x34\x4b\xe0\x97\xb0\x64\x37\x95\x3a\x8c\xfb\xf5\xc5\xdf\x3f\xfc\x34\x3a\xbd\xe7\xd9\xc7\xe5\xf6\xd9\x6c\x91\x58\x14\x26\x5d\x12\x67\xd1\xe0\xd6\xbd\xbf\x4e\xb5\x0d\x2b\x6a\x83\xbb\xdb\x2d\x8c\xdb\x17\xe5\xeb\x03\x93\x81\xdc\x80\x48\xd9\xf7\x4a\xdf\xda\x23\x3d\xd3\x1b\x11\x69\xb5\xbb\xf6\xb7\x4f\x7b\xfe\x84\xcb\xeb\x03\x57\xa0\x82\x44\xce\xe0\x0d\x53\xd0\xfc\xc5\x10\xae\x84\x13\xb0\x63\x09\xe8\x7f\xf3\x7a\x3c\x0d\xed\x0b\xae\xf1\x42\xf6\x71\xef\x18\xf7\x1e\xa8\x1d\xfd\x36\xed\x88\x17\x87\xe1\x11\x6b\xf2\xbb\x2c\x13\xfc\xc2\xd7\x1c\x7c\xfb\xb7\xe7\xed\xc9\x05\xcf\x23\xa5\xbd\x16\x6e\x79\xd6\x16\xc9\x58\x54\x22\xcb\xe2\x63\x97\x3e\x4c\xe7\x3c\x6d\xe7\x24\x38\x0d\xff\x23\x4b\x78\x33\xa4\x69\x6d\x6c\xe1\xfe\x46\xbc\xce\xd4\x83\xf0\x4d\xb8\x90\x76\xeb\xa3\xe6\x67\xf3\x77\x00\x63\x92\xa1\x75\x52\x31\xaa\xaf\x21\x81\xc3\x89\xd7\x0d\xac\xd6\x8c\x16\x86\x91\xb4\x46\xef\x13\xe9\x45\xd5\x5d\x94\x8c\x95\x09\xb8\x0c\xd7\x61\x2e\x68\x32\x39\x10\xe9\x5a\xc5\x62\xa6\x24\xc0\xe3\xf6\x55\x9c\xce\xb0\xd9\xd3\xa2\xe4\xe8\x9e\x9d\xd0\x47\xcf\xe7\x3d\x90\x85\xf3\x9f\x27\x6d\xf6\xfa\xcf\x4e\xe4\x23\x5e\x03\x66\xe1\xf7\x74\x3d\x5e\xc5\xeb\xc2\x24\xe1\xa8\x47\x47\xef\x70\x2e\xad\x4b\xf4\x9c\x11\xd9\x84\xaf\x0a\xb2\xd1\x17\xce\xa1\xe9\x3a\xae\xde\x56\xf0\x05\xdc\xba\xe0\xef\xff\x7a\x91\x6f\xb4\x06\x28\x71\xdf\xf9\x66\xc5\xb5\x77\xee\x0c\x36\xca\xe1\xbb\xfb\xef\xfe\x37\x00\x00\xff\xff\xe9\x27\x76\xd2\x8c\x51\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 20876, mode: os.FileMode(420), modTime: time.Unix(1560452590, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1539631576, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1539631576, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1539631576, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1539631576, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1539631576, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1539631576, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1539631576, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1539631576, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

