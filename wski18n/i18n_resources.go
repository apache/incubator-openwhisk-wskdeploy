// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x6f\xe3\xb8\x11\xfe\x9e\x5f\x31\xd8\x2f\x69\x81\xc0\xdd\xbd\xa2\x40\xb1\x40\x51\x04\x4d\x7a\x4d\xef\x36\x09\x92\xec\x2d\x0e\x7b\x0b\x87\x96\xc6\x36\xcf\x12\x29\x90\x94\xbd\x5e\xc3\xff\xbd\x18\x52\xb4\x64\x47\x94\xe4\xd7\x2c\x8a\xcb\x27\x39\xe2\x3c\xcf\x33\x43\x6a\x38\x7c\xf9\x7c\x06\xb0\x38\x03\x00\x78\xc3\xe3\x37\xef\xe1\x4d\xaa\x47\xfd\x4c\xe1\x90\x7f\xed\xa3\x52\x52\xbd\xb9\x70\x6f\x8d\x62\x42\x27\xcc\x70\x29\xa8\xd9\xb5\x7d\x77\x06\xb0\xbc\x68\x40\x98\x31\x25\xb8\x18\x05\x30\x3e\x15\x6f\xdb\x50\x74\x1e\x45\xa8\x75\x00\xe5\xb1\x78\xdb\x86\xc2\xc5\x50\x06\x20\x6e\xe8\x55\xd0\xfe\x77\x2d\x45\x3f\xe5\x5a\x73\x31\xea\x47\x69\xdc\x9f\xe0\x3c\x00\xf4\xdf\xc7\xbb\x5b\xe0\x22\xcb\x0d\xc4\xcc\x30\xf8\xe0\xac\xe0\x3c\x4a\xe3\x73\x20\xbb\x20\x0b\x01\x0f\x13\x36\xea\x0b\x96\xa2\xce\x58\x84\x01\x8e\xf2\x7d\x3b\x16\xcb\xcd\xb8\x41\x2e\xbd\x96\x8a\x7f\xb3\xff\x80\xe7\x9f\xae\x7f\x7d\xee\x02\x9a\xf1\xfe\x58\x6a\x13\x00\x9d\x8d\xb9\x9e\xc0\xe5\xfd\x0d\x3c\xff\xe7\xee\xf1\xa9\x2b\xe2\x14\x95\x26\x84\x56\xd0\x5f\xae\x1f\x1e\x6f\xee\x6e\xbb\xe0\x4e\x70\xde\x1f\xf2\x24\x14\xc9\x8c\x99\x31\xc8\x21\x98\x31\x42\x6f\x82\x73\xb0\x6d\xdb\x61\x23\x54\xa6\x33\x2e\x35\x6e\x01\xce\x94\x4c\x33\xd3\x8f\x31\x4b\x64\xa8\xab\xae\x24\xcc\x65\x0e\x0a\x59\x92\xcc\x61\xc6\x84\x01\x23\xc1\x99\x80\x19\x73\xfd\x4f\xf8\xd3\xfc\x2f\xb7\x7f\x7e\x0f\xad\x3c\xd4\xeb\xe1\x31\xf1\x9b\xb8\x4f\x90\x69\x84\x4c\xc9\x29\x8f\x11\x98\x00\xb2\x40\x61\x78\xe4\x06\x8a\x91\x13\x14\x5d\x88\x32\xde\x30\x4e\x5e\x10\x51\xb8\xa8\x3d\x0d\x70\x18\x4a\x05\x77\x19\x8a\x4f\xd4\xf1\x1d\xb8\xda\xbe\x9a\x97\x6e\xc1\xca\x04\x3e\xc7\x38\x64\x79\x62\x60\xca\x92\x1c\x81\x6b\x18\xe5\xa8\xcd\x97\x26\xde\x94\x09\x3e\x44\x6d\xfa\x42\x9a\xfe\x50\xe6\x22\x0e\x30\x7f\x28\x1a\xda\x41\x00\x42\x1a\xb0\xad\x81\x19\xb0\x03\xe5\xf3\x62\xd1\xa3\x87\xe5\xf2\x4b\xef\x37\x11\x26\xcc\x6d\xfe\x59\xd1\x36\x8e\x96\x8f\x36\xeb\x54\x90\x6d\x3c\x9d\x49\x8a\xc2\x6c\x43\x94\x8b\x1d\xa8\xbc\x51\x2b\x99\xca\x85\xe1\x29\x52\x7e\x4d\x99\x89\xc6\x01\x96\x07\xd7\xcc\xf2\x14\x26\x44\xa5\x33\x8c\xf8\x90\x63\x0c\x5c\x80\x57\x0c\xb1\x44\x6d\x03\x6d\x11\x61\xc6\xcd\x18\x58\x64\x87\xae\x96\xb9\x8a\xd0\x75\x05\x7e\x35\x28\x28\xe7\x58\x54\xfc\x6a\xbc\xf8\xa2\x2d\xfd\xd7\x3d\xb6\x75\x8d\x77\x22\x1a\x33\x31\xc2\xd0\x40\xf0\x3e\x14\xad\xe8\xfb\xdd\x70\x67\xc0\x34\xc6\x40\x5f\xd8\x18\x9b\x15\xef\x25\x33\x17\x3a\xcf\x32\xa9\x4c\xab\xd4\x4e\xe1\xe6\x2e\xd8\x2b\x4c\x2b\xae\xe2\x41\x77\x81\xae\x55\x3f\xe1\x29\x37\x7d\x3e\x12\x52\x05\x15\xde\x88\x29\x4b\x78\xec\x39\xac\x89\x65\xb2\x4f\x24\x76\x43\x62\x01\xd7\xc8\x1f\x49\x31\xe4\xa3\xd5\x5c\xdf\x9c\x28\x9f\xc8\xc3\xf5\xc4\x48\x73\x48\x11\x0d\x07\x95\x6f\xcb\xd8\x98\x31\x89\x91\xa6\x40\x6a\xb2\x1f\x4f\x5b\xb6\x24\xa6\x32\x3d\xee\x44\x55\xb8\xd2\x54\x76\x6d\xfa\xb3\x58\xf4\xe8\x71\xb9\xbc\x80\xa1\x92\x29\xfd\x76\xa3\x7f\xb9\xec\xc4\xe8\xba\xab\x8d\x91\x9a\xf9\x9e\xd2\x68\x76\xe3\x5a\x05\xa7\x8d\x6d\x2d\x8a\x8b\x45\x6f\xf5\x7b\x6b\x2f\x51\xa9\xfe\x08\x8d\xff\x8a\x43\xe5\xf0\xbf\x19\x4f\x5c\x72\x19\xa1\xb1\x9f\x61\xf9\x61\x7a\x53\x47\xbc\x9a\x5e\x41\xa3\x9a\xf2\x08\xdf\x93\x16\x54\xaa\x2a\xa4\x76\x82\x10\x29\x53\x7a\xcc\x92\xa4\x9f\xc8\x88\x25\xa1\x99\xc1\x37\xab\x30\x51\xb4\x1c\xbb\xb5\x74\x13\xae\x6e\x9e\x8e\x4a\x36\x81\x66\x26\xd5\x64\x27\x3e\x2e\x0c\x2a\x81\xcd\xb3\x51\x39\x69\xb9\x45\x07\xc6\xc1\x04\x74\xb5\x6a\x0a\x91\x4c\xb3\x04\x29\xc0\xc5\x4a\x65\x98\x27\xc9\xbc\x2b\xd1\xd0\x76\x58\x3b\x4b\xcc\xe3\xe2\x33\x74\x6c\x44\xb6\xe2\x82\x87\x5c\xc0\xf3\x4c\x4f\x8a\x8a\xd0\xcf\xbf\xcf\x34\x10\x14\xa6\x72\x8a\x90\x31\x65\xb8\x2d\x1f\xdd\x3b\x8c\x81\x69\x8d\xa6\x39\xfc\x15\xa5\x11\x13\x11\x26\x61\xb1\x77\x3f\xf5\xe0\x5f\xae\x0d\xd5\x04\x5d\xcb\x8d\x4a\xa9\x40\x55\x07\x1b\x61\xdc\x1c\x94\x8f\x15\x0b\xaa\xb3\x63\x74\xd1\xa7\x4c\x6c\x38\xea\xc6\x50\x41\x9c\x2b\x52\x57\x30\x55\x55\x1e\x2f\x88\xb4\x0e\xee\xdb\x35\x0c\xd5\xab\x19\x2a\x92\xd9\x90\x35\x68\x22\x9b\xe0\x9c\xa6\x31\xca\x54\x33\xa6\x41\xa1\x51\x1c\xa7\x34\xbd\xd2\x70\xb6\x60\xbd\x12\x8c\xfe\x61\x6b\x9d\x24\x01\x2d\xa5\x80\x01\x92\x42\x85\x11\xa3\xd0\x64\xae\xf8\x8d\xa5\x8d\x4b\xae\x11\xb8\x01\x99\x1b\x4d\xa5\xb0\x1c\xc2\x93\x62\x53\xae\x61\x90\xf3\x24\xee\xe0\x0a\xa5\xd9\x12\xbd\xaf\x30\x4b\x58\x14\xec\x2f\xef\x91\x4c\xe2\x8a\x53\xdc\x95\x39\x8b\x45\x8f\x6a\x1b\x33\xcf\x70\xb9\x74\x65\x4e\xc0\x89\x0b\xef\x05\xc9\x37\x05\xa6\xc0\xd9\x1a\xa6\x36\xc8\xd6\xe7\xa7\xcd\x1c\xea\xe7\xc0\x94\x89\x98\x19\xa9\xe6\x0d\x0b\x64\x52\xbe\x6a\x67\x19\x2a\x3d\xc3\x35\x14\x58\xbd\xe6\xac\xed\x6b\x5b\x3b\x6b\xd0\x00\xf8\x1d\xa3\xa6\x39\xde\x53\xd8\xc9\x23\xa6\x9f\x31\x3d\x2d\x97\x14\xb3\xca\xd0\xb7\xc1\x22\x41\xb1\x2f\xbd\x37\x2a\x5f\x53\x4c\x40\x04\x91\x3a\x88\xe5\x5a\x5d\xb4\x42\x48\xfd\x0a\xa4\x2d\x11\x50\xe4\x62\xcc\x50\xc4\x28\xa2\xe0\x62\xd5\x37\x85\xb2\xa9\xeb\x2d\xab\xe1\x4b\xaf\xd7\xc0\xe3\xbf\xba\x4e\x4c\x1f\xcb\xc6\xbb\x70\x95\x26\x2f\x52\x7f\x70\xbf\xe9\xaa\xa4\x59\xb1\xc0\x98\x69\x18\x20\x8a\xb5\x19\x60\x95\x22\xda\x12\x6c\x8d\x06\x4a\x80\xb9\x0a\xd5\x67\x57\x1b\xf9\xaf\x46\xd1\xeb\x4d\x17\xde\x9b\xb5\xc4\x7e\xb0\x98\x7a\xd4\xee\x51\x5d\xd3\xd1\x1c\xd7\x97\x33\xcb\xb6\x91\x0d\x69\x7a\xbc\xbe\xbf\x7c\xb8\x7c\xba\x7b\x08\x30\xff\xa3\xf6\x0f\xae\x05\x65\x7d\x8a\x43\x22\x67\x76\x9f\x07\x12\x2e\x10\x18\x2a\xab\x61\x8a\xca\x2d\xc8\xea\xed\xd7\xfe\xea\x85\xfd\x28\x0d\xd8\x8d\x5e\x88\x14\x32\x43\x1f\x52\xc6\xa2\x09\x1b\xa1\x5b\x38\xbb\x77\x29\x6a\xcd\x46\x95\x0a\x11\x98\x88\xbd\x9d\x8c\xdd\x0b\x7a\x70\xb5\x63\xbd\x8f\x47\xa1\xea\xea\x54\xb1\x50\xfc\xff\xf2\x29\xe3\xa7\x70\x68\x3f\x9a\xae\xce\xa8\x3c\x39\xc9\x90\xdb\x93\xa7\xc5\x1d\x8d\xc6\xb2\xd8\x85\x97\x61\x26\xd7\x94\x47\x8e\xec\xdb\x51\x48\xbb\xf6\x9b\x51\x7c\x34\x42\x75\x8a\xae\xdb\x9f\x6a\x5b\xa7\x86\x88\xf1\x29\x3d\xdb\x93\x6f\xdb\x0c\x3f\xe0\x22\xa6\xdf\x27\xcc\x8a\xfb\x53\xd6\x3a\x59\x96\x9c\x45\xa2\xa7\xf5\x46\x6e\xb2\xdc\x2c\x97\x40\x35\x60\x5b\xa5\x1a\x30\x6b\x21\xb3\xdf\xd8\xb6\x54\xb5\x46\x2d\x44\x6b\x03\x64\x5b\xc2\x46\xe3\x16\x62\xdf\x6f\xdb\x72\x86\xec\x3a\xd2\xf9\x61\xb2\x2b\x6d\xc8\xbe\x96\xbe\xdc\xb8\x20\x93\xcd\xb3\x8b\xb6\xcd\x8e\x3a\x9b\x5a\x9a\xb5\xea\xb2\xad\x8a\xec\x50\xa0\xee\x54\x88\x56\x96\x0e\xae\xd0\x7f\xb9\x6b\xd5\xba\xe6\x08\x19\x7e\xbf\x5e\x97\x09\xc9\x6e\x16\x9d\xa4\x20\x3c\x1c\x53\x57\x97\x8e\x5c\x66\x1c\x8a\xe7\x8f\x12\x6a\x23\x9e\xc7\x2f\xa1\x0e\x48\xb5\xad\x53\x47\x2e\xa1\x0e\xcd\xd7\xd5\xbd\xe3\x2f\x92\x0f\x48\x55\xeb\xd4\xa7\xcb\x87\xdb\x9b\xdb\x1f\xdf\xc3\xd3\x18\xe1\xdc\x9d\x41\x9d\xc3\xaf\x97\x1f\x7e\x5e\xed\xcf\x16\x21\xb5\x1b\xeb\xf6\xc0\xac\xdc\x8d\xed\xc1\x7d\xb9\x1b\x7b\x4e\x41\x3f\xf7\xdb\xaf\xc0\xa8\xa1\x8e\x14\x1f\xb8\xa3\xe2\xe2\xdc\xd8\x9d\x92\xea\xb0\xef\xaf\xa9\xa8\x6b\xbf\xfb\xc2\xe2\x84\xfd\x7f\x38\xca\x5a\x27\xef\x1b\x4a\xa6\xf6\x7d\xcd\x7a\x2f\xf6\xc3\x6c\x94\x79\x48\x79\x07\x90\xf5\x54\x8c\xc8\x43\xc8\xda\x0d\xab\x51\xd6\x8b\x92\x7f\x5f\x6d\x3b\x00\xd6\x0a\x7c\xd8\x5c\x04\xed\x2a\x6c\x07\xa0\x5a\x41\x97\x2f\x17\x80\xbb\x4a\xda\x09\xaa\x6d\x74\x15\xa9\xaf\x8a\x55\xd4\xe1\x9d\x06\x54\xb3\x79\x63\x17\x51\x15\xb4\x15\x6d\x07\xc3\x96\x2e\xf0\xf7\x85\xb6\x20\xed\x68\x5c\x4b\x5c\x5e\x9a\xe0\x62\x2a\x27\xee\x78\xd1\x15\x12\x63\x14\x27\xaa\x69\x4e\x2c\xa2\xb9\x26\xf8\xb0\x3a\xf5\x1c\x72\x4c\x62\xf0\x19\xf3\x17\x77\x4d\x17\xd2\x5c\x1b\x18\x20\xd5\xcd\x1d\xe6\xf3\x2d\xd1\x9a\xa5\x6d\x1a\xfb\xfb\x67\x6c\xea\xe6\x76\x0a\x5b\x94\x2b\x45\x8b\xc5\xf2\x88\xab\xb8\x5f\xdc\x41\xec\xde\xf8\xbb\x45\xf6\x67\x1e\xa1\xd0\x78\xa0\xc8\x06\xd0\xba\x45\xd6\x1b\x1f\x2b\xb2\x3b\xe3\x37\xcb\xf7\xb0\xf6\x16\xa0\x7d\xbc\xb9\x5a\x2e\x3d\x0b\x03\x77\x63\x50\x0a\xec\x20\x75\x2b\xac\xfa\x53\x48\x4c\xa5\x9a\x3f\xf2\x6f\xf6\x82\x85\xbd\x96\xa8\xd7\x0e\xdf\xf5\x58\xe6\x49\x4c\x9d\xc3\x84\xbd\x9e\x44\x1f\xf5\x00\xcd\x8c\x32\xd6\xbb\x1f\xfe\x6e\x3f\xdf\xbf\xbd\xfb\x21\xac\xf6\xa0\x14\xb5\x4e\x18\x9e\xa2\xcc\xcd\x4e\xf0\x6f\xdf\x5a\xf8\xbf\xbe\xa5\xbf\xb0\x13\x07\xa5\xa8\x75\x22\x91\xa3\x5d\x63\xe4\xf0\xdf\x35\xc8\x3f\x10\x78\xdb\xc8\xb6\xc8\xe0\xef\xb7\x16\x27\xd1\xab\x9b\x99\x63\x26\x46\x6c\x90\x20\xad\x73\x8c\x04\x21\x67\x17\xd5\x0b\x41\x03\xac\x5e\x7f\x6d\x1d\xf9\x07\xe4\x6a\x76\x8b\x65\x59\xe2\xef\xce\xd6\x5c\x6d\xe9\x72\x0f\xa8\xb8\x4d\x53\xbd\xf9\xd3\xe2\xdf\x71\x48\xeb\xcb\x0a\x7b\xd1\xbf\x72\x15\xba\x5a\x9c\xb8\x98\xd9\x15\xac\xbb\xbe\x66\xef\x75\x55\x53\xa0\xa7\x59\x2c\x7a\xc5\x63\xdd\xf5\x9d\x15\xce\x00\xab\x3b\xd1\x4d\x7d\xfd\xfa\xba\x5a\xc2\x65\xea\xea\xd6\xef\x22\x60\xaf\xa7\xac\x25\x64\x95\xf3\x96\xe2\xf1\x7b\x09\xd9\xeb\x29\xa3\x90\x9d\x7d\x39\xfb\x5f\x00\x00\x00\xff\xff\xaf\xe3\x44\xc3\xe4\x38\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 14564, mode: os.FileMode(420), modTime: time.Unix(1515531199, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

