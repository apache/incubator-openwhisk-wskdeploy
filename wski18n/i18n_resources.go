// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x5f\x6f\x1b\xb9\x11\x7f\xf7\xa7\x18\xf8\xe5\x5a\xc0\xd6\x25\x57\x14\x28\x02\x18\x45\x51\xa7\xa8\x7b\xbd\x38\x88\x9d\x1e\x8a\x5c\xb0\xa6\x97\xb3\xbb\x8c\xb8\xe4\x82\xe4\x4a\x51\x04\xf5\xb3\x17\x43\xee\x1f\x49\x16\x77\x57\xb2\x83\xcb\x13\x2d\x0e\x7f\xbf\x99\xe1\x70\x66\xc8\xcd\xa7\x33\x80\xf5\x19\x00\xc0\xb9\xe0\xe7\x6f\xe0\xbc\xb4\x79\x52\x19\xcc\xc4\xd7\x04\x8d\xd1\xe6\xfc\x22\xcc\x3a\xc3\x94\x95\xcc\x09\xad\x48\xec\xad\x9f\x3b\x03\xd8\x5c\x0c\x20\x2c\x99\x51\x42\xe5\x11\x8c\x5f\x9b\xd9\x31\x14\x5b\xa7\x29\x5a\x1b\x41\xb9\x6b\x66\xc7\x50\x84\xca\x74\x04\xe2\x86\xa6\xa2\xeb\xbf\x58\xad\x92\x52\x58\x2b\x54\x9e\xa4\x25\x4f\xe6\xb8\x8a\x00\xfd\xeb\xee\xf6\x1d\x08\x55\xd5\x0e\x38\x73\x0c\x7e\x09\xab\xe0\x87\xb4\xe4\x3f\x00\xad\x8b\xb2\x10\x70\x26\x59\x9e\x28\x56\xa2\xad\x58\x8a\x11\x8e\x7e\x7e\x1c\xab\x32\xfa\x0b\xa6\x2e\x82\x54\x31\x57\x80\xd3\x60\xd1\x2c\xd0\x48\xb4\x16\xda\x05\xe3\xd0\x25\x53\x22\x43\x3b\x86\xdd\x8a\x41\x26\xe4\x14\x8d\x39\x56\x52\xaf\x4a\x54\x63\xc0\xbd\xe0\x54\x68\x56\xbb\x62\x60\xef\x68\x5a\x1b\xf1\xcd\xff\x00\x0f\x3f\xbf\xfd\xef\xc3\x14\xd0\x4a\x24\x85\x8e\xba\x61\x59\x08\x3b\x87\xbf\xbd\xbf\x81\x87\x7f\xde\xde\xdd\x4f\x45\x5c\xa0\xb1\x84\x30\x0a\xfa\x9f\xb7\x1f\xee\x6e\x6e\xdf\x4d\xc1\x9d\xe3\x2a\xf1\x9e\x1a\xf0\xab\xce\xc0\x15\x08\xb3\x39\xae\xa6\x7a\x35\x45\xe3\x26\xe3\x92\xf0\x08\x70\x65\x74\x59\xb9\x26\x0e\x22\x98\xd7\x1a\x56\xba\x06\x83\x4c\xca\x15\x2c\x99\x72\x7d\x44\x80\x2b\x84\xfd\x2b\xfc\x61\xf5\xe3\xbb\x3f\xbe\x81\x51\x9e\x5a\x9d\xc0\xd4\x2e\x3a\x92\x8b\x22\x2c\x1e\x7f\xbf\xa9\xf7\x12\x99\x45\x3a\x83\x0b\xc1\x11\x98\x02\x5a\x81\xca\x89\x34\x04\xa5\xd3\x73\x54\x53\x88\x2a\x31\x10\x93\x4f\x88\x68\x6b\x48\x9e\x32\x0b\x64\xda\xc0\x6d\x85\xea\x57\x0a\xb2\x09\x5c\x63\xe9\xea\xa9\x59\xd0\x2d\x81\x4f\x1c\x33\x56\x4b\x07\x0b\x26\x6b\x04\x61\x21\xaf\xd1\xba\xcf\x43\xbc\x6d\x46\x49\x94\x76\x49\xa6\x6b\xc5\x23\xcc\xbf\x6c\xa7\x1e\x50\xda\x81\x97\x06\xe6\xc0\x07\xe5\xa7\xf5\x7a\x46\x83\xcd\xe6\xf3\xec\x37\x15\x27\xac\x7d\xe2\xef\x68\x07\xe3\xe5\xa3\x4f\xf7\x5b\xc8\xde\x9f\x7d\xae\x3a\x86\x68\x24\x34\x0f\x53\xb5\x8b\x46\xc9\x4c\xad\x9c\x28\x91\x0a\x5b\xc9\x5c\x5a\x44\x58\x3e\x04\x31\xcf\xd3\x2c\x21\x2a\x5b\x61\x2a\x32\x81\x1c\x84\xea\x73\x3c\xd7\x68\xbd\xa3\x3d\x22\x2c\x85\x2b\x80\xa5\x3e\x74\xad\xae\x4d\x8a\x61\x2b\xf0\xab\x43\x45\xf9\xcd\xa3\xe2\x57\xd7\x2a\xdf\xc8\xd2\xaf\x61\x38\xb6\x35\xad\x11\x69\xc1\x54\x8e\xb1\x40\x68\x6d\x68\xa4\xe8\x04\xef\x99\xf3\xc8\x2c\x72\xa0\x13\x56\xe0\xb0\xc6\xcf\x52\xb3\x56\xb6\xae\x2a\x6d\xdc\xa8\xaa\x93\xdc\x2d\x82\xb3\x3b\x4c\xaf\xdc\x96\x05\xd3\x15\x0c\x52\x89\x14\xa5\x70\x89\xc8\x95\x36\x51\x0d\x6f\xd4\x82\x49\xc1\x5b\x0e\xbf\xc4\x33\xf9\x11\x29\xbb\xa7\x62\x03\x37\xc8\x9f\x6a\x95\x89\xbc\x6b\xb2\x86\x13\xe5\x3d\x59\xb8\x9b\x18\xa9\x5e\x35\xde\x08\x50\xf5\xb1\x8c\x83\x19\x93\x18\xa9\xdc\x92\xc8\xf3\x78\xc6\xb2\x25\x31\xf5\xe9\xf1\x24\xaa\xc6\x94\xa1\x7e\x77\xdf\x9e\xf5\x7a\x46\xc3\xcd\xe6\x02\x32\xa3\x4b\xfa\x3b\x44\xff\x66\x33\x89\x31\x6c\xd7\x18\x23\x89\xb5\x3b\x65\xd1\x9d\xc6\xd5\x39\x67\x8c\x6d\xc7\x8b\xeb\xf5\xac\xfb\xfb\x68\x2b\xd1\x98\x24\x47\xd7\x9e\xe2\xd8\x3d\xe4\x1f\x4c\xc8\x90\x5c\x72\x74\xfe\x18\xf6\x07\xb3\x5d\x1a\x88\xbb\xf2\xea\x3b\x6f\x91\xe2\x1b\xd2\x05\x8d\x19\x51\xa4\x56\x25\x33\xb6\x60\x52\x26\x52\xa7\x4c\xc6\x0a\x43\x2b\xb6\x45\x44\xce\x0a\xe4\x7e\x65\xa8\xb7\x76\x2a\x9b\x42\xb7\xd4\x66\x7e\x12\x9f\x50\x0e\x8d\xc2\xe1\x62\xd4\xd7\xac\x70\xd9\x43\x1e\xcd\x3f\xd7\x7d\xdf\x9f\xea\xb2\x92\x48\xfe\x6d\x6e\x88\x59\x2d\xe5\x6a\x2a\x51\xe6\xf7\x6b\x9c\x85\x0b\xde\x9c\xc2\xc0\x46\x64\x1d\x17\x7c\xa8\x15\x3c\x2c\xed\xbc\x69\x08\xdb\xf2\xfb\x40\x71\x60\xb0\xd4\x0b\x84\x8a\x19\x27\x7c\xff\x18\xe6\x90\x03\xb3\x16\xdd\xb0\xfb\xb7\x34\x4d\x99\x4a\x51\xc6\x95\xbd\xfd\x79\x06\x7f\x0f\x32\xd4\x12\x4c\xed\x36\xd4\x11\x5e\xff\xb8\x25\x7c\x8a\xdf\x77\xc8\x06\x3d\xbf\xc3\x34\xe8\xfb\xc9\x7c\x47\xfa\x6f\x72\x0b\xb5\x43\x52\x32\xc5\x72\xe4\x47\x18\xa7\x33\xe0\x18\xfc\x48\xa5\xcc\x09\xb4\x83\x06\x03\xaf\x0d\xe9\xd7\x30\x6d\xef\xf3\xf7\x0b\xc3\x25\x33\x2a\xf1\x17\x4e\x6a\xf8\x2b\x34\xa4\xe6\x40\xda\xa5\x4e\x60\x8e\x2b\xea\x03\x28\xd5\x2f\x99\x05\x83\xce\x08\x5c\x50\x7f\x42\x09\xc1\x83\xcd\x7a\x30\xfa\xc1\x37\x8b\x52\x82\xd5\x5a\xc1\x23\x92\x86\x06\x53\x46\xae\xa9\xc2\xed\x81\x6b\xef\x97\xda\x22\x08\x07\xba\x76\x96\xee\x12\x3a\x83\x7b\xc3\x16\xc2\xc2\x63\x2d\x24\x9f\x60\x0a\xd5\xa9\x1e\x3d\x31\x58\x49\x96\x46\xf7\xab\xb5\x48\x4b\xbe\x65\x94\x08\x7d\xe2\x7a\x3d\xa3\xe6\xd0\xad\x2a\xdc\x6c\x42\x9f\x18\x31\xe2\xa2\xb5\x82\xd4\x77\x0d\xa6\xc2\xe5\x0e\xa6\x75\xc8\x76\x0b\xfc\x7e\x11\x6a\x9b\x88\x92\x29\xce\x9c\x36\xab\x81\xd7\x0c\xd2\xbc\x93\xf3\x0c\x5b\x3b\x23\x2c\x34\x58\x51\x3e\xef\xac\x17\x23\xb4\x85\xae\x25\x27\xa7\x58\x74\x33\x08\x57\x97\xdd\xbb\x1f\x49\xfb\x11\xf5\xaa\xb3\xd1\x82\xdc\x5e\x5b\x7c\x43\x30\xf2\xce\x75\x1f\x36\xcb\xeb\xe2\xfb\x02\xee\xd9\x38\x0d\x9b\x86\x75\xef\x35\x29\xcc\xb7\xf7\xaa\xbd\x6b\x8d\x6b\xba\x0b\x2f\x54\x6e\x81\xec\xbc\x75\x85\xd9\xf6\x7e\x39\x96\xe7\xc9\xcb\x1c\x2b\x54\x1c\x55\x1a\x7d\x8c\x68\x45\xa1\x17\x0d\xa1\x14\x74\x98\xcd\x06\x78\xda\x94\x30\x89\xe9\x63\x2f\x7c\x0a\x57\xbf\xe4\x49\x65\x8f\x3e\xe3\x5e\x1f\xa4\x81\x82\x59\x78\x44\x54\x3b\xa5\xa6\xcb\x60\x63\x15\xf4\x80\x16\x94\x9f\x6b\x13\xeb\xbf\xaf\xf7\xd2\xf3\x41\x9d\x7e\xbf\x8e\xa0\xb5\xe7\x69\xed\x7e\x19\xbf\xb6\xb8\xd3\x3d\xfb\xa4\xb0\xc7\x7d\xfb\xb4\xf8\x1d\xef\xdd\x21\xad\xba\x0a\xac\x6b\xc5\x93\xa6\xb4\x26\xbe\xb4\xc6\x4f\x94\x44\x47\x41\xde\xa5\x87\x6d\x4d\x9a\xc2\xe4\x4b\x18\xed\x5b\x53\xc0\xe8\xfc\xa7\xb5\x31\x64\x46\x5b\x8b\x9b\x04\x14\x9e\x63\xc2\x98\x10\x98\xf5\x7b\x4d\xd6\x4e\xee\x2a\x28\xbb\xa5\x06\x99\xc3\x61\xdd\xfd\x17\x18\xf0\x92\x3b\x16\xf8\x57\x17\xff\xe9\x06\x4a\xb4\x96\xe5\x5b\xd7\x0b\x60\x8a\x37\x73\xa9\xe6\x61\x82\x06\x13\x6e\x40\xc1\x9f\x53\x54\xe2\x4f\x9c\xfa\x3d\x54\xf2\x7a\xf4\xd9\x73\x34\x65\x1e\xdc\xe1\xc1\x2c\xd6\x50\x6c\x25\xce\x09\xd9\xf2\x64\x9a\xf6\xe0\x8d\x1c\xe7\x83\xf8\xcf\x48\x92\x7b\x46\xbe\x24\xff\xc4\x64\x42\xc1\x95\x21\xf2\x44\xa8\x85\x9e\xc7\x92\x47\x7f\xbb\x0e\x62\xfe\x14\xd2\x32\x58\x16\xa8\xfa\x98\x73\x46\xe4\x39\x9a\x66\xea\xe5\xe3\xae\x6b\x22\x7d\xaf\xe2\xdf\xa0\x2d\x5b\x0c\x36\x90\xa1\xbf\xc9\xb4\x39\xd0\x86\xf9\xf7\x3b\x5a\xdf\x36\x95\x6d\x62\x69\xbe\x00\x51\xe6\xe8\x6a\xc9\xb8\x62\x22\x3c\xce\xf5\x0a\x3e\x43\x2d\x8f\x34\x4e\xe9\x9f\xfd\x6c\x52\x62\x49\xfd\xa1\x15\xdf\x62\x9c\x41\xe2\x4e\x7c\xf3\x6d\x7b\x58\xb6\xd3\x35\xf5\x4d\x22\x53\xfe\xd9\x80\xf6\xf1\x11\xdd\x92\x22\xeb\xf5\x4f\x7f\xf1\x3b\xf6\xe7\xd7\x3f\x4d\xd6\xc9\x89\x12\x75\x1d\xeb\x0a\x9b\xd9\x93\x94\x79\xf5\xca\x2b\xf3\xa7\x57\xf4\xef\x58\x1f\x49\x9d\x0f\xf9\x49\xea\xfc\x54\x27\x05\xad\x5e\x4f\xd5\xa8\x79\x36\x67\x8f\xd1\x8f\x77\xff\xee\x5e\x77\xbb\x36\xd7\xb6\x21\x2a\x57\xa1\x4c\x77\x18\x33\xb8\xc9\x95\xf6\x57\x54\x8a\x2a\xa5\x97\xb3\x91\x46\x3e\x2d\xfd\x0d\x4c\x1b\x97\x58\xc7\x5c\x1d\x4b\x3a\x97\x97\x97\x97\x57\x57\x57\x57\x5b\x0f\x4c\x5b\x8d\xda\x9d\x5f\x0a\x24\x40\x82\xc3\x74\x55\xfd\x28\x85\x2d\x12\x5b\x68\x13\x8b\x8c\xf7\x41\x06\x18\x54\x2c\x9d\xb3\x1c\x29\xed\x30\x30\x98\x0b\xeb\xcc\xc8\x37\xfc\x96\x40\xea\x68\xbd\x38\x88\x4f\x87\xbf\x65\xa0\x5b\x12\xed\xfa\xff\x7e\x9c\x2d\xed\x9c\xae\xca\xe1\xbf\x37\x9c\x7d\x3e\xfb\x7f\x00\x00\x00\xff\xff\xed\x04\x29\xef\xb0\x21\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 8624, mode: os.FileMode(420), modTime: time.Unix(1516044163, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

