// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x7b\x6f\x1c\xb7\x11\xff\xdf\x9f\x62\x60\x14\x70\x02\xc8\x67\x27\x45\x81\xc2\x80\x50\xb8\xb5\x9b\xa8\x89\x2d\x43\x8f\x06\x81\x23\xac\x79\xcb\xb9\x5d\xe6\x76\xc9\x05\xc9\xd5\xf9\x22\xdc\x77\x2f\x86\xe4\x3e\xee\x24\xee\x52\xe7\x18\xcd\x3f\x39\x8b\xc3\x99\xdf\x0c\xc9\x79\xee\xc7\x27\x00\x77\x4f\x00\x00\x9e\x0a\xfe\xf4\x15\x3c\xad\x4d\x91\x35\x1a\x57\xe2\x73\x86\x5a\x2b\xfd\xf4\xc4\xaf\x5a\xcd\xa4\xa9\x98\x15\x4a\x12\xd9\x5b\xb7\xf6\x04\x60\x77\x32\xc1\x41\xc8\x95\x8a\x30\x38\xa3\xa5\xb9\xfd\xa6\xcd\x73\x34\x26\xc2\xe2\x32\xac\xce\x71\xd9\x30\x2d\x85\x2c\x22\x5c\x7e\x09\xab\x51\x2e\x79\xcd\x33\x8e\x26\xcf\x2a\x25\x8b\x4c\x63\xa3\xb4\x8d\xf0\xba\x70\x8b\x06\x94\x04\x8e\x4d\xa5\xb6\xc8\x01\xa5\x15\x56\xa0\x81\x6f\xc4\x02\x17\x27\xf0\x81\xe5\x6b\x56\xa0\x39\x81\xd7\x39\xed\x33\x27\x70\xa5\x45\x51\xa0\x36\x27\x70\xd1\x56\xb4\x82\x36\x5f\x7c\x0b\xcc\xc0\x06\xab\x8a\xfe\xaf\x31\x47\x69\xdd\x8e\x5b\x27\xcd\x80\x90\x60\x4b\x04\xd3\x60\x2e\x56\x02\x39\x48\x56\xa3\x69\x58\x8e\x8b\x64\x5d\x94\x8a\x69\xf2\x1a\xac\x52\x15\x58\x15\x14\x39\x81\x56\xfa\x5f\xc0\x24\x07\xb3\x95\x39\xa8\x06\xe5\xa6\x14\x66\x0d\x4d\xd0\x09\x5a\x23\x64\x01\x0c\x6a\x26\xc5\x0a\x8d\x75\xc4\xaa\x21\xae\xac\x0a\xac\x6a\xd2\x64\x25\xaa\x9e\xfc\xd7\xd7\xef\x7e\x4e\xc1\x6c\x4a\xa5\xed\xf4\x01\x7c\xd0\xea\x56\x70\x34\xc0\xc0\xb4\x75\xcd\xf4\x16\x3c\x3d\xa8\x15\x6c\x4a\x66\x9f\x19\x58\x22\x8e\x8e\xe7\xcb\xcc\x18\x20\xcd\xda\xd1\xa0\x25\x5b\x96\x58\x35\x41\x34\x6c\x55\xab\x93\x4c\x48\xa6\x4a\xc7\x72\x8b\xda\x90\xec\x98\x7d\x84\xb4\x4e\xe1\x40\x07\xb2\xad\x97\xa8\x9d\x79\xcc\xda\x43\x9b\x96\xb5\xaa\x58\x91\xb1\x46\x64\xa5\x32\x31\xad\xbd\x4a\xaf\x3f\x9c\xc1\xa7\x1f\xcf\x2f\xaf\x3e\x25\x72\x9c\xc6\x3e\x62\xfa\xdf\xb7\x17\x97\x67\xe7\xef\x93\xf8\xb6\xb6\xcc\xd6\xb8\x8d\x30\xa5\x65\xa5\xc5\x1f\xee\x0f\xf0\xe9\xa7\xb7\xbf\xa6\x30\xcd\x51\xdb\x8c\xce\x25\xc2\xb5\x61\xb6\x24\x93\x92\xa1\x17\x44\xec\x0e\x31\x85\xb1\x92\x2b\x11\xf3\x54\x7e\xd1\xb1\x82\x6f\x38\xae\x58\x5b\x59\x10\x06\xfe\xf2\xe3\xf9\xbb\xb7\x2f\x16\x1b\xb3\x6e\xb4\x6a\xcc\xb7\x29\x56\xa9\x2a\xb5\xc9\x02\x8f\x98\x7f\x75\x44\xd0\x13\xcd\x73\x1d\xde\xf7\x94\x5d\x7a\x9f\xd2\x3b\x82\x04\xd6\x42\x5a\xd4\x8c\xdc\x5f\xcc\xe6\x1e\xed\x88\x0e\x1a\xad\xea\x26\x09\xf8\x1a\xb7\xc9\xc7\xb9\xc6\x6d\x2a\x68\x6f\xe5\x9a\x49\x56\x20\x9f\x84\xdd\x68\xf5\x3b\xe6\x76\x08\x16\x56\xc1\x12\xa1\x66\x7a\x8d\x1c\x3a\x0e\xf3\x12\x3b\xa7\x31\x63\xff\x3d\xdf\x92\xc0\xb6\xf7\x89\x11\xbe\xc3\xfa\x3c\xaf\xa0\xea\x0c\x42\x83\xfa\x16\x75\x85\xc6\x74\xb6\x49\x60\x6d\xac\x16\x51\xce\xde\xd0\xad\x41\x4d\x57\x5a\x48\xe4\xa0\x5b\x69\x45\xdd\xfb\xc2\x04\x09\x56\x15\x45\x85\x19\xf9\xf1\x88\x98\x2b\x47\x01\x3f\x92\xa7\xaf\xd1\x18\x56\xa4\xdf\x94\x5b\xd4\x4b\x65\x62\x46\x0e\xab\xa0\x5a\xdb\xb4\x53\xe6\x70\x6e\x22\xab\x85\xa1\x48\xe2\x1c\x60\xdc\xff\x5d\x95\x08\x44\x41\x17\x2f\xf7\x4e\x90\x2e\xb8\x30\x20\x95\x05\xcf\xaa\xd5\xc8\x17\xbf\x4d\x99\xe7\x40\x62\x23\x26\x62\x03\x49\x24\x27\x4e\x24\x5f\x26\x67\xee\x56\x92\xa4\x9e\xe6\x38\x51\x41\x95\xa9\x44\xf6\x50\x9f\x8f\x77\x77\x0b\xfa\xbd\xdb\xdd\x9c\xc0\x4a\xab\x1a\xee\xee\x16\x46\xb5\x3a\xc7\xdd\x2e\x49\xa6\x3f\xb0\x39\x99\x44\xd6\x9d\x95\x41\x7b\x9c\xac\xde\x3c\x73\xd2\xf6\xec\x48\x2a\xf6\x7f\x38\x5e\xcf\x46\x14\x9b\x8c\xb9\x1c\x3e\xb3\x6a\x8d\x72\x56\x65\xda\x01\x7e\x07\xb8\x1d\xc7\x29\xdf\xca\x9a\x69\x53\xb2\x2a\xab\x54\xce\xaa\x88\xc4\xeb\x8e\x0a\xce\x1b\x94\xbf\xb8\xec\x23\x78\x0c\xe3\xe5\xb9\xdd\x70\xcb\xaa\x16\x4d\xa2\x40\x89\x76\xa3\xf4\xfa\x68\x91\x2e\xbe\x49\xb4\xc0\x2c\xa9\xdb\xea\x6a\x46\xd7\x21\xd4\x66\x39\x93\x39\x56\x55\x34\x14\x9d\xff\xb4\x80\x7f\x79\x1a\x4a\x41\x87\x9d\xa9\x02\x56\x4c\xc4\xb9\xbf\x19\x62\x3e\x17\x3c\xbc\xc5\xba\xa9\xd0\x22\x98\x96\x8e\x74\xd5\x56\xd5\x76\x01\x17\xad\x84\x4f\x7d\x32\xda\xd7\x1d\x9f\x28\x2c\x68\xac\x15\x45\x76\xa6\xad\x60\x55\xb5\x1d\xf2\x78\x66\x0c\xda\xe9\x53\x18\x21\xf5\x45\x41\x66\x2c\xb3\x6d\x2c\xfd\x79\xfe\xfc\xf9\xf3\xd3\xd3\xd3\xd3\xd1\x59\x8c\x74\xb8\x74\x5b\x81\x08\x88\x30\x49\xaa\x2b\x67\x91\xa7\x98\xa8\x33\x0d\x87\x50\x03\x7b\xe3\x4c\x5f\xb2\xe3\xcf\x7a\xbc\x37\x5d\xc8\xe4\x79\x5f\x8f\x28\xa7\x4f\x3c\x59\xde\x9c\xfd\xf6\x44\x1e\x61\xc1\x2e\x2d\xca\x5c\x0d\x36\x9f\xce\x5e\xbb\x52\x8d\xbc\x21\xa5\x2d\xbb\xdd\x0d\xac\x94\x4e\x7d\x37\x07\xc2\xc6\x8a\x3e\x4a\x5c\xf2\xd1\xb9\xdc\x72\x9b\x75\x2f\x66\xa6\xb9\x72\x77\x47\x99\xee\x6e\xd7\x3b\x7b\x92\x57\xb2\x50\x3e\x8f\x4d\xda\xbf\xc1\x74\xe9\xf1\x6e\xcc\x9b\x6e\x1d\x1e\x04\xb0\x58\x4c\x54\xc2\x41\x44\x67\x90\x3f\x53\xc5\x81\x67\x8a\x92\x1d\x75\x5c\xcd\xeb\x81\xe2\x08\x45\x39\x36\x28\x39\xca\xfc\x31\xf6\x1c\x36\x8d\x05\x3d\x4e\xce\xf0\x0a\xa3\x46\x7d\xf3\xa0\x98\x2f\xb9\x39\x0f\xa3\x20\xdf\xd3\xea\x58\xea\x37\xf2\xa4\x6a\x15\x51\xfd\xff\x18\x86\x3a\x7d\x1e\x77\x51\xbe\xec\x04\xef\x7b\xd2\x3f\xe7\x0c\x13\x9f\x46\x0c\xc9\xf4\x39\xee\x79\xf4\x23\x4f\x72\xc6\x09\x53\x65\x7d\x6c\x58\x73\x88\x7c\x90\xe9\x2b\xf7\x29\x2c\xc0\x5b\x4d\x27\x19\xc4\x8e\x43\xc5\xd7\xbb\x6f\x9d\x8e\x2b\xd5\x4a\x9e\x05\xbc\xc1\x55\x45\x2f\x40\x85\x36\xea\x9b\x36\xa5\xc8\x4b\xd8\xb8\xb6\x34\xe1\xe2\x3e\x35\xb5\x25\x42\xde\x6a\x4d\x86\xe9\x14\xec\xfa\x1a\x2e\x68\xf9\xdf\xc4\x81\x19\xa7\x0b\xd9\x2f\x39\x7c\xf9\x6e\xce\x4c\x71\xf9\x9b\xfc\x50\x21\x33\xae\xf7\x73\x2b\x38\x3a\x50\x44\x4f\xd8\x5d\xb8\xec\x93\xb9\x57\x30\x2f\x6b\xb2\x74\xbe\x27\x8b\xc9\xc3\x52\xda\xd5\x28\x09\x82\x42\xdf\x35\x72\x18\x0a\xb6\xaa\x05\x8d\xee\xe4\x37\x4c\xda\xa1\x85\x06\xb6\x14\xe6\x1f\xf0\xcd\xf6\xc5\xfb\x6f\x13\xe4\xcc\x55\xcc\xf7\x55\x1a\x15\x7e\x1f\xbb\x96\xa3\x2b\x78\xa8\xf2\x2a\x5a\x34\xf6\x26\x41\x6e\x77\xc8\x8f\xd2\xb0\x1f\x38\x24\xea\x18\xe0\x65\xa1\x93\x1e\xeb\x80\xfb\x55\xa7\x17\x8c\x9a\xa8\x1a\x5d\xcb\x89\x9f\x00\xab\xc6\xe5\x57\xff\xae\x09\x8e\xee\x77\x04\x21\xc0\x34\xf6\x8f\xf1\xc5\xe0\x0a\x81\x0b\x8d\xb9\x0d\xee\x51\xfb\x66\xff\xdc\x64\xe1\xed\xc5\xc5\xf9\xc5\x65\x04\xf7\xe9\xe1\x7f\xe0\xc9\xe1\xde\xc2\xe9\xe9\x44\x82\xa2\xf5\xbe\x27\x5e\x4b\xb5\x91\x99\xdd\x36\x13\x91\xb4\xf3\xb8\x44\x45\xa6\x0a\xbb\x16\x30\x8c\x0c\x40\xc9\x6a\x0b\xa6\x6d\xfc\xfc\xeb\x85\xeb\xd5\x2f\xcc\xd6\x58\xac\x61\x29\x24\x17\xb2\x30\xa0\x34\x14\xc2\x96\xed\x72\x91\xab\xba\x9f\x78\x4c\x67\x54\x5a\x77\x59\x55\xae\x91\xd9\x18\x4c\x37\x8f\x04\x47\xb2\xe7\xb7\x36\xc2\x96\xe0\x06\x99\x5d\x37\xee\x15\x2d\xa2\xd6\xbb\x9d\x1b\x4e\xf9\xb5\x5c\x71\xbf\x40\x3f\x66\x2a\xea\x11\x24\xef\x4c\x27\x21\xf1\x7b\xae\xf4\x2b\x41\x5a\x21\xf2\x4c\xc8\x5b\xb5\x8e\x01\xfa\xb7\x8b\x6b\xf4\xb4\x3c\x99\x73\x8e\xb4\x0d\x36\xa5\x1b\x89\x05\xa4\xd6\x8f\x23\xc3\xd2\xd7\x41\xbb\xc6\x6d\xdf\xc7\xab\x99\xe4\xcc\x2a\x3d\xd5\xa3\xec\x69\x5c\xcb\xeb\x63\x67\xcc\x1b\xba\x8f\x81\xcf\xac\xcc\xbe\xe2\x92\xca\xfa\x68\x18\x11\xf8\x6e\xdc\x1e\x77\xc1\xdc\x51\x03\xa3\x77\x6f\xcb\x71\x09\x36\x2b\x94\x1e\x3d\x69\x5a\x33\x9b\x97\x13\x0a\xf6\xd7\x83\x36\x70\x27\x82\x77\x01\x57\xc8\xc3\x89\x89\x5f\xef\xca\x40\xae\xd0\x37\x37\x9d\x10\x77\xac\xce\xbd\x11\x51\x3d\x62\xb2\xd7\xf6\xf7\xab\x9d\x1a\xd3\x4a\x84\x1e\x14\x5d\x2f\x56\x89\x98\xd9\xce\xfc\x2a\x3d\xf3\x70\x24\x7d\x87\x9d\x64\x85\xdf\x84\x65\x98\xb6\xee\xa1\x52\xda\x61\x67\x6e\x2e\xee\xf6\xf8\x9f\x29\x76\xee\x20\xce\x98\xfa\xe2\x31\x80\x0e\xec\xea\x9e\x82\x47\xf4\xcc\x80\xef\x34\x7a\x53\xe2\x67\x8b\xd2\x74\xa0\xf1\xb3\xed\x8a\xf3\x2f\x51\xc5\x64\x05\xc6\xf2\x9c\xe1\x29\x17\xe8\xe7\xb9\xc1\xf7\x0e\x53\x8d\xd0\x30\x1c\x22\x19\xc5\x37\x91\x8f\x9e\xef\x2c\x90\x56\x57\x8f\x3f\x72\xdf\x95\xa4\x58\xb1\xdb\xc1\xf5\xc5\xcf\x4e\x79\xd7\xa7\x74\x77\x90\xfe\x45\x36\xf3\x04\x37\x7e\xba\x9d\x02\xa4\x66\xd5\x4a\xe9\x3a\x9a\x98\xbf\xeb\xd6\xa7\x10\x2c\xe0\x4a\x6f\x81\x15\x4c\xc8\xc5\x62\x56\xec\xef\x46\xc9\xde\x4b\xe5\x35\x9f\x98\x23\xff\xe7\xf2\xfc\x3d\x08\xd9\xb4\x16\x38\xb3\x0c\xde\x05\x6b\x3c\xcb\x6b\xfe\x8c\x7c\xd6\xb4\x24\xd6\x88\x5e\xd0\x06\x97\x99\xbf\x2c\xb1\x6f\x0a\x1e\xb8\x54\xdd\x78\x83\xc1\x06\x97\xe1\xda\x9d\xb8\xb9\x84\x23\x6b\x04\xd1\xe4\x4c\xfa\x40\xbd\x44\x1f\x2a\x91\x87\xcf\x0d\x86\x4d\x0b\x08\x29\x60\xdb\x70\x66\xf1\xc0\x67\x58\x05\xb9\x92\xb7\xa8\xed\x81\x78\xab\xc6\x3c\xe6\x0c\x3b\x56\xf7\x28\x55\xbb\xcb\xe6\xae\xf8\x1e\xc4\x24\xa5\x97\xcc\x20\x07\x25\xc7\xee\xe6\x3e\xab\x59\x53\x08\x99\x57\x2d\xc7\x03\x78\xcc\xec\x9d\x42\xd4\x18\xbf\xbc\xbe\x78\x7f\xf6\xfe\x87\xf4\x84\xaf\xdb\xf0\xb8\x94\x6f\xc3\xb4\xcc\x72\x55\x53\x04\xcd\x34\xda\x68\x98\xbd\xa0\xb5\xae\xc3\x98\xd7\xdc\xe9\xb2\xb2\xa8\x7d\x88\x7f\xe5\x7d\x1b\x39\x8e\x9b\xa9\xf3\x0d\xf2\xdc\x88\xe7\xd1\xce\x63\xfc\x89\xc3\xb8\xd1\xc9\xd1\x62\x6e\x67\x5a\x0c\x4e\x32\x25\x16\x1c\x1b\x8d\x39\x9d\x74\xa6\xb1\xa9\x58\x1e\x75\x1a\x14\x79\x49\x8e\xaa\x78\xc8\x27\xdc\x44\xcd\x5f\x8c\x3d\x4f\xe5\x31\x6d\x44\x55\x81\x51\x4a\xd2\x6d\x1a\xc4\x9c\x40\x13\x6e\x8a\xf1\x59\x95\x2b\x97\x71\xb3\xc7\xd3\x58\x64\x89\x0a\x04\x73\x1c\x93\x0f\x99\x52\xb5\x15\x27\x78\x06\xed\x02\x7c\xcf\x78\xbf\x72\x23\x6a\xf7\xcb\x77\x8f\x92\x10\x39\xfa\x99\xf3\x24\x5c\x5e\x02\x85\xbe\xfb\x79\x1a\xf9\x27\xb7\xff\x31\x22\x29\x57\x33\xec\x76\xf2\x04\xe7\x84\xba\xfd\xdd\xa9\x76\x2d\x8a\xee\x03\xa8\xf1\x97\x4f\xf3\xc0\x2a\x51\x0b\x9b\x89\x42\x2a\x1d\x85\xd4\xdd\xeb\xe0\x58\xdc\x16\x87\xca\xfd\x3a\xcc\xc5\x84\x81\xc0\x2e\x55\x7a\x5e\x32\x59\x20\x5b\x46\xbf\x57\xf9\xb9\x97\xd8\x27\x7f\xa6\xd3\xbb\xda\xfa\xee\x54\xcf\x63\x01\x67\x24\x9e\x12\xe8\x84\xbb\xe0\x10\x98\xac\x52\x45\x66\xc4\x1f\x31\x00\x95\x2a\x2e\xc5\x1f\x48\xb6\xf5\x1b\xf6\x34\x1e\xae\x28\x93\x6e\xa0\x49\xc5\xc6\x12\xed\x06\x51\xc2\x4b\x57\x54\x7c\xf7\x32\x19\x4a\x8d\xb5\xd2\xdb\x29\x34\x9e\xe2\x58\x40\xdf\x7d\xff\x77\x07\xe9\x6f\xdf\x7d\x9f\x8c\x89\xf2\x2f\xd5\xc6\x92\xb7\xb0\x7a\x14\x98\x97\xde\x3e\x7f\x7d\x49\xff\xcd\xe3\x71\x75\x78\xd6\x68\xd5\xa0\xb6\x02\x63\x0d\xdf\xce\x0d\x8e\xfc\x95\x6f\xef\x59\x2d\xb0\x6f\xf0\xf9\xa2\x7e\x60\xd6\x35\x02\x1f\xf6\x89\x9d\x4b\xe4\xca\x5d\x38\xf2\x8c\xc2\x82\x6a\xad\x11\xdc\x1d\xc4\x95\x66\xb7\xc2\xc0\xb2\x15\x15\x9f\x6e\x02\x38\x55\xbc\x3b\xd0\x74\x6d\x93\x5c\x41\x7f\xfb\xf7\x1c\x82\x3c\xf0\xea\xc1\xda\xae\xb5\x71\x77\xb7\x08\x7f\xed\xcc\x4d\x15\x92\x90\xa1\xd0\xa5\x7f\xb0\x7c\x26\x6d\x76\x50\xbb\x5a\xc4\x3f\xb2\x98\x9b\xe8\x4a\x91\x40\x45\x09\xc5\x41\x55\xf2\x40\x9a\x12\x2d\x3c\x8e\xaa\x36\x1c\xda\xd0\xcb\x70\x85\x2a\x7e\x16\x26\xfa\x3d\xe0\xbd\x32\x75\xcf\xc5\xb0\x4a\x23\xe3\x5b\xf0\x2c\xfa\xdc\xc9\x60\x85\xb9\x05\x26\x95\x2d\xd1\xf7\xc0\xe6\x21\x75\xad\xa1\xd9\x4a\x3d\x84\xc2\x83\xaa\xb6\xcb\x1a\x72\x25\x2d\x73\x5f\x7a\x49\x95\xd6\x6e\x72\xd2\x47\xa3\x00\x67\x94\x14\x10\x0f\x36\xca\x43\xc4\x39\xac\xdd\xe9\x69\x0d\x4d\x85\x40\xb4\x9f\x79\xc6\x30\xbe\x79\xfb\xcf\xeb\x1f\x92\x13\x46\x47\xfd\xb8\x6c\x91\x2f\x8b\x61\xa6\xe8\x47\xd3\xb3\x93\x45\x47\xf5\x6a\x72\xf8\xb3\x2c\xc6\xb3\xae\x49\xbe\xe3\x89\x57\x1a\x67\x83\x4c\xe7\x25\xf1\x0d\x23\x86\xcc\x77\x5f\xe3\x1d\xa5\xcb\x6e\x47\x3f\xa0\xe8\x77\xdc\x9b\xaf\x0f\xde\x63\x26\x3e\x0e\xa6\x1b\xae\xce\x9f\x7d\x6d\xe6\xaf\xcc\x93\x9b\x27\xff\x0b\x00\x00\xff\xff\xc3\x5d\x41\x8d\xd4\x31\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 12756, mode: os.FileMode(420), modTime: time.Unix(1520285706, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

