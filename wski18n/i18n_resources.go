// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x4d\x6f\xdb\x38\x13\xbe\xe7\x57\x0c\x72\xc9\x25\x30\xda\xbe\x78\x81\x45\x6f\xc1\xf6\x63\xb3\x6d\x92\x22\x49\x5b\x14\xdd\xc2\xa1\xa5\x91\xc4\x46\x22\x05\x92\x4a\xea\x1a\xfe\xef\x0b\x92\x92\xec\xb8\x12\x29\xc9\xb2\x13\x14\xbb\x97\x55\x2c\xce\xf3\xcc\x0c\x87\xe4\x0c\x35\xfd\x7a\x00\xb0\x38\x00\x00\x38\xa4\xe1\xe1\x4b\x38\xcc\x64\x3c\xcd\x05\x46\xf4\xc7\x14\x85\xe0\xe2\xf0\xd8\xbe\x55\x82\x30\x99\x12\x45\x39\xd3\xc3\x5e\x9b\x77\x07\x00\xcb\x63\x07\xc2\x3d\x11\x8c\xb2\xb8\x05\xe3\x73\xf9\xd6\x87\x22\x8b\x20\x40\x29\x5b\x50\xae\xca\xb7\x3e\x14\xca\x22\xde\x02\x71\xaa\x5f\xb5\xca\x7f\x97\x9c\x4d\x33\x2a\x25\x65\xf1\x34\xc8\xc2\xe9\x2d\xce\x5b\x80\xfe\xbe\xba\x38\x07\xca\xf2\x42\x41\x48\x14\x81\x33\x2b\x05\x47\x41\x16\x1e\x81\x96\x6b\x65\xd1\xc0\x51\x4a\xe2\x29\x23\x19\xca\x9c\x04\xd8\xc2\xb1\x7a\xef\xc7\x22\x85\x4a\x1c\xea\xea\xd7\x5c\xd0\x9f\xe6\x07\xb8\x79\xf7\xfa\xcb\x4d\x17\xd0\x9c\x4e\x13\x2e\x55\x0b\xe8\x7d\x42\xe5\x2d\x9c\x7c\x38\x85\x9b\xbf\x2e\xae\xae\xbb\x22\xde\xa1\x90\x1a\xc1\x0b\xfa\xe9\xf5\xe5\xd5\xe9\xc5\x79\x17\xdc\x5b\x9c\x4f\x23\x9a\xb6\x79\x32\x27\x2a\x01\x1e\x81\x4a\x10\x26\xb7\x38\x07\x33\xd6\x0f\x1b\xa0\x50\x9d\x71\xf5\x60\x0f\x70\x46\x18\x8d\x50\xaa\x29\xe3\x6a\x1a\xf1\x82\x85\x2d\xc0\x67\xe5\x40\x83\x07\x8c\x2b\x30\xa3\x81\x28\x30\x9c\x8b\xc5\x44\xff\x7f\xb9\x9c\xfc\xc3\xda\xe9\x0a\x13\xc8\x35\x69\x88\x79\xca\xdb\x22\xe4\xa3\x09\xdf\x1a\x17\x22\x2e\xc0\x0a\x64\xc8\x54\x1f\x9a\x82\xf5\x26\xaa\x44\xbc\x54\xa2\x60\x8a\x66\xa8\x17\x69\x46\x54\x90\xb4\x70\x5c\xda\x61\x9a\xa5\x94\x58\x2e\x41\xe6\x18\xd0\x88\x62\x08\x94\x41\xa5\x2d\x84\x1c\xa5\x71\xb0\xc1\x83\x7b\xaa\x12\x20\x81\x59\x26\x92\x17\x22\x40\x3b\x05\xf8\x43\x21\xd3\x61\xab\x31\xf1\x87\x2a\x15\x2f\x47\x2e\x16\x13\xfb\xe4\x99\x90\x4a\xfd\x20\x21\x2c\xc6\xb6\xc9\xaf\xb4\x2f\x47\x81\xe2\x0f\x0d\x99\x11\x89\x21\x70\x66\xc2\xce\xa9\xeb\x16\x2a\x16\x4c\x16\x79\xce\x85\xf2\xaa\xd9\xc1\xc9\xd4\xba\xb8\x46\x34\x8a\xad\x69\xdf\x55\x39\x3b\x68\x9a\xd2\x8c\xaa\x29\x8d\x19\x17\xad\xda\x9d\xb2\x3b\x92\xd2\xb0\x62\x30\x22\x9a\xc7\x3c\x2c\x97\x9b\xea\x95\x60\x4e\xf6\x80\xb3\x88\xc6\xf5\x01\xa1\xf7\xd4\xf6\x1d\xf7\x5a\x5b\x57\xa8\x04\x99\xa2\x81\xdd\x76\xf5\xc6\x53\x7a\xc2\x42\x15\x7d\x19\x73\xea\xd8\x8e\x35\xa3\xde\x37\xf5\x90\xed\x78\x7c\x07\x93\x66\xaa\xc7\x0c\xa3\x2a\x4d\x71\x9d\xd5\x9b\xf6\x2c\x16\x13\xfd\xb8\x5c\x1e\x43\x24\x78\xa6\xff\xb6\x51\xef\x09\x9a\x8a\xd1\x4e\x97\x8f\x51\x0f\xab\x66\x4a\xa2\x1a\xc6\x55\x3b\xc7\xc7\xf6\xc0\x8b\x8b\xc5\xa4\xfe\xbb\x97\x95\x6f\x08\x4d\xed\x3e\x11\xa3\x32\xeb\x6a\xb5\xd2\xca\xa5\x29\x2d\xda\x45\x8e\xec\xb3\x39\x61\x25\x8a\x3b\x1a\xe0\x4b\xb3\x9f\x09\x61\xd1\x9b\x15\x1d\x0d\xbe\x51\xf9\x2b\x45\x84\xd2\xe0\x05\xcb\x88\x90\x09\x49\x0d\x8c\xcd\x03\xb4\xfb\x2c\x74\xca\x03\x92\xc2\x1d\x49\x0b\x94\xed\xaa\x0e\x04\x6b\x54\xec\xa3\x13\x82\x32\x85\x82\xa1\x6a\xd7\xa5\xbb\x7c\x23\xfd\xab\xfa\x44\x84\x80\x67\x79\x8a\xda\xdd\x65\x82\x1c\x15\x69\x3a\x6f\x67\xee\x24\xda\x48\xfa\x96\x2b\x30\xc5\x00\x04\x02\x89\xd2\x27\x75\x4e\x82\x5b\x12\xa3\x3d\x19\xed\xbb\x0c\xa5\x24\xf1\xda\xe4\x02\x61\x61\x25\xc7\x43\xfb\x42\x3f\xb8\xa2\x6a\x27\x54\x5d\x8d\x2a\x4f\x85\xdf\xcb\xa6\x9c\xee\xc3\xa0\xed\x68\xba\x1a\x23\x8a\x74\x2f\x21\xb7\x25\x8f\xc7\x1c\x89\xca\xb0\x98\x3d\x53\x11\x55\x48\x5d\x2d\xec\xd8\xb6\x9d\x90\x76\x9d\x37\x25\x68\x1c\xa3\xd8\xc7\xd4\x6d\x4f\xd5\xd7\xa8\x08\x31\xdc\xa7\x65\x5b\xf2\xf5\xdd\xe1\x67\x94\x85\xfa\xef\x3d\xee\x8a\xdb\x53\xfa\xce\x4e\x1e\xe9\x32\x16\x59\x88\x2c\x98\x6b\xd1\x10\xf3\x73\x62\x6a\x95\x90\x86\x65\xe6\x6a\xcf\x48\x7d\x44\xd6\x27\x24\x5c\x16\x0c\x6e\xee\xe5\xad\xad\x4c\xeb\x12\xf5\x46\x67\x17\x02\x33\x7e\x87\x90\x13\xa1\x28\x49\xd3\x79\x59\x29\x63\x08\x44\x4a\x54\x8e\x04\xe5\x29\x68\xe6\x70\xd9\xda\xd9\xb8\x58\x4c\x78\xa1\xf2\x42\x17\x4b\x93\xc9\xc4\x69\x8f\x43\xcc\x43\x66\xb6\xa5\xbe\x54\x8d\x42\x1e\xa2\x07\x6b\xaa\x2f\xa1\x53\xd8\x43\x5c\x85\x7a\x5f\xce\x36\xb9\x8e\x74\xd5\xca\x1a\x4a\xdb\x26\xef\xa1\x7f\x18\xd1\xbd\x98\x1d\xa2\x8d\xa4\x17\xef\x26\xf0\x27\x61\x01\xa6\x69\x29\xbe\x76\x83\xd4\x4c\xe6\x14\xf1\x90\x68\x81\xcd\x7b\x2a\x1f\x4b\x93\x4c\x4b\xad\xb1\x1a\xe4\x5e\xfd\x8e\x72\xa3\x07\x84\x6f\xd7\xb4\xdb\xc8\x80\x7a\xa3\x4d\xf0\xe9\x5a\x5d\x21\xfc\x1a\x82\xab\xfd\xb8\x3d\x7c\xbb\x4a\xfb\xed\x1f\x7a\x1c\x74\x73\xcd\x16\xe8\x9e\x34\x22\xc4\x14\xf7\x53\x53\x8d\xc7\xd4\xd5\xa4\x1d\x67\xea\x63\xf1\xfc\x57\x85\x6c\xf8\x73\xf7\x55\xc8\x88\x54\x7d\x8d\xda\x71\x15\x32\x36\x5f\x57\xf3\x76\x7f\xcf\x34\x22\x55\xa3\x51\x9f\x4f\x2e\xcf\x4f\xcf\xdf\xbe\x84\xeb\x04\xe1\xc8\xde\xda\x1e\xc1\x97\x93\xb3\xf7\xf6\x42\x99\xd5\x2e\x45\xa6\xa8\x32\x57\xcc\x21\xe6\x02\x03\xa2\x30\x9c\xc0\x87\x14\x89\x44\x28\x24\xc2\x91\x76\xfa\x11\x50\x26\x15\x12\x9d\xbb\x43\x88\x32\x10\x74\x66\x3f\xac\x94\x5f\x59\xec\x77\x05\x47\xb5\xf1\x98\x1a\x75\x9d\xf7\x2a\xd1\xdc\xe3\xfc\x8f\x47\xd9\x96\x47\x35\x25\xb2\x09\x91\x30\x43\x64\x0f\x72\xa3\xba\x3e\x73\x66\x57\xc3\xe0\x1a\x95\xfb\xe0\xc8\xef\x87\x6a\xb8\x1d\xa6\x53\xcd\x31\xd5\x1b\x41\xad\xeb\x72\xb9\x8c\xa1\xd6\x30\x2c\xa7\x5a\xbf\xd4\xa7\xdb\xea\x36\x00\xb0\x51\xc1\xcb\xcd\x8a\x7d\xa8\x62\x03\x80\x1a\x15\x3a\xf9\xf5\xb6\x62\xa8\x4a\x83\xa0\x3a\x6c\x1c\xab\x0c\xbd\x19\xae\x2a\x2c\xbb\xef\x1d\xfd\x10\x7d\x0b\xa0\x3c\x3a\xd6\xd1\xca\xea\xaf\x53\xcc\xbb\xc5\x9d\x51\xa4\xb3\xc8\x5e\xb4\x1d\x04\x3d\x51\x52\xb5\x27\xf4\x20\xed\x28\xec\xf9\xa2\x4b\xd9\x1d\xbf\x45\x93\x46\xdb\x44\x2c\x41\xb6\xa7\x9c\x70\xcf\x4a\xb8\x73\xaa\x33\xc2\x42\xa2\xb8\x98\x43\x44\x31\x0d\xa1\xda\xd4\x3f\xd9\x6e\x32\xc8\x0a\xa9\x60\x86\xba\xee\xe8\x90\x0f\xf5\x44\x73\xab\xb6\x29\x5c\x75\xbb\x90\x3b\x9b\x1b\x69\xb7\x05\x85\x10\xba\x0e\x5f\x5d\xdb\x96\x6d\x70\x1d\x94\xdd\x1a\x7f\x98\x67\xdf\xd3\x00\x99\xc4\x91\x3c\xdb\x82\xd6\xcd\xb3\x95\xf0\xae\x3c\x3b\x18\xdf\xad\x7e\x05\x6b\xda\x8e\xcc\xe3\xe9\xab\xe5\xb2\x62\x21\x60\x3b\x94\x38\xc3\x0e\xaa\xf6\xc2\x6a\xee\x4f\xc1\x8c\x8b\xf9\x15\xfd\x89\xba\x12\x37\x7d\x50\xf2\x41\x1b\x94\x4c\x78\x91\x86\x7a\x72\x08\x33\xfd\x09\x7a\x51\xcf\x50\xdd\xeb\x1d\xeb\xf9\x8b\x3f\xcc\xf2\xfd\xff\xf3\x17\xed\xda\x8e\x4a\xd1\x68\x84\xa2\x19\xf2\x42\x0d\x82\x7f\xf6\xcc\xc0\xff\xef\x99\xfe\xaf\xdd\x88\x51\x29\x1a\x8d\x48\x79\x3c\xd4\x47\x16\xff\xb9\x43\xfd\x91\xc0\x7d\x91\x6d\x90\xeb\x86\x3a\x66\xd3\x8a\xba\x17\x2c\x21\x2c\x26\xb3\x14\x75\x9d\xa8\x38\x30\x7e\x7f\x0c\xf7\x09\x35\x0d\x96\x69\xaa\xe9\xd7\x1a\xee\xbc\x91\x3f\x22\x57\x73\x52\x53\x76\x62\x55\xad\xbc\x24\xcf\xd3\xaa\x69\x4f\x1f\xdf\xb9\x49\x9b\xec\x2d\xb7\x6d\x1d\x5c\xbb\x59\x35\x2d\x97\x44\xc1\x57\x9b\x60\x95\x3f\xbf\xa1\x3a\xd3\xf8\xb6\xd9\x5e\xaa\x3a\x31\x55\xdd\xbf\xcb\x8d\x3e\xc5\x75\xaa\xea\xc7\x92\xa8\xed\x7e\xfa\xb7\x30\xcd\x1d\x8b\xeb\x44\x0d\xfa\x9b\x20\x90\x9c\x33\x1d\x09\xab\xcb\x8d\x63\xc8\x57\x97\x1b\xb9\xe0\xdf\x31\x50\xd5\xed\x46\x87\xa0\xdc\x0d\x69\x2f\x43\x1f\xfa\x6e\x2f\x66\x8e\x42\xd9\xf1\x53\x88\xed\x5a\x33\xf7\x52\x14\xa5\xf3\x2b\x05\x84\x85\xd0\x89\x68\x46\x18\x89\x31\x5c\xff\xae\xb7\xa3\xcf\xf8\x4f\x56\xdd\xe6\x6a\xc2\xfc\xdb\x81\xe6\x7e\xeb\x72\xab\x34\x17\x7f\xd6\x06\xd3\x9e\xb8\x9e\xf9\x54\x73\xb8\x58\x4c\xca\xc7\xa6\xc5\x5b\xe3\xcc\x70\xfd\xb3\xa7\x6b\x8b\x7f\x7c\xbd\x3c\xee\x52\x4d\xe5\xea\x93\x70\xd8\xe3\x69\xe6\x71\xd9\x5a\xdb\x42\xf9\xf8\x54\x5c\xf6\x78\x9a\x69\x97\x1d\x7c\x3b\xf8\x37\x00\x00\xff\xff\xd9\x65\x43\x6c\x82\x37\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 14210, mode: os.FileMode(420), modTime: time.Unix(1515210780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

