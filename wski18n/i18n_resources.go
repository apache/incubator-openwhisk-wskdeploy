// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x6f\x6f\x1b\xb9\xd1\x7f\xef\x4f\x31\xc8\x1b\x3f\x0f\x60\xa8\xc9\x15\x05\x8a\x00\x45\x61\xd4\x6e\xeb\xde\xc5\x36\x6c\xe7\x82\x43\x2e\x58\x53\xcb\xd9\x15\x4f\x5c\x72\x41\x72\xa5\xe8\x04\x7d\xf7\x62\xc8\xa5\xb4\xb2\xf7\x9f\x14\xa5\xe7\x57\x6b\x91\xfc\xfd\x66\x86\xc3\x99\xe1\xf0\xf3\x19\xc0\xfa\x0c\x00\xe0\x8d\xe0\x6f\xde\xc3\x9b\xc2\xe6\x49\x69\x30\x13\x5f\x13\x34\x46\x9b\x37\x17\x61\xd4\x19\xa6\xac\x64\x4e\x68\x45\xd3\xae\xfd\xd8\x19\xc0\xe6\xa2\x07\x61\xc9\x8c\x12\x2a\xef\xc0\xf8\x54\x8f\x0e\xa1\xd8\x2a\x4d\xd1\xda\x0e\x94\xc7\x7a\x74\x08\x45\xa8\x4c\x77\x40\xdc\xd0\x50\xe7\xfa\xdf\xac\x56\x49\x21\xac\x15\x2a\x4f\xd2\x82\x27\x73\x5c\x75\x00\xfd\xe7\xf1\xee\x16\x84\x2a\x2b\x07\x9c\x39\x06\x1f\xc2\x2a\x38\x4f\x0b\x7e\x0e\xb4\xae\x93\x85\x80\x33\xc9\xf2\x44\xb1\x02\x6d\xc9\x52\xec\xe0\xd8\x8d\x0f\x63\xb1\xca\xcd\x7a\xc4\xa5\x61\x6d\xc4\xef\xfe\x07\x78\xfe\xf1\xfa\x97\xe7\x31\xa0\xa5\x48\x66\xda\xba\x0e\xd0\xe5\x4c\xd8\x39\x5c\xde\xdf\xc0\xf3\xbf\xef\x1e\x9f\xc6\x22\x2e\xd0\x58\x42\x18\x04\xfd\xf9\xfa\xe1\xf1\xe6\xee\x76\x0c\xee\x1c\x57\x49\x26\x64\x97\x25\x4b\xe6\x66\xa0\x33\x70\x33\x84\xc9\x1c\x57\xe0\xe7\x0e\xc3\xa6\x68\xdc\x68\x5c\x9a\x3c\x00\x5c\x1a\x5d\x94\x2e\xe1\x58\x4a\xdd\xb5\x55\x57\x1a\x56\xba\x02\x83\x4c\xca\x15\x2c\x99\x72\xe0\x34\x84\x25\xe0\x66\xc2\xfe\x1d\xfe\x6f\xf5\xa7\xdb\xff\x7f\x0f\x83\x3c\x95\x3a\x82\x29\x2e\x3a\x90\x8b\x3c\xac\xdb\xff\x7e\x55\xf7\x12\x99\x45\x28\x8d\x5e\x08\x8e\xc0\x14\xd0\x0a\x54\x4e\xa4\xc1\x29\x9d\x9e\xa3\x1a\x43\x54\x8a\x1e\x9f\x7c\x45\x44\x5b\x43\xf3\xe9\x30\x41\xa6\x0d\xdc\x95\xa8\x3e\x91\x93\x8d\xe0\x1a\x3a\xa1\xaf\xd5\x82\xed\x12\xf8\xcc\x31\x63\x95\x74\xb0\x60\xb2\x42\x10\x16\xf2\x0a\xad\xfb\xd2\xc7\x5b\x30\x25\x32\xb4\x2e\x51\xda\x25\x99\xae\x14\xef\x60\xfe\x50\x4f\xf4\x0e\x07\x4a\x3b\xf0\xb3\x81\x39\xf0\x4e\xf9\x79\xbd\x9e\xd0\xc7\x66\xf3\x65\xf2\xab\xea\x26\xac\x7c\xac\xdb\xd2\xf6\xfa\xcb\x47\x1f\xe1\x1a\xc8\xde\x9e\x61\x49\x81\xca\x1d\x42\x34\xe0\x9a\xed\x54\x71\xd1\x20\x99\xa9\x94\x13\x05\x52\x2c\x2f\x98\x4b\x67\x1d\x2c\x0f\x61\x9a\xe7\xa9\x97\x10\x95\x2d\x31\x15\x99\x40\x0e\x42\x41\x94\x18\xb8\x46\xeb\x0d\xed\x11\x61\x29\xdc\x0c\x58\xea\x5d\xd7\xea\xca\xa4\x18\xb6\x02\xbf\x3a\x54\x14\xdf\x3c\x2a\x7e\x75\x51\xf8\x7a\x2e\xfd\x1a\x3e\x87\xb6\x26\x2a\x91\xce\x98\xca\xb1\xcb\x11\xa2\x0e\xf5\x2c\x3a\xc1\x2f\xd4\x99\x32\x8b\x1c\xe8\x84\xcd\xb0\x5f\xe2\x6f\x12\xb3\x52\xb6\x2a\x4b\x6d\xdc\xa0\xa8\xa3\xcc\x2d\x82\xb1\xb7\x98\x5e\xb8\x86\x06\xe3\x05\x0c\xb3\x12\x29\x0a\xe1\x12\x91\x2b\x6d\x3a\x25\xbc\x51\x0b\x26\x05\x8f\x1c\x7e\x89\x67\xf2\x5f\x24\xec\x0b\x11\x6b\xb8\x5e\xfe\x54\xab\x4c\xe4\xdb\xba\xa2\x3f\x50\x3e\x91\x86\xfb\x81\x91\xf2\x55\x6d\x8d\x00\x55\x1d\xca\xd8\x1b\x31\x89\x91\xd2\x2d\x4d\xf9\x36\x9e\xa1\x68\x49\x4c\xbb\xf0\x78\x14\x55\xad\x4a\x5f\x89\xf7\x52\x9f\xf5\x7a\x42\x9f\x9b\xcd\x05\x64\x46\x17\xf4\x7f\xf0\xfe\xcd\x66\x14\x63\xd8\xae\x21\x46\x9a\x16\x77\xca\xa2\x3b\x8e\x6b\x6b\x9c\x21\xb6\x3d\x2b\xae\xd7\x93\xed\xff\x07\x6b\x89\xc6\x24\x39\xba\x78\x8a\xbb\x4a\xef\x7f\x32\x21\x43\x70\xc9\xd1\xf9\x63\xb8\x3b\x98\x71\x69\x20\xde\xa6\x57\xb0\x68\x16\x22\xc5\xf7\x24\x0b\x1a\x33\x20\x48\xa5\x0a\x66\xec\x8c\x49\x99\x48\x9d\x32\xd9\x95\x18\xe2\xb4\x06\x11\x19\x2b\x90\xfb\x95\x21\xdf\xda\xb1\x6c\x0a\xdd\x52\x9b\xf9\x51\x7c\x42\x39\x34\x0a\xfb\x93\xd1\x2e\x67\x85\xfb\x0d\xf2\xce\xf8\x73\xb5\x9d\x0a\xa9\x2e\x4a\x89\x64\xdf\xfa\x52\x94\x55\x52\xae\xc6\x12\x65\x7e\xbf\x86\x59\xb8\xe0\xf5\x29\x0c\x6c\x44\xb6\xe5\x82\x87\x4a\xc1\xf3\xd2\xce\xeb\x82\x30\xa6\xdf\x67\xf2\x03\x83\x85\x5e\x20\x94\xcc\x38\xe1\xeb\xc7\x30\x86\x1c\x98\xb5\xe8\xfa\xcd\xdf\x90\x34\x65\x2a\x45\xd9\x2d\xec\xdd\x8f\x13\xf8\x47\x98\x43\x25\xc1\xd8\x6a\x43\x1d\x60\xf5\x8f\x8d\xc9\xc7\xd8\x7d\x8f\xac\xd7\xf2\x7b\x4c\xbd\xb6\x1f\xcd\x77\xa0\xfd\x46\x97\x50\x7b\x24\x05\x53\x2c\x47\x7e\x80\x72\x3a\x03\x8e\xc1\x8e\x94\xca\x9c\x40\xdb\xab\x30\xf0\xca\x90\x7c\x35\x53\x73\x9f\xbf\x9f\x1b\x2e\x99\x51\x89\xbf\x70\x52\xc1\x5f\xa2\x21\x31\x7b\xc2\x2e\x55\x02\x73\x5c\x51\x1d\x40\xa1\x7e\xc9\x2c\x18\x74\x46\xe0\x82\xea\x13\x0a\x08\x1e\x6c\xb2\x03\xa3\x1f\x7c\xb1\x28\x25\x58\xad\x15\x4c\x91\x24\x34\x98\x32\x32\x4d\x19\x6e\x0f\x5c\x7b\xbb\x54\x16\x41\x38\xd0\x95\xb3\x74\x97\xd0\x19\x3c\x19\xb6\x10\x16\xa6\x95\x90\x7c\x84\x2a\x94\xa7\x76\xe8\x89\xc1\x52\xb2\xb4\x73\xbf\xa2\x46\x5a\xf2\x86\x52\x22\xd4\x89\xeb\xf5\x84\x8a\x43\xb7\x2a\x71\xb3\x09\x75\x62\x87\x12\x17\x51\x0b\x12\xdf\xd5\x98\x0a\x97\x7b\x98\xd6\x21\xdb\x4f\xf0\x2f\x93\x50\x2c\x22\x0a\xa6\x38\x73\xda\xac\x7a\xba\x19\x24\xf9\x76\x9e\x67\x68\xec\x8c\xb0\x50\x63\x4d\xfa\xd3\x5e\xbc\x1c\xf8\xb4\x4b\x0e\xf0\x1b\xa6\x7d\x45\x52\xa4\xf0\xd9\x97\x7b\x4a\x4e\x9f\x75\x59\xd8\x70\x7e\x6f\x2e\x3f\x1e\x6f\x2f\x2f\x2e\x0f\xae\xce\xe1\x7e\x52\xd1\x00\x29\xf6\xae\x75\x7e\x34\xde\xe2\x86\xa2\x29\x19\x8f\x63\x89\x8a\xa3\x4a\x3b\xaf\xfc\x71\x2a\xec\xa6\x86\x0d\x0b\x32\x4c\x26\x3d\x3c\xf1\xe0\x8d\x62\xfa\xb8\x9b\x7c\x0c\xd7\x6e\xc9\xab\xfc\xd9\xd9\x1f\xbc\x6a\xa5\x81\x19\xb3\x30\x45\x54\x7b\x01\x7d\x1b\x27\x86\xf2\x54\x8b\x14\x14\x05\x2b\xd3\x55\xe5\x5e\xbd\x08\x82\xad\x32\xfd\x71\x79\x37\xea\xf3\x3a\x43\x9e\xc6\xae\x11\x77\xbc\x65\x5f\xa5\xcf\x6e\xdb\xbe\x4e\x31\x87\x5b\xb7\x4f\xaa\x6d\x9e\xd3\x95\xe2\x49\x9d\xc0\x12\x9f\xc0\xba\x4f\x94\x44\x47\x4e\xbe\x0d\x0f\x4d\x49\xea\xf0\xef\x13\x05\xed\x5b\x9d\x26\xe8\xfc\xa7\x95\x31\xa4\x46\xcc\x78\x75\x00\x0a\x4d\x8f\xf0\x4d\x08\xcc\xfa\xbd\x26\x6d\x47\xe7\x6e\x8a\x6e\xa9\x41\xe6\xb0\x5f\x76\xdf\xda\x07\x3f\x73\x4f\x03\xdf\xdb\xf0\x6f\x02\x50\xa0\xb5\x2c\x6f\x14\xf1\xc0\x14\xaf\xc7\x52\xcd\xc3\x00\x7d\x8c\xb8\x67\x04\x7b\x8e\x11\x89\xbf\x32\xea\x77\x10\x69\x17\xcc\x06\x36\x38\x86\xb1\xd6\x1d\x1e\x1d\x31\x7b\x49\x9a\xd1\xf2\x30\x9a\xc7\xeb\xfb\xcb\x87\xcb\xa7\xbb\x87\x0e\xe4\xbf\xb5\xfe\xc1\xb5\xa2\xba\x85\x0e\xb0\xd4\x4b\xdf\xea\x05\x29\x14\x02\x33\xa1\x9b\xb8\x40\x13\x7a\x32\xed\xeb\xf7\xfe\xda\x05\xfb\x74\xf9\x70\x7b\x73\xfb\xaf\xf7\x40\xb9\xf3\x3c\x5c\x46\xcf\xe1\x97\xcb\x0f\x3f\x6d\xeb\x0c\x23\xf2\x1c\x4d\x28\x10\xfd\xcd\x79\x57\x55\x4c\xe0\x7e\x57\x55\x9c\x67\x88\xfc\x3c\x96\x11\x74\x24\x38\xda\xd4\x88\x69\xe8\x19\xd5\x0d\xa4\xd0\x2e\xf1\x01\xb0\xe3\x15\xea\x0f\x94\xa8\xd5\x44\xf7\x2c\x9d\xb3\x1c\x61\x2a\x14\xaf\x77\x5e\x57\xae\xac\xdc\x66\x33\x22\x6b\xb5\x2b\xf9\x6d\x98\xbd\x62\x9e\x52\xbc\x13\x88\xf5\x54\x6f\xd6\x29\xc4\x3a\x0e\xab\x57\x2c\xf2\x90\x93\xca\x76\x04\x60\xab\x80\x0f\x95\x3c\xcd\x5e\x1e\x01\xd4\x2a\xd0\x65\xe8\xb6\x9e\x42\xa4\xa3\xa0\x86\xbc\xab\x8e\x0a\x4d\xac\x3a\x9b\x8f\x72\xa8\xfe\xe5\xbd\x5b\x64\x2a\x89\x07\xd1\x8e\x58\x38\xb0\x05\xb1\xa7\x7e\x00\xe9\xc8\xc5\xad\xc4\xbb\xc6\xa2\x50\x0b\x3d\x0f\x37\x48\xef\xe9\xcb\x19\xaa\x5d\x21\xe0\x9a\x87\xe0\xf8\x62\x60\xa8\xbb\xf9\x3f\x11\xa2\x3f\x5d\x7e\xd8\x5e\x6c\x33\x81\x92\x43\x8c\x98\x3f\x87\x67\x73\x28\x2a\xeb\xe8\x06\x6e\x43\xdb\x71\x20\xd5\x1d\x88\xd6\x2f\xda\xcb\xc5\xf1\x8d\x86\x2d\x42\xda\x6b\x96\xb5\xbb\xeb\x4b\xfd\xde\x3f\x42\xd8\x6f\xc6\x3f\xce\xb2\x3f\x89\x14\x95\xc5\x13\x59\xb6\x03\x6d\x9c\x65\xe3\xe2\xef\x65\xd9\xa3\xf1\xfb\xc5\x8f\xb0\xfe\xa5\xcc\x7f\xde\x5c\x6d\x36\x91\x85\x41\x78\x55\xd3\x0a\x47\x88\x7a\x10\x56\x7b\xe5\x8d\x85\x36\xab\x47\xf1\xbb\xef\xa1\xf9\xa7\x3b\xbb\xd7\x5c\xb1\x33\x5d\x49\x4e\x9b\xc3\x94\xef\xe1\xd3\xa1\x9e\xa2\x5b\x52\xc4\x7a\xf7\xc3\x5f\xfd\xf1\xfd\xcb\xbb\x1f\xba\xa5\x3d\x29\x45\xab\x12\x4e\x14\xa8\x2b\x77\x14\xfc\xdb\xb7\x1e\xfe\xcf\x6f\xe9\xaf\x5b\x89\x93\x52\xb4\x2a\x21\x75\x7e\xac\x8d\x02\xfe\xbb\x1e\xf1\x4f\x04\x3e\xe4\xd9\x1e\x19\xe2\x1b\x70\xb8\x8f\xc1\xf6\xf5\x72\xc6\x54\xce\xa6\x12\xe9\x0a\xe0\x34\x28\xbd\xbc\x68\xf6\x7c\xa7\xd8\x7c\x22\x1e\xf4\xfc\x13\x72\xf5\xab\xc5\xca\x52\xc6\xf7\xe5\x96\xde\xe5\x98\x56\x6f\xec\x57\x34\x9a\xbb\x03\xfa\x7d\x1f\x52\x52\xf4\xec\xcb\xd9\x7f\x03\x00\x00\xff\xff\xcf\x52\x0d\xd5\xdf\x28\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 10463, mode: os.FileMode(420), modTime: time.Unix(1515544313, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

