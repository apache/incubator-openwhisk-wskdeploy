// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x3c\x5d\x8f\x1b\x37\x92\xef\xfe\x15\x85\xe0\x00\x27\x80\xac\x49\xf6\x70\xc0\xc1\x80\x1f\x7c\xb6\x93\x9d\x5b\x3b\x36\xc6\xe3\x0d\x16\x8e\xd1\xa6\xba\x4b\x12\x57\x6c\xb2\x43\xb2\x25\x2b\x03\xfd\xf7\x43\x15\xc9\xee\x96\x46\xfd\xa1\xb1\x83\xcb\x4b\x34\x22\x59\x5f\xac\xef\xa2\xfc\xf1\x11\xc0\xdd\x23\x00\x80\xef\x64\xf1\xdd\x53\xf8\xae\x74\xab\xac\xb2\xb8\x94\x5f\x32\xb4\xd6\xd8\xef\x66\x61\xd5\x5b\xa1\x9d\x12\x5e\x1a\x4d\xdb\x5e\xf1\xda\x23\x80\xc3\x6c\x00\x82\xd4\x4b\xd3\x03\xe0\x9a\x96\xc6\xce\xbb\x3a\xcf\xd1\xb9\x1e\x10\xef\xe3\xea\x18\x94\x9d\xb0\x5a\xea\x55\x0f\x94\xdf\xe2\x6a\x2f\x94\xbc\x2c\xb2\x02\x5d\x9e\x29\xa3\x57\x99\xc5\xca\x58\xdf\x03\xeb\x86\x17\x1d\x18\x0d\x05\x56\xca\xec\xb1\x00\xd4\x5e\x7a\x89\x0e\xbe\x97\x73\x9c\xcf\xe0\x9d\xc8\x37\x62\x85\x6e\x06\xcf\x73\x3a\xe7\x66\x70\x6b\xe5\x6a\x85\xd6\xcd\xe0\xa6\x56\xb4\x82\x3e\x9f\xff\x00\xc2\xc1\x0e\x95\xa2\xff\x5b\xcc\x51\x7b\x3e\xb1\x65\x6c\x0e\xa4\x06\xbf\x46\x70\x15\xe6\x72\x29\xb1\x00\x2d\x4a\x74\x95\xc8\x71\x3e\x99\x17\x63\xfa\x38\xb9\x5d\x23\xbc\xad\x50\xff\xb6\x96\x6e\x03\x2f\x99\x99\x92\x48\xb8\x35\x46\xfd\xae\x7f\xd7\xb7\x06\x16\xb8\x92\x1a\x76\xc6\x6e\xa4\x5e\xc1\x4e\xfa\x35\xec\xdc\x26\x30\x3e\x03\x5b\x07\x02\x1f\x37\xdf\x3d\x86\xdc\x94\xa5\xd0\xc5\x53\x02\xf0\xbb\x9f\x5f\x35\x4b\x0c\x71\x2d\x1d\xec\xa4\x52\x51\x76\x1d\xfc\xc2\x39\xf4\xae\xc3\xab\xd4\x50\x0a\x2d\x97\xe8\xfc\x7c\x2f\x4a\x05\xc6\x76\xbe\x28\xd5\xef\x7a\x82\x0c\xdc\xda\x58\x3f\x7c\xa1\xef\xac\xd9\xca\x02\x1d\x08\x70\x75\x59\x0a\xbb\x87\xb0\x1f\xcc\x12\x76\x6b\xe1\x1f\x3b\x58\x20\x76\xae\xfb\xeb\xae\x25\x92\xd4\x7f\x2f\xcf\xc1\x1b\xa3\xc0\xa1\x07\x6f\x60\x8d\xaa\x4a\xd2\xda\x9b\xda\x82\xa9\x50\xef\x58\x64\x55\x54\x33\xa8\x1d\xdd\x8e\x68\xc4\x03\x4b\xa9\x2e\xa0\x65\x8b\xd6\x11\xee\x3e\xf9\x48\xed\x99\xe1\xb8\x0f\x74\x5d\x2e\xd0\xb2\x78\xd2\xe5\x4e\xc6\xe5\xf6\x3a\x1f\xe6\xdb\x1b\xa0\x4d\x81\xd9\x56\x3f\x1a\x66\x17\xe8\x77\x74\x1d\xb9\x92\xa4\xac\x42\x17\xe0\xd0\x6e\xd1\x4e\xb6\x89\xe9\x34\x14\xad\x51\x10\x9e\x5a\x77\xbe\x30\xcb\x49\x57\x41\xe7\x4c\x45\xf0\x85\xea\xc2\xa3\x2b\x4a\xdb\xff\xf5\xfc\xcd\xeb\x11\xea\x97\x4a\xac\x32\x51\xc9\x6c\x6d\x5c\x9f\xe2\x04\x52\x9e\xbf\xbb\x86\xcf\x7f\x7f\xfb\xfe\xf6\xf3\x44\x88\xc3\xd7\xdf\x01\xfa\xcf\x57\x37\xef\xaf\xdf\xfe\x3a\x09\x6e\xed\xd7\xd9\x06\xf7\x3d\x40\x69\xd9\x58\xf9\x27\x7f\x01\x9f\xff\xf1\xea\x5f\x53\x80\xe6\x68\x7d\x46\x72\xeb\x81\x5a\x09\xbf\xa6\x6b\x21\x5d\x9d\xd3\x66\x16\xf2\x14\xc0\x46\x2f\x65\x5f\xf0\x08\x8b\x0c\x0a\xbe\x2f\x70\x29\x6a\xe5\x41\x3a\xf8\x8f\xbf\xbf\x7d\xf3\xea\x6a\xbe\x73\x9b\xca\x9a\xca\xfd\x30\x45\x2a\x4a\x99\x5d\x16\x61\xf4\x85\x3c\xde\x04\xcd\xa6\x71\xa8\xad\x52\x0d\xc9\xc5\x9b\x53\xed\x9b\x00\xba\xb2\xb8\x95\xb8\xeb\x81\xeb\xd6\x4c\x68\x02\x7a\x75\x64\x1e\x95\x12\x23\x0e\x9a\x31\x6c\x70\x3f\xf9\x4a\x37\xb8\x9f\x4a\x78\x90\x74\x29\xb4\x58\x61\x31\x28\xe8\xca\x9a\x7f\x63\xee\xdb\x18\xee\x29\xea\x41\x29\xec\x06\x0b\x48\x10\xa6\x88\x8a\xe1\x64\x14\x0b\xfa\x98\x89\xa8\x78\xcb\x38\xc4\xe4\x42\x46\x6e\xf5\xc8\xe9\x4f\x00\xdb\x04\xab\x1e\xb8\xed\xfa\x64\xa6\x47\x28\x0c\xee\x59\xa1\x73\x49\xda\x13\x40\x3b\x6f\x65\x2f\xe4\x70\x75\xb5\x43\x4b\x86\x22\x35\x16\x94\x8b\x78\x59\x36\x41\x6a\x02\x06\x6f\xfb\x85\xc0\x6b\x60\x6a\x5f\xd5\x53\x88\x0d\xea\xb6\x45\xbb\x30\xae\x0f\x64\x5c\xbd\x14\x68\x25\xac\x28\x7b\x05\x6c\x45\x89\x1e\x2d\x6c\x85\xaa\x91\x13\x46\x72\xa6\xf0\xcf\xe7\xaf\x3f\xbc\xfa\x0c\x4b\x63\x4b\x71\x21\xaa\x21\x6b\xfc\xfc\xf3\xf5\xeb\x57\x9f\x21\x37\xda\x0b\x49\x19\x35\x9c\xa3\xe0\x7f\xdf\xbf\xfd\x75\x1c\x35\x7b\xd5\xac\x94\x8e\x22\x20\xc7\x8b\xfe\x70\x41\x99\x2a\xed\x20\x1b\xcd\x43\xcc\x20\x5f\x20\x1d\x68\xe3\x21\x80\xaa\x2d\x16\xf3\xc1\x9c\xf0\x04\x63\x25\x07\x42\x29\x61\xa4\x98\x47\x5b\xbe\x0e\xcf\x98\xb9\x11\xa6\x66\xcf\xc3\x50\x45\x56\x86\x4a\xb1\x53\x7e\x3e\xde\xdd\xcd\xe9\xf3\xe1\xf0\x69\x06\x4b\x6b\x4a\xb8\xbb\x9b\x3b\x53\xdb\x1c\x0f\x87\x49\x38\xc3\x85\x8d\xe1\xa4\x6d\xe9\xae\x1c\xfa\x87\xe1\x6a\xc4\x33\x86\xed\x48\x8e\xc4\x62\xf3\xc5\xc3\xf9\xac\xe4\x6a\x97\x09\xae\x42\x33\x6f\x36\xa8\x47\x59\xa6\x13\x10\x4e\x00\x9f\x78\x18\xf3\xb5\x2e\x85\x75\x6b\xa1\x32\x65\x72\xa1\x7a\x30\x7e\x48\xbb\x3a\xa9\x72\x74\x85\x2e\xe0\xe3\xd3\xd1\x3c\x27\x22\xd4\xe8\xa9\xe4\x7b\x30\x4a\xa9\x3d\x5a\x8d\x1e\x84\x27\x76\x6b\xab\x46\x78\x6d\xf3\x86\x2c\x17\x3a\x47\xa5\x7a\xa3\xf6\xdb\x7f\xcc\xe1\x45\xd8\x43\x0e\xa8\x3d\x39\x15\xc1\x52\xc8\x7e\xe8\x9d\x2a\xb8\x90\x45\xb4\xc5\xb2\x52\xe8\x11\x5c\x4d\x57\xba\xac\x95\xda\xcf\xe1\xa6\xd6\xf0\xb9\x29\x7f\x9a\xca\xe0\x33\xc5\x3b\x8b\xa5\xd9\x22\xf9\x46\x2f\x85\x52\xfb\xb6\x72\x0c\x45\xee\x54\x4a\x43\x19\x9a\x39\x2f\x7c\xdd\x97\x2d\x3e\x79\xf2\xe4\xc9\xb3\x67\xcf\x9e\x9d\xaf\xe4\xdf\xf3\x51\xa0\x0d\xb4\x71\x12\x56\x6e\xc8\x60\x31\x45\x44\x49\x34\x05\xc4\x2e\x4e\x10\xce\xb0\x92\x3d\xfc\xae\xbb\x67\xa7\x23\x19\xbc\xef\x0f\xdd\x94\x75\xf0\xc6\x27\xe3\x1b\x93\xdf\x11\xca\x07\x48\x30\x36\x58\x32\x2e\x1d\x39\x5a\x93\x97\xcb\x84\xcf\x28\xdf\xea\x41\x7a\x77\x37\xcf\xcb\xe2\x70\x88\x05\xe7\xdd\xdd\x9c\x0e\xfa\x7d\x85\x87\x03\x7b\x4a\x3a\x7b\x38\x7c\x9a\xcf\x07\x71\x73\x92\xbc\xcf\x92\x3e\x8f\x34\xef\xee\xee\x28\x65\x8f\x08\x88\xc8\xc3\xe1\x13\xac\x45\x6c\xa7\x74\x19\x6e\x2c\x64\x3a\xf6\xfe\x6e\xdf\xcb\xb4\x0e\x67\x09\x98\xcf\x07\x4a\xed\x88\x22\x5d\xe8\xb7\x64\xb1\x85\x39\x85\xc9\xb4\xbb\x9f\xcd\x0f\xed\x8e\xb3\x8c\x0e\xf2\x59\x60\x85\xba\x40\x9d\x5f\x22\xce\xf6\xd0\xc3\xf1\xb4\x26\xd2\x2b\xd3\x97\x67\xd1\x7c\x8d\xe2\x9c\xa7\x82\x1c\x43\x6d\xfb\xf2\xb2\x97\x47\x9d\x9e\xf3\xac\xff\x3f\xc6\x88\xc4\xcf\x65\x7a\xf2\x75\x37\x78\xdf\xcd\x7d\x9b\x3b\x9c\x68\x19\x7d\x94\x0c\xdf\xe3\x87\x93\x9e\xdd\x43\x6e\x72\x88\xaa\xd8\x21\x78\x68\xcc\x61\x8a\x42\x04\x68\x3a\x10\x43\xb4\x40\x51\x5b\xba\xc9\x88\xb6\x9b\xff\xfc\x75\xfa\x96\x78\x5c\x9a\x5a\x17\x59\xa4\x37\x7a\xaa\x5e\x05\x50\xe8\x7b\x7d\xf0\x6e\x2d\xf3\x35\xec\x78\xea\x41\x74\x15\x21\x6f\xf4\x6b\x84\xbc\xb6\x96\x04\x93\x18\x4c\x4d\x13\x0e\x52\xe1\x33\x41\x10\x8e\x79\x21\xf9\x4d\x4e\x0b\x62\x4f\x2d\x8b\xcd\xda\xbe\x7e\x77\x58\xe5\x62\x02\x3a\xfd\x3e\x8b\xdc\xc7\x28\x66\x20\x54\x37\xf5\x6d\xae\x8d\xe8\xb0\xcd\x89\x88\x04\x84\xc5\x46\xd6\x57\xad\xa6\x43\x21\x2d\xe6\x3e\x6a\xbf\x0d\xdd\xee\xb1\x39\xc2\xab\x9b\x9b\xb7\x37\xef\x7b\xe8\x7e\x76\xfa\x1f\x84\xed\x70\x6f\xe1\xd9\xb3\x81\xf0\x63\xed\xb1\xa1\x6d\xb4\xd9\xe9\x8c\x32\x85\x71\x53\xa7\x5d\x24\xaa\x78\x6a\x0e\xed\x80\x00\x8c\x56\x7b\x70\x75\x15\xa6\x67\x57\xdc\x56\x9e\xbb\xbd\xf3\x58\xc2\x42\xea\x42\xea\x95\x03\x63\x61\x25\xfd\xba\x5e\xcc\x73\x53\x36\x4d\xf5\xe1\x78\x69\x6d\x8a\x99\xb9\x45\xe1\xfb\xc8\xe4\x69\x26\xf0\x96\x23\xb5\xe4\x99\x16\x8f\x41\xa1\x44\xe7\xc4\x0a\x9f\xd2\x22\x5a\x7b\x38\x70\xf3\x3e\xac\xe5\xa6\x08\x0b\xf4\x61\xa4\x9a\xe9\x90\x14\x6c\x65\x90\xa4\xe2\x9e\xa5\xfc\x45\x24\x2d\x11\x8b\x4c\xea\xad\xd9\xf4\x11\xf4\x33\xbb\x2d\x72\x17\x61\x1b\x1b\x24\x1d\x83\xdd\x9a\x07\x60\x91\x52\x1f\x86\x99\x71\xe9\xaf\xa1\x76\x83\xfb\xa6\x87\x42\xf9\xae\xf0\xc6\x0e\xf5\x87\x9a\x3d\xdc\x6e\xf8\x98\x84\xf9\x89\xf4\x31\xc2\x19\xc5\x99\x5a\xa9\x99\x36\x3e\x38\xbb\x1e\x84\x6f\xba\x3d\x57\xf6\xd5\xbc\x9b\xea\x5d\x6e\x7a\x76\x33\xea\x31\xa4\x9c\xbd\x97\xd2\x95\xc2\xe7\x7d\xe9\x3b\x31\xd8\xa8\x07\x1d\x28\x18\x45\x91\xfc\xa9\xd4\xa7\xcd\xfd\xb0\x1e\x69\x80\xc2\x60\x68\x2c\x31\x12\xbe\x56\x76\x6f\xb4\xa9\xec\x00\x39\xea\x25\x87\xd5\xc4\xc6\x30\x13\xb1\xfe\x27\xf5\x12\x4a\xf6\x89\xed\x3a\xac\xf2\x24\x37\x5c\x49\xd3\xb6\x25\x5c\xf1\x33\xd1\x72\x76\x0c\x0c\x4b\x63\x99\x76\xc1\x53\x75\x3e\x13\x3e\x4e\x91\x73\x22\x71\x44\xd4\x37\x97\x10\x74\x22\x57\x36\x85\x40\xd1\x63\x07\xa1\xcb\x13\x44\x89\x5f\x3c\x6a\x97\x88\xc6\x2f\x1c\xc3\x88\x9d\xaf\x61\xc5\x65\x2b\xec\x6b\x60\xb6\xa6\xbc\xc2\x30\xbd\x8d\xbe\xb7\x6d\x95\xc7\x66\x4d\x1b\xc9\x28\xbe\xc9\xbc\x63\xbe\x93\x65\x1a\x48\xcf\x02\xc7\x6c\x3d\x0d\xb6\x1e\xfa\x8e\x18\xe6\xbc\x90\xc4\xd8\x4a\x59\xe8\x7d\xa3\x1b\xe4\x44\x3a\xd7\x3e\x2a\xd7\xd8\x44\x6d\x48\x18\x65\xa3\xb6\xea\x72\xcd\x0d\x8d\xad\x58\x42\x7f\xb8\x79\xcd\x14\x70\xab\x8b\x4d\xe9\xe3\x51\x8d\xfd\x29\x8c\xe4\xa7\x10\x52\x0a\xb5\x34\xb6\xec\x95\xdc\x9b\xb4\x3e\x44\xc1\x1c\x6e\xed\x1e\xc4\x4a\x48\x3d\x56\xd2\x5b\x9b\xfd\xdb\x19\xdd\x38\xdb\xbc\x2c\x06\x26\xb7\xdc\xdc\x97\xba\xaa\x3d\x14\xc2\x0b\x78\x13\xa5\xf1\x38\x2f\x8b\xc7\xe4\x7a\x87\x31\x89\x4a\xb6\x1d\xf8\xa0\x34\xc6\x66\x0e\xff\xa8\x51\xf7\xb6\xc8\xc3\x23\x9a\xab\xf7\x71\xd7\xb1\xb1\x74\xfc\x7b\xd0\xe7\x23\x1f\x36\xe3\xae\x37\x1f\xa8\x24\xed\xce\x85\x0e\xa9\xc8\x02\x43\x32\x80\x05\x2c\x84\xc3\x02\x8c\xee\x28\xd9\x55\x22\xe9\x0c\xcc\x39\xbc\x53\x28\x1c\x42\x5d\x15\xc2\xe3\x89\xd3\xe4\xe0\x99\xab\xba\x38\xa5\x53\x38\x10\xb0\xc3\xc5\x29\x86\xd1\xdb\x89\x72\x1a\x56\xd0\xe7\x67\xfc\x08\x89\x26\x9e\x9a\xc3\xb5\x0f\xd5\x97\xf1\x6b\x8e\xc5\x6c\x55\xcb\x5a\x47\x9b\x4a\x86\x37\x0b\xd2\x31\x1a\xe3\xd8\xb5\x24\x28\xf8\xa5\xc2\x7c\x8a\x25\x45\x5a\xd3\x15\x27\xff\x40\x8e\x31\x23\xac\x5f\x49\x3d\x13\xde\x3a\x09\x02\x6b\x6a\xdf\x75\x16\x73\xf8\xad\x75\xc2\xc9\x55\xd0\xb1\x59\xe3\x4e\x48\x61\x52\xb2\x30\x12\xd6\x22\x3b\x49\x4c\x19\x55\x2b\x1e\xb3\x42\xda\x49\x4e\xee\x2c\x5b\xc4\x47\x23\xf7\xca\x48\x1d\x52\xaa\x50\xa2\x79\x8c\x85\x01\x25\x32\xad\x39\xcf\xa8\x04\x4c\x5c\x39\xae\x29\x8e\x3d\xdc\x30\x1b\xb9\xa0\x82\x5d\x6c\x31\x2b\x4c\xbe\xc1\xbe\x07\x7f\x2f\x84\x66\xa8\x62\x8b\xf0\x92\x37\x82\x2c\x39\x01\x1f\x49\x2c\xa5\xc2\x4c\x28\x8b\xa2\xd8\x67\xf8\x45\xba\xde\xb7\x0d\x3f\x93\x85\xc4\x9d\x10\x76\x8e\xc0\x2e\xe4\x72\x89\x54\x10\xb6\x55\x89\x44\x17\x14\xca\x51\xe6\xa4\xc4\x02\xfb\x86\x23\x6f\x35\x02\xe9\xa1\xc2\xd3\xb2\xbf\xfd\x33\x5d\x89\xdf\x19\x68\x90\xf1\xd0\x24\xc8\x9a\x76\xa7\xbf\x82\x63\x5d\x4b\x07\x1b\xa9\x0b\x32\x90\xa8\x8b\x71\x28\x79\x2f\xf0\x9c\x78\x0a\xf2\x2f\x1d\x42\x98\xf4\x33\xe4\xc4\xf7\x65\xf7\xfc\x0a\x2b\x0b\x0f\xd4\x29\x77\x4b\x44\x41\x2a\x6b\x90\x79\x70\x58\x09\x4b\x7f\x30\x74\x17\x72\xa6\xf3\xbc\x4d\x53\xfe\x68\x64\x19\xb1\x7c\xa9\x9e\x6b\x13\x24\xe5\xd0\x5f\x86\xec\x52\x5f\x11\x91\x75\xec\x7d\x04\x5f\xf2\xbe\xd9\x5a\x6c\xc9\x53\xb1\x2e\x85\x46\xba\x8b\xc4\xf4\x3d\x49\xed\x86\xa1\x04\x26\xfa\xab\xa4\xda\xe9\x51\x02\xf9\x7c\x9d\x9c\x51\x28\xf4\x39\x15\xa3\xfb\x8b\xd5\xed\x3c\xbd\x11\x8d\x2f\xd9\x02\x3c\xc7\x81\x8a\x94\x69\x4d\xd6\xc8\x07\x38\x63\x97\x1a\x44\xd2\xe9\x04\x61\xc4\xf8\x8d\x5e\x2a\x99\x93\x97\xc9\x62\xe1\x46\x1c\x5a\xe3\x5c\xea\x84\xf4\x99\x6b\xc7\x7e\x52\xc9\x47\x4c\xc7\xcf\x91\xe7\xc4\x2b\x27\xbf\x65\xad\xbc\xac\x54\xa8\x1a\x83\xf1\xd0\xa7\x98\x91\x04\xe4\xec\xbe\x52\xec\x3d\x69\x83\xf8\xee\x14\x77\x06\xd2\x07\x8b\xaa\x8c\x73\x72\x11\xac\x80\x05\x92\x18\x09\x58\x5b\xf1\x2c\x28\x2f\x69\x34\x9d\x89\xb8\x67\x84\x91\x13\x46\x73\xaf\xe8\xb9\x40\x98\xb6\x56\xf8\x00\x49\xd2\xb1\x58\x5d\x28\x3c\x27\xc3\x96\xfe\xe4\xef\x4f\x12\x09\x5d\x5c\x91\x51\x27\x11\x1c\x5f\xc9\x3c\x3c\x30\xfe\x16\x42\x66\x06\xcf\x49\x58\x38\x67\x72\xc9\xa0\xcf\x53\x7c\x95\x88\x3b\x15\x3e\x33\xff\x20\xc9\x0b\xdb\xbe\xa9\xe0\x61\x76\xef\x0b\xce\x38\x20\x03\x25\x35\x82\xb0\xab\x9a\x8b\x62\x12\xa1\x5d\x1d\x0e\xdd\x7c\x91\xe1\xcc\xa0\x0a\x24\x06\x5f\xbe\x67\x79\xf0\xca\x05\x14\x6d\x70\xff\xcd\xa8\xda\xe0\xfe\x8a\x61\x41\x25\xa4\xbd\x47\xde\xf1\x32\xfb\x77\xfc\x22\xca\x8a\x92\xdd\x06\xdc\x06\xf7\x93\x78\x88\x09\xd6\xf8\xd3\x9f\x3e\x06\xbe\x4f\x28\x7f\x60\x1f\x1c\xe1\x85\x77\x41\x21\x70\x35\xad\x90\x59\x68\x48\x76\xca\xcb\xa4\x1c\x89\x35\x01\xe1\x34\x17\x19\x2d\x88\xb1\xde\x03\xfe\x51\x4b\xcb\xbd\xad\xaa\xf6\x6e\x92\x96\xdc\xc4\x33\xa1\x94\x09\xd6\x72\xa4\x15\x0e\x70\x8b\x1a\xc4\xd2\xa3\x05\x51\x55\x8a\xe7\x27\xfc\xb0\xa1\x32\x01\x4e\x9c\xa5\xa2\xde\xce\x61\x2b\xac\x14\x0b\x85\xad\xc2\x3b\xf4\x0d\xc4\xe3\x2d\xc9\x80\x43\x15\xd5\xbe\x9b\x4a\xd6\x70\x75\xda\xca\x31\x96\x8a\x93\x17\xaf\xaf\xf9\xb2\x97\x46\x29\xb3\x0b\xd4\x10\xed\x2c\xcf\xf0\xf1\x70\x18\xaf\xbe\x56\xc2\xe3\x4e\xec\x33\x2a\x7a\x78\x62\x3c\x56\x58\xbc\xbb\x86\x5f\xc2\x19\x2e\x94\xda\x06\x97\xa8\x24\x7d\x91\x7a\x4c\x67\xd2\x75\xde\xda\x3c\x11\x73\xb1\xed\x7f\x9a\x25\xc5\x92\xc3\x22\x21\xdd\x46\x04\x4d\xa7\xf8\x04\xc6\xc4\x3e\x54\x25\xac\x43\x3b\xf8\xf3\x96\xb6\x43\x62\xd1\x5b\x89\xec\xf0\x62\x63\xa4\xd1\xd0\x88\xed\x14\xdd\x6f\xcf\x6f\x7e\xbd\xfe\xf5\x97\xe9\xad\xf8\x74\xe0\xb2\x66\xfc\x4e\x58\xdd\xcc\xfb\x89\xca\xbe\xaa\xfc\x86\xd6\x48\x25\x3e\xa6\x41\xff\xa7\xa8\xba\x2c\x81\xa7\xa1\x3b\x42\x1c\x7d\x1a\xaa\xe0\x22\x3e\x7e\xf8\x74\x71\x3f\xa4\xfb\x4e\xba\xd3\xff\x84\x02\xfd\x78\xed\xc8\x98\xc9\x89\x16\x58\x59\xcc\x29\xb4\x64\x16\x2b\x25\xf2\xde\xe2\xea\x76\x1d\xf0\x18\x55\xc4\x4e\x2f\xbf\x33\x0b\xb9\xf3\xf1\x03\x07\xfe\xc5\x89\x33\x46\x53\xd5\xdf\x62\x68\x5c\x6b\xed\x42\x6e\xce\x23\x2a\xdc\x1d\x81\x73\x1e\xc5\x44\xda\xa3\x24\x1e\xd2\xa4\x76\x6b\x53\xab\x82\xc8\xa3\x54\x19\x3e\xb8\x30\xad\x0d\xa3\xa4\xe0\xed\x69\x37\x7f\x1a\x7f\xa6\xd1\x50\xc4\xfb\x47\xae\x92\xe8\x0a\x18\xc8\xbb\xdc\x6f\x9e\x93\xad\x06\xb3\xbe\x00\x25\x57\xc7\x62\x3b\x78\x79\x63\x48\xf9\x7c\xba\xd0\x34\x16\x4c\xbf\x41\xe9\xfe\xf8\x64\x9c\x30\x25\x4b\xe9\x33\xb9\xd2\xc6\xf6\x92\x94\x54\x3a\x66\xeb\x7c\x24\x54\x7f\xf4\xe9\xb4\x41\x4e\xde\x2e\x80\x9b\x8a\x3d\x5f\x0b\xbd\x42\x8a\x00\x3d\x04\xbc\x6e\x30\x36\x1d\x79\x97\xf8\x56\xfb\x30\x11\x6e\x60\xcc\xe1\x9a\xd0\x4b\xbd\x9a\xa2\x0b\x4c\x81\xcb\x94\x59\x65\x4e\xfe\xd9\x47\x80\x32\xab\xf7\xf2\x4f\x6e\xfc\x84\x03\x47\x1c\xb7\x2a\x2a\x34\x07\x42\x4a\xa2\xd3\x8f\x71\x7e\xe4\xea\xe5\xa7\x1f\x27\x93\x52\x62\x69\xec\x7e\x88\x9a\xb0\xe3\xa1\x04\xfd\xf4\xb7\xff\x66\x92\xfe\xeb\xa7\xbf\x4d\xa6\x89\x7c\xbf\xa9\xfb\x3a\xea\x71\xf5\x41\xc4\xfc\x18\xe4\xf3\x9f\x3f\xd2\x7f\xe3\xf4\xf0\x70\x34\xab\xac\xa9\xd0\x7a\xd9\x5b\x54\x24\x0f\xd8\xf1\x57\x61\xa4\x1e\xc2\x59\x1c\xaa\x87\x49\x6b\x0b\x2c\x0d\xdf\xcf\xfb\xc4\xe4\x12\x0b\xc3\x0a\x47\x9e\x51\x7a\x30\xb5\x77\xb2\xe0\x8b\xb8\xb5\x62\x2b\x1d\x2c\x6a\xa9\x8a\xe1\xc9\x2c\xb3\x12\xdc\x81\x25\xb5\x9d\xe4\x0a\x1a\xed\x3f\x72\x08\xfa\xc4\xa1\x47\x69\xf3\xbc\x99\xaa\x9f\xf0\x6d\x12\xf7\xdd\xdd\xbc\x94\x3a\x4e\x1f\xe9\x0f\x91\x8f\xcc\x32\x98\xd4\x94\x3b\x04\x23\xeb\x73\x13\x69\x3e\x14\x77\x51\xfe\x70\x32\x2a\x3a\xd3\x4e\xee\x9d\x06\x3d\x68\x04\xc4\xd4\xc6\x01\x33\xb7\x2c\x06\x7b\x6e\xf7\x66\x87\x47\x2e\xe6\xa4\x19\xd7\x66\xaf\x0a\x73\x0f\x42\x1b\xbf\x8e\xb5\xf2\x38\x49\xa9\x06\x1e\x1d\x9f\xde\xde\xeb\x6e\x75\x13\x86\xf8\xf3\x02\x2c\x40\x9b\x69\x6f\x00\x18\x7b\xe7\xf9\x0d\x0b\x65\x0a\x11\x67\x1f\xa7\xc4\x88\x73\x9a\x85\xef\xe2\x8c\x2a\x4c\x7a\xcf\xf5\xe8\x26\x48\xa8\xf3\x23\xa1\xcc\x6c\xd1\x5a\x59\x14\xd8\xd7\x69\x22\x0a\xbb\xbf\x19\x6a\x9f\x4f\xb5\x47\x53\xae\xd0\x7d\x1d\x33\xf5\xa2\x32\xe9\xb2\xaa\x5e\x28\xd9\xf7\x6b\xc8\x70\x2b\xbc\x37\x4d\x5a\xc2\xcf\xa2\x28\xb7\xe7\x83\xf7\xaa\xf8\x19\xb9\x0b\xf6\x2d\x0b\x84\xad\x0c\x0d\x05\xb2\xc3\x5c\xb0\xa7\x09\xef\xe2\xb1\x80\xc5\x1e\x84\xde\x1b\x3d\xf0\x33\x23\xa6\x35\x35\x06\x71\x91\xe1\x17\x7e\x0f\x3d\x1c\xc6\xef\xf7\x05\x79\xe4\xc1\x83\x17\x5d\xd0\xff\x9f\x04\x38\xf7\x66\x1e\x64\x08\xfc\x2b\x67\x5c\xcc\x42\x70\x8f\x7f\xc5\x03\x03\xa5\x47\xa0\xb4\x33\xdb\x22\x72\x07\xbb\x88\x7d\x13\x0f\xd2\xb0\xee\x98\x68\xd2\x00\x2b\x14\xa2\xed\xa1\x39\xbc\x30\x7a\x4b\xee\x3e\x96\x04\x2d\x0a\x6f\x8e\xc0\x8f\xab\xec\x29\x57\x23\xb3\xba\xa1\xee\x68\xcb\x5b\x5a\xb8\x90\xbb\x66\x64\x76\xca\x5f\x17\x51\xc3\xe1\xa4\x01\x5b\xc3\x63\xea\x84\x58\x74\x95\xd1\x0e\x87\x9e\x3c\x9d\x10\xcd\x3d\xb0\xd3\x5a\x37\xae\xa7\xaa\xb6\x53\x25\xa7\x7e\x45\xd3\x67\x5b\x7b\x5f\x85\x7f\x01\x20\xa0\xe6\xb8\x36\x87\x17\x14\x61\xf8\x8d\x44\xf7\xfb\x10\xd4\x39\xe4\xc4\xaf\x23\xd3\x0c\x85\xe2\x49\x4b\x59\x8f\xc6\xbe\x7c\xf5\x3f\x1f\x7e\x99\x5c\xba\xf2\xee\xcb\xea\xd6\x62\xb1\xca\x1c\x0a\x9b\xaf\x49\x6b\x92\xd3\x6b\x06\x5b\xbd\xaa\x13\x4f\x34\x4e\xef\x78\x14\x96\x44\x98\x78\x0c\xc9\xc1\x48\xfa\x4b\xa4\x9c\x46\x86\x6f\x1d\x15\x1e\x18\x11\x88\xb4\x26\x64\x86\xa7\x95\x03\xff\x2a\xc0\xcb\x33\xef\x7b\xa2\x44\x9e\xc2\xcf\x4c\x41\xfb\x23\x74\x6e\xf3\x12\xb0\x4b\x09\x18\xfe\x41\xe7\xe5\x34\x74\x5f\x6f\xa6\xd7\xc6\x91\xa4\x47\x9f\x1e\xfd\x5f\x00\x00\x00\xff\xff\xaa\x09\x61\xbf\x9a\x44\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 17562, mode: os.FileMode(420), modTime: time.Unix(1531786457, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json":   wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json":   wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json":   wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json":   wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json":   wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json":   wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json":   wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json":   wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json":   &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json":   &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json":   &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json":   &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json":   &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json":   &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json":   &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json":   &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
