// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5b\x5f\x8f\xdb\x36\x12\x7f\xcf\xa7\x18\x04\x07\xa4\x05\x1c\x25\xed\xe1\x80\x43\x80\x7d\xc8\x35\x69\xbb\xd7\x26\x1b\xec\x26\x17\x14\xb9\x85\x42\x8b\x63\x9b\xb5\x44\x0a\x24\x65\xc7\x35\xfc\xdd\x0f\xc3\x3f\x92\xec\x5d\x4a\x5a\xa7\xc5\xe5\xa5\x6e\x38\x9c\xf9\xcd\x90\xfc\x71\x66\xa8\x7c\x7a\x04\xb0\x7f\x04\x00\xf0\x58\xf0\xc7\x2f\xe0\x71\x65\x96\x79\xad\x71\x21\xbe\xe4\xa8\xb5\xd2\x8f\x67\x7e\xd4\x6a\x26\x4d\xc9\xac\x50\x92\xc4\x5e\xbb\xb1\x47\x00\x87\xd9\x80\x06\x21\x17\x2a\xa1\xe0\x92\x86\xc6\xe6\x9b\xa6\x28\xd0\x98\x84\x8a\x9b\x30\x3a\xa6\x65\xcb\xb4\x14\x72\x99\xd0\xf2\x31\x8c\x26\xb5\x14\x15\xcf\x39\x9a\x22\x2f\x95\x5c\xe6\x1a\x6b\xa5\x6d\x42\xd7\xb5\x1b\x34\xa0\x24\x70\xac\x4b\xb5\x43\x0e\x28\xad\xb0\x02\x0d\x7c\x23\x32\xcc\x66\xf0\x8e\x15\x6b\xb6\x44\x33\x83\x97\x05\xcd\x33\x33\x78\xaf\xc5\x72\x89\xda\xcc\xe0\xba\x29\x69\x04\x6d\x91\x7d\x0b\xcc\xc0\x16\xcb\x92\xfe\xab\xb1\x40\x69\xdd\x8c\x8d\xb3\x66\x40\x48\xb0\x2b\x04\x53\x63\x21\x16\x02\x39\x48\x56\xa1\xa9\x59\x81\xd9\x64\x5f\x94\x4a\x79\xf2\x12\xac\x52\x25\x58\x15\x1c\x99\x41\x23\xfd\x2f\x60\x92\x83\xd9\xc9\x02\x54\x8d\x72\xbb\x12\x66\x0d\x75\xf0\x09\x1a\x23\xe4\x12\x18\x54\x4c\x8a\x05\x1a\xeb\x84\x55\x4d\x5a\x59\x19\x54\x55\xe4\xc9\x42\x94\xad\xf8\x6f\x2f\xdf\xfc\x3a\x05\xb3\x59\x29\x6d\x87\x17\xe0\x9d\x56\x1b\xc1\xd1\x00\x03\xd3\x54\x15\xd3\x3b\xf0\xf2\xa0\x16\xb0\x5d\x31\xfb\xc4\xc0\x1c\xb1\xb7\x3c\x5f\x17\xc6\x00\x69\x34\x8e\x06\x2d\xc5\x72\x85\x65\x1d\x4c\xc3\x4e\x35\x7a\x52\x08\x29\x54\xd3\xb1\x6c\x50\x1b\xb2\x9d\x8a\x8f\x90\xd6\x39\x1c\xe4\x40\x36\xd5\x1c\xb5\x0b\x8f\x59\x7b\x68\xc3\xb6\x16\x25\x5b\xe6\xac\x16\xf9\x4a\x99\x94\xd7\xde\xa5\x97\xef\x2e\xe1\xf3\xcf\x57\x37\xef\x3f\x4f\xd4\x38\x8c\xbd\xa7\xf4\x3f\xaf\xaf\x6f\x2e\xaf\xde\x4e\xd2\xdb\xd8\x55\xbe\xc6\x5d\x42\x29\x0d\x2b\x2d\xfe\x70\x7f\x01\x9f\x7f\x79\xfd\xdb\x14\xa5\x05\x6a\x9b\xd3\xba\x24\xb4\xd6\xcc\xae\x28\xa4\x14\xe8\x8c\x84\xdd\x22\x4e\x51\xac\xe4\x42\xa4\x98\xca\x0f\x3a\x55\xf0\x0d\xc7\x05\x6b\x4a\x0b\xc2\xc0\xdf\x7e\xbe\x7a\xf3\xfa\x59\xb6\x35\xeb\x5a\xab\xda\x7c\x3b\x25\x2a\x65\xa9\xb6\x79\xd0\x91\xe2\x57\x27\x04\xad\xd0\xb8\xd6\xee\x7c\x0f\xc5\xa5\xe5\x94\x96\x08\xa6\xa8\xd6\x3b\xdd\xa4\x76\x86\x59\x39\x9c\x51\xe7\xb3\x48\x55\xce\x40\x5d\x32\x39\xc1\xc0\x1a\x77\x93\x57\x74\x8d\xbb\xa9\xb8\x7d\xa0\x2b\x26\xd9\x12\xf9\x60\x9c\x6b\xad\x7e\xc7\xc2\x76\xf7\x85\x55\x30\x47\xa8\x98\x5e\x23\x87\xa8\x61\xdc\x62\xd0\x93\x13\x8f\xa5\x9c\x09\xa6\x9c\xc8\xb8\xc6\xc8\x44\x23\x8b\x7a\x44\x58\x13\xd4\xb6\x44\x9b\xd0\xdb\x8d\x4f\x76\x7a\x04\xa1\x41\xbd\x41\x5d\xa2\x31\x31\xda\x13\x54\x1b\xab\x45\x52\xb3\x5f\xba\xc6\xa0\xa6\x73\x22\x24\x72\xd0\x8d\xb4\xa2\x6a\x09\x76\x82\x05\xab\xd3\x41\x70\x63\xa0\x1a\x5b\x37\x53\xc0\xfa\xed\xb6\x41\x3d\x57\x26\xa5\x32\x8c\x8e\x2b\x75\x74\x93\x57\xc2\xd0\x8d\xe4\x88\x34\xcd\xa3\xef\x57\x08\x24\x41\xbb\xb7\xf0\x64\x4a\xa7\x44\x18\x90\xca\x82\x57\xd5\x68\xe4\xd9\x7f\x87\x22\x72\x62\xb1\x16\x03\x77\x0c\x59\xa4\xcb\x80\x44\xbe\xce\xce\xd8\x46\x24\x4b\xad\xcc\x79\xa6\x82\x2b\x43\x09\xf1\xa9\x3f\x9f\xf6\xfb\x8c\x7e\x1f\x0e\xb7\x33\x58\x68\x55\xc1\x7e\x9f\x19\xd5\xe8\x02\x0f\x87\x49\x36\xfd\x82\x8d\xd9\x24\xb1\xb8\x56\x06\xed\x79\xb6\xda\xf0\x8c\x59\x3b\x8a\x23\xb9\xd8\xfe\xc5\xf9\x7e\xd6\x62\xb9\xcd\x99\xab\x05\x72\xab\xd6\x28\x47\x5d\xa6\x19\xe0\x67\x80\x9b\x71\x9e\xf3\x8d\xac\x98\x36\x2b\x56\xe6\xa5\x2a\x58\x99\xb0\xf8\x21\x4a\xc1\x55\x8d\xf2\xa3\xcb\x62\x02\x49\x18\x6f\xcf\xcd\x86\x0d\x2b\x1b\x34\x13\x0d\x4a\xb4\x5b\xa5\xd7\x67\x9b\x14\xd2\xa2\x96\x68\x81\x59\x72\xb7\xd1\xe5\x88\xaf\xdd\x8d\x9a\x17\x4c\x16\x58\x96\xc9\xfb\xec\xea\x97\x0c\x7e\xf0\x32\x94\xca\x76\x33\xa7\x1a\x58\x30\x91\xd6\xfe\xaa\xbb\xda\xb9\xe0\xe1\x2c\x56\x75\x89\x16\xc1\x34\xb4\xa4\x8b\xa6\x2c\x77\x19\x5c\x37\x12\x3e\xb7\x49\x6d\x5b\xbf\x7c\xa6\x9b\x40\x63\xa5\x36\x08\x35\xd3\x56\xb0\xb2\xdc\x75\xf5\x00\x33\x06\xed\xf0\x2a\xf4\x90\xfa\xe2\x22\x37\x96\xd9\x26\x95\x46\x3d\x7d\xfa\xf4\xe9\xc5\xc5\xc5\x45\x6f\x2d\x7a\x3e\xdc\xb8\xa9\x40\x02\x24\x38\xc9\xaa\x2b\x8b\x91\x4f\x09\x51\x0c\x0d\x87\x50\x4b\xfb\xe0\x0c\x6f\xb2\xf3\xd7\xba\x3f\x77\xba\x91\xc1\xf5\xfe\xd0\x4f\xe6\x06\x57\x7c\xb2\xbd\xb1\xf8\x1d\x99\x3c\x23\x82\x85\xaa\x2a\x26\x79\xee\x4a\x39\x97\x55\x12\xcb\xe5\xcc\xe6\x94\x89\x24\x8c\xee\xf7\x59\x51\xf1\xc3\x21\x14\x80\xfb\x7d\x46\x13\xed\xae\xc6\xc3\xc1\x31\x25\xcd\x3d\x1c\x6e\xb3\x6c\xd0\xb6\x4b\x1f\x77\x79\xdc\xcf\x23\x2d\x94\xfd\x9e\x92\xd9\x60\x80\x40\x1e\x0e\xb7\xb0\x62\xa1\x48\xee\x3b\xdc\x9e\x90\xe9\xd6\xd3\x3d\x97\x57\x71\x1c\xee\x05\x90\x65\x03\xf5\x6e\x30\x11\x17\xf4\xcf\x74\xb1\xd3\x39\xc5\xc9\x28\x9d\x76\xf3\x43\x27\x71\xaf\xa3\x83\x7e\x72\xac\x51\x72\x94\xc5\x43\xc2\xd9\x4d\x3a\xdf\x4e\x77\x44\x92\x31\x7d\x75\xaf\x99\xaf\xd9\x38\xf7\xa3\x20\x62\x68\x74\x2a\x2f\xeb\xd1\x9c\x5a\x24\x5c\xff\x3f\xde\x11\xd1\x9f\x87\xed\x93\xaf\x5b\xc1\xbb\x34\xf7\xe7\xac\xe1\xc4\x93\x91\x42\x32\xbc\x8e\x47\x74\x7b\xe6\x4a\x0e\xa1\x0a\xb5\xf3\xb9\x77\x8e\x43\xe4\x6f\x80\xb6\x36\x1f\xc2\x02\xbc\xd1\xb4\x92\xc1\x6c\x3f\xff\xf9\xeb\xf6\x5b\xf4\x71\xa1\x1a\xc9\xf3\x80\x37\x30\x55\x72\x03\x94\x68\x93\x1c\xbc\x5d\x89\x62\x05\x5b\xd7\x7b\x26\x5c\xdc\xe7\x8d\x76\x85\x50\x34\x5a\x53\x60\xa2\x83\xb1\x9d\xe0\x2e\x29\xff\x9b\x34\x30\xe3\x7c\xa1\xf8\x4d\x4e\x0b\x42\xb3\x29\x0f\xdd\xd0\x54\x17\xd3\x8f\xba\x62\x02\x7a\x8d\x30\x8d\xae\xc2\xe7\x33\x60\x65\x3f\xf5\x6d\x97\x8d\x70\xe8\x76\x46\x30\x02\x4c\x63\x1b\xeb\x67\xdd\x4e\x07\x2e\x34\x16\x36\xec\x7e\xed\x1b\xb6\x63\xdd\xe1\xd7\xd7\xd7\x57\xd7\x37\x09\xdc\x17\xa7\x7f\xc0\x8b\xc3\x9d\x81\x8b\x8b\x81\xeb\x47\xeb\xe3\x83\xb6\x96\x6a\x2b\x73\xca\x14\xc6\x8f\x3a\x49\x51\xa8\xc2\xac\x0c\xba\xb6\x2f\x28\x59\xee\xc0\x34\xb5\x7f\xc3\x78\xe6\xfa\xad\x99\xd9\x19\x8b\x15\xcc\x85\xe4\x42\x2e\x0d\x28\x0d\x4b\x61\x57\xcd\x3c\x2b\x54\xd5\x76\xad\x87\xef\x4b\xad\xe3\x9d\x59\x68\x64\x36\x05\xd3\xbd\x29\x81\x13\x39\xda\x96\x5b\x61\x57\xe0\x1e\xa3\xa0\x42\x63\xd8\x12\x5f\xd0\x20\x6a\x7d\x38\xb8\x07\x06\x3f\x56\x28\xee\x07\xe8\xc7\x48\x35\xd3\x83\xe4\xcf\xca\x20\x24\x7e\xe7\xa4\xfc\x45\x90\x16\x88\x3c\x17\x72\xa3\xd6\x29\x40\x3f\x3a\xda\x22\xba\xf0\x62\xee\x40\xd2\x34\xd8\xae\xdc\xb3\x46\x40\x6a\xfd\x93\x52\x18\xfa\x6b\xd0\xae\x71\xd7\xf6\x50\x28\xdf\x65\x56\xe9\xa1\xfe\x50\x2b\xe3\xda\x0d\x9f\x62\x30\x6f\x69\x3f\x06\x3d\xa3\x36\x63\x93\x31\x97\xca\x7a\xb2\x4b\x18\x7c\xd3\xef\x46\x3a\xae\x76\xd2\x54\xef\xba\x76\x60\x3f\xa3\x1e\x33\xea\xb2\xf7\x4a\x98\x8a\xd9\x22\x95\xbe\x93\x83\xed\xf6\xa0\x09\xdc\x99\xe0\x91\x4f\x85\x3c\xed\x7a\xfb\xf1\x80\x01\xb8\x42\xdf\x58\x72\x46\xdc\xb2\x3a\x7a\x23\xa1\xaa\xa7\xe4\xa8\xcb\xea\x47\xa3\x1b\xc3\x4e\x84\xfa\x9f\xb6\x17\x2b\x45\x2a\x6c\x97\x7e\x94\x8e\x79\x58\x92\xb6\xa1\x49\xb6\xc2\x6f\xc2\xd2\xbd\x98\x1d\xa1\x52\xda\x61\x67\xee\x6d\xd3\xcd\xf1\x3f\xa7\xc4\x39\x42\x1c\x09\xf5\xf5\x43\x00\x9d\xc4\xd5\x1d\x05\x8f\xe8\x89\x01\xdf\xe5\xf1\xa1\xc4\x2f\x16\xa5\x89\xa0\xf1\x8b\xbb\xc3\xc8\x9d\xaf\x71\xc5\xe4\x4b\x4c\x35\x30\xbb\xa3\xbc\x44\xff\x26\x17\xb8\xb7\x6b\x22\x87\x66\x4d\x77\x93\xd1\xfd\x26\x8a\xde\xf1\x9d\x1c\x53\x0f\x3d\xf7\x1e\xbb\xd3\xd3\x5a\x4b\xe0\x3b\x72\xd8\xe5\x85\x14\xc6\x2e\xca\x4c\xee\xda\xbd\x41\x24\xd2\x5b\xf6\xd1\xb8\x86\x26\x6a\x0b\x61\xd4\x8d\x46\x97\x0f\xdf\xb9\xbe\xb1\x15\x4a\xe8\x0f\xd7\xbf\x3a\x04\xae\xd5\xe5\x8e\xd2\xa7\xa3\x1a\xfb\xd6\x3f\xb4\x4e\x01\x52\xb1\x72\xa1\x74\x95\x8c\xdc\x9b\x38\x3e\x84\x20\x83\xf7\x7a\x07\x6c\xc9\x84\x1c\x2b\xe9\xb5\xce\x7f\x37\x4a\xb6\x64\x5b\x54\x7c\xe0\x49\xf3\xdf\x37\x57\x6f\x41\xc8\xba\xb1\xc0\x99\x65\xf0\x26\x44\xe3\x49\x51\xf1\x27\x44\xbd\xc3\x96\x58\x2d\x5a\x43\x5b\x9c\x87\x8d\x93\x7a\xde\xbe\xe7\x6c\xc4\xc5\x65\xb0\xc5\x79\xd8\x11\x33\xd7\xda\x76\x62\xb5\x20\x99\x82\x49\x9f\x6f\xcc\xd1\xdf\xf8\xc8\x43\xe3\xa3\x9b\x94\xc1\xbb\x12\x99\x41\x68\x6a\xce\x2c\x9e\x50\x9f\x55\x50\x28\xb9\x41\x6d\x4f\xcc\x5b\xd5\xd7\x31\x16\xd8\xbe\xbb\x67\xb9\x1a\x37\x9b\x3b\xa9\x47\x10\x27\x39\x3d\x67\x06\x39\x28\xd9\x3f\x3e\x77\x55\x8d\x86\x42\xc8\xa2\x6c\x38\x9e\xc0\x63\xe6\x68\x15\xc6\x83\xe1\x49\x62\xf8\xa0\xa5\x02\x11\x66\x65\x70\x69\x7d\x15\xa9\xec\xca\xe5\x14\x8e\x1d\x16\x8d\x0c\xdc\x10\x09\x64\xe6\x63\xa1\x24\x86\x87\xd5\x8a\xb4\xe0\x97\x1a\x8b\x29\x8c\x10\xb0\xc6\xb5\x8b\x3c\x47\x04\x9f\x93\xd5\xaf\x44\xef\x80\x77\x64\x47\x6a\x55\x63\xfb\xa4\x97\xc1\xc7\xee\x32\x89\x94\x47\xd3\x66\x2d\x2d\xd2\xf6\x88\x49\xcf\xc8\xf5\x1c\xdc\x89\x61\xca\xa9\xea\xb2\x98\x73\xa1\x27\x91\xf5\xbd\x6e\x91\x1f\x6d\xdc\x6b\x25\xa4\x4f\x0d\x7d\xa9\x69\x31\x14\x38\x94\x90\x75\xb4\x34\xa3\x52\x36\x7a\x65\x5c\x6d\x74\xcc\xd4\xc3\x6e\x14\x4c\xda\xdc\xb0\x0d\xe6\x5c\x15\x6b\x4c\x7d\x3e\xf6\x03\x93\x4e\x2b\xdb\x20\xbc\x72\x82\x20\x2a\x57\x48\x8c\x24\xc8\xa2\xc4\x9c\x95\x1a\x19\xdf\xe5\xf8\x45\x98\xe4\xc7\x0b\x3f\xd2\xc1\x08\x92\xe0\x25\x13\xba\x3f\xbe\xbc\x7e\x7b\xf9\xf6\xa7\xe9\x45\x5b\x9c\xf0\xb0\xb2\x6d\xcb\xb4\x6c\x3b\xc3\x1a\x6d\x32\x55\xbe\xa6\x31\x5a\xa8\x4f\xb1\x25\x7c\x0b\x6c\x61\x51\xfb\x34\xfd\x85\xbf\x47\xe9\xf2\xbf\x1d\x3a\x23\xc1\x9e\x7b\x22\x7b\xf0\xcd\xd9\xff\xd4\xa4\x97\x29\x03\x47\x3b\x7e\x3a\x9d\x65\x2a\x0e\x38\xd6\x1a\x0b\xa2\xb9\x5c\x63\x5d\xb2\x22\xb9\x7d\x29\x7b\x26\x3b\xaa\xe4\xa1\x26\x70\x2f\x92\x9e\x15\x8f\x5b\xe1\x5b\x51\x96\x60\x94\x92\xc4\xa2\x9d\x85\x19\xd4\x81\x21\x8d\x2f\x8a\x5c\x33\x03\xb7\x47\xea\x8c\x45\x36\x11\x7b\x88\xc4\x39\xe5\x8c\x59\xa9\xa6\xe4\x04\xcf\xa0\xcd\xe0\x83\xf1\x7d\x3d\xdf\x74\x70\xaf\x7c\x4e\xda\xfd\x1a\x6f\xe8\xb7\x88\x9c\xfc\xc8\x52\x12\x2e\x6f\x81\x32\xd7\xbb\x65\x16\x1d\x3a\xcf\x73\x0f\x30\xe9\xf8\x87\x6d\x06\x17\x6f\xcc\xa8\x9b\x1f\x17\x34\x36\x90\xe2\x37\x68\xfd\x8f\xcf\xc6\x81\x95\xa2\x12\x36\x17\x4b\xa9\x74\x12\x52\xdc\xd2\x81\x9c\xdd\x14\x87\xca\xfd\x3a\x2d\xa5\x88\xfe\xbd\xba\xa9\xd6\x8b\x15\x93\x4b\x64\xf3\xe4\xf7\x42\xbf\xb6\x16\xdb\xda\xcd\x44\xbf\xcb\x9d\xef\x1d\xb6\x3a\x32\xb8\x24\xf3\x54\xff\x4e\xd8\x0b\x0e\x81\xc9\x4b\xb5\xcc\x8d\xf8\x23\x05\xa0\x54\xcb\x1b\xf1\x87\xbb\x5a\xfd\x84\x23\x8f\xbb\x2d\xca\xa4\x7b\x0b\x5e\xa2\x86\x39\xda\x2d\xa2\x84\xe7\xee\xc2\xfe\xee\xf9\x64\x28\x15\x56\x4a\xef\x86\xd0\x78\x89\x73\x01\x7d\xf7\xfd\x3f\x1d\xa4\x7f\x7c\xf7\xfd\x64\x4c\x74\xff\xaa\x26\x55\x7b\x85\xd1\xb3\xc0\x3c\xf7\xf1\xf9\xfb\x73\xfa\x33\x8e\xc7\xb5\xd1\xf2\x5a\xab\x1a\xb5\x15\x98\xba\xaf\x22\x03\xf6\xf8\xca\x37\x5f\xad\x16\xd8\xb6\x5f\x7d\x4f\xae\x53\x16\xdb\xb4\xf7\x73\x62\xa4\x44\xae\xdc\x86\x23\x66\x14\x16\x54\x63\x8d\xe0\x6e\x21\xde\x6b\xb6\x11\x06\xe6\x8d\x28\xf9\x70\x0f\xcf\xb9\xe2\xe9\x40\xd3\xb6\x9d\x44\x05\xed\xee\x3f\x22\x04\x79\x42\xe8\x21\xda\xae\x33\xb9\xdf\x67\xe1\x6f\x63\xb8\xf7\xfb\xac\x12\x32\xf4\xa9\xe8\x7f\x58\x31\x52\xf5\x3a\xa8\x31\x1d\xf4\x87\x2c\x45\x13\xb1\x93\x10\xa4\x28\x35\x3a\x69\x2a\xdc\x93\x9e\x27\xfb\x06\x67\x35\x0b\x1c\xda\xd0\x8a\x74\x7d\xa6\xc1\xac\xe6\x4e\x97\xe9\x88\x62\x4e\xd2\x9d\x58\x33\x18\x2c\xb1\xa0\xd4\x55\xd9\x15\xfa\x16\xf6\x38\xa4\xd8\xd9\x1d\x6d\xb4\x85\xab\xf0\xa4\x29\x15\x13\x86\x42\x49\xcb\xdc\x77\x71\x52\x4d\xeb\x16\x3b\xeb\xbd\x87\x1a\x17\x94\x29\x20\xee\x7d\xc6\x08\x37\xce\x69\xeb\x6d\x1b\xba\x19\xbe\x27\x18\x84\x8e\x2b\xae\xf1\x08\xf5\x3e\xb4\xcc\xd5\x06\xb5\x16\x9c\x63\xaa\x7c\x24\x84\xfd\xef\x2e\xbb\x87\xb6\x6e\x6a\xcc\x15\xfa\xef\x28\x53\x17\x2a\x17\x26\xaf\x9b\x79\x29\x8a\x81\x76\x4e\x90\x8d\x95\xab\xff\xb4\x94\x19\xf0\x13\xef\xb4\x17\x67\x44\x17\x8e\x5b\xe6\x08\x1b\x61\xc4\xbc\xf4\xc5\x1c\x15\xb2\xc4\x8e\xee\x85\x90\x8a\xd8\x1d\x15\x46\x4a\x26\x3e\xd5\x7c\xf5\xfa\x5f\x1f\x7e\x9a\x9c\x5e\x3b\xe9\x87\xe5\xd6\x7c\xbe\xcc\x0d\x32\x5d\xac\xa8\x14\x8c\x0b\xd3\x96\x37\xa9\x7f\x3f\x12\x67\xb4\x0b\x73\x5c\x10\xc5\x3d\x4c\xe7\xba\x23\xb0\x91\x2b\x9a\xa0\x9c\xee\xde\x3f\x7b\xe7\x9e\xb9\x6b\x09\x5a\x7b\xac\xfd\x43\xe1\xc0\xbf\x5c\x78\x75\x4f\xb7\x3a\x44\xe4\x05\xfc\xe8\x10\x74\xff\x66\xc1\x3d\x90\x91\xb2\x87\x02\x18\xfe\x70\xf7\xe1\x18\xfa\x6f\x91\xf1\xed\x3c\x40\x7a\x74\xfb\xe8\x7f\x01\x00\x00\xff\xff\x04\x46\xbe\xe4\xee\x34\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 13550, mode: os.FileMode(420), modTime: time.Unix(1521230444, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json":   wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json":   wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json":   wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json":   wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json":   wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json":   wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json":   wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json":   wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json":   &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json":   &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json":   &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json":   &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json":   &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json":   &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json":   &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json":   &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
