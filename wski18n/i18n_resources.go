// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5d\x6f\xdc\xba\x11\x7d\xf7\xaf\x18\xf8\xc5\x2d\x60\x6c\x93\x5b\x14\x28\x0c\x14\x85\xd1\xe4\xde\xba\x89\xed\xc0\x76\x12\x04\x69\xb0\xe6\x4a\x23\x89\x59\x89\x14\x48\xca\x9b\xcd\x62\xff\x7b\x41\x52\xda\x95\xd7\xa2\x28\x69\x3f\x6c\x04\xf5\x4b\x64\x8b\x73\xce\x99\xe1\xd7\x90\x9a\x7c\x3d\x02\x58\x1c\x01\x00\x1c\xd3\xf0\xf8\x0c\x8e\x33\x19\x8f\x73\x81\x11\xfd\x31\x46\x21\xb8\x38\x3e\xb5\x6f\x95\x20\x4c\xa6\x44\x51\xce\x74\xb3\xb7\xe6\xdd\x11\xc0\xf2\xb4\x05\x61\x46\x04\xa3\x2c\x76\x60\x7c\x2e\xdf\xfa\x50\x64\x11\x04\x28\xa5\x03\xe5\xb6\x7c\xeb\x43\xa1\x2c\xe2\x0e\x88\x0b\xfd\xca\x69\xff\x5d\x72\x36\xce\xa8\x94\x94\xc5\xe3\x20\x0b\xc7\x53\x9c\x3b\x80\xfe\x73\x7b\x7d\x05\x94\xe5\x85\x82\x90\x28\x02\x97\xd6\x0a\x4e\x82\x2c\x3c\x01\x6d\xe7\x64\xd1\xc0\x51\x4a\xe2\x31\x23\x19\xca\x9c\x04\xe8\xe0\x58\xbf\xf7\x63\x91\x42\x25\x2d\x72\xf5\x6b\x2e\xe8\x4f\xf3\x07\xb8\x7f\xf7\xf6\xcb\x7d\x17\xd0\x9c\x8e\x13\x2e\x95\x03\x74\x96\x50\x39\x85\xf3\x0f\x17\x70\xff\xef\xeb\xdb\xbb\xae\x88\x0f\x28\xa4\x46\xf0\x82\x7e\x7a\x7b\x73\x7b\x71\x7d\xd5\x05\x77\x8a\xf3\x71\x44\x53\x57\x24\x73\xa2\x12\xe0\x11\xa8\x04\x61\x34\xc5\x39\x98\xb6\x7e\xd8\x00\x85\xea\x8c\xab\x1b\x7b\x80\x33\xc2\x68\x84\x52\x8d\x19\x57\xe3\x88\x17\x2c\x74\x00\x5f\x96\x0d\x0d\x1e\x30\xae\xc0\xb4\x06\xa2\xc0\x70\x2e\x16\x23\xfd\xef\x72\x39\xfa\x2f\x73\xd3\x15\x66\x20\xaf\x48\x43\xcc\x53\xee\x1a\x21\x1f\xcd\xf0\x5d\xe1\x42\xc4\x05\x58\x83\x0c\x99\xea\x43\x53\xb0\xde\x44\x95\x89\x97\x4a\x14\x4c\xd1\x0c\xf5\x24\xcd\x88\x0a\x12\x07\xc7\x8d\x6d\xa6\x59\x4a\x8b\xe5\x12\x64\x8e\x01\x8d\x28\x86\x40\x19\x54\x6a\x21\xe4\x28\x4d\x80\x0d\x1e\xcc\xa8\x4a\x80\x04\x66\x9a\x48\x5e\x88\x00\x6d\x17\xe0\x0f\x85\x4c\x0f\x5b\x8d\x89\x3f\x54\x29\xbc\x6c\xb9\x58\x8c\xec\x93\xa7\x43\x2a\xf9\x41\x42\x58\x8c\xae\xce\xaf\xd4\x97\xad\x40\xf1\xc7\x8e\x4c\x88\xc4\x10\x38\x33\xc3\xae\x55\xeb\x16\x12\x0b\x26\x8b\x3c\xe7\x42\x79\x65\x76\x08\x32\xb5\x21\x5e\x21\x1a\x61\x35\xf5\x5d\xc5\xd9\x46\xe3\x94\x66\x54\x8d\x69\xcc\xb8\x70\xaa\xbb\x60\x0f\x24\xa5\x61\xc5\x60\x4c\x34\x8f\x79\x58\x2e\x37\xe5\x95\x60\xad\xec\x01\x67\x11\x8d\x57\x1b\x84\x5e\x53\xdd\x2b\xee\x9d\xf6\xae\x50\x09\x32\x45\x03\xbb\xec\xea\x85\xa7\x8c\x84\x85\x2a\xfa\x32\xe6\xb4\x65\x39\xd6\x8c\x7a\xdd\xd4\x4d\xb6\xe3\xf1\x6d\x4c\x9a\x69\xd5\x66\x18\x55\xe9\x4a\xdb\x5e\xbd\xe9\xcf\x62\x31\xd2\x8f\xcb\xe5\x29\x44\x82\x67\xfa\x77\x3b\xea\x3d\x83\xa6\x62\xb4\xdd\xe5\x63\xd4\xcd\xaa\x9e\x92\xa8\x86\x71\xad\x82\xe3\x63\x7b\x14\xc5\xc5\x62\xb4\xfa\xbd\xb7\x97\x28\xc4\x38\x46\x55\xcd\x5f\x57\x0e\xf5\x3b\xa1\xa9\x5d\x52\x62\x54\x66\x0a\xae\x27\x65\x65\x6a\x89\xaf\x73\x64\x9f\xcd\x66\x2c\x51\x3c\xd0\x00\xcf\xcc\xd2\x27\x44\x5d\x48\xe3\x76\xc0\x32\x22\x64\x42\xd2\x74\x9c\xf2\x80\xa4\xae\x7d\xa0\x6a\x56\x63\xd2\xd1\xb2\xec\xc6\x12\x1e\x48\x5a\xa0\x6c\xdf\x7c\xd6\x6c\x0c\xd5\x8c\x8b\xe9\x20\x3e\xca\x14\x0a\x86\xed\xbb\xcf\x7a\x93\x1a\xe7\x82\x67\xb9\x6b\x26\xbe\xe1\x30\xe7\x05\x08\x24\x69\x3a\x87\x19\x61\x4a\x07\xdc\x5a\x83\x4a\xa8\xfc\x27\xfc\x69\xfe\x97\xab\x3f\x9f\x41\x27\x2e\x93\x15\x63\xe8\x5c\xea\xde\xac\x9a\x42\xc0\xb3\x3c\x45\xdd\x99\x65\x2a\x1d\x15\x69\x3a\xef\xea\x54\x64\x06\x87\x9f\x25\xa4\x61\x39\xe5\x2d\x9b\x26\x5b\x71\xc1\x4d\xc1\xe0\x7e\x26\xa7\xa5\xbf\xd5\xde\x7e\xaf\x63\x20\x30\xe3\x0f\x08\x39\x11\x8a\x9a\xe0\xd8\x77\x18\x02\x91\x12\x55\x7b\x57\xd7\x94\x06\x84\x05\x98\xba\xc5\x5e\xbf\x1b\xc1\xbf\x6c\x1b\x9d\x6d\x74\xc8\x2e\x22\xee\x9a\xa7\xff\xd8\xee\xa7\x99\xee\x0f\xae\xc0\x9c\xba\x20\x10\x48\x94\x16\x99\x93\x60\x4a\x62\xb4\x29\x88\x7d\x97\xa1\x94\x24\xae\xcd\x3c\x20\x2c\xac\xec\x78\x68\x5f\xe8\x07\x3b\x27\x9b\xf5\xef\x85\xaa\xab\x53\xe5\xf6\xfb\x6b\xf9\x94\xd3\x43\x38\xb4\x1d\x4d\x57\x67\x44\x91\x1e\x64\xc8\x6d\xc9\xe3\x71\x47\xa2\x32\x2c\x66\x43\x53\x44\x15\x52\x1f\xcb\xf6\xec\xdb\x5e\x48\xbb\xf6\x9b\x12\x34\x8e\x51\x1c\xa2\xeb\xb6\xa7\xea\xeb\x54\x84\x18\x1e\xd2\xb3\x2d\xf9\xfa\xae\xf0\x13\xca\x42\xfd\xfb\x01\x57\xc5\xed\x29\x1b\x9d\xac\x25\x05\x3c\xd2\xdb\x2c\xb2\x10\x59\x30\xd7\xa6\x21\xe6\x57\xc4\x1c\x0a\xf7\x9b\x2f\x78\xd3\x95\x67\x53\xd6\x12\xb2\xda\xde\xb8\x58\x8c\x78\xa1\xf2\x42\x9f\x4a\x47\xa3\x51\xab\x3f\x2d\x66\x1e\x32\xb3\x2c\xf5\xa5\x6a\x34\xf2\x10\x3d\x9a\x53\x7d\x09\x5b\x8d\x3d\xc4\xd5\x50\xef\xcb\xe9\xb2\xeb\x48\x57\xcd\xac\xa1\xb4\x2e\x7b\x0f\xfd\xe3\x11\xdd\x8b\xb9\xc5\xb4\x91\x74\x9d\x4c\x6b\xeb\xcd\xbb\x3a\x5f\x02\xde\x64\xd3\x48\xf3\xb1\xd6\xa8\x7d\x62\x3a\x59\x7b\x41\xf8\x16\x34\x3b\xc3\x9f\x9e\xa4\xbc\xeb\x8d\xcb\xf0\xe5\x7a\x5d\x21\x3c\x1d\x1d\xeb\xa5\xd2\x3d\xb2\xba\x5a\xfb\xfd\x1f\xba\x52\x77\x0b\xcd\x16\xe8\x9e\x1d\x3e\xc4\x14\x0f\x73\xdc\xd9\x1d\x53\x57\x97\xf6\x9c\x44\xef\x8a\xe7\xff\x07\x84\x8d\x78\xee\xff\x80\xb0\x43\xaa\xbe\x4e\xed\xf9\x80\xb0\x6b\xbe\xae\xee\xed\xff\x0a\x68\x87\x54\x8d\x4e\x7d\x3e\xbf\xb9\xba\xb8\xfa\xe3\x0c\xee\x12\x84\x13\x7b\x73\x7d\x02\x5f\xce\x2f\xdf\xdb\x4b\x75\xb6\x0a\x29\x32\x45\x95\xb9\x66\x0f\x31\x17\x18\x10\x85\xe1\x08\x3e\xa4\x48\x24\x42\x21\x11\x4e\x74\xd0\x4f\x80\x32\xa9\x90\xe8\xb4\x1a\x42\x94\x81\xa0\x13\xfb\x71\xa9\xfc\xd2\x64\xbf\xad\xb4\x1c\x04\x9e\x53\x51\xd7\x7e\xaf\x72\xc0\x03\xf6\xff\xee\x28\x5d\x79\x54\x53\x8e\x99\x10\x09\x13\x44\xf6\x28\x37\x5a\x1d\x9d\x5a\xb3\xab\x61\x70\x8d\xe2\x3e\xb4\xa4\xde\x43\x15\x6e\x87\xd9\x2a\x73\x97\xf2\x76\x20\xeb\xae\x9c\x2e\xbb\x90\x35\x0c\xab\x55\xd6\x93\xa3\xe3\xb6\xda\x06\x00\x36\x0a\xbc\xd9\x3c\x4c\x0f\x15\x36\x00\xa8\x51\xd0\xf9\xd3\x8b\x84\xa1\x92\x06\x41\x75\x58\x38\xd6\x19\x7a\x33\x5c\x75\xb0\xec\xbe\x76\xf4\x43\xf4\x4d\x80\x72\xeb\xa8\xa3\x95\xa7\xbf\x4e\x63\xbe\xdd\xbc\x75\x14\xe9\x2c\xb2\x17\x6d\x07\x43\xcf\x28\xa9\x4a\x34\x7a\x90\x76\x34\x6e\x24\x5e\x7f\xaa\xa6\xec\x81\x4f\xd1\xa4\xd1\x36\x11\x4b\x90\x1d\x28\x27\x3c\xb0\x88\xf6\x9c\xea\x92\xb0\x90\x28\x2e\xe6\x10\x51\x4c\x43\xa8\x16\xf5\x4f\xb6\xa2\x0e\xb2\x42\x2a\x98\xa0\x3e\x77\x74\xc8\x87\x7a\xa2\xb5\x4b\xdb\x34\xae\x2a\x7e\xc8\x83\xcd\x8d\x74\xd8\x82\x42\x08\x7d\x0e\x5f\xdf\xa8\x96\xa5\x80\x1d\xc4\x6e\x8d\x3f\x2c\xb2\xef\x69\x80\x4c\xe2\x8e\x22\xeb\x40\xeb\x16\xd9\xca\x78\x5f\x91\x1d\x8c\xdf\x2e\xbf\x82\x35\xa5\x57\xe6\xf1\xe2\xcd\x72\x59\xb1\x10\xb0\x55\x5a\x9c\x61\x07\xa9\xbd\xb0\x9a\xcb\x08\x30\xe3\x62\x7e\x4b\x7f\xa2\x3e\x89\x9b\x5a\x30\xf9\xa8\x14\x4c\x26\xbc\x48\x43\xdd\x39\x84\x99\xa2\x10\x3d\xa9\x27\xa8\x66\x7a\xc5\x7a\xfd\xdb\xdf\xcd\xf4\xfd\xdb\xeb\xdf\xdc\x6a\x77\x4a\xd1\xe8\x84\xa2\x19\xf2\x42\x0d\x82\x7f\xf5\xca\xc0\xff\xf5\x95\xfe\x71\x3b\xb1\x53\x8a\x46\x27\x52\x1e\x0f\x8d\x91\xc5\x7f\xdd\x22\x7f\x47\xe0\xbe\x91\x6d\x90\x57\x45\x85\xcc\xa6\x15\xab\x7a\xb8\x84\xb0\x98\x4c\x52\xd4\xe7\x44\xc5\x81\xf1\xd9\x29\xcc\x12\x6a\x8a\x4c\xd3\x54\xd3\xd7\x8a\x0e\xbd\x23\x7f\x87\x5c\xcd\x49\x4d\x59\x8d\x56\x95\x33\x93\x3c\x4f\xab\xc2\x45\xbd\x7d\xe7\x26\x6d\xb2\xb7\xdc\xb6\x7c\xb2\x76\xb3\x6a\xca\x4e\x89\x82\xaf\x36\xc1\x2a\xff\xfc\x3b\xd5\x99\xc6\xb7\xcd\x12\x5b\xd5\x89\xa9\xaa\x80\x5e\x6e\xd4\x6a\xd6\xa9\xaa\x3f\x96\x44\xae\xfb\xe9\x5f\xc2\xb5\xf6\xb1\x58\x27\x6a\xd0\x6f\x06\x81\xe4\x9c\xe9\x91\xb0\xbe\xdc\x38\x85\x7c\x7d\xb9\x91\x0b\xfe\x1d\x03\x55\xdd\x6e\x74\x18\x94\xfb\x21\xed\xe5\xe8\xe3\xd8\x1d\xc4\xcd\x9d\x50\x76\xfc\x14\x62\x4b\xf9\xcc\xbd\x14\x45\xd9\xfa\x95\x02\xc2\x42\xe8\x44\x34\x23\x8c\xc4\x18\xd6\x4b\xde\xf6\xf4\x85\xfd\xc5\xca\x6d\x3e\x4d\x98\xff\x3f\xd1\x5c\x73\x5e\x2e\x95\xe6\xe2\xcf\xfa\x60\x6a\x42\xeb\x99\x4f\xd5\x87\x8b\xc5\xa8\x7c\x6c\x9a\xbc\x2b\x9c\x09\xd6\x3f\x7b\xb6\x2d\xf1\xcf\xaf\xcb\x13\x2e\xd5\x74\x5c\x7d\x11\x01\x7b\x3e\x65\x9e\x90\xd5\x2a\x0a\xca\xc7\x97\x12\xb2\xe7\x53\xa6\x43\x76\xf4\xed\xe8\x7f\x01\x00\x00\xff\xff\x0e\x85\x05\x52\x86\x38\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 14470, mode: os.FileMode(420), modTime: time.Unix(1515441758, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

