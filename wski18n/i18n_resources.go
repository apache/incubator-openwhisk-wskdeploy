// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\x18\xe4\xc5\x2f\x81\xd1\xee\xe1\x80\x43\xdf\x82\x6b\x77\x2f\xd8\x6d\x52\x24\xd9\x2d\x16\xbd\x22\xa1\xa5\x91\xc5\x5a\x22\x05\x92\x4a\xea\x0a\xfe\xee\x07\x92\x92\xff\x24\x14\x45\xc9\xb2\x13\x14\x97\x27\xc7\xd2\xfc\x7e\x33\xc3\x21\x39\x43\x8e\xbf\x9c\x00\x54\x27\x00\x00\xa7\x34\x3e\x7d\x07\xa7\xb9\x9c\xdf\x15\x02\x13\xfa\xfd\x0e\x85\xe0\xe2\xf4\xcc\x3e\x55\x82\x30\x99\x11\x45\x39\xd3\xaf\x7d\x30\xcf\x4e\x00\x56\x67\x1e\x84\x47\x22\x18\x65\xf3\x16\x8c\xcf\xf5\xd3\x2e\x14\x59\x46\x11\x4a\xd9\x82\x72\x53\x3f\xed\x42\xa1\x2c\xe1\x2d\x10\x17\xfa\x91\x53\xfe\x23\x95\x92\xb2\x39\x44\x79\x0c\x0b\x5c\xb6\xc8\x37\x6f\x4d\xa2\x3c\x9e\x00\x65\x45\xa9\xcc\xdb\x4e\x48\x52\xaa\x94\x0b\xfa\xc3\x48\xc3\xfd\xef\x1f\xfe\xbe\x6f\x81\x75\xbd\xe9\x84\x7c\x4c\xa9\x5c\xc0\xf9\xa7\x0b\xb8\xff\xcf\xd5\xcd\x6d\x1b\xde\xb3\xd7\x9c\x60\x8c\xe4\x28\x0b\x12\x61\x0b\xca\xe6\x79\x97\x2e\x7f\x7d\xb8\xbe\xb9\xb8\xba\x0c\x50\x67\xfd\xa6\x7b\x10\x09\xa3\x09\x4a\x75\xc7\xb8\xba\x4b\x78\xc9\xe2\x3b\xa2\xee\x0a\xa2\xd2\xb6\xf1\xa8\x05\x20\xa1\x19\x02\xe3\x0a\x8c\x14\x10\x05\x5a\x0a\xbe\x54\xd5\x54\x7f\x58\xad\xbe\x4e\xff\xcb\xda\x23\xa7\xd4\xa3\x7a\xb7\xa6\x8f\xb1\xc8\x78\x5b\x0c\xfc\x69\x22\x60\x0b\x19\x12\x2e\xc0\x8a\xe4\xc8\x54\x1f\xa2\x92\x0d\xa0\x6a\x84\xbc\x64\x2a\x45\x10\x25\x53\x34\x47\xa0\xd2\xb8\x46\x96\x45\xc1\x85\xc2\x18\x66\x4b\xb8\x2a\x90\x7d\x36\xe3\x52\x64\x44\x25\x5c\xe4\x1a\xca\xad\xc6\x30\x2c\xa7\x5a\x9f\xcf\xaf\x2f\x2f\x2e\x7f\x7b\x07\xd7\x35\x9e\x2c\x30\xa2\x09\xc5\x18\x28\x83\xc6\x2f\xf0\xf7\xf9\xc7\x3f\xa0\xaa\xa6\x35\xeb\x6a\x05\x31\x47\xcb\x9c\x13\x15\xa5\xf0\x48\x55\x0a\x24\x32\xf3\x45\xf2\x52\x44\x68\x43\x00\xbf\x2b\x64\x52\x7f\x5b\x55\x53\xfc\xae\x56\x2b\xe3\xb2\xfa\xcd\xaa\x9a\xda\x4f\xab\x55\xbb\xb5\xaf\x4a\x45\xbf\x13\xad\xd3\xdf\x9b\x68\x80\x94\x48\x88\x52\x2e\x91\x01\x29\x0a\xc1\x0b\x41\x89\xda\x0c\xdc\x8e\xaa\x33\x22\x31\x06\xce\x40\x0f\xad\x57\x47\xad\x9a\x4a\x89\x1a\xe6\xc2\x97\x57\x70\xdc\x28\xf4\x47\xbf\x44\xf1\x80\xa2\xd6\x08\x8f\x13\x74\x23\x68\xe4\x74\xd1\x9f\x6c\x03\xd9\x8c\x90\x5a\x16\x78\x06\x12\x15\x28\x0e\x8c\xc7\xf8\xad\x6d\xab\x0e\x95\x76\x52\xdf\x6a\x4d\x4b\x95\x22\x53\x34\xb2\x5b\xe2\x02\x97\x8d\xa5\x11\x67\x09\x9d\x97\x02\xe3\x76\x6f\xf6\x41\x68\x55\x41\xef\x57\x29\x97\xaa\x2f\xb1\x5f\xae\x95\x6e\xbd\xdb\xf6\xe5\xeb\x10\x0c\xb2\x4f\x47\x44\x41\xf5\x7f\xab\xd5\x19\x24\x82\xe7\xf5\x57\x76\xce\xf9\x22\x77\x10\x94\x77\xdc\x9b\xb1\x92\xa8\xb6\x00\x4a\x95\x86\x29\x13\x0c\x11\x36\x14\x55\x35\x5d\xff\xbf\x6d\xd1\xfa\xcb\x30\xad\x86\x63\x3a\xd5\xfc\x95\xd0\x0c\x63\x3d\x93\xe6\x7a\x42\xa5\x08\xcf\x26\x9c\xb4\xb0\xbb\x8b\x01\x8d\xf0\x9d\xd9\x77\x84\xf0\x69\x3c\x1a\xbc\x53\xf9\x1b\x45\x84\x59\x05\x4a\x96\x13\x21\x53\x92\x19\x18\x9b\x26\xea\xec\xdd\x42\x67\x3c\x22\x19\x3c\x90\xac\x44\xd9\xae\xea\x40\xb0\x96\x45\xcf\x07\x41\x99\x42\xc1\x50\xb5\xeb\x12\x2e\xef\xa4\x7f\xbf\x4e\xeb\x20\xe2\x79\x91\xa1\x76\x77\x5d\x13\x25\x65\x96\x2d\xdb\x99\x83\x44\x9d\xa4\xbf\x71\x05\xa6\xfe\x83\x48\x20\x51\x3a\xe1\x2c\x48\xb4\x20\x73\xb4\x19\x8c\x7d\x96\xa3\x94\x64\xbe\x35\xb8\x40\x58\xdc\xc8\xf1\xd8\x3e\xd0\x1f\x7c\x51\x75\x10\xaa\x50\xa3\xea\xbd\xef\xe7\xb2\xa9\xa0\xc7\x30\x68\x3f\x9a\x50\x63\x44\x99\x1d\x25\xe4\xf6\xe4\xe9\x30\x47\xa2\x32\x2c\x66\xcd\x54\x44\x95\x12\x78\x72\x68\xdb\x0e\x42\x1a\x3a\x6e\x4a\xd0\xf9\x1c\xc5\x31\x86\x6e\x7f\xaa\xbe\x46\x25\x88\xf1\x31\x2d\xdb\x93\xaf\xef\x0a\x3f\xa3\x2c\xd6\xff\x1f\x71\x55\xdc\x9f\xb2\x6b\xef\xe4\x09\xc4\x58\x20\x8b\x91\x45\x4b\x2d\x1a\x63\x71\x49\x6c\x89\x4e\xe3\x3a\x45\xb6\x7b\xa4\xde\x22\xd7\x3b\xa4\xae\xbd\xe0\xfe\x51\x2e\xec\xf1\xca\xfa\x9c\xe5\x5e\x67\x17\x02\x73\xfe\x80\x50\x10\xa1\x28\xc9\xb2\x65\x7d\xe0\x83\x31\x10\x29\x51\x79\x12\x94\xd7\xa0\x99\xc7\x65\x5b\x7b\x63\x55\x4d\x79\xa9\x8a\x52\xad\x56\x30\x9d\x4e\xbd\xf6\x78\xc4\x3a\xc8\xcc\xb2\xd4\x97\xca\x29\xd4\x41\xb4\x33\xa7\xfa\x12\x7a\x85\x3b\x88\x9b\x50\xef\xcb\xd9\x26\x17\x48\xd7\xcc\xac\xa1\xb4\x6d\xf2\x1d\xf4\xbb\x11\xdd\x8b\xd9\x23\xea\x24\xbd\xfa\x7d\x0a\xff\x26\x2c\xc2\x2c\xab\xc5\xb7\x8e\x41\xdd\x64\x5e\x91\x0e\x12\x2d\xf0\xf4\xb0\xb5\x8b\xc5\x25\xd3\x52\x6b\x6c\x5e\xf2\xcf\x7e\x4f\xb9\xd1\x03\xa2\x6b\xd5\xb4\xcb\xc8\x80\x7a\xa3\x4d\xf0\xf5\x5a\xdd\x20\x3c\x0f\xc1\xcd\x7a\xdc\x1e\xbe\xa1\xd2\xdd\xf6\x0f\xdd\x0e\xc2\x5c\xb3\x07\x7a\x47\x1a\x11\x63\x86\xc7\xa9\xa9\xc6\x63\x0a\x35\xe9\xc0\x99\xfa\x58\x3c\xff\xaf\x42\x9e\xf8\xf3\xf0\x55\xc8\x88\x54\x7d\x8d\x3a\x70\x15\x32\x36\x5f\xa8\x79\x87\x3f\x67\x1a\x91\xca\x7f\x91\x74\x9b\x22\x4c\xec\xa9\xed\xc4\xde\xd2\x98\x13\x68\xb6\x76\x29\x32\x45\x95\x39\x93\x8e\xb1\x10\x18\x11\x85\xf1\x14\x3e\x65\x48\x24\x42\x29\x11\x26\xda\xe9\x13\xa0\x4c\x2a\x24\x3a\x77\x87\x18\x65\x24\xe8\xcc\x5e\x01\xd5\xf7\x41\xf6\x36\xc3\x53\x6d\xbc\xa4\x46\xa1\xe3\xde\x24\x9a\x47\x1c\xff\xf1\x28\xdb\xf2\x28\x57\x22\x9b\x12\x09\x33\x44\xb6\x93\x1b\xad\xeb\x33\x6f\x76\x35\x0c\xce\xa9\xdc\x27\x4f\x7e\x3f\x54\xc3\xfd\x30\xbd\x6a\x8e\xa9\xde\x08\x6a\xdd\xd6\xd3\x65\x0c\xb5\x86\x61\x79\xd5\x7a\x56\x9f\xee\xab\xdb\x00\x40\xa7\x82\xd7\x4f\x2b\xf6\xa1\x8a\x0d\x00\x72\x2a\x74\xfe\xfc\xb4\x62\xa8\x4a\x83\xa0\x02\x16\x8e\x4d\x86\xee\x86\x6b\x0a\xcb\xf0\xb5\xa3\x1f\x62\xd7\x04\xa8\xb7\x8e\x6d\xb4\xba\xfa\x0b\x8a\x79\xbf\xb8\x37\x8a\x74\x16\xd9\x8b\x36\x40\xb0\x23\x4a\x9a\x16\x89\x1e\xa4\x81\xc2\x1d\x37\xba\x94\x3d\xf0\x05\x9a\x34\xda\x26\x62\x29\xb2\x23\xe5\x84\x47\x56\xc2\x9f\x53\x7d\x24\x2c\x26\x8a\x8b\x25\x24\x14\xb3\x18\x9a\x45\xfd\x2f\x14\xa6\xf3\x27\x2f\xa5\x82\x19\xea\xba\x23\x20\x1f\xea\x89\xe6\x57\xed\xa9\x70\xd3\x85\x43\x1e\x6c\x6e\xa4\xdd\x16\x95\x42\xe8\x3a\x7c\x73\x6c\xfb\x60\xdf\x0e\x50\x76\x6f\xfc\x61\x9e\xfd\x83\x46\xc8\x24\x8e\xe4\xd9\x16\xb4\x30\xcf\x36\xc2\x87\xf2\xec\x60\x7c\xbf\xfa\x0d\x6c\x55\x4d\x33\xfb\xf1\xe2\xfd\xa6\x4b\x8b\xc0\x03\xc9\x68\x0c\x9c\x61\x80\xaa\xbd\xb0\xdc\x1d\xa7\x98\x73\xb1\xbc\xa1\x3f\x50\x57\xe2\x19\xcd\xa9\x92\x3b\xfd\x64\x32\xe5\x65\x16\xeb\xc1\x21\xcc\xf4\x27\xe8\x49\x3d\x43\xf5\xa8\x57\xac\xb7\xbf\xfc\xcb\x4c\xdf\x7f\xbe\xfd\xa5\x5d\xdb\x51\x29\xdc\x9d\xac\x34\x47\x5e\xaa\x41\xf0\x6f\xde\x18\xf8\x7f\xbc\xd1\x7f\x9e\x06\xd7\x31\x29\x9c\x46\x64\x7c\x3e\xd4\x47\x16\xff\xad\x47\xfd\x91\xc0\xfd\x91\x7d\xc1\x6c\xbc\x19\x06\xdb\x53\x37\xa9\xfd\x36\xd1\xcc\xf5\x09\xdd\x36\x33\x95\x40\xe7\x8c\x8b\xad\xba\x32\x4a\x31\x5a\xd8\x0d\x21\xa4\x88\x3d\x0c\x69\x7f\x43\x37\x51\x7e\x5c\x5b\x47\xe1\xed\x6f\x6e\x1d\x50\xc7\xb5\x75\x7f\xd2\xae\xa5\xd9\x4c\x0d\xbb\x9c\xe6\x54\x31\x9b\x17\xaf\xbb\x26\x53\xc2\xe6\x64\x96\x21\x10\x69\x3b\x54\x1f\xcf\xe0\x31\xa5\xa6\x93\x3b\xcb\xf4\xfc\x69\xf8\x43\x96\xee\x11\xb9\x9c\x66\x99\x9f\x37\xf0\xc4\xec\x57\xd3\x05\x2e\x4d\x5b\x74\x8b\x5a\xee\x77\xbb\x61\x23\x14\x2a\x18\x77\xf3\xb2\xb7\xaf\xb2\x79\x9f\x14\x45\xd6\xf4\xe6\x9a\xfe\x50\x53\xa7\xd8\x6b\x25\xbd\xc9\xb1\xad\xab\x3a\xdb\xf2\x4d\x94\xf9\x25\xc4\xe6\xeb\x5f\xa9\x4e\xed\xbf\x3e\xed\xbb\x57\x41\x4c\xcd\x2f\x47\x56\x96\x2c\xdf\xf9\x21\x49\x4d\xd5\x7c\x59\x13\xb5\x5d\x08\xfd\x14\xa6\xf9\xe7\xce\x36\x91\x43\x7f\x13\xb4\x92\x73\xa6\x23\x77\x73\x9a\x78\x06\xc5\xe6\x34\xb1\x10\xfc\x1b\x46\xaa\x39\x4e\x0c\x98\x44\x87\x21\xed\x65\xe8\xae\xef\x8e\x62\xe6\x28\x94\x81\x77\x8f\xb6\x4d\xd4\x1c\x04\x53\x94\xde\x6b\x41\x88\x4b\xa1\x2b\xbf\x9c\x30\x32\xc7\x78\xfb\x22\xfd\x40\x7d\x33\xaf\x56\x5d\x77\xf9\x6e\x7e\x77\xe6\xfe\x91\x45\xbd\xb4\x9b\x93\x76\x6b\x83\xe9\x07\xde\x2e\x35\x9a\x31\xac\xaa\x69\xfd\xd1\x35\x79\xd7\x38\x33\xdc\xee\x33\xf0\x6d\x49\x2f\xaf\x57\x87\xbb\x94\xeb\x7c\xe8\x55\x38\xec\xe5\x34\xeb\x70\xd9\x56\x9f\x50\xfd\xf1\xb5\xb8\xec\xe5\x34\xd3\x2e\x3b\x39\xf9\x7a\xf2\xbf\x00\x00\x00\xff\xff\x02\xa2\x29\x87\xe7\x3c\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 15591, mode: os.FileMode(420), modTime: time.Unix(1515090555, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1505354770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

