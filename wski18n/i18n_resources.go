// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x5f\x6f\xdc\xb8\x11\x7f\xf7\xa7\x18\xe4\xe5\x5a\x20\xd9\x4b\xae\x28\x50\x04\x08\x8a\xa2\x49\x71\xee\x5d\xe2\x20\x76\x7a\x28\x72\x86\x4c\x8b\x23\x2d\x6f\x29\x52\x20\xa9\xdd\x6c\x8c\xed\x67\x2f\x86\x7f\xa4\x5d\xdb\x94\xb4\x9b\x1c\x2e\x4f\xf2\x72\x38\xbf\xe1\x90\x33\xf3\x1b\x32\x9f\xce\x00\xee\xce\x00\x00\x9e\x08\xfe\xe4\x25\x3c\x69\x6c\x5d\xb4\x06\x2b\xf1\xb9\x40\x63\xb4\x79\xf2\x34\x8c\x3a\xc3\x94\x95\xcc\x09\xad\x48\xec\x8d\x1f\x3b\x03\xd8\x3d\x1d\xd1\xb0\x61\x46\x09\x55\x67\x74\xfc\x12\x47\xa7\xb4\xd8\xae\x2c\xd1\xda\x8c\x96\xcb\x38\x3a\xa5\x45\xa8\x4a\x67\x54\x9c\xd3\x50\x76\xfe\x6f\x56\xab\xa2\x11\xd6\x0a\x55\x17\x65\xc3\x8b\x15\x6e\x33\x8a\xfe\x7d\x79\xf1\x0e\x84\x6a\x3b\x07\x9c\x39\x06\x6f\xc3\x2c\xf8\xae\x6c\xf8\x77\x40\xf3\xb2\x28\xa4\xb8\x92\xac\x2e\xac\x33\xa2\x74\x19\x00\x26\xa5\xde\x40\x67\xd1\x00\xc7\x4a\x28\xe4\x60\x3a\xe5\x44\x83\xb0\x46\x63\x49\x6a\x1a\x61\x8d\xe6\x56\x5b\xcc\x40\xc4\x51\xd0\x9d\x6b\x3b\x37\x43\x9d\xb7\xa9\x68\x98\x62\x35\xf2\x51\xbb\x5b\xa3\x7f\xc3\xd2\x01\x2a\x27\x9c\x40\x0b\x4e\xc3\x2d\x42\xc3\xcc\x0a\x39\x24\x0d\xa3\x88\x4e\xd7\xb5\xc4\x62\x89\xb2\xcd\x40\x5d\x79\x09\xf8\x11\x65\x0b\x0d\x5a\xcb\x6a\x9c\xb1\x08\xa1\x1c\x1a\x56\x3a\xb1\xce\xf9\x25\x2c\x61\x4f\x8e\x96\xd3\xb4\x6e\xe4\xe4\xdd\x73\x11\xc7\x8a\x75\xd2\xe5\x0e\x72\x00\xe8\x85\xa6\xb5\x2a\xd6\xa0\x6d\x59\x99\xb3\x78\x18\x9f\xd6\x15\xb7\x26\xa3\xa9\x65\x6e\x49\x9b\x65\xd1\xac\xd1\x48\xb4\x36\xed\xe5\x0c\xd5\x0d\x53\xa2\x42\x3b\xa5\x3b\x89\x41\x25\xe4\x1c\x8b\x39\xb6\x52\x6f\x1b\x54\x53\x8a\x07\xc1\xb9\xaa\x59\xe7\x96\x23\x51\x4e\xc3\xda\x88\x2f\xfe\x07\xb8\xf9\xe9\xcd\x7f\x6f\xe6\x28\x6d\x45\xb1\xd4\x59\x37\x6c\x96\xc2\xae\xe0\x1f\xef\xcf\xe1\xe6\xc7\x8b\xcb\xab\xb9\x1a\x53\xd4\x4f\x2a\xfd\xcf\x9b\x0f\x97\xe7\x17\xef\xe6\xe8\x5d\xe1\xb6\xf0\x9e\x1a\xf1\xab\xae\xc0\x2d\x11\x16\x2b\xdc\xce\xf5\x6a\x89\xc6\xcd\xd6\x4b\xc2\x33\x14\xb7\xdd\xad\x14\x76\x59\x48\x9d\xad\x32\xef\x83\x08\x30\x68\x59\xb9\x62\x35\xd2\x99\x20\x0c\x83\xb5\xb0\xce\x6c\xc1\xa2\x03\xa1\xe0\x7f\xdf\x2f\x36\x76\xd5\x1a\xdd\x4e\x04\x5f\x02\xb5\x4b\x6d\x72\xdb\xf9\x28\x2a\xeb\x31\xc7\xaa\x15\x25\x95\x78\xba\x33\xca\x5f\x6b\xd8\xea\x0e\x0c\x32\x29\xb7\xb0\x61\xca\x0d\xe7\x1c\xdc\x52\xd8\xbf\xc3\x9f\xb6\xdf\xbf\xfb\xf3\x4b\x98\xc4\xe9\xd4\x09\x48\x69\xd2\x91\x58\x14\x37\xf9\xa8\xfa\x55\xbd\x97\xc8\xac\x4f\xab\x6b\xc1\x11\x98\x02\x9a\x41\xc5\xa2\x0c\xa1\xe6\xf4\x0a\xd5\x1c\xa0\x56\x8c\x44\xda\x03\x20\x3a\x0c\x24\x4f\xf9\x12\x2a\x6d\xe0\xa2\x45\xf5\x0b\x85\xce\x0c\xac\xa9\x24\xfc\x70\x59\xd0\x4f\x81\x4f\x31\xdb\xc3\x9a\xc9\x0e\x41\x58\xa8\x3b\xb4\xee\x7a\x0c\x37\xe5\xc9\x42\x69\x57\x54\xba\x53\xb9\x9a\xfb\x76\x3f\xa1\x82\xd2\x0e\xbc\x34\x30\x07\x3e\xd4\x3e\xdd\xdd\x2d\xe8\x63\xb7\xbb\x5e\xfc\x3a\xc2\x1b\x3a\x4f\x7c\x7a\xd8\xd1\xf3\xf2\xd1\xd3\x9d\x3d\xcd\xde\x9f\x43\x06\x3e\x06\x68\xe2\x68\x3e\x0e\x95\x26\x4d\x82\x45\xda\x44\xc4\xae\x61\xae\x5c\x66\x50\x3e\x44\x76\x45\x38\x71\x0a\x41\xd9\x16\x4b\x51\x09\xe4\x94\x38\xfa\xca\xc5\x35\x5a\xef\x68\xaf\x11\x36\xc2\x2d\x81\xb8\x82\x56\x60\x75\x67\x4a\x0c\x5b\x81\x9f\x1d\x2a\xca\xda\x5e\x2b\x7e\x76\xc9\xf8\x28\x4b\xbf\x86\xcf\xa9\xad\x49\x8b\x28\x97\x4c\xe5\xc9\x57\x5a\x43\x94\xa2\x08\xbe\xb7\x9c\x5b\x66\x91\x03\x45\xd8\x12\xc7\x2d\xfe\x2a\x33\x3b\x65\xbb\xb6\xd5\xc6\x4d\x9a\x3a\xcb\xdd\x22\x38\xbb\xd7\xe9\x8d\xdb\x5b\xc1\x7c\x03\x83\x54\x21\x45\x23\x5c\x21\x6a\xa5\x4d\xd6\xc2\x73\xb5\x66\x52\xf0\x84\xe1\xa7\x78\x24\xff\x45\xc6\xde\x33\x31\xaa\x1b\xc5\x2f\xb5\xaa\x44\xdd\x37\x19\xe3\x89\xf2\x8a\x56\x78\x98\x18\xa9\x0a\x47\x6f\x04\x55\xdd\xb1\x88\xa3\x19\x93\x10\x89\x44\x90\xc8\xd7\xe1\x4c\x65\x4b\x42\x1a\xd2\xe3\x49\x50\x71\x29\x63\xfd\xde\xfd\xf5\xdc\xdd\x2d\xe8\x73\xb7\x7b\x0a\x95\xd1\x0d\xfd\x1d\x4e\xff\x6e\x37\x0b\x31\x6c\xd7\x14\x22\x89\xa5\x9d\xb2\xe8\x4e\xc3\xea\x9d\x33\x85\x76\xe0\xc5\xbb\xbb\x45\xff\xf7\xd1\xab\x44\x63\x8a\x1a\x5d\x8a\xe2\x5c\xfb\xf2\x2f\x26\x64\x48\x2e\x35\x3a\x1f\x86\x43\x60\xa6\xa9\x01\xb8\x2f\xaf\xbe\x9f\x10\x25\xbe\x24\x5b\xd0\x98\x09\x43\x3a\xd5\x30\x63\x97\x4c\xca\x42\xea\x92\xc9\x5c\x61\x48\x62\x7b\x40\xe4\xac\x00\xee\x67\x86\x7a\x6b\xe7\xa2\x29\x74\x1b\x6d\x56\x27\xe1\xf9\x86\x51\xe1\x78\x31\x1a\x6a\x56\xb8\xec\x40\x9e\xcd\x3f\xaf\x87\x6e\xa6\xd4\x4d\x2b\x91\xfc\x1b\x6f\x48\xaa\x4e\xca\xed\x5c\xa0\xca\xef\xd7\x34\x0a\x17\x3c\x46\x61\x40\x23\xb0\x1e\x0b\x3e\x74\x0a\x6e\x36\x76\x15\x09\x61\x2a\xbf\x37\x74\x0e\x0c\x36\x9a\xda\x64\x66\x9c\xf0\xfc\x31\x8c\x21\x07\x66\x2d\xba\x71\xf7\xef\x59\x5a\x32\x55\xa2\xcc\x1b\x7b\xf1\xd3\x02\xfe\x19\x64\x88\x12\xcc\x24\x00\x7b\x00\x06\xe9\x9c\x16\xd6\x31\xd7\xe5\x8e\xf7\xb3\x67\xcf\x9e\xbd\x7a\xf5\xea\xd5\xde\x26\xef\x39\xe9\xd2\x4f\x05\x12\x20\xc1\xb1\x53\x75\xc4\x5e\x7f\xdc\x13\x3e\x65\xb7\x0f\xc0\x46\xf7\xfb\x00\x69\x74\xc7\x67\xe3\x1d\xb9\x6b\xb3\x89\xdb\x01\x48\xbc\x33\x3a\x62\x71\xba\x02\x8e\xc1\x8f\xfd\x35\xd4\xd8\x82\x81\x77\x86\xec\x8b\x48\xfb\xa7\xeb\xf7\x3b\xfc\x1b\x66\x54\xe1\x9b\x77\x6a\x33\x5a\x34\x64\xe6\x48\xb2\x27\xfe\xb1\xc2\x2d\xb1\x0f\x2a\x30\x1b\x66\xc1\xa0\x33\x02\xd7\xc4\x8a\x28\x0d\x79\x65\x8b\x41\x19\xfd\xe0\x29\xaa\x94\x60\xb5\x56\x70\x8b\x64\xa1\xc1\x92\x91\x6b\xda\xd0\xb3\x70\xed\xfd\xd2\x59\x04\xe1\x40\x77\xce\x52\x07\xa3\x2b\xb8\x32\x6c\x2d\x2c\xdc\x76\x42\xf2\x19\x4b\xa1\xea\x38\x68\xa7\x78\x93\xac\xcc\xee\x57\x5a\x91\x96\x7c\x6f\x51\x22\xb0\xd3\xbb\xbb\x05\x51\x52\xb7\x6d\x71\xb7\x0b\xec\x34\xb3\x88\xa7\x69\x15\x64\xbe\x8b\x3a\x15\x6e\x0e\x74\x5a\x87\x6c\x9c\x56\x50\xf9\x4b\xf4\xa5\x61\x8a\x33\xa7\xcd\x76\xe4\x76\x88\xac\xef\xe5\x3c\xca\xde\xee\x08\x0b\x51\xd7\xb4\xd3\xbe\x19\xa8\x5d\xea\x4e\x72\x72\x8e\x45\xb7\x80\xd0\x38\x1d\x76\x9e\x24\xed\xbf\x88\x29\x2f\xe6\xf8\xc3\xb7\x38\x9e\x8e\x4c\xdc\x1d\x5e\x85\x4d\xf3\xb6\x78\x56\xc2\x3d\x1a\xa7\xcf\x48\x97\xef\xdd\xd0\x85\xf1\xd4\xd5\xdd\x6b\xaa\x5c\xe4\x36\x5e\xa8\xd9\x53\x72\x70\x7f\x18\x46\x53\x77\x3b\x55\x04\xc8\xcb\x1c\x5b\x54\x1c\x55\x99\xbd\x0a\x49\xa2\x30\x88\x86\x23\x15\x6c\x58\x2c\x46\x70\x52\x6a\x98\x85\xf4\x71\x10\x3e\x05\x6b\x98\xf2\x80\x57\x64\x1f\x51\x5e\x3f\x0a\x03\x4b\x66\xe1\x16\x51\x1d\x94\x9c\x3e\x93\x4d\x95\xd7\x47\xac\xa0\x3c\xdd\x99\x1c\xfb\x7f\x7d\x2f\x4d\x3f\x6a\xd3\x1f\xc7\x47\xd2\x7a\x1e\xd6\xf0\x6f\xe3\xd7\xa4\x77\xbe\x67\x1f\x14\xf8\xbc\x6f\x1f\x16\xc1\xe3\xbd\x3b\x66\x55\x5f\x89\x75\xa7\x78\x11\x4b\x6c\xe1\x4b\x6c\x3e\xa2\x24\x3a\x3a\xe4\x7d\x7a\xd8\xb7\x24\x16\x28\x5f\xca\x68\xdf\x62\x21\xa3\xf8\x2f\x3b\x63\x68\x19\xa9\x26\xa7\x77\x25\x7f\x19\x14\xbe\x49\x03\xb3\x7e\xaf\x69\xb5\xb3\xd9\x05\x65\xb7\xd2\x20\x73\x38\x6e\xbb\x7f\xff\x04\x2f\x79\xb0\x02\x7f\xe7\xe3\x1f\x4e\xd3\xe3\xd3\xd0\xdc\x00\x53\x3c\x8e\x95\x9a\x87\x01\xfa\x98\xd1\x7f\x05\x7f\xce\x31\x89\x3f\x70\xea\xef\x61\x92\xb7\x63\xc8\x9e\x93\x29\xf3\xd1\x1d\x1e\xcd\x62\x11\x62\x2f\x71\xce\xc8\x96\x27\xc3\xa4\xc0\x9b\x08\xe7\x47\xf5\x7f\x45\x92\xbc\xb7\xc8\x6f\x89\x3f\x33\x99\xd0\xe1\xaa\x10\x79\x21\xd4\x5a\xaf\x72\xc9\x63\xe8\xed\x83\x98\x8f\x42\x9a\x06\x9b\x25\xaa\xe1\xcc\x39\x23\xea\x1a\x4d\x1c\xfa\xf6\xe7\xae\x27\x93\x9e\xab\xf8\x1b\x70\xcb\xd6\xa3\x44\x32\xf0\x9b\x4a\x9b\x47\xa8\x98\xbf\x3d\xa4\xf9\x89\x5c\xa6\xc4\x12\x5f\xd5\x28\x73\xf4\xb5\x64\xda\x30\x11\xae\x06\x07\x03\xbf\xc2\x2c\xaf\x69\x1a\xd2\x5f\x3a\xda\xa2\xc1\x86\xf8\xa1\x15\x5f\x72\x98\x41\xe2\x52\x7c\xf1\xf4\x3d\x4c\x3b\x60\x4d\x03\x49\x64\xca\x5f\x5a\xd0\x3e\xde\xa2\xdb\xd0\xc9\x7a\xf1\xc3\xdf\xfc\x8e\xfd\xf5\xc5\x0f\xb3\x6d\x72\xa2\x41\xdd\xe5\x58\x61\x1c\x3d\xc9\x98\xe7\xcf\xbd\x31\x7f\x79\x4e\xff\x8e\xf5\x91\xd4\xf5\x98\x9f\xa4\xae\x4f\x75\x52\xb0\xea\xc5\x5c\x8b\xe2\xa5\x3d\xbb\xcd\x3e\x88\xfe\xdc\xdf\x2d\xf7\x34\xd7\xa6\x23\x2a\xb7\xa1\x4c\xf7\x3a\x16\x70\x5e\x2b\x4d\xad\xea\x04\x7f\xf7\x16\x50\x77\xb8\x2d\x4a\xdd\x50\xd3\x90\xbb\x8b\x27\x99\xf4\xc6\x52\x36\xdc\x97\xd4\xca\xa1\x09\x81\xfb\x32\xbc\x5e\x50\x34\x5f\x4f\x65\x98\xce\xc8\x14\x1d\xb9\xc7\xaa\xf8\x3f\x65\xb4\x81\x28\x48\x29\xa1\x33\x32\x36\x7a\x1f\x3f\xfc\xec\xf1\x3a\x23\x23\xdf\xff\x74\xd0\x09\x5e\x7b\xda\x3f\x99\xea\xc8\x90\x86\xc9\x4a\x9b\x26\x9b\x35\xde\xa6\xf1\x31\x0b\x16\x70\x65\xb6\xc0\x6a\x26\xd4\xe0\xef\xb3\xeb\xb3\xff\x07\x00\x00\xff\xff\x66\xa9\x0b\xb2\x50\x25\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 9552, mode: os.FileMode(420), modTime: time.Unix(1516095402, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

