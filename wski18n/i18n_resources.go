// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x6f\xdc\xb8\x11\xfe\x9e\x5f\x31\x08\x0a\xdc\x1d\x90\xec\x25\x57\x14\x28\x02\x04\x45\xd1\xa4\x88\x7b\x97\x38\x88\x9d\x1e\x8a\x9c\x21\xd3\xe2\x48\xcb\x5b\x8a\x14\x48\x6a\x37\x1b\xc3\xfd\xed\xc5\xf0\x45\xd2\xda\xa6\xa4\x75\x72\x68\x3e\x29\xcb\xe1\x3c\xc3\xe1\x70\xe6\x19\xd2\x9f\x1e\x01\x5c\x3f\x02\x00\x78\x2c\xf8\xe3\x17\xf0\xb8\xb1\x75\xd1\x1a\xac\xc4\xe7\x02\x8d\xd1\xe6\xf1\x93\x30\xea\x0c\x53\x56\x32\x27\xb4\x22\xb1\xd7\x7e\xec\x11\xc0\xcd\x93\x09\x0d\x3b\x66\x94\x50\x75\x46\xc7\xaf\x71\x74\x4e\x8b\xed\xca\x12\xad\xcd\x68\x39\x8b\xa3\x73\x5a\x84\xaa\x74\x46\xc5\x09\x0d\x65\xe7\xa3\x31\xc5\xef\x56\xab\xa2\x11\xd6\x0a\x55\x17\x65\xc3\x8b\x0d\xee\x33\xca\xfe\x75\x76\xfa\x0e\x84\x6a\x3b\x07\x9c\x39\x06\x6f\xc3\x2c\xf8\xae\x6c\xf8\x77\x40\xf3\xb2\x48\xa4\xb8\x92\xac\x2e\xac\x33\xa2\x74\x19\x00\x26\xa5\xde\x41\x67\xd1\x00\xc7\x4a\x28\xe4\x60\x3a\xe5\x44\x83\xb0\x45\x63\x49\x6a\x1e\xc1\x2b\x29\xb6\x68\xae\xb4\xc5\x0c\x50\x1c\x05\xdd\xb9\xb6\x73\x8b\x95\x36\x4c\xb1\x1a\xf9\xa4\xf5\xad\xd1\xbf\x63\xe9\x00\x95\x13\x4e\xa0\x05\xa7\xe1\x0a\xa1\x61\x66\x83\x1c\x92\x86\x79\x44\xa7\xeb\x5a\x62\xb1\x46\xd9\x66\xf0\xce\xbd\x04\xbc\x41\xd9\x42\x83\xd6\xb2\x1a\x17\xe8\x2d\xb5\xaa\x44\x2e\x6e\xc3\x20\x54\x42\x22\x7c\xcf\xb1\x62\x9d\x74\x20\x2c\xfc\xe9\xcd\xe9\xdb\xd7\x3f\xae\x76\x76\xd3\x1a\xdd\xda\x1f\x16\xe0\x08\xe5\xd0\xb0\xd2\x89\x6d\x6e\x13\x82\xbf\x46\x72\xe4\xbb\xa6\x75\x13\x01\x7f\x6b\x3f\xa2\x85\xb9\xf3\x13\x00\x7a\xa1\x79\xad\x8a\x35\x68\x5b\x56\xe6\x2c\x1e\xc6\xe7\x75\xc5\x38\xc8\x68\x6a\x99\x5b\x53\x64\x58\x34\x5b\x34\x12\xad\x4d\x81\xb3\x40\x75\xc3\x94\xa8\xd0\xce\xe9\x4e\x62\x7e\x3b\x17\xa8\xe5\xd8\x4a\xbd\x6f\x50\xcd\x29\x1e\x04\x97\xaa\x66\x9d\x5b\x4f\x24\x16\x1a\xd6\x46\x7c\xf1\x3f\xc0\xe5\xcf\xaf\xff\x73\xb9\x44\x69\x2b\x8a\xb5\xce\xba\x61\xb7\x16\x76\x03\x7f\x7f\x7f\x02\x97\x6f\x4e\xcf\xce\x97\x6a\x4c\x89\x66\x56\xe9\xbf\x5f\x7f\x38\x3b\x39\x7d\xb7\x44\xef\x06\xf7\x85\xf7\xd4\x84\x5f\x75\x05\x6e\x8d\xb0\xda\xe0\x7e\xa9\x57\x4b\x34\x6e\xb1\x5e\x12\x5e\xa0\xb8\xed\xae\xa4\xb0\xeb\x42\xea\x6c\x71\x7b\x1f\x44\x80\x41\xcb\xca\x0d\xab\x91\x62\x82\x30\x0c\xd6\xc2\x3a\xb3\x07\x8b\x0e\x84\x82\xff\x0e\x19\x63\x19\xa8\x5d\x6b\x93\xdb\xce\x7b\x51\x59\x8f\x39\x55\x24\x29\xa9\xc4\xe8\xce\x28\x7f\xa5\x61\xaf\x3b\x30\xc8\xa4\xdc\xc3\x8e\x29\x37\xc4\x39\xb8\xb5\xb0\x7f\x83\xef\xf7\x3f\xbe\xfb\xe1\x05\xcc\xe2\x74\xea\x01\x48\x69\xd2\x91\x58\x74\x6e\xf2\xa7\xea\x37\xf5\x5e\x22\xb3\x3e\xad\x6e\x05\x47\x60\x0a\x68\x06\x55\xa6\x32\x1c\x35\xa7\x37\xa8\x96\x00\xb5\x62\xe2\xa4\xdd\x01\xa2\x60\x20\x79\xca\x97\x50\x69\x03\xa7\x2d\xaa\x5f\xe9\xe8\x2c\xc0\x9a\x4b\xc2\x77\x97\x05\xfd\x14\xf8\x94\x8a\xd6\x96\xc9\x0e\xa9\x74\xd5\x1d\x5a\x77\x31\x85\x9b\xf2\x64\xa1\xb4\x2b\x2a\xdd\xa9\x5c\x81\x7f\x3b\x4e\xa8\xa0\xb4\x03\x2f\x0d\xcc\x81\x3f\x6a\x9f\xae\xaf\x57\xf4\x71\x73\x73\xb1\xfa\x6d\x82\xaa\x74\x9e\x6b\xf5\xb0\x93\xf1\xf2\xd1\x33\xac\x91\x66\xef\xcf\x21\x03\x1f\x03\x34\x13\x9a\xf7\x43\xa5\x49\xb3\x60\x91\xa9\x11\x97\x6c\x98\x2b\xd7\x19\x94\x0f\x91\xd0\x11\x4e\x9c\x42\x50\xb6\xc5\x52\x54\x02\x39\x25\x8e\xbe\x72\x71\x8d\xd6\x3b\xda\x6b\x84\x9d\x70\x6b\x20\xae\xa0\x15\x58\xdd\x99\x12\xc3\x56\xe0\x67\x87\x8a\xb2\xb6\xd7\x8a\x9f\x5d\x32\x3e\xca\xd2\xaf\xe1\x73\x6e\x6b\xd2\x22\xca\x35\x53\x79\xa6\x97\xd6\x10\xa5\xe8\x04\xdf\x5a\xce\x15\xb3\xc8\x81\x4e\xd8\x1a\xa7\x2d\xfe\x2a\x33\x3b\x65\xbb\xb6\xd5\xc6\xcd\x9a\xba\xc8\xdd\x22\x38\xbb\xd7\xe9\x8d\x1b\xad\x60\xb9\x81\x41\xaa\x90\xa2\x11\xae\x10\xb5\xd2\x26\x6b\xe1\x89\xda\x32\x29\x78\xc2\xf0\x53\x3c\x92\xff\x22\x63\x6f\x99\x18\xd5\x4d\xe2\x07\x22\xdb\xf7\x35\xd3\x89\xf2\x9c\x56\x78\x98\x18\xa9\x0a\x47\x6f\x04\x55\xdd\xb1\x88\x93\x19\x93\x10\x89\x44\x90\xc8\xd7\xe1\xcc\x65\x4b\x42\x1a\xd2\xe3\x83\xa0\xe2\x52\xa6\xda\xcc\xdb\xeb\xb9\xbe\x5e\xd1\xe7\xcd\xcd\x13\xa8\x8c\x6e\xe8\xff\x21\xfa\x6f\x6e\x16\x21\x86\xed\x9a\x43\x24\xb1\xb4\x53\x16\xdd\xc3\xb0\x7a\xe7\xcc\xa1\x1d\x78\xf1\xfa\x7a\xd5\xff\xff\xe8\x55\x52\xdb\x5d\xa3\x4b\xa7\x38\xd7\xbe\xfc\x93\x09\x19\x92\x4b\x8d\xce\x1f\xc3\xe1\x60\xa6\xa9\x01\xb8\x2f\xaf\xbe\x9f\x10\x25\xbe\x20\x5b\xd0\x98\x19\x43\x3a\xd5\x30\x63\xd7\x4c\xca\x42\xea\x92\xc9\x5c\x61\x48\x62\x23\x20\x72\x56\x00\xf7\x33\x43\xbd\xb5\x4b\xd1\x14\xba\x9d\x36\x9b\x07\xe1\xf9\x86\x51\xe1\x74\x31\x1a\x6a\x56\xb8\x63\x41\x9e\xcd\x3f\xaf\x86\x6e\xa6\xd4\x4d\x2b\x91\xfc\x1b\x2f\x66\xaa\x4e\xca\xfd\x52\xa0\xca\xef\xd7\x3c\x0a\x17\x3c\x9e\xc2\x80\x46\x60\x3d\x16\x7c\xe8\x14\x5c\xee\xec\x26\x12\xc2\x54\x7e\x2f\x29\x0e\x0c\x36\x9a\xda\x64\x66\x9c\xf0\xfc\x31\x8c\x21\x07\x66\x2d\xba\x69\xf7\x8f\x2c\x2d\x99\x2a\x51\xe6\x8d\x3d\xfd\x79\x05\xff\x08\x32\x44\x09\x16\x12\x80\x11\x80\x41\x8a\xd3\xc2\x3a\xe6\xba\x5c\x78\x3f\x7d\xfa\xf4\xe9\xcb\x97\x2f\x5f\x8e\x36\x79\xe4\xa4\x33\x3f\x15\x48\x80\x04\xa7\xa2\xea\x88\xbd\xfe\x38\x12\x7e\xc8\x6e\x1f\x80\x4d\xee\xf7\x01\xd2\xe4\x8e\x2f\xc6\x3b\x72\xd7\x16\x13\xb7\x03\x90\x78\x41\x75\xc4\xe2\x74\x05\x1c\x83\x1f\xfb\x3b\xaf\xa9\x05\x03\xef\x0c\xd9\x17\x91\xc6\xd1\xf5\xc7\x05\xff\x8e\x19\x55\xf8\xe6\x9d\xda\x8c\x16\x0d\x99\x39\x91\xec\x89\x7f\x6c\x70\x4f\xec\x83\x0a\xcc\x8e\x59\x30\xe8\x8c\xc0\x2d\xb1\x22\x4a\x43\x5e\xd9\x6a\x50\x46\x3f\x78\x8a\x2a\x25\x58\xad\x15\x5c\x21\x59\x68\xb0\x64\xe4\x9a\x36\xf4\x2c\x5c\x7b\xbf\x74\x16\x41\x38\xd0\x9d\xb3\xd4\xc1\xe8\x0a\xce\x0d\xdb\x0a\x0b\x57\x9d\x90\x7c\xc1\x52\xa8\x3a\x0e\xda\xe9\xbc\x49\x56\x66\xf7\x2b\xad\x48\x4b\x3e\x5a\x94\x08\xec\xf4\xfa\x7a\x45\x94\xd4\xed\x5b\xbc\xb9\x09\xec\x34\xb3\x88\x27\x69\x15\x64\xbe\x8b\x3a\x15\xee\x0e\x74\x5a\x87\x6c\x9a\x56\x50\xf9\x4b\xf4\xa5\x61\x8a\x33\xa7\xcd\x7e\xe2\x76\x88\xac\xef\xe5\x3c\xca\x68\x77\x84\x85\xa8\x6b\xde\x69\xdf\x0c\xd4\xae\x75\x27\x39\x39\xc7\xa2\x5b\x41\x68\x9c\x0e\x3b\x4f\x92\xf6\x5f\xc4\x94\x57\x4b\xfc\xe1\x5b\x1c\x4f\x47\x66\xee\x0e\xcf\xc3\xa6\x79\x5b\x3c\x2b\xe1\x1e\x8d\xd3\x67\xa4\xcb\xb7\x6e\xe8\xc2\x78\xea\xea\x6e\x35\x55\x2e\x72\x1b\x2f\xd4\x8c\x94\x1c\xdc\x1f\x86\xd1\xd4\xdd\xce\x15\x01\xf2\x32\xc7\x16\x15\x47\x55\x66\xaf\x42\x92\x28\x0c\xa2\x21\xa4\x82\x0d\xab\xd5\x04\x4e\x4a\x0d\x8b\x90\x3e\x0e\xc2\x0f\xc1\x1a\xa6\xdc\xe1\x15\xd9\xb7\x9b\x57\xf7\xc2\xc0\x9a\x59\xb8\x42\x54\x07\x25\xa7\xcf\x64\x73\xe5\xf5\x1e\x2b\x28\x4f\x77\x26\xc7\xfe\x5f\xdd\x4a\xd3\xf7\xda\xf4\xff\xe3\x23\x69\x3d\x77\x6b\xf8\xb7\xf1\x6b\xd2\xbb\xdc\xb3\x77\x0a\x7c\xde\xb7\x77\x8b\xe0\xf1\xde\x9d\xb2\xaa\xaf\xc4\xba\x53\xbc\x88\x25\xb6\xf0\x25\x36\x7f\xa2\x24\x3a\x0a\xf2\x3e\x3d\x8c\x2d\x89\x05\xca\x97\x32\xda\xb7\x58\xc8\xe8\xfc\x97\x9d\x31\xb4\x8c\x54\x93\xd3\x23\x96\xbf\x0c\x0a\xdf\xa4\x81\x59\xbf\xd7\xb4\xda\xc5\xec\x82\xb2\x5b\x69\x90\x39\x9c\xb6\xdd\x3f\xbb\x82\x97\x3c\x58\x81\xbf\xf3\xf1\xef\xb5\xe9\x91\x6b\x68\x6e\x80\x29\x1e\xc7\x4a\xcd\xc3\x00\x7d\x2c\xe8\xbf\x82\x3f\x97\x98\xc4\xef\x38\xf5\x8f\x30\xc9\xdb\x31\x64\xcf\xd9\x94\x79\xef\x0e\x4f\x66\xb1\x08\x31\x4a\x9c\x0b\xb2\xe5\x83\x61\xd2\xc1\x9b\x39\xce\xf7\xea\xff\x8a\x24\x79\x6b\x91\xdf\x12\x7f\x61\x32\xa1\xe0\xaa\x10\x79\x21\xd4\x56\x6f\x72\xc9\x63\xe8\xed\x83\x98\x3f\x85\x34\x0d\x76\x6b\x54\x43\xcc\x39\x23\xea\x1a\x4d\x1c\xfa\xf6\x71\xd7\x93\x49\xcf\x55\xfc\x0d\xb8\x65\xdb\x49\x22\x19\xf8\x4d\xa5\xcd\x3d\x54\xcc\xdf\x1e\xd2\xfc\x44\x2e\x53\x62\x89\xaf\x6a\x94\x39\xfa\x5a\x32\x6f\x98\x08\x57\x83\x83\x81\x5f\x61\x96\xd7\x34\x0f\xe9\x2f\x1d\x6d\xd1\x60\x43\xfc\xd0\x8a\x2f\x39\xcc\x20\x71\x26\xbe\x78\xfa\x1e\xa6\x1d\xb0\xa6\x81\x24\x32\xe5\x2f\x2d\x68\x1f\xaf\xd0\xed\x28\xb2\x9e\xff\xf4\x57\xbf\x63\x7f\x79\xfe\xd3\x62\x9b\x9c\x68\x50\x77\x39\x56\x18\x47\x1f\x64\xcc\xb3\x67\xde\x98\x3f\x3f\xa3\x7f\xc7\xfa\x48\xea\x7a\xca\x4f\x52\xd7\x0f\x75\x52\xb0\xea\xf9\x52\x8b\xe2\xa5\x3d\xbb\xca\x3e\x88\xfe\xd2\xdf\x2d\xf7\x34\xd7\xa6\x10\x95\xfb\x50\xa6\x7b\x1d\x2b\x38\xa9\x95\xa6\x56\x75\x86\xbf\x7b\x0b\xa8\x3b\xdc\x17\xa5\x6e\xa8\x69\xc8\xdd\xc5\x93\x4c\x7a\x63\x29\x1b\xee\x4b\x6a\xe5\xd0\x84\x83\xfb\x22\xbc\x5e\xd0\x69\xbe\x98\xcb\x30\x9d\x91\xe9\x74\xe4\x1e\xab\xe2\x1f\xe7\x68\x03\x51\x90\x52\x42\x67\x64\x6c\xf4\x3e\x7e\xf8\xc5\xe3\x75\x46\x46\xbe\xff\xe9\xa0\x13\xbc\xf0\xb4\x7f\x36\xd5\x91\x21\x0d\x93\x95\x36\x4d\x36\x6b\xbc\x4d\xe3\x53\x16\xac\xe0\xdc\xec\x81\xd5\x4c\xa8\x25\xfe\x8e\xb7\xb7\x47\xfb\x60\xfc\x17\x2e\xe3\xa7\x2e\x8e\x0e\x4b\xb7\x20\xb7\x8f\xf8\xa1\xef\xd5\xe6\x1e\x0d\x0f\xba\xb5\x83\xd0\xbb\xdb\xa6\x0d\x4f\x8a\xb7\xdb\xaf\x64\xd6\xa3\x8b\x47\xff\x0b\x00\x00\xff\xff\xd4\xc9\x74\x22\xd8\x26\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 9944, mode: os.FileMode(420), modTime: time.Unix(1516156225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515697090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json": wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json": wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json": wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json": wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json": wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json": wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json": wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json": wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json": &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json": &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json": &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json": &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json": &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json": &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json": &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json": &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

