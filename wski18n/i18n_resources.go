// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5b\x5f\x8f\xdb\x36\x12\x7f\xcf\xa7\x18\x04\x07\xa4\x05\x1c\x6d\xda\xc3\x01\x87\x00\x79\xc8\x35\x69\x9b\x6b\x93\x0d\x76\x93\x0b\x8a\xdc\x42\xa1\xa5\xb1\xcd\x5a\x22\x75\x24\x65\xc7\x5d\xec\x77\x3f\xcc\x90\x94\x64\xaf\xf5\xc7\x4e\x7a\x97\x97\x68\x97\xe4\xcc\x6f\x86\xc3\xf9\x47\xee\xc7\x07\x00\xb7\x0f\x00\x00\x1e\xca\xfc\xe1\x53\x78\x58\xda\x65\x5a\x19\x5c\xc8\xcf\x29\x1a\xa3\xcd\xc3\x99\x1f\x75\x46\x28\x5b\x08\x27\xb5\xa2\x69\x2f\x79\xec\x01\xc0\xdd\x6c\x80\x82\x54\x0b\xdd\x43\xe0\x15\x0d\x8d\xad\xb7\x75\x96\xa1\xb5\x3d\x24\xae\xc3\xe8\x18\x95\xad\x30\x4a\xaa\x65\x0f\x95\x0f\x61\xb4\x97\x4a\x56\xe6\x69\x8e\x36\x4b\x0b\xad\x96\xa9\xc1\x4a\x1b\xd7\x43\xeb\x8a\x07\x2d\x68\x05\x39\x56\x85\xde\x61\x0e\xa8\x9c\x74\x12\x2d\x7c\x23\x13\x4c\x66\xf0\x56\x64\x6b\xb1\x44\x3b\x83\xe7\x19\xad\xb3\x33\x78\x67\xe4\x72\x89\xc6\xce\xe0\xaa\x2e\x68\x04\x5d\x96\x7c\x0b\xc2\xc2\x16\x8b\x82\xfe\x37\x98\xa1\x72\xbc\x62\xc3\xdc\x2c\x48\x05\x6e\x85\x60\x2b\xcc\xe4\x42\x62\x0e\x4a\x94\x68\x2b\x91\x61\x32\x59\x16\xad\xfb\x24\x79\x0e\x4e\xeb\x02\x9c\x0e\x82\xcc\xa0\x56\xfe\x0b\x84\xca\xc1\xee\x54\x06\xba\x42\xb5\x5d\x49\xbb\x86\x2a\xc8\x04\xb5\x95\x6a\x09\x02\x4a\xa1\xe4\x02\xad\xe3\xc9\xba\x22\xaa\xa2\x08\xa4\x4a\x92\x64\x21\x8b\x66\xfa\x6f\xcf\x5f\xff\x3a\x05\xb3\x5d\x69\xe3\x86\x37\xe0\xad\xd1\x1b\x99\xa3\x05\x01\xb6\x2e\x4b\x61\x76\xe0\xe7\x83\x5e\xc0\x76\x25\xdc\x23\x0b\x73\xc4\xce\xf6\x7c\x99\x1a\x03\xa4\x51\x3d\x5a\x74\xa4\xcb\x15\x16\x55\x60\x0d\x3b\x5d\x9b\x49\x2a\x24\x55\x4d\xc7\xb2\x41\x63\x89\x77\x9f\x7e\xa4\x72\x2c\x70\x98\x07\xaa\x2e\xe7\x68\x58\x3d\x76\xed\xa1\x4d\xe6\x45\x56\x30\x6a\x3f\x6c\x2a\x2c\xec\x65\x85\xea\xc3\xbe\xb0\x73\x74\x5b\xda\x8e\xac\x90\x64\x15\x6c\x5a\x68\x36\x68\x26\xdb\xf0\x74\x0c\x1d\xeb\x23\x3e\xd1\x9e\xf9\x17\x7a\xf1\xbf\xb4\xe6\x45\x21\x96\xa9\xa8\x64\xba\xd2\xb6\xcf\x70\x3c\x94\xe7\x6f\x5f\xc1\xa7\x9f\x2f\xaf\xdf\x7d\x9a\x48\x71\x78\xfb\x3b\x44\xff\xf5\xf2\xea\xfa\xd5\xe5\x9b\x49\x74\x6b\xb7\x4a\xd7\xb8\xeb\x21\x4a\xc3\xda\xc8\x3f\xf8\x17\xf0\xe9\x97\x97\xbf\x4d\x21\x9a\xa1\x71\x29\xe9\xad\x87\x6a\x25\xdc\x8a\xb6\x85\x6c\x35\xa1\xc9\xac\xe4\x29\x84\xb5\x5a\xc8\x3e\x67\xef\x07\x99\x14\x7c\x93\xe3\x42\xd4\x85\x03\x69\xe1\x2f\x3f\x5f\xbe\x7e\x79\x91\x6c\xed\xba\x32\xba\xb2\xdf\x4e\xd1\x4a\x51\xe8\x6d\x1a\x68\xf4\x85\x28\x9e\x04\xcd\xa4\x71\xaa\xad\x51\x0d\xe9\xa5\x71\xcb\x8d\xf5\x4d\x20\x5d\x19\xdc\x48\xdc\xf6\xd0\xb5\x2b\x06\x1a\x89\x5e\xec\x1d\x8f\xaa\x10\x6a\x02\x87\x35\xee\x26\x6f\xe9\x1a\x77\x53\x81\x7b\x4d\x97\x42\x89\x25\xe6\x83\x8a\xae\x8c\xfe\x1d\x33\xd7\xc6\x5c\xa7\x61\x8e\x50\x0a\xb3\xc6\x1c\x22\x85\x29\xaa\x62\x3a\x29\xc5\x82\x3e\x61\x02\x2b\x9e\x32\x4e\x31\xba\x90\x91\x5d\xdd\x73\xfa\x13\xc8\x36\xc1\xaa\x87\x6e\x3b\x3e\x59\xe8\x11\x84\xde\x3d\x17\x68\x6d\xd4\xf6\x04\xd2\xd6\x19\xd9\x4b\xd9\x6f\x5d\x6d\xd1\xd0\x41\x91\x0a\x73\x30\xb5\x72\xb2\x6c\x82\xd4\x04\x0e\xce\xf4\x2b\x81\xc7\x40\xd7\xae\xaa\xa7\x80\xf5\xe6\xb6\x41\x33\xd7\xb6\x8f\x64\x18\x1d\x27\xca\xfe\x26\x2d\xa5\xa5\xd8\xc0\x9e\xb4\xdf\x91\xbe\x5b\x21\xd0\x0c\xb2\xde\xcc\x7b\x53\x3a\x25\xd2\x82\xd2\x0e\x3c\xa9\xda\x60\x9e\xfc\x7b\x48\x23\x07\x1c\x2b\x39\x10\x64\x88\x23\x45\x03\x9a\xf2\x65\x7c\xc6\x0c\x91\x38\x35\x73\xce\x63\x15\x44\x19\x2a\x2a\x0e\xe5\xf9\x78\x7b\x9b\xd0\xf7\xdd\xdd\xcd\x0c\x16\x46\x97\x70\x7b\x9b\x58\x5d\x9b\x0c\xef\xee\x26\xf1\xf4\x1b\x36\xc6\x93\xa6\xc5\xbd\xb2\xe8\xce\xe3\xd5\xa8\x67\x8c\xdb\x9e\x1e\x49\xc4\xe6\x17\xe7\xcb\x59\xc9\xe5\x36\x15\x5c\x4f\xa5\x4e\xaf\x51\x8d\x8a\x4c\x2b\xc0\xaf\x00\x5e\x71\x9e\xf0\xb5\x2a\x85\xb1\x2b\x51\xa4\x85\xce\x44\xd1\xc3\xf1\x7d\x9c\xd5\x49\x22\x83\x93\xb0\x9e\x1f\xaf\x86\x8d\x28\x6a\xb4\x13\x19\x2a\x74\x5b\x6d\xd6\x67\xb3\x94\xca\xa1\x51\xe8\x40\x38\x12\xb7\x36\xc5\x88\xac\x6d\x44\x4d\x33\xa1\x32\x2c\x8a\xde\x78\x76\xf9\x4b\x02\x3f\xf8\x39\x94\x54\xb6\x2b\xa7\x32\x58\x08\xd9\x4f\xfd\x45\x1b\xda\x73\x99\x87\xb3\x58\x56\x05\x3a\x04\x5b\xd3\x96\x2e\xea\xa2\xd8\x25\x70\x55\x2b\xf8\xd4\x14\x06\x4d\xce\xfc\x89\x22\x81\xc1\x52\x6f\x10\x2a\x61\x9c\x14\x45\xb1\x6b\x6b\x2a\x61\x2d\xba\xe1\x5d\xe8\x20\xf5\x05\x5a\x6a\x9d\x70\x75\x5f\x1e\xf5\xf8\xf1\xe3\xc7\xcf\x9e\x3d\x7b\xd6\xd9\x8b\x8e\x0c\xd7\xbc\x14\x68\x02\x4d\x9c\xc4\x95\x5b\x0b\x98\x4f\x51\x51\x54\x4d\x0e\xa1\x1f\xe1\x95\x33\x6c\x64\xe7\xef\x75\x77\xed\x74\x26\x83\xfb\xfd\xbe\x9b\xcc\x0d\xee\xf8\x64\x7e\x63\xfa\xdb\x63\x79\x86\x06\x33\x5d\x96\x42\xe5\x29\x17\x55\x9c\x55\x92\x97\x4b\x85\x4b\x29\x13\xe9\x61\x7a\x7b\x9b\x64\x65\x7e\x77\x17\x4a\xb1\xdb\xdb\x84\x16\xba\x5d\x85\x77\x77\xec\x29\x69\xed\xdd\xdd\x4d\x92\x0c\xf2\xe6\xf4\x71\x97\x46\x7b\x1e\x69\x43\xdd\xde\x52\x32\x1b\x18\x10\xc8\xbb\xbb\x1b\x58\x89\xd0\x68\xe8\x0a\xdc\x9c\x90\xe9\xdc\xfb\xfb\x56\x2f\xe2\x38\x1c\x05\x90\x24\x03\x45\x68\x60\x11\x37\xf4\x6b\x8a\xd8\xd2\x9c\x22\x64\x9c\xdd\x2f\xe6\xfb\x76\xc6\x51\x41\x07\xe5\xcc\xb1\x42\x95\xa3\xca\x4e\x51\x67\xbb\xe8\x7c\x3e\xed\x11\xe9\xd5\xe9\x8b\xa3\x6c\xbe\xc4\x70\x8e\xa3\x20\xc7\x50\x9b\xbe\xbc\xec\xc5\x5e\x0f\xe4\xb8\xe8\xff\xc7\x18\x11\xe5\x39\xcd\x4e\xbe\x6c\x07\xef\xbb\xb9\xaf\xb3\x87\x13\x4f\x46\x1f\x92\xe1\x7d\x7c\x7f\xd0\xcd\x3a\x67\x27\x87\x50\x85\xda\xf9\xdc\x98\xc3\x88\x7c\x04\x68\x6a\xf3\x21\x2c\x90\xd7\x86\x76\x32\xb0\xed\xe6\x3f\x7f\x9e\xbd\x45\x19\x17\xba\x56\x79\x1a\xf0\x06\x4f\xd5\x6b\x00\x05\xba\x5e\x1f\xbc\x5d\xc9\x6c\x05\x5b\xee\xdf\x13\xae\xdc\xe7\x8d\x6e\x85\x90\xd5\xc6\x90\x62\xa2\x80\xb1\x9d\xc0\x41\xca\x7f\x13\x05\x61\x59\x16\xd2\xdf\xe4\xb4\x20\x74\x9b\xd2\xd0\xc6\xec\xeb\x04\xfb\x51\x2e\x26\xa0\xd3\x09\x33\xc8\x15\x7e\x3e\x03\x51\x74\x53\xdf\x66\xdb\x08\x87\x69\x56\x04\x26\x20\x0c\x36\xba\xbe\x68\x2d\x1d\x72\x69\x30\x73\xc1\xfa\x8d\xef\x03\x8f\x75\xd8\x5f\x5e\x5d\x5d\x5e\x5d\xf7\xe0\x7e\x76\xf8\x0f\xfc\x74\xb8\x37\xf0\xec\xd9\x40\xf8\x31\x66\xff\xa0\xad\x95\xde\xaa\x94\x32\x85\xf1\xa3\x4e\xb3\x48\x55\x61\x55\x02\x6d\xeb\x1c\xb4\x2a\x76\x60\xeb\xca\xdf\x03\x5d\x70\xc3\x35\xb1\x3b\xeb\xb0\x84\xb9\x54\xb9\x54\x4b\x0b\xda\xc0\x52\xba\x55\x3d\x4f\x32\x5d\x36\xed\xe6\xe1\x78\x69\x4c\x8c\x99\x99\x41\xe1\xfa\x60\xf2\xbd\x1c\xf0\x94\x3d\xb3\xdc\x4a\xb7\x02\xbe\xd0\x83\x12\xad\x15\x4b\x7c\x4a\x83\x68\xcc\xdd\x1d\xb7\xb5\xfd\x58\xa6\x73\x3f\x40\x1f\x23\xd5\x4c\x07\x92\x3f\x2b\x83\x90\xf2\x7b\x27\xe5\x4f\x82\xb4\x40\xcc\x53\xa9\x36\x7a\xdd\x07\xe8\x47\x76\x5b\xe4\x2e\xfc\x34\x3e\x90\xb4\x0c\xb6\x2b\xbe\x1a\x0a\x48\x9d\xbf\x96\x0b\x43\x7f\x0e\xda\x35\xee\x9a\x1e\x0a\xe5\xbb\xc2\x69\x33\xd4\x1f\x6a\xe6\x70\xbb\xe1\x63\x54\xe6\x0d\xd9\x63\xa0\x33\xca\x33\x36\x19\x53\xa5\x9d\x77\x76\x3d\x0c\x5f\x77\xbb\x91\xec\xab\x79\x36\xd5\xbb\xdc\x0e\xec\x66\xd4\x63\x4c\x39\x7b\x2f\xa5\x2d\x85\xcb\xfa\xd2\x77\x12\xb0\x31\x0f\x5a\x90\x33\x8b\x3c\xfa\x53\xa9\x0e\xdb\xde\x7e\x3c\x60\x80\x5c\xa3\x6f\x2c\x31\x13\xde\x56\x76\x6f\x34\xa9\xec\x10\xd9\xeb\xb2\xfa\xd1\x28\xc6\xb0\x10\xa1\xfe\x27\xf3\x12\x85\xec\x53\xdb\x2b\x3f\x4a\xc7\x3c\x6c\x49\xd3\xd0\x24\x5e\xe1\x9b\xb0\xb4\xb7\x8e\x7b\xa8\xb4\x61\xec\x82\xef\x87\x79\x8d\xff\x9c\xa2\xe7\x08\x71\x44\xd5\x57\xa7\x00\x3a\xd0\x2b\x1f\x05\x8f\xe8\x91\x05\xdf\xe5\xf1\xaa\xc4\xcf\x0e\x95\x8d\xa0\xf1\x33\xc7\x30\x12\xe7\x4b\x44\xb1\xe9\x12\xfb\x1a\x98\xed\x51\x5e\xa2\xbf\xd7\x0c\xbe\xb7\x6d\x22\x87\x66\x4d\x1b\xc9\x28\xbe\xc9\xac\x73\x7c\x27\xeb\xd4\x43\x4f\xbd\xc4\x7c\x7a\x1a\x6e\x3d\xf8\xf6\x04\xe6\xbc\x90\xd4\xd8\x6a\x59\xa8\x5d\x63\x1b\xe4\x44\x3a\xdb\x3e\xaa\xd7\xd0\x44\x6d\x20\x8c\x8a\x51\x9b\xe2\x74\xcb\xf5\x8d\xad\x50\x42\xbf\xbf\xfa\x95\x11\x70\xab\x8b\x8f\xd2\xc7\xbd\x1a\xfb\xc6\x5f\x56\x4f\x01\x52\x8a\x62\xa1\x4d\xd9\xab\xb9\xd7\x71\x7c\x08\x41\x02\xef\xcc\x0e\xc4\x52\x48\x35\x56\xd2\x1b\x93\xfe\x6e\xb5\x6a\x9c\x6d\x56\xe6\x03\x77\x9a\xff\xbc\xbe\x7c\x03\x52\x55\xb5\x83\x5c\x38\x01\xaf\x83\x36\x1e\x65\x65\xfe\x88\x5c\xef\x30\x27\x51\xc9\xb6\x03\xef\x8d\x46\x9b\xd4\xe2\x7f\x6a\x54\xbd\x2d\x72\xff\x1c\xe4\xe2\x3a\xcc\xda\x3f\x2c\x1d\xff\xee\xed\x79\xcf\x87\xcd\xb8\xeb\xcd\x0b\x2a\x49\xb3\x33\xa1\x7c\x2a\x32\x47\x9f\x0c\x60\x0e\x73\x61\x31\x07\xad\x3a\x46\x76\x11\x21\x1d\xa1\x99\xc0\xdb\x02\x85\x45\xa8\xab\x5c\x38\x3c\x70\x9a\x1c\x3c\xb3\xa2\xce\x0f\x71\x0a\x0b\x02\xb6\x38\x3f\xe4\x30\xba\x3b\x41\x4f\xc3\x06\xfa\xfc\x88\x1f\x21\xd5\x84\x55\x09\xbc\x72\xbe\xfa\xd2\x6e\xc5\xb1\x98\x4f\xd5\xa2\x56\xe1\x4c\xc5\x83\x37\xf3\xda\xd1\x0a\xc3\x85\x64\x49\x54\xf0\x73\x85\xd9\x94\x93\x14\xb0\xc6\x2d\x8e\xfe\x81\x1c\x63\x4a\x5c\xbf\x10\x3d\x03\x6f\x9d\x04\x91\xd5\xb5\xeb\x3a\x8b\x04\x3e\xb4\x4e\x38\xba\x0a\x5a\x36\x6b\xdc\x09\x19\x4c\x4c\x16\x46\xc2\x5a\x10\x27\xaa\x29\xa5\x6a\xc5\x61\x9a\x4b\x33\xc9\xc9\x1d\x15\x8b\xe4\x68\xf4\x5e\x69\xa9\x7c\x4a\xe5\x4b\x34\x87\xa1\x30\xa0\x44\xa6\x3d\xce\x33\x2a\x01\xa3\x54\x96\x6b\x8a\x7d\x0f\x37\x2c\x46\x26\xa8\x60\x17\x1b\x4c\x73\x9d\xad\xb1\xef\xe9\xda\x0f\x42\x31\x55\xb1\x41\x78\xc1\x13\x41\x96\x9c\x80\x8f\x24\x96\xb2\xc0\x54\x14\x06\x45\xbe\x4b\xf1\xb3\xb4\xbd\xb7\xfe\x3f\xd2\x09\x09\x33\xc1\xcf\x1c\xa1\x9d\xcb\xc5\x02\xa9\x20\x6c\xab\x12\x89\xd6\x1b\x94\xa5\xcc\xa9\x10\x73\xec\xbb\x1c\xb9\x54\x08\x64\x87\x05\x1e\x96\xfd\xed\x8f\x71\x4b\xdc\x56\x43\xc3\x8c\x2f\x4d\xbc\xae\x69\x76\xfc\xc9\x3b\xd6\x95\xb4\xb0\x96\x2a\xa7\x03\x12\x6c\x31\x5c\x4a\xde\x0b\x3c\x07\x9e\x82\xfc\x4b\x07\x08\x43\x3f\x02\x27\xbc\xbc\xba\xe7\x57\xd8\x58\xf8\xaa\x99\x72\xb7\x08\x0a\x62\x59\x83\x2c\x83\xc5\x4a\x18\xfa\x81\xa9\x5b\x9f\x33\x1d\x97\x6d\x9a\xf1\x87\x43\x96\x92\xc8\xa7\xda\xb9\xd2\x5e\x53\x16\xdd\x69\xcc\x4e\xf5\x15\x81\x59\xe7\xbc\x8f\xf0\x8b\xde\x37\x5d\x89\x0d\x79\x2a\xb6\x25\xdf\x48\xb7\x01\x4c\xdf\xe3\xca\x6e\x18\x8a\x64\x82\xbf\x8a\xa6\x1d\xaf\xeb\xc9\xe7\xab\xe8\x8c\x7c\xa1\xcf\xa9\x18\xed\x5f\xa8\x6e\x93\xf8\xda\x31\xbc\xf1\xf2\xf4\x2c\x07\x2a\x32\xa6\x15\x9d\x46\x5e\xc0\x19\xbb\x54\x20\xa2\x4d\x47\x0a\x23\x87\x5f\xab\x45\x21\x33\xf2\x32\x69\x28\xdc\x48\x42\xa3\xad\x8d\x9d\x90\xbe\xe3\xda\x39\x3f\xb1\xe4\x23\xa1\xc3\x77\x90\x39\xca\xca\xc9\x6f\x59\x17\x4e\x56\x85\xaf\x1a\xfd\xe1\xa1\xaf\x90\x91\x78\xe6\xec\xbe\x62\xec\x3d\x68\x83\xb8\xee\x2d\xee\x0c\xa4\xf3\x27\xaa\xd2\xd6\xca\xb9\x3f\x05\xac\x90\x28\x88\xe7\xda\xaa\x67\x4e\x79\x49\x63\xe9\x0c\xe2\xde\x21\x0c\x92\x30\x9b\x7b\x45\xcf\x09\xca\x34\x75\x81\x67\x68\x92\x96\x85\xea\xa2\xc0\x63\x3a\x6c\xf1\x47\x7f\x7f\x90\x48\xa8\xfc\x82\x0e\x75\x54\xc1\xfe\x96\x24\xfe\xa9\xec\xd7\x50\x32\x0b\x78\x4c\xc3\xc2\x5a\x9d\x49\x26\x7d\x1c\xf1\x45\x04\x77\xa8\x7c\x16\xfe\x24\xcd\x7f\x78\x7e\xf5\xe6\xd5\x9b\x9f\xa6\x77\xbd\xe2\x82\xd3\xfa\x5e\x5b\x61\x54\x73\xb5\x66\xd0\xf5\xf6\x1a\xae\x68\x8c\x22\xf6\xc7\x78\xa7\x76\x03\x62\xe1\xd0\xf8\x3e\xc7\x53\x5f\x88\x50\xf5\x74\x33\x94\x2c\x05\x7e\xfc\xc6\xe0\xe4\xd2\xa3\xfb\x58\xaf\xd3\x6a\x80\x1c\xdd\x78\x9a\xc6\x9c\xd7\xc8\x57\x21\x06\x33\xda\xc5\xd4\x60\x55\x88\xac\x37\x8f\x79\xb7\xf2\x7c\x74\x91\x87\xa6\x0a\x3f\xe9\xf0\x61\x6a\xff\x2e\x71\x2b\x8b\x02\xac\xd6\x8a\x12\xec\x96\xc3\x0c\xaa\x60\x07\xd6\x87\x41\xee\x06\xe3\x76\x8f\x9c\x75\x28\x26\x62\x0f\x9a\x38\xa7\x1f\x64\x57\xba\x2e\x72\x82\x47\x51\x09\xde\x5b\x7f\x31\xe2\xbb\xb6\xfc\x4c\x82\x67\xf3\xd7\xf8\x8d\x68\x83\x88\xe7\x8f\x6c\x25\xe1\xf2\x1c\x28\x2a\xdf\xef\x53\xd1\x29\xf4\x09\xef\x09\x2c\x39\x11\x15\x9b\xc1\xcd\x1b\x63\xca\xeb\xe3\x86\xc6\x0e\x7c\x7c\x08\xdd\x7d\x01\x3d\x0e\xac\x90\xa5\x74\xa9\x5c\x2a\x6d\x7a\x21\x45\x93\x0e\x81\x91\x97\xf8\x44\x8b\xbe\x0e\x7b\x51\x54\x07\x78\x72\x53\xb9\x67\x2b\xa1\x96\x28\xe6\xbd\x0f\x2e\x7f\x6d\x38\x36\xcd\x2f\x1b\xe5\x2e\x76\xfe\xf2\xa5\xa1\x91\xc0\x2b\x62\x2f\xd5\x72\x8a\x2d\x30\x02\x9b\x16\x7a\x99\x5a\xf9\x47\x1f\x80\x42\x2f\xaf\xe5\x1f\x5c\x63\xf9\x05\x7b\x12\xb7\x26\x2a\x14\x3f\xa6\xa1\x78\x15\x5f\x84\x3f\xe1\x44\xe1\xbb\x27\x93\xa1\x94\x58\x6a\xb3\x1b\x42\xe3\x67\x9c\x0b\xe8\xbb\xef\xff\xce\x90\xfe\xf6\xdd\xf7\x93\x31\x51\x21\xa6\xeb\xbe\xe6\x55\x18\x3d\x0b\xcc\x13\xaf\x9f\xbf\x3e\xa1\x7f\xe3\x78\xf8\x1e\x22\xad\x8c\xae\xd0\x38\xd9\x1b\xbf\xa3\x07\xec\xf8\x2b\x7f\x7b\xe5\x8c\xc4\xe6\xfe\xca\x5f\x6a\xb4\xc4\xe2\x3d\xd7\x71\x9f\x18\x5d\x62\xae\xd9\xe0\xc8\x33\x4a\x07\xba\x76\x56\xe6\xbc\x11\xef\x8c\xd8\x48\x0b\xf3\x5a\x16\xf9\xf0\x25\x08\x8b\xe2\xdd\x81\x21\xb3\x9d\xe4\x0a\x1a\xeb\xdf\x73\x08\xea\xc0\xa1\x07\x6d\xf3\xd5\x0e\x25\x1a\xfe\xb7\x51\xdd\xb7\xb7\x49\x29\x55\x68\xf4\xd3\x0f\x22\x1b\x69\x1b\x32\xd4\xd8\x17\xf0\x87\xac\xcf\x4d\xc4\x56\x6c\x98\x45\x79\xc9\x41\x57\xf6\x48\xe7\xa6\xb7\xf1\x7a\x56\xb7\x95\xd1\x86\xbb\x1c\xae\x0e\x06\xcb\xdb\x7b\x6d\xfa\x3d\x17\x73\x50\xf7\xc6\xcc\xc8\x62\x81\x99\x03\xa1\xb4\x5b\x85\xb4\x74\x1c\x52\x4c\x37\x47\x6f\x2a\xde\xdd\x2b\x24\xbb\x09\x43\xa6\x95\x13\x9c\x79\x2a\x3d\xed\xba\x8d\xb9\x77\x6e\xba\x59\x29\x53\x40\x1c\xbd\x07\x0e\x11\xe7\xf0\xee\x62\x1b\xda\xc1\xfe\x52\xe5\x58\x39\x3c\x41\x43\x9d\x97\xea\xa9\xde\xa0\x31\x32\xcf\xb1\xaf\xa8\x23\x84\xdd\x87\xeb\xed\x4b\x85\x76\x69\xcc\x15\xba\x17\xd1\x53\x37\x2a\x95\x36\xad\xea\x79\x21\xfb\xfe\x24\xc7\xef\x0a\xcf\x8d\x4d\x4d\xff\x36\x5f\x58\xf0\x0b\xef\x25\xcc\x94\xb9\x7b\xdf\x32\x47\xd8\x48\x9f\xbb\xd3\x39\xa4\xd2\x91\xbc\x23\x3f\xb1\xc0\x1c\xe6\x3b\x10\x6a\xa7\xd5\xc0\x5b\x77\xc6\x1a\x6b\x70\x9c\xa7\xf8\x99\x9f\x1e\x0e\x87\xf1\xfb\x25\x38\x77\x17\xb9\xc7\xa9\x72\xfa\xff\xb1\xa7\x73\xaf\xbd\x48\x07\x81\x54\xb9\xc5\xf9\xcc\x07\xf7\xf0\x53\x58\x30\x50\x85\x79\xa4\x9d\x36\x32\xc1\x1d\x2c\xd8\xfb\x9a\x8b\x64\x61\xdd\x8e\xec\xa4\x5e\xb1\x7f\x3f\xd7\x2e\x4a\xe0\x07\xad\x36\xe4\xee\x43\x49\xd0\xb2\x70\x7a\x8f\xfc\xb8\xc9\x1e\x4a\x35\xd2\x16\x1f\x6a\x44\xb4\xb2\xc5\x81\x13\xa5\x6b\xba\xd3\x87\xf2\x75\x19\x35\x12\x8e\xf6\xb2\x5f\xbc\xfc\xc7\xfb\x9f\x26\x97\x70\x3c\xfb\xb4\xfa\x2d\x9f\x2f\x53\x8b\xc2\x64\x2b\xd2\x5e\x3c\xfc\x4d\x2f\xb5\x57\x85\x61\x45\x73\xf8\xf7\xbb\xaf\xd1\x4f\x52\xec\x68\x83\xe4\x48\x1a\x48\x50\x0e\x3d\xe4\xd7\xf6\x8e\x67\x7a\x46\x82\xd6\x84\x0e\xff\x9a\x67\xe0\x4f\x34\x5f\x1c\xb9\x52\x0e\x1a\x79\x0a\x3f\x32\x82\xf6\x2f\x02\xb9\xb3\x40\xc4\x4e\x05\x30\xfc\xd7\x35\xa7\x63\xe8\x3e\x18\x8a\x0f\xdc\x02\xa4\x07\x37\x0f\xfe\x1b\x00\x00\xff\xff\x43\x2e\x8d\xa6\xd7\x3d\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 15831, mode: os.FileMode(420), modTime: time.Unix(1523315322, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520374115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json":   wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json":   wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json":   wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json":   wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json":   wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json":   wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json":   wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json":   wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json":   &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json":   &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json":   &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json":   &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json":   &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json":   &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json":   &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json":   &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
